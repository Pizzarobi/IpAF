
Erster_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bbb4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000020ec  0800bd44  0800bd44  0001bd44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de30  0800de30  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800de30  0800de30  0001de30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800de38  0800de38  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de38  0800de38  0001de38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800de3c  0800de3c  0001de3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800de40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          000051e0  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005274  20005274  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002534c  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005383  00000000  00000000  00045410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ef8  00000000  00000000  0004a798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001ce8  00000000  00000000  0004c690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027718  00000000  00000000  0004e378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025f52  00000000  00000000  00075a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df4df  00000000  00000000  0009b9e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017aec1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000085a0  00000000  00000000  0017af14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bd2c 	.word	0x0800bd2c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800bd2c 	.word	0x0800bd2c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <LCD_SetCursor>:
#include "fonts.h"
#include "display.h"
#include "cmsis_os.h"
#include "usb_host.h"

void LCD_SetCursor(uint16_t x, uint16_t y){
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	460a      	mov	r2, r1
 80004de:	80fb      	strh	r3, [r7, #6]
 80004e0:	4613      	mov	r3, r2
 80004e2:	80bb      	strh	r3, [r7, #4]
	LCD_WriteReg(0x004E, x); // Set x-pos
 80004e4:	88fb      	ldrh	r3, [r7, #6]
 80004e6:	4619      	mov	r1, r3
 80004e8:	204e      	movs	r0, #78	; 0x4e
 80004ea:	f000 f96f 	bl	80007cc <LCD_WriteReg>
	LCD_WriteReg(0x004F, y); // Set y-pos
 80004ee:	88bb      	ldrh	r3, [r7, #4]
 80004f0:	4619      	mov	r1, r3
 80004f2:	204f      	movs	r0, #79	; 0x4f
 80004f4:	f000 f96a 	bl	80007cc <LCD_WriteReg>
}
 80004f8:	bf00      	nop
 80004fa:	3708      	adds	r7, #8
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}

08000500 <LCD_DrawPixel>:

void LCD_DrawPixel(uint16_t color){
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	80fb      	strh	r3, [r7, #6]
	LCD_WriteReg(0x0022,color);
 800050a:	88fb      	ldrh	r3, [r7, #6]
 800050c:	4619      	mov	r1, r3
 800050e:	2022      	movs	r0, #34	; 0x22
 8000510:	f000 f95c 	bl	80007cc <LCD_WriteReg>
}
 8000514:	bf00      	nop
 8000516:	3708      	adds	r7, #8
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}

0800051c <LCD_WriteLetter>:

void LCD_WriteLetter(uint16_t x, uint16_t y, uint16_t colorfg, uint16_t colorbg, char letter){
 800051c:	b590      	push	{r4, r7, lr}
 800051e:	b087      	sub	sp, #28
 8000520:	af00      	add	r7, sp, #0
 8000522:	4604      	mov	r4, r0
 8000524:	4608      	mov	r0, r1
 8000526:	4611      	mov	r1, r2
 8000528:	461a      	mov	r2, r3
 800052a:	4623      	mov	r3, r4
 800052c:	80fb      	strh	r3, [r7, #6]
 800052e:	4603      	mov	r3, r0
 8000530:	80bb      	strh	r3, [r7, #4]
 8000532:	460b      	mov	r3, r1
 8000534:	807b      	strh	r3, [r7, #2]
 8000536:	4613      	mov	r3, r2
 8000538:	803b      	strh	r3, [r7, #0]
	int offset = letter*16*2;
 800053a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800053e:	015b      	lsls	r3, r3, #5
 8000540:	613b      	str	r3, [r7, #16]
	int i = 0;
 8000542:	2300      	movs	r3, #0
 8000544:	617b      	str	r3, [r7, #20]
	uint16_t line = 0;
 8000546:	2300      	movs	r3, #0
 8000548:	81fb      	strh	r3, [r7, #14]
	LCD_SetCursor(x,y);
 800054a:	88ba      	ldrh	r2, [r7, #4]
 800054c:	88fb      	ldrh	r3, [r7, #6]
 800054e:	4611      	mov	r1, r2
 8000550:	4618      	mov	r0, r3
 8000552:	f7ff ffbf 	bl	80004d4 <LCD_SetCursor>
	//printf("Ascii Code for %c: %d , %d\n",letter,letter,offset);
	for(i=offset; i<offset+16*2; i++){
 8000556:	693b      	ldr	r3, [r7, #16]
 8000558:	617b      	str	r3, [r7, #20]
 800055a:	e024      	b.n	80005a6 <LCD_WriteLetter+0x8a>
		LCD_SetCursor(x,y);
 800055c:	88ba      	ldrh	r2, [r7, #4]
 800055e:	88fb      	ldrh	r3, [r7, #6]
 8000560:	4611      	mov	r1, r2
 8000562:	4618      	mov	r0, r3
 8000564:	f7ff ffb6 	bl	80004d4 <LCD_SetCursor>
		line = console_font_12x16[i] << 4 | console_font_12x16[i+1] >> 4;
 8000568:	4a14      	ldr	r2, [pc, #80]	; (80005bc <LCD_WriteLetter+0xa0>)
 800056a:	697b      	ldr	r3, [r7, #20]
 800056c:	4413      	add	r3, r2
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	011b      	lsls	r3, r3, #4
 8000572:	b21a      	sxth	r2, r3
 8000574:	697b      	ldr	r3, [r7, #20]
 8000576:	3301      	adds	r3, #1
 8000578:	4910      	ldr	r1, [pc, #64]	; (80005bc <LCD_WriteLetter+0xa0>)
 800057a:	5ccb      	ldrb	r3, [r1, r3]
 800057c:	091b      	lsrs	r3, r3, #4
 800057e:	b2db      	uxtb	r3, r3
 8000580:	b21b      	sxth	r3, r3
 8000582:	4313      	orrs	r3, r2
 8000584:	b21b      	sxth	r3, r3
 8000586:	81fb      	strh	r3, [r7, #14]
		Bits2Pixel(line, colorfg, colorbg);
 8000588:	883a      	ldrh	r2, [r7, #0]
 800058a:	8879      	ldrh	r1, [r7, #2]
 800058c:	89fb      	ldrh	r3, [r7, #14]
 800058e:	4618      	mov	r0, r3
 8000590:	f000 f845 	bl	800061e <Bits2Pixel>
		y++;
 8000594:	88bb      	ldrh	r3, [r7, #4]
 8000596:	3301      	adds	r3, #1
 8000598:	80bb      	strh	r3, [r7, #4]
		i++;
 800059a:	697b      	ldr	r3, [r7, #20]
 800059c:	3301      	adds	r3, #1
 800059e:	617b      	str	r3, [r7, #20]
	for(i=offset; i<offset+16*2; i++){
 80005a0:	697b      	ldr	r3, [r7, #20]
 80005a2:	3301      	adds	r3, #1
 80005a4:	617b      	str	r3, [r7, #20]
 80005a6:	693b      	ldr	r3, [r7, #16]
 80005a8:	331f      	adds	r3, #31
 80005aa:	697a      	ldr	r2, [r7, #20]
 80005ac:	429a      	cmp	r2, r3
 80005ae:	ddd5      	ble.n	800055c <LCD_WriteLetter+0x40>
	}
}
 80005b0:	bf00      	nop
 80005b2:	bf00      	nop
 80005b4:	371c      	adds	r7, #28
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd90      	pop	{r4, r7, pc}
 80005ba:	bf00      	nop
 80005bc:	0800bd9c 	.word	0x0800bd9c

080005c0 <LCD_WriteString>:

void LCD_WriteString(uint16_t x, uint16_t y, uint16_t colorfg, uint16_t colorbg, char* letStr){
 80005c0:	b590      	push	{r4, r7, lr}
 80005c2:	b087      	sub	sp, #28
 80005c4:	af02      	add	r7, sp, #8
 80005c6:	4604      	mov	r4, r0
 80005c8:	4608      	mov	r0, r1
 80005ca:	4611      	mov	r1, r2
 80005cc:	461a      	mov	r2, r3
 80005ce:	4623      	mov	r3, r4
 80005d0:	80fb      	strh	r3, [r7, #6]
 80005d2:	4603      	mov	r3, r0
 80005d4:	80bb      	strh	r3, [r7, #4]
 80005d6:	460b      	mov	r3, r1
 80005d8:	807b      	strh	r3, [r7, #2]
 80005da:	4613      	mov	r3, r2
 80005dc:	803b      	strh	r3, [r7, #0]
	int n = 0;
 80005de:	2300      	movs	r3, #0
 80005e0:	60fb      	str	r3, [r7, #12]
	while(letStr[n] != 0){
 80005e2:	e011      	b.n	8000608 <LCD_WriteString+0x48>
		LCD_WriteLetter(x,y,colorfg,colorbg,letStr[n]);
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	6a3a      	ldr	r2, [r7, #32]
 80005e8:	4413      	add	r3, r2
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	883c      	ldrh	r4, [r7, #0]
 80005ee:	887a      	ldrh	r2, [r7, #2]
 80005f0:	88b9      	ldrh	r1, [r7, #4]
 80005f2:	88f8      	ldrh	r0, [r7, #6]
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	4623      	mov	r3, r4
 80005f8:	f7ff ff90 	bl	800051c <LCD_WriteLetter>
		x+=12;
 80005fc:	88fb      	ldrh	r3, [r7, #6]
 80005fe:	330c      	adds	r3, #12
 8000600:	80fb      	strh	r3, [r7, #6]
		n++;
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	3301      	adds	r3, #1
 8000606:	60fb      	str	r3, [r7, #12]
	while(letStr[n] != 0){
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	6a3a      	ldr	r2, [r7, #32]
 800060c:	4413      	add	r3, r2
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d1e7      	bne.n	80005e4 <LCD_WriteString+0x24>
	}
}
 8000614:	bf00      	nop
 8000616:	bf00      	nop
 8000618:	3714      	adds	r7, #20
 800061a:	46bd      	mov	sp, r7
 800061c:	bd90      	pop	{r4, r7, pc}

0800061e <Bits2Pixel>:

void Bits2Pixel(uint16_t line, uint16_t colorfg, uint16_t colorbg){
 800061e:	b580      	push	{r7, lr}
 8000620:	b090      	sub	sp, #64	; 0x40
 8000622:	af00      	add	r7, sp, #0
 8000624:	4603      	mov	r3, r0
 8000626:	80fb      	strh	r3, [r7, #6]
 8000628:	460b      	mov	r3, r1
 800062a:	80bb      	strh	r3, [r7, #4]
 800062c:	4613      	mov	r3, r2
 800062e:	807b      	strh	r3, [r7, #2]
	int str[13];
	int n = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	63fb      	str	r3, [r7, #60]	; 0x3c
	while(n<12){
 8000634:	e009      	b.n	800064a <Bits2Pixel+0x2c>
		str[n] = 0;
 8000636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000638:	009b      	lsls	r3, r3, #2
 800063a:	3340      	adds	r3, #64	; 0x40
 800063c:	443b      	add	r3, r7
 800063e:	2200      	movs	r2, #0
 8000640:	f843 2c38 	str.w	r2, [r3, #-56]
		n++;
 8000644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000646:	3301      	adds	r3, #1
 8000648:	63fb      	str	r3, [r7, #60]	; 0x3c
	while(n<12){
 800064a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800064c:	2b0b      	cmp	r3, #11
 800064e:	ddf2      	ble.n	8000636 <Bits2Pixel+0x18>
	}
	n = 11;
 8000650:	230b      	movs	r3, #11
 8000652:	63fb      	str	r3, [r7, #60]	; 0x3c
	while(line){
 8000654:	e019      	b.n	800068a <Bits2Pixel+0x6c>
		if(line&1)
 8000656:	88fb      	ldrh	r3, [r7, #6]
 8000658:	f003 0301 	and.w	r3, r3, #1
 800065c:	2b00      	cmp	r3, #0
 800065e:	d007      	beq.n	8000670 <Bits2Pixel+0x52>
			str[n] = 1;
 8000660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000662:	009b      	lsls	r3, r3, #2
 8000664:	3340      	adds	r3, #64	; 0x40
 8000666:	443b      	add	r3, r7
 8000668:	2201      	movs	r2, #1
 800066a:	f843 2c38 	str.w	r2, [r3, #-56]
 800066e:	e006      	b.n	800067e <Bits2Pixel+0x60>
		else
			str[n] = 0;
 8000670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	3340      	adds	r3, #64	; 0x40
 8000676:	443b      	add	r3, r7
 8000678:	2200      	movs	r2, #0
 800067a:	f843 2c38 	str.w	r2, [r3, #-56]
		line >>=1;
 800067e:	88fb      	ldrh	r3, [r7, #6]
 8000680:	085b      	lsrs	r3, r3, #1
 8000682:	80fb      	strh	r3, [r7, #6]
		n--;
 8000684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000686:	3b01      	subs	r3, #1
 8000688:	63fb      	str	r3, [r7, #60]	; 0x3c
	while(line){
 800068a:	88fb      	ldrh	r3, [r7, #6]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d1e2      	bne.n	8000656 <Bits2Pixel+0x38>
	}
	str[12]=0;
 8000690:	2300      	movs	r3, #0
 8000692:	63bb      	str	r3, [r7, #56]	; 0x38

	n = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	63fb      	str	r3, [r7, #60]	; 0x3c
	while(n<12){
 8000698:	e013      	b.n	80006c2 <Bits2Pixel+0xa4>
		if(str[n]==0)
 800069a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800069c:	009b      	lsls	r3, r3, #2
 800069e:	3340      	adds	r3, #64	; 0x40
 80006a0:	443b      	add	r3, r7
 80006a2:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d104      	bne.n	80006b4 <Bits2Pixel+0x96>
			LCD_DrawPixel(colorfg);
 80006aa:	88bb      	ldrh	r3, [r7, #4]
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff ff27 	bl	8000500 <LCD_DrawPixel>
 80006b2:	e003      	b.n	80006bc <Bits2Pixel+0x9e>
		else
			LCD_DrawPixel(colorbg);
 80006b4:	887b      	ldrh	r3, [r7, #2]
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff ff22 	bl	8000500 <LCD_DrawPixel>
		n++;
 80006bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006be:	3301      	adds	r3, #1
 80006c0:	63fb      	str	r3, [r7, #60]	; 0x3c
	while(n<12){
 80006c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006c4:	2b0b      	cmp	r3, #11
 80006c6:	dde8      	ble.n	800069a <Bits2Pixel+0x7c>
//		if(line&1){
//			LCD_DrawPixel(0xFFFF);
//		}else {
//			LCD_DrawPixel(0xFFFF);
//		}
}
 80006c8:	bf00      	nop
 80006ca:	bf00      	nop
 80006cc:	3740      	adds	r7, #64	; 0x40
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}

080006d2 <LCD_ClearDisplay>:

void LCD_ClearDisplay(uint16_t color){
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b084      	sub	sp, #16
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	4603      	mov	r3, r0
 80006da:	80fb      	strh	r3, [r7, #6]
	int i = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	60fb      	str	r3, [r7, #12]
	LCD_SetCursor(0,0);
 80006e0:	2100      	movs	r1, #0
 80006e2:	2000      	movs	r0, #0
 80006e4:	f7ff fef6 	bl	80004d4 <LCD_SetCursor>

	while(i<76800){
 80006e8:	e006      	b.n	80006f8 <LCD_ClearDisplay+0x26>
		LCD_DrawPixel(color);
 80006ea:	88fb      	ldrh	r3, [r7, #6]
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff ff07 	bl	8000500 <LCD_DrawPixel>
		i++;
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	3301      	adds	r3, #1
 80006f6:	60fb      	str	r3, [r7, #12]
	while(i<76800){
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 80006fe:	dbf4      	blt.n	80006ea <LCD_ClearDisplay+0x18>
	}
}
 8000700:	bf00      	nop
 8000702:	bf00      	nop
 8000704:	3710      	adds	r7, #16
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
	...

0800070c <LCD_Output16BitWord>:

void  LCD_Output16BitWord(uint16_t data)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	80fb      	strh	r3, [r7, #6]
	GPIOD->ODR |= (data << 14); // 1er setzen
 8000716:	4b2b      	ldr	r3, [pc, #172]	; (80007c4 <LCD_Output16BitWord+0xb8>)
 8000718:	695b      	ldr	r3, [r3, #20]
 800071a:	88fa      	ldrh	r2, [r7, #6]
 800071c:	0392      	lsls	r2, r2, #14
 800071e:	4611      	mov	r1, r2
 8000720:	4a28      	ldr	r2, [pc, #160]	; (80007c4 <LCD_Output16BitWord+0xb8>)
 8000722:	430b      	orrs	r3, r1
 8000724:	6153      	str	r3, [r2, #20]
    GPIOD->ODR &= (data << 14) | 0x3FFF; //0er setzen
 8000726:	4b27      	ldr	r3, [pc, #156]	; (80007c4 <LCD_Output16BitWord+0xb8>)
 8000728:	695a      	ldr	r2, [r3, #20]
 800072a:	88fb      	ldrh	r3, [r7, #6]
 800072c:	039b      	lsls	r3, r3, #14
 800072e:	ea6f 3393 	mvn.w	r3, r3, lsr #14
 8000732:	ea6f 3383 	mvn.w	r3, r3, lsl #14
 8000736:	4923      	ldr	r1, [pc, #140]	; (80007c4 <LCD_Output16BitWord+0xb8>)
 8000738:	4013      	ands	r3, r2
 800073a:	614b      	str	r3, [r1, #20]
    GPIOD->ODR |= ((data >> 5) & 0x0700);
 800073c:	4b21      	ldr	r3, [pc, #132]	; (80007c4 <LCD_Output16BitWord+0xb8>)
 800073e:	695a      	ldr	r2, [r3, #20]
 8000740:	88fb      	ldrh	r3, [r7, #6]
 8000742:	095b      	lsrs	r3, r3, #5
 8000744:	b29b      	uxth	r3, r3
 8000746:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800074a:	491e      	ldr	r1, [pc, #120]	; (80007c4 <LCD_Output16BitWord+0xb8>)
 800074c:	4313      	orrs	r3, r2
 800074e:	614b      	str	r3, [r1, #20]
    GPIOD->ODR &= ((data >> 5) & 0x0700) | ~(0x0700);
 8000750:	4b1c      	ldr	r3, [pc, #112]	; (80007c4 <LCD_Output16BitWord+0xb8>)
 8000752:	695b      	ldr	r3, [r3, #20]
 8000754:	88fa      	ldrh	r2, [r7, #6]
 8000756:	0952      	lsrs	r2, r2, #5
 8000758:	b292      	uxth	r2, r2
 800075a:	f462 62e0 	orn	r2, r2, #1792	; 0x700
 800075e:	4611      	mov	r1, r2
 8000760:	4a18      	ldr	r2, [pc, #96]	; (80007c4 <LCD_Output16BitWord+0xb8>)
 8000762:	400b      	ands	r3, r1
 8000764:	6153      	str	r3, [r2, #20]
    GPIOD->ODR |= (data >> 2) & 0x3;
 8000766:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <LCD_Output16BitWord+0xb8>)
 8000768:	695a      	ldr	r2, [r3, #20]
 800076a:	88fb      	ldrh	r3, [r7, #6]
 800076c:	089b      	lsrs	r3, r3, #2
 800076e:	b29b      	uxth	r3, r3
 8000770:	f003 0303 	and.w	r3, r3, #3
 8000774:	4913      	ldr	r1, [pc, #76]	; (80007c4 <LCD_Output16BitWord+0xb8>)
 8000776:	4313      	orrs	r3, r2
 8000778:	614b      	str	r3, [r1, #20]
    GPIOD->ODR &= ((data >> 2) & 0x3) | ~(0x3);
 800077a:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <LCD_Output16BitWord+0xb8>)
 800077c:	695b      	ldr	r3, [r3, #20]
 800077e:	88fa      	ldrh	r2, [r7, #6]
 8000780:	0892      	lsrs	r2, r2, #2
 8000782:	b292      	uxth	r2, r2
 8000784:	f062 0203 	orn	r2, r2, #3
 8000788:	4611      	mov	r1, r2
 800078a:	4a0e      	ldr	r2, [pc, #56]	; (80007c4 <LCD_Output16BitWord+0xb8>)
 800078c:	400b      	ands	r3, r1
 800078e:	6153      	str	r3, [r2, #20]

    GPIOE->ODR |= (data << 3) & ~(0x007F);
 8000790:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <LCD_Output16BitWord+0xbc>)
 8000792:	695a      	ldr	r2, [r3, #20]
 8000794:	88fb      	ldrh	r3, [r7, #6]
 8000796:	00db      	lsls	r3, r3, #3
 8000798:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800079c:	490a      	ldr	r1, [pc, #40]	; (80007c8 <LCD_Output16BitWord+0xbc>)
 800079e:	4313      	orrs	r3, r2
 80007a0:	614b      	str	r3, [r1, #20]
    GPIOE->ODR &= ((data << 3) & ~(0x007F)) | 0x007F;
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <LCD_Output16BitWord+0xbc>)
 80007a4:	695b      	ldr	r3, [r3, #20]
 80007a6:	88fa      	ldrh	r2, [r7, #6]
 80007a8:	00d2      	lsls	r2, r2, #3
 80007aa:	f042 027f 	orr.w	r2, r2, #127	; 0x7f
 80007ae:	4611      	mov	r1, r2
 80007b0:	4a05      	ldr	r2, [pc, #20]	; (80007c8 <LCD_Output16BitWord+0xbc>)
 80007b2:	400b      	ands	r3, r1
 80007b4:	6153      	str	r3, [r2, #20]
}
 80007b6:	bf00      	nop
 80007b8:	370c      	adds	r7, #12
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	40020c00 	.word	0x40020c00
 80007c8:	40021000 	.word	0x40021000

080007cc <LCD_WriteReg>:

void LCD_WriteReg(uint16_t command, uint16_t data){
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	460a      	mov	r2, r1
 80007d6:	80fb      	strh	r3, [r7, #6]
 80007d8:	4613      	mov	r3, r2
 80007da:	80bb      	strh	r3, [r7, #4]
	LCD_WriteCommand(command);
 80007dc:	88fb      	ldrh	r3, [r7, #6]
 80007de:	4618      	mov	r0, r3
 80007e0:	f000 f838 	bl	8000854 <LCD_WriteCommand>
	LCD_WriteData(data);
 80007e4:	88bb      	ldrh	r3, [r7, #4]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 f804 	bl	80007f4 <LCD_WriteData>
}
 80007ec:	bf00      	nop
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <LCD_WriteData>:

void LCD_WriteData(uint16_t data){
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	80fb      	strh	r3, [r7, #6]
	GPIOD->ODR &= ~(0x80); // set PD7 ~CS to 0
 80007fe:	4b13      	ldr	r3, [pc, #76]	; (800084c <LCD_WriteData+0x58>)
 8000800:	695b      	ldr	r3, [r3, #20]
 8000802:	4a12      	ldr	r2, [pc, #72]	; (800084c <LCD_WriteData+0x58>)
 8000804:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000808:	6153      	str	r3, [r2, #20]
	GPIOE->ODR |= 0x8; // set PE3 (D/~C) to 1 (Data)
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <LCD_WriteData+0x5c>)
 800080c:	695b      	ldr	r3, [r3, #20]
 800080e:	4a10      	ldr	r2, [pc, #64]	; (8000850 <LCD_WriteData+0x5c>)
 8000810:	f043 0308 	orr.w	r3, r3, #8
 8000814:	6153      	str	r3, [r2, #20]
	GPIOD->ODR &= ~(0x20); // Pushimpuls WR = 0
 8000816:	4b0d      	ldr	r3, [pc, #52]	; (800084c <LCD_WriteData+0x58>)
 8000818:	695b      	ldr	r3, [r3, #20]
 800081a:	4a0c      	ldr	r2, [pc, #48]	; (800084c <LCD_WriteData+0x58>)
 800081c:	f023 0320 	bic.w	r3, r3, #32
 8000820:	6153      	str	r3, [r2, #20]
	LCD_Output16BitWord(data);
 8000822:	88fb      	ldrh	r3, [r7, #6]
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff ff71 	bl	800070c <LCD_Output16BitWord>
	GPIOD->ODR |= 0x20; // WR = 1
 800082a:	4b08      	ldr	r3, [pc, #32]	; (800084c <LCD_WriteData+0x58>)
 800082c:	695b      	ldr	r3, [r3, #20]
 800082e:	4a07      	ldr	r2, [pc, #28]	; (800084c <LCD_WriteData+0x58>)
 8000830:	f043 0320 	orr.w	r3, r3, #32
 8000834:	6153      	str	r3, [r2, #20]
	GPIOD->ODR |= 0x80; // Chipselect = 1
 8000836:	4b05      	ldr	r3, [pc, #20]	; (800084c <LCD_WriteData+0x58>)
 8000838:	695b      	ldr	r3, [r3, #20]
 800083a:	4a04      	ldr	r2, [pc, #16]	; (800084c <LCD_WriteData+0x58>)
 800083c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000840:	6153      	str	r3, [r2, #20]
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40020c00 	.word	0x40020c00
 8000850:	40021000 	.word	0x40021000

08000854 <LCD_WriteCommand>:

void LCD_WriteCommand(uint16_t data){
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	80fb      	strh	r3, [r7, #6]
	GPIOD->ODR &= ~(0x80); // set PD7 ~CS to 0
 800085e:	4b13      	ldr	r3, [pc, #76]	; (80008ac <LCD_WriteCommand+0x58>)
 8000860:	695b      	ldr	r3, [r3, #20]
 8000862:	4a12      	ldr	r2, [pc, #72]	; (80008ac <LCD_WriteCommand+0x58>)
 8000864:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000868:	6153      	str	r3, [r2, #20]
	GPIOE->ODR &= ~(0x8); // set PE3 (D/~C) to 0 (Command)
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <LCD_WriteCommand+0x5c>)
 800086c:	695b      	ldr	r3, [r3, #20]
 800086e:	4a10      	ldr	r2, [pc, #64]	; (80008b0 <LCD_WriteCommand+0x5c>)
 8000870:	f023 0308 	bic.w	r3, r3, #8
 8000874:	6153      	str	r3, [r2, #20]
	GPIOD->ODR &= ~(0x20); // set WR PD5 = 0
 8000876:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <LCD_WriteCommand+0x58>)
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	4a0c      	ldr	r2, [pc, #48]	; (80008ac <LCD_WriteCommand+0x58>)
 800087c:	f023 0320 	bic.w	r3, r3, #32
 8000880:	6153      	str	r3, [r2, #20]
	LCD_Output16BitWord(data);
 8000882:	88fb      	ldrh	r3, [r7, #6]
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff ff41 	bl	800070c <LCD_Output16BitWord>
	GPIOD->ODR |= 0x20; // set WR PD5 = 1
 800088a:	4b08      	ldr	r3, [pc, #32]	; (80008ac <LCD_WriteCommand+0x58>)
 800088c:	695b      	ldr	r3, [r3, #20]
 800088e:	4a07      	ldr	r2, [pc, #28]	; (80008ac <LCD_WriteCommand+0x58>)
 8000890:	f043 0320 	orr.w	r3, r3, #32
 8000894:	6153      	str	r3, [r2, #20]
	GPIOD->ODR |= 0x80; // set ~CS PD7 = 1
 8000896:	4b05      	ldr	r3, [pc, #20]	; (80008ac <LCD_WriteCommand+0x58>)
 8000898:	695b      	ldr	r3, [r3, #20]
 800089a:	4a04      	ldr	r2, [pc, #16]	; (80008ac <LCD_WriteCommand+0x58>)
 800089c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a0:	6153      	str	r3, [r2, #20]
}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40020c00 	.word	0x40020c00
 80008b0:	40021000 	.word	0x40021000

080008b4 <LCD_Init>:

void LCD_Init (void){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
	// Display-Reset
	GPIOD->ODR &= ~(0x8);
 80008b8:	4b35      	ldr	r3, [pc, #212]	; (8000990 <LCD_Init+0xdc>)
 80008ba:	695b      	ldr	r3, [r3, #20]
 80008bc:	4a34      	ldr	r2, [pc, #208]	; (8000990 <LCD_Init+0xdc>)
 80008be:	f023 0308 	bic.w	r3, r3, #8
 80008c2:	6153      	str	r3, [r2, #20]
	osDelay(pdMS_TO_TICKS(1));
 80008c4:	2001      	movs	r0, #1
 80008c6:	f007 fe07 	bl	80084d8 <osDelay>
	GPIOD->ODR |= 0x8;
 80008ca:	4b31      	ldr	r3, [pc, #196]	; (8000990 <LCD_Init+0xdc>)
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	4a30      	ldr	r2, [pc, #192]	; (8000990 <LCD_Init+0xdc>)
 80008d0:	f043 0308 	orr.w	r3, r3, #8
 80008d4:	6153      	str	r3, [r2, #20]
	osDelay(pdMS_TO_TICKS(1));
 80008d6:	2001      	movs	r0, #1
 80008d8:	f007 fdfe 	bl	80084d8 <osDelay>


	LCD_WriteReg(0x0010, 0x0001); /* Enter sleep mode */
 80008dc:	2101      	movs	r1, #1
 80008de:	2010      	movs	r0, #16
 80008e0:	f7ff ff74 	bl	80007cc <LCD_WriteReg>
	LCD_WriteReg(0x001E, 0x00B2); /* Set initial power parameters. */
 80008e4:	21b2      	movs	r1, #178	; 0xb2
 80008e6:	201e      	movs	r0, #30
 80008e8:	f7ff ff70 	bl	80007cc <LCD_WriteReg>
	LCD_WriteReg(0x0028, 0x0006); /* Set initial power parameters. */
 80008ec:	2106      	movs	r1, #6
 80008ee:	2028      	movs	r0, #40	; 0x28
 80008f0:	f7ff ff6c 	bl	80007cc <LCD_WriteReg>
	LCD_WriteReg(0x0000, 0x0001); /* Start the oscillator.*/
 80008f4:	2101      	movs	r1, #1
 80008f6:	2000      	movs	r0, #0
 80008f8:	f7ff ff68 	bl	80007cc <LCD_WriteReg>
	LCD_WriteReg(0x0001, 0x72EF); /* Set pixel format and basic display orientation */
 80008fc:	f247 21ef 	movw	r1, #29423	; 0x72ef
 8000900:	2001      	movs	r0, #1
 8000902:	f7ff ff63 	bl	80007cc <LCD_WriteReg>
	LCD_WriteReg(0x0002, 0x0600);
 8000906:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800090a:	2002      	movs	r0, #2
 800090c:	f7ff ff5e 	bl	80007cc <LCD_WriteReg>
	LCD_WriteReg(0x0010, 0x0000); /* Exit sleep mode.*/
 8000910:	2100      	movs	r1, #0
 8000912:	2010      	movs	r0, #16
 8000914:	f7ff ff5a 	bl	80007cc <LCD_WriteReg>
	//30ms warten weniger geht meist auch
	osDelay(pdMS_TO_TICKS(30));;
 8000918:	201e      	movs	r0, #30
 800091a:	f007 fddd 	bl	80084d8 <osDelay>

	LCD_WriteReg(0x0011, 0x6870); /* Configure pixel color format and MCU interface parameters.*/
 800091e:	f646 0170 	movw	r1, #26736	; 0x6870
 8000922:	2011      	movs	r0, #17
 8000924:	f7ff ff52 	bl	80007cc <LCD_WriteReg>
	LCD_WriteReg(0x0012, 0x0999); /* Set analog parameters */
 8000928:	f640 1199 	movw	r1, #2457	; 0x999
 800092c:	2012      	movs	r0, #18
 800092e:	f7ff ff4d 	bl	80007cc <LCD_WriteReg>
	LCD_WriteReg(0x0026, 0x3800);
 8000932:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8000936:	2026      	movs	r0, #38	; 0x26
 8000938:	f7ff ff48 	bl	80007cc <LCD_WriteReg>
	LCD_WriteReg(0x0007, 0x0033); /* Enable the display */
 800093c:	2133      	movs	r1, #51	; 0x33
 800093e:	2007      	movs	r0, #7
 8000940:	f7ff ff44 	bl	80007cc <LCD_WriteReg>
	LCD_WriteReg(0x000C, 0x0005); /* Set VCIX2 voltage to 6.1V.*/
 8000944:	2105      	movs	r1, #5
 8000946:	200c      	movs	r0, #12
 8000948:	f7ff ff40 	bl	80007cc <LCD_WriteReg>
	LCD_WriteReg(0x000D, 0x000A); /* Configure Vlcd63 and VCOMl */
 800094c:	210a      	movs	r1, #10
 800094e:	200d      	movs	r0, #13
 8000950:	f7ff ff3c 	bl	80007cc <LCD_WriteReg>
	LCD_WriteReg(0x000E, 0x2E00);
 8000954:	f44f 5138 	mov.w	r1, #11776	; 0x2e00
 8000958:	200e      	movs	r0, #14
 800095a:	f7ff ff37 	bl	80007cc <LCD_WriteReg>
	LCD_WriteReg(0x0044, (240-1) << 8); /* Set the display size and ensure that the GRAM window
 800095e:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 8000962:	2044      	movs	r0, #68	; 0x44
 8000964:	f7ff ff32 	bl	80007cc <LCD_WriteReg>
	is set to allow access to the full display buffer.*/
	LCD_WriteReg(0x0045, 0x0000);
 8000968:	2100      	movs	r1, #0
 800096a:	2045      	movs	r0, #69	; 0x45
 800096c:	f7ff ff2e 	bl	80007cc <LCD_WriteReg>
	LCD_WriteReg(0x0046, 320-1);
 8000970:	f240 113f 	movw	r1, #319	; 0x13f
 8000974:	2046      	movs	r0, #70	; 0x46
 8000976:	f7ff ff29 	bl	80007cc <LCD_WriteReg>
	LCD_WriteReg(0x004E, 0x0000); /*Set cursor to 0,0 */
 800097a:	2100      	movs	r1, #0
 800097c:	204e      	movs	r0, #78	; 0x4e
 800097e:	f7ff ff25 	bl	80007cc <LCD_WriteReg>
	LCD_WriteReg(0x004F, 0x0000);
 8000982:	2100      	movs	r1, #0
 8000984:	204f      	movs	r0, #79	; 0x4f
 8000986:	f7ff ff21 	bl	80007cc <LCD_WriteReg>


	//GPIOD->ODR |= 0x2000; // PD13 = 1 Backlight anschalten
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40020c00 	.word	0x40020c00

08000994 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800099a:	f000 fd2b 	bl	80013f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800099e:	f000 f8a5 	bl	8000aec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a2:	f000 f9d7 	bl	8000d54 <MX_GPIO_Init>
  MX_I2C1_Init();
 80009a6:	f000 f90b 	bl	8000bc0 <MX_I2C1_Init>
  MX_I2S3_Init();
 80009aa:	f000 f937 	bl	8000c1c <MX_I2S3_Init>
  MX_SPI1_Init();
 80009ae:	f000 f965 	bl	8000c7c <MX_SPI1_Init>
  MX_TIM7_Init();
 80009b2:	f000 f999 	bl	8000ce8 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

	// Peripheral GPIOD einschalten
	RCC->AHB1ENR |= 1<<3|1;
 80009b6:	4b3b      	ldr	r3, [pc, #236]	; (8000aa4 <main+0x110>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a3a      	ldr	r2, [pc, #232]	; (8000aa4 <main+0x110>)
 80009bc:	f043 0309 	orr.w	r3, r3, #9
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
	// Peripheral GPIOE einschalten
	RCC->AHB1ENR |= 1<<4|1;
 80009c2:	4b38      	ldr	r3, [pc, #224]	; (8000aa4 <main+0x110>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a37      	ldr	r2, [pc, #220]	; (8000aa4 <main+0x110>)
 80009c8:	f043 0311 	orr.w	r3, r3, #17
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30

	// GPIO einrichten für Output
	GPIOD->MODER |= 0x55154545;
 80009ce:	4b36      	ldr	r3, [pc, #216]	; (8000aa8 <main+0x114>)
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	4935      	ldr	r1, [pc, #212]	; (8000aa8 <main+0x114>)
 80009d4:	4b35      	ldr	r3, [pc, #212]	; (8000aac <main+0x118>)
 80009d6:	4313      	orrs	r3, r2
 80009d8:	600b      	str	r3, [r1, #0]
	GPIOE->MODER |= 0x55554040;
 80009da:	4b35      	ldr	r3, [pc, #212]	; (8000ab0 <main+0x11c>)
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	4934      	ldr	r1, [pc, #208]	; (8000ab0 <main+0x11c>)
 80009e0:	4b34      	ldr	r3, [pc, #208]	; (8000ab4 <main+0x120>)
 80009e2:	4313      	orrs	r3, r2
 80009e4:	600b      	str	r3, [r1, #0]

	// Orange LED konfigurieren
	GPIOD->MODER |= 1<<24;
 80009e6:	4b30      	ldr	r3, [pc, #192]	; (8000aa8 <main+0x114>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a2f      	ldr	r2, [pc, #188]	; (8000aa8 <main+0x114>)
 80009ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80009f0:	6013      	str	r3, [r2, #0]

	// Gruene LED (Port D12) ausschalten
	GPIOD->ODR &= ~(1<<12);
 80009f2:	4b2d      	ldr	r3, [pc, #180]	; (8000aa8 <main+0x114>)
 80009f4:	695b      	ldr	r3, [r3, #20]
 80009f6:	4a2c      	ldr	r2, [pc, #176]	; (8000aa8 <main+0x114>)
 80009f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80009fc:	6153      	str	r3, [r2, #20]

	//Read auf 1
	GPIOD->MODER 	|= 1<<8;
 80009fe:	4b2a      	ldr	r3, [pc, #168]	; (8000aa8 <main+0x114>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a29      	ldr	r2, [pc, #164]	; (8000aa8 <main+0x114>)
 8000a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a08:	6013      	str	r3, [r2, #0]
	GPIOD->ODR		|= 1<<4;
 8000a0a:	4b27      	ldr	r3, [pc, #156]	; (8000aa8 <main+0x114>)
 8000a0c:	695b      	ldr	r3, [r3, #20]
 8000a0e:	4a26      	ldr	r2, [pc, #152]	; (8000aa8 <main+0x114>)
 8000a10:	f043 0310 	orr.w	r3, r3, #16
 8000a14:	6153      	str	r3, [r2, #20]

	// Hintergrundbeleuchtung
	GPIOD->MODER |= 1<<26;
 8000a16:	4b24      	ldr	r3, [pc, #144]	; (8000aa8 <main+0x114>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a23      	ldr	r2, [pc, #140]	; (8000aa8 <main+0x114>)
 8000a1c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a20:	6013      	str	r3, [r2, #0]
	GPIOD->ODR |= 1<<13;
 8000a22:	4b21      	ldr	r3, [pc, #132]	; (8000aa8 <main+0x114>)
 8000a24:	695b      	ldr	r3, [r3, #20]
 8000a26:	4a20      	ldr	r2, [pc, #128]	; (8000aa8 <main+0x114>)
 8000a28:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a2c:	6153      	str	r3, [r2, #20]

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000a2e:	f007 fc77 	bl	8008320 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of oneMs */
  oneMsHandle = osTimerNew(oneMsFunc, osTimerPeriodic, NULL, &oneMs_attributes);
 8000a32:	4b21      	ldr	r3, [pc, #132]	; (8000ab8 <main+0x124>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	2101      	movs	r1, #1
 8000a38:	4820      	ldr	r0, [pc, #128]	; (8000abc <main+0x128>)
 8000a3a:	f007 fd7d 	bl	8008538 <osTimerNew>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	4a1f      	ldr	r2, [pc, #124]	; (8000ac0 <main+0x12c>)
 8000a42:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000a44:	4a1f      	ldr	r2, [pc, #124]	; (8000ac4 <main+0x130>)
 8000a46:	2100      	movs	r1, #0
 8000a48:	481f      	ldr	r0, [pc, #124]	; (8000ac8 <main+0x134>)
 8000a4a:	f007 fcb3 	bl	80083b4 <osThreadNew>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	4a1e      	ldr	r2, [pc, #120]	; (8000acc <main+0x138>)
 8000a52:	6013      	str	r3, [r2, #0]

  /* creation of task1ms */
  task1msHandle = osThreadNew(StartTask02, NULL, &task1ms_attributes);
 8000a54:	4a1e      	ldr	r2, [pc, #120]	; (8000ad0 <main+0x13c>)
 8000a56:	2100      	movs	r1, #0
 8000a58:	481e      	ldr	r0, [pc, #120]	; (8000ad4 <main+0x140>)
 8000a5a:	f007 fcab 	bl	80083b4 <osThreadNew>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	4a1d      	ldr	r2, [pc, #116]	; (8000ad8 <main+0x144>)
 8000a62:	6013      	str	r3, [r2, #0]

  /* creation of task10ms */
  task10msHandle = osThreadNew(StartTask03, NULL, &task10ms_attributes);
 8000a64:	4a1d      	ldr	r2, [pc, #116]	; (8000adc <main+0x148>)
 8000a66:	2100      	movs	r1, #0
 8000a68:	481d      	ldr	r0, [pc, #116]	; (8000ae0 <main+0x14c>)
 8000a6a:	f007 fca3 	bl	80083b4 <osThreadNew>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	4a1c      	ldr	r2, [pc, #112]	; (8000ae4 <main+0x150>)
 8000a72:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  osTimerStart(oneMsHandle,pdMS_TO_TICKS(125));
 8000a74:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <main+0x12c>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	217d      	movs	r1, #125	; 0x7d
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f007 fdd8 	bl	8008630 <osTimerStart>
  LCD_Init();
 8000a80:	f7ff ff18 	bl	80008b4 <LCD_Init>
  LCD_ClearDisplay(0xFFFF);
 8000a84:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000a88:	f7ff fe23 	bl	80006d2 <LCD_ClearDisplay>

  LCD_WriteString(0, 0, 0, 0xFFFF, "Test");
 8000a8c:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <main+0x154>)
 8000a8e:	9300      	str	r3, [sp, #0]
 8000a90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a94:	2200      	movs	r2, #0
 8000a96:	2100      	movs	r1, #0
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f7ff fd91 	bl	80005c0 <LCD_WriteString>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000a9e:	f007 fc63 	bl	8008368 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //xTimerCreate("oneMsTimer", pdMS_TO_TICKS(1), pdTRUE, 0, prvOneMsTimer); /////////////////////////


  while (1)
 8000aa2:	e7fe      	b.n	8000aa2 <main+0x10e>
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40020c00 	.word	0x40020c00
 8000aac:	55154545 	.word	0x55154545
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	55554040 	.word	0x55554040
 8000ab8:	0800de08 	.word	0x0800de08
 8000abc:	08000fcd 	.word	0x08000fcd
 8000ac0:	200001f8 	.word	0x200001f8
 8000ac4:	0800dd9c 	.word	0x0800dd9c
 8000ac8:	08000f51 	.word	0x08000f51
 8000acc:	200001ec 	.word	0x200001ec
 8000ad0:	0800ddc0 	.word	0x0800ddc0
 8000ad4:	08000fad 	.word	0x08000fad
 8000ad8:	200001f0 	.word	0x200001f0
 8000adc:	0800dde4 	.word	0x0800dde4
 8000ae0:	08000fbd 	.word	0x08000fbd
 8000ae4:	200001f4 	.word	0x200001f4
 8000ae8:	0800bd6c 	.word	0x0800bd6c

08000aec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b094      	sub	sp, #80	; 0x50
 8000af0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000af2:	f107 0320 	add.w	r3, r7, #32
 8000af6:	2230      	movs	r2, #48	; 0x30
 8000af8:	2100      	movs	r1, #0
 8000afa:	4618      	mov	r0, r3
 8000afc:	f00b f810 	bl	800bb20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b00:	f107 030c 	add.w	r3, r7, #12
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b10:	2300      	movs	r3, #0
 8000b12:	60bb      	str	r3, [r7, #8]
 8000b14:	4b28      	ldr	r3, [pc, #160]	; (8000bb8 <SystemClock_Config+0xcc>)
 8000b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b18:	4a27      	ldr	r2, [pc, #156]	; (8000bb8 <SystemClock_Config+0xcc>)
 8000b1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b20:	4b25      	ldr	r3, [pc, #148]	; (8000bb8 <SystemClock_Config+0xcc>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b28:	60bb      	str	r3, [r7, #8]
 8000b2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	4b22      	ldr	r3, [pc, #136]	; (8000bbc <SystemClock_Config+0xd0>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a21      	ldr	r2, [pc, #132]	; (8000bbc <SystemClock_Config+0xd0>)
 8000b36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b3a:	6013      	str	r3, [r2, #0]
 8000b3c:	4b1f      	ldr	r3, [pc, #124]	; (8000bbc <SystemClock_Config+0xd0>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b52:	2302      	movs	r3, #2
 8000b54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b5c:	2308      	movs	r3, #8
 8000b5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b60:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000b64:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b66:	2302      	movs	r3, #2
 8000b68:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b6a:	2307      	movs	r3, #7
 8000b6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b6e:	f107 0320 	add.w	r3, r7, #32
 8000b72:	4618      	mov	r0, r3
 8000b74:	f003 f9bc 	bl	8003ef0 <HAL_RCC_OscConfig>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000b7e:	f000 fa35 	bl	8000fec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b82:	230f      	movs	r3, #15
 8000b84:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b86:	2302      	movs	r3, #2
 8000b88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b8e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b92:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b98:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b9a:	f107 030c 	add.w	r3, r7, #12
 8000b9e:	2105      	movs	r1, #5
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f003 fc1d 	bl	80043e0 <HAL_RCC_ClockConfig>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000bac:	f000 fa1e 	bl	8000fec <Error_Handler>
  }
}
 8000bb0:	bf00      	nop
 8000bb2:	3750      	adds	r7, #80	; 0x50
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40007000 	.word	0x40007000

08000bc0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bc4:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <MX_I2C1_Init+0x50>)
 8000bc6:	4a13      	ldr	r2, [pc, #76]	; (8000c14 <MX_I2C1_Init+0x54>)
 8000bc8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000bca:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <MX_I2C1_Init+0x50>)
 8000bcc:	4a12      	ldr	r2, [pc, #72]	; (8000c18 <MX_I2C1_Init+0x58>)
 8000bce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bd0:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <MX_I2C1_Init+0x50>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <MX_I2C1_Init+0x50>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <MX_I2C1_Init+0x50>)
 8000bde:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000be2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000be4:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <MX_I2C1_Init+0x50>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bea:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <MX_I2C1_Init+0x50>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bf0:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <MX_I2C1_Init+0x50>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bf6:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <MX_I2C1_Init+0x50>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bfc:	4804      	ldr	r0, [pc, #16]	; (8000c10 <MX_I2C1_Init+0x50>)
 8000bfe:	f002 fb93 	bl	8003328 <HAL_I2C_Init>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c08:	f000 f9f0 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	200000b0 	.word	0x200000b0
 8000c14:	40005400 	.word	0x40005400
 8000c18:	000186a0 	.word	0x000186a0

08000c1c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000c20:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <MX_I2S3_Init+0x54>)
 8000c22:	4a14      	ldr	r2, [pc, #80]	; (8000c74 <MX_I2S3_Init+0x58>)
 8000c24:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000c26:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <MX_I2S3_Init+0x54>)
 8000c28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c2c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000c2e:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <MX_I2S3_Init+0x54>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000c34:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <MX_I2S3_Init+0x54>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000c3a:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <MX_I2S3_Init+0x54>)
 8000c3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c40:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000c42:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <MX_I2S3_Init+0x54>)
 8000c44:	4a0c      	ldr	r2, [pc, #48]	; (8000c78 <MX_I2S3_Init+0x5c>)
 8000c46:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000c48:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <MX_I2S3_Init+0x54>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000c4e:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <MX_I2S3_Init+0x54>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <MX_I2S3_Init+0x54>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000c5a:	4805      	ldr	r0, [pc, #20]	; (8000c70 <MX_I2S3_Init+0x54>)
 8000c5c:	f002 fca8 	bl	80035b0 <HAL_I2S_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000c66:	f000 f9c1 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000104 	.word	0x20000104
 8000c74:	40003c00 	.word	0x40003c00
 8000c78:	00017700 	.word	0x00017700

08000c7c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c80:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <MX_SPI1_Init+0x64>)
 8000c82:	4a18      	ldr	r2, [pc, #96]	; (8000ce4 <MX_SPI1_Init+0x68>)
 8000c84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c86:	4b16      	ldr	r3, [pc, #88]	; (8000ce0 <MX_SPI1_Init+0x64>)
 8000c88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c8e:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <MX_SPI1_Init+0x64>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c94:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <MX_SPI1_Init+0x64>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c9a:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <MX_SPI1_Init+0x64>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ca0:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <MX_SPI1_Init+0x64>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <MX_SPI1_Init+0x64>)
 8000ca8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <MX_SPI1_Init+0x64>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <MX_SPI1_Init+0x64>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <MX_SPI1_Init+0x64>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cc0:	4b07      	ldr	r3, [pc, #28]	; (8000ce0 <MX_SPI1_Init+0x64>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <MX_SPI1_Init+0x64>)
 8000cc8:	220a      	movs	r2, #10
 8000cca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ccc:	4804      	ldr	r0, [pc, #16]	; (8000ce0 <MX_SPI1_Init+0x64>)
 8000cce:	f003 fed3 	bl	8004a78 <HAL_SPI_Init>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000cd8:	f000 f988 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	2000014c 	.word	0x2000014c
 8000ce4:	40013000 	.word	0x40013000

08000ce8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cee:	463b      	mov	r3, r7
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000cf6:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <MX_TIM7_Init+0x64>)
 8000cf8:	4a15      	ldr	r2, [pc, #84]	; (8000d50 <MX_TIM7_Init+0x68>)
 8000cfa:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 84;
 8000cfc:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <MX_TIM7_Init+0x64>)
 8000cfe:	2254      	movs	r2, #84	; 0x54
 8000d00:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d02:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <MX_TIM7_Init+0x64>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8000d08:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <MX_TIM7_Init+0x64>)
 8000d0a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d0e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d10:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <MX_TIM7_Init+0x64>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000d16:	480d      	ldr	r0, [pc, #52]	; (8000d4c <MX_TIM7_Init+0x64>)
 8000d18:	f003 ff37 	bl	8004b8a <HAL_TIM_Base_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000d22:	f000 f963 	bl	8000fec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d26:	2300      	movs	r3, #0
 8000d28:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000d2e:	463b      	mov	r3, r7
 8000d30:	4619      	mov	r1, r3
 8000d32:	4806      	ldr	r0, [pc, #24]	; (8000d4c <MX_TIM7_Init+0x64>)
 8000d34:	f004 f818 	bl	8004d68 <HAL_TIMEx_MasterConfigSynchronization>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000d3e:	f000 f955 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	200001a4 	.word	0x200001a4
 8000d50:	40001400 	.word	0x40001400

08000d54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08c      	sub	sp, #48	; 0x30
 8000d58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5a:	f107 031c 	add.w	r3, r7, #28
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
 8000d66:	60da      	str	r2, [r3, #12]
 8000d68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61bb      	str	r3, [r7, #24]
 8000d6e:	4b72      	ldr	r3, [pc, #456]	; (8000f38 <MX_GPIO_Init+0x1e4>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a71      	ldr	r2, [pc, #452]	; (8000f38 <MX_GPIO_Init+0x1e4>)
 8000d74:	f043 0310 	orr.w	r3, r3, #16
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b6f      	ldr	r3, [pc, #444]	; (8000f38 <MX_GPIO_Init+0x1e4>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0310 	and.w	r3, r3, #16
 8000d82:	61bb      	str	r3, [r7, #24]
 8000d84:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
 8000d8a:	4b6b      	ldr	r3, [pc, #428]	; (8000f38 <MX_GPIO_Init+0x1e4>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	4a6a      	ldr	r2, [pc, #424]	; (8000f38 <MX_GPIO_Init+0x1e4>)
 8000d90:	f043 0304 	orr.w	r3, r3, #4
 8000d94:	6313      	str	r3, [r2, #48]	; 0x30
 8000d96:	4b68      	ldr	r3, [pc, #416]	; (8000f38 <MX_GPIO_Init+0x1e4>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	f003 0304 	and.w	r3, r3, #4
 8000d9e:	617b      	str	r3, [r7, #20]
 8000da0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	4b64      	ldr	r3, [pc, #400]	; (8000f38 <MX_GPIO_Init+0x1e4>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	4a63      	ldr	r2, [pc, #396]	; (8000f38 <MX_GPIO_Init+0x1e4>)
 8000dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000db0:	6313      	str	r3, [r2, #48]	; 0x30
 8000db2:	4b61      	ldr	r3, [pc, #388]	; (8000f38 <MX_GPIO_Init+0x1e4>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	4b5d      	ldr	r3, [pc, #372]	; (8000f38 <MX_GPIO_Init+0x1e4>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a5c      	ldr	r2, [pc, #368]	; (8000f38 <MX_GPIO_Init+0x1e4>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b5a      	ldr	r3, [pc, #360]	; (8000f38 <MX_GPIO_Init+0x1e4>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	4b56      	ldr	r3, [pc, #344]	; (8000f38 <MX_GPIO_Init+0x1e4>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4a55      	ldr	r2, [pc, #340]	; (8000f38 <MX_GPIO_Init+0x1e4>)
 8000de4:	f043 0302 	orr.w	r3, r3, #2
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dea:	4b53      	ldr	r3, [pc, #332]	; (8000f38 <MX_GPIO_Init+0x1e4>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	f003 0302 	and.w	r3, r3, #2
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	607b      	str	r3, [r7, #4]
 8000dfa:	4b4f      	ldr	r3, [pc, #316]	; (8000f38 <MX_GPIO_Init+0x1e4>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a4e      	ldr	r2, [pc, #312]	; (8000f38 <MX_GPIO_Init+0x1e4>)
 8000e00:	f043 0308 	orr.w	r3, r3, #8
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b4c      	ldr	r3, [pc, #304]	; (8000f38 <MX_GPIO_Init+0x1e4>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0308 	and.w	r3, r3, #8
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2108      	movs	r1, #8
 8000e16:	4849      	ldr	r0, [pc, #292]	; (8000f3c <MX_GPIO_Init+0x1e8>)
 8000e18:	f000 fe48 	bl	8001aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	2101      	movs	r1, #1
 8000e20:	4847      	ldr	r0, [pc, #284]	; (8000f40 <MX_GPIO_Init+0x1ec>)
 8000e22:	f000 fe43 	bl	8001aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, green_led_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000e26:	2200      	movs	r2, #0
 8000e28:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000e2c:	4845      	ldr	r0, [pc, #276]	; (8000f44 <MX_GPIO_Init+0x1f0>)
 8000e2e:	f000 fe3d 	bl	8001aac <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000e32:	2308      	movs	r3, #8
 8000e34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e36:	2301      	movs	r3, #1
 8000e38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000e42:	f107 031c 	add.w	r3, r7, #28
 8000e46:	4619      	mov	r1, r3
 8000e48:	483c      	ldr	r0, [pc, #240]	; (8000f3c <MX_GPIO_Init+0x1e8>)
 8000e4a:	f000 fc7b 	bl	8001744 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e52:	2301      	movs	r3, #1
 8000e54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e5e:	f107 031c 	add.w	r3, r7, #28
 8000e62:	4619      	mov	r1, r3
 8000e64:	4836      	ldr	r0, [pc, #216]	; (8000f40 <MX_GPIO_Init+0x1ec>)
 8000e66:	f000 fc6d 	bl	8001744 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000e6a:	2308      	movs	r3, #8
 8000e6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e76:	2300      	movs	r3, #0
 8000e78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e7a:	2305      	movs	r3, #5
 8000e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000e7e:	f107 031c 	add.w	r3, r7, #28
 8000e82:	4619      	mov	r1, r3
 8000e84:	482e      	ldr	r0, [pc, #184]	; (8000f40 <MX_GPIO_Init+0x1ec>)
 8000e86:	f000 fc5d 	bl	8001744 <HAL_GPIO_Init>

  /*Configure GPIO pin : blue_button_Pin */
  GPIO_InitStruct.Pin = blue_button_Pin;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e8e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000e92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(blue_button_GPIO_Port, &GPIO_InitStruct);
 8000e98:	f107 031c 	add.w	r3, r7, #28
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	482a      	ldr	r0, [pc, #168]	; (8000f48 <MX_GPIO_Init+0x1f4>)
 8000ea0:	f000 fc50 	bl	8001744 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000ea4:	2304      	movs	r3, #4
 8000ea6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000eb0:	f107 031c 	add.w	r3, r7, #28
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4825      	ldr	r0, [pc, #148]	; (8000f4c <MX_GPIO_Init+0x1f8>)
 8000eb8:	f000 fc44 	bl	8001744 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000ebc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ec0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ece:	2305      	movs	r3, #5
 8000ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000ed2:	f107 031c 	add.w	r3, r7, #28
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	481c      	ldr	r0, [pc, #112]	; (8000f4c <MX_GPIO_Init+0x1f8>)
 8000eda:	f000 fc33 	bl	8001744 <HAL_GPIO_Init>

  /*Configure GPIO pins : green_led_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = green_led_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000ede:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000ee2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eec:	2300      	movs	r3, #0
 8000eee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ef0:	f107 031c 	add.w	r3, r7, #28
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4813      	ldr	r0, [pc, #76]	; (8000f44 <MX_GPIO_Init+0x1f0>)
 8000ef8:	f000 fc24 	bl	8001744 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000efc:	2320      	movs	r3, #32
 8000efe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f00:	2300      	movs	r3, #0
 8000f02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f08:	f107 031c 	add.w	r3, r7, #28
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	480d      	ldr	r0, [pc, #52]	; (8000f44 <MX_GPIO_Init+0x1f0>)
 8000f10:	f000 fc18 	bl	8001744 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000f14:	2302      	movs	r3, #2
 8000f16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f18:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000f1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000f22:	f107 031c 	add.w	r3, r7, #28
 8000f26:	4619      	mov	r1, r3
 8000f28:	4804      	ldr	r0, [pc, #16]	; (8000f3c <MX_GPIO_Init+0x1e8>)
 8000f2a:	f000 fc0b 	bl	8001744 <HAL_GPIO_Init>

}
 8000f2e:	bf00      	nop
 8000f30:	3730      	adds	r7, #48	; 0x30
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	40020800 	.word	0x40020800
 8000f44:	40020c00 	.word	0x40020c00
 8000f48:	40020000 	.word	0x40020000
 8000f4c:	40020400 	.word	0x40020400

08000f50 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000f58:	f00a fa98 	bl	800b48c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
	if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)){
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	4811      	ldr	r0, [pc, #68]	; (8000fa4 <StartDefaultTask+0x54>)
 8000f60:	f000 fd8c 	bl	8001a7c <HAL_GPIO_ReadPin>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d012      	beq.n	8000f90 <StartDefaultTask+0x40>
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,GPIO_PIN_SET);
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f70:	480d      	ldr	r0, [pc, #52]	; (8000fa8 <StartDefaultTask+0x58>)
 8000f72:	f000 fd9b 	bl	8001aac <HAL_GPIO_WritePin>
		osDelay(500);
 8000f76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f7a:	f007 faad 	bl	80084d8 <osDelay>
		HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);
 8000f7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f82:	4809      	ldr	r0, [pc, #36]	; (8000fa8 <StartDefaultTask+0x58>)
 8000f84:	f000 fdab 	bl	8001ade <HAL_GPIO_TogglePin>
		osDelay(500);
 8000f88:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f8c:	f007 faa4 	bl	80084d8 <osDelay>
	}
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,GPIO_PIN_RESET);
 8000f90:	2200      	movs	r2, #0
 8000f92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f96:	4804      	ldr	r0, [pc, #16]	; (8000fa8 <StartDefaultTask+0x58>)
 8000f98:	f000 fd88 	bl	8001aac <HAL_GPIO_WritePin>

    osDelay(1);
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	f007 fa9b 	bl	80084d8 <osDelay>
	if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)){
 8000fa2:	e7db      	b.n	8000f5c <StartDefaultTask+0xc>
 8000fa4:	40020000 	.word	0x40020000
 8000fa8:	40020c00 	.word	0x40020c00

08000fac <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	f007 fa8f 	bl	80084d8 <osDelay>
 8000fba:	e7fb      	b.n	8000fb4 <StartTask02+0x8>

08000fbc <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	f007 fa87 	bl	80084d8 <osDelay>
 8000fca:	e7fb      	b.n	8000fc4 <StartTask03+0x8>

08000fcc <oneMsFunc>:
  /* USER CODE END StartTask03 */
}

/* oneMsFunc function */
void oneMsFunc(void *argument)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
//		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13,GPIO_PIN_RESET);
//	}else if(counter >= 250){
//		counter = 0;
//	}

	HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_15);
 8000fd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fd8:	4803      	ldr	r0, [pc, #12]	; (8000fe8 <oneMsFunc+0x1c>)
 8000fda:	f000 fd80 	bl	8001ade <HAL_GPIO_TogglePin>


  /* USER CODE END oneMsFunc */
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40020c00 	.word	0x40020c00

08000fec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff0:	b672      	cpsid	i
}
 8000ff2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <Error_Handler+0x8>
	...

08000ff8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	4b12      	ldr	r3, [pc, #72]	; (800104c <HAL_MspInit+0x54>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001006:	4a11      	ldr	r2, [pc, #68]	; (800104c <HAL_MspInit+0x54>)
 8001008:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800100c:	6453      	str	r3, [r2, #68]	; 0x44
 800100e:	4b0f      	ldr	r3, [pc, #60]	; (800104c <HAL_MspInit+0x54>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	603b      	str	r3, [r7, #0]
 800101e:	4b0b      	ldr	r3, [pc, #44]	; (800104c <HAL_MspInit+0x54>)
 8001020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001022:	4a0a      	ldr	r2, [pc, #40]	; (800104c <HAL_MspInit+0x54>)
 8001024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001028:	6413      	str	r3, [r2, #64]	; 0x40
 800102a:	4b08      	ldr	r3, [pc, #32]	; (800104c <HAL_MspInit+0x54>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001032:	603b      	str	r3, [r7, #0]
 8001034:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001036:	2200      	movs	r2, #0
 8001038:	210f      	movs	r1, #15
 800103a:	f06f 0001 	mvn.w	r0, #1
 800103e:	f000 fb4a 	bl	80016d6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40023800 	.word	0x40023800

08001050 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08a      	sub	sp, #40	; 0x28
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a19      	ldr	r2, [pc, #100]	; (80010d4 <HAL_I2C_MspInit+0x84>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d12c      	bne.n	80010cc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	613b      	str	r3, [r7, #16]
 8001076:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <HAL_I2C_MspInit+0x88>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a17      	ldr	r2, [pc, #92]	; (80010d8 <HAL_I2C_MspInit+0x88>)
 800107c:	f043 0302 	orr.w	r3, r3, #2
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <HAL_I2C_MspInit+0x88>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	613b      	str	r3, [r7, #16]
 800108c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800108e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001092:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001094:	2312      	movs	r3, #18
 8001096:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001098:	2301      	movs	r3, #1
 800109a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109c:	2300      	movs	r3, #0
 800109e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010a0:	2304      	movs	r3, #4
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	4619      	mov	r1, r3
 80010aa:	480c      	ldr	r0, [pc, #48]	; (80010dc <HAL_I2C_MspInit+0x8c>)
 80010ac:	f000 fb4a 	bl	8001744 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010b0:	2300      	movs	r3, #0
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <HAL_I2C_MspInit+0x88>)
 80010b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b8:	4a07      	ldr	r2, [pc, #28]	; (80010d8 <HAL_I2C_MspInit+0x88>)
 80010ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010be:	6413      	str	r3, [r2, #64]	; 0x40
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <HAL_I2C_MspInit+0x88>)
 80010c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010cc:	bf00      	nop
 80010ce:	3728      	adds	r7, #40	; 0x28
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40005400 	.word	0x40005400
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40020400 	.word	0x40020400

080010e0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08e      	sub	sp, #56	; 0x38
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a31      	ldr	r2, [pc, #196]	; (80011d0 <HAL_I2S_MspInit+0xf0>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d15a      	bne.n	80011c6 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001110:	2301      	movs	r3, #1
 8001112:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001114:	23c0      	movs	r3, #192	; 0xc0
 8001116:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001118:	2302      	movs	r3, #2
 800111a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	4618      	mov	r0, r3
 8001122:	f003 fb69 	bl	80047f8 <HAL_RCCEx_PeriphCLKConfig>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 800112c:	f7ff ff5e 	bl	8000fec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001130:	2300      	movs	r3, #0
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	4b27      	ldr	r3, [pc, #156]	; (80011d4 <HAL_I2S_MspInit+0xf4>)
 8001136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001138:	4a26      	ldr	r2, [pc, #152]	; (80011d4 <HAL_I2S_MspInit+0xf4>)
 800113a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800113e:	6413      	str	r3, [r2, #64]	; 0x40
 8001140:	4b24      	ldr	r3, [pc, #144]	; (80011d4 <HAL_I2S_MspInit+0xf4>)
 8001142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001144:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001148:	613b      	str	r3, [r7, #16]
 800114a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800114c:	2300      	movs	r3, #0
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	4b20      	ldr	r3, [pc, #128]	; (80011d4 <HAL_I2S_MspInit+0xf4>)
 8001152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001154:	4a1f      	ldr	r2, [pc, #124]	; (80011d4 <HAL_I2S_MspInit+0xf4>)
 8001156:	f043 0301 	orr.w	r3, r3, #1
 800115a:	6313      	str	r3, [r2, #48]	; 0x30
 800115c:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <HAL_I2S_MspInit+0xf4>)
 800115e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001160:	f003 0301 	and.w	r3, r3, #1
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001168:	2300      	movs	r3, #0
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <HAL_I2S_MspInit+0xf4>)
 800116e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001170:	4a18      	ldr	r2, [pc, #96]	; (80011d4 <HAL_I2S_MspInit+0xf4>)
 8001172:	f043 0304 	orr.w	r3, r3, #4
 8001176:	6313      	str	r3, [r2, #48]	; 0x30
 8001178:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <HAL_I2S_MspInit+0xf4>)
 800117a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117c:	f003 0304 	and.w	r3, r3, #4
 8001180:	60bb      	str	r3, [r7, #8]
 8001182:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001184:	2310      	movs	r3, #16
 8001186:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001188:	2302      	movs	r3, #2
 800118a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001190:	2300      	movs	r3, #0
 8001192:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001194:	2306      	movs	r3, #6
 8001196:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001198:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119c:	4619      	mov	r1, r3
 800119e:	480e      	ldr	r0, [pc, #56]	; (80011d8 <HAL_I2S_MspInit+0xf8>)
 80011a0:	f000 fad0 	bl	8001744 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80011a4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011aa:	2302      	movs	r3, #2
 80011ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b2:	2300      	movs	r3, #0
 80011b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011b6:	2306      	movs	r3, #6
 80011b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011be:	4619      	mov	r1, r3
 80011c0:	4806      	ldr	r0, [pc, #24]	; (80011dc <HAL_I2S_MspInit+0xfc>)
 80011c2:	f000 fabf 	bl	8001744 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80011c6:	bf00      	nop
 80011c8:	3738      	adds	r7, #56	; 0x38
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40003c00 	.word	0x40003c00
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40020000 	.word	0x40020000
 80011dc:	40020800 	.word	0x40020800

080011e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08a      	sub	sp, #40	; 0x28
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a19      	ldr	r2, [pc, #100]	; (8001264 <HAL_SPI_MspInit+0x84>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d12b      	bne.n	800125a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
 8001206:	4b18      	ldr	r3, [pc, #96]	; (8001268 <HAL_SPI_MspInit+0x88>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120a:	4a17      	ldr	r2, [pc, #92]	; (8001268 <HAL_SPI_MspInit+0x88>)
 800120c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001210:	6453      	str	r3, [r2, #68]	; 0x44
 8001212:	4b15      	ldr	r3, [pc, #84]	; (8001268 <HAL_SPI_MspInit+0x88>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001216:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	4b11      	ldr	r3, [pc, #68]	; (8001268 <HAL_SPI_MspInit+0x88>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a10      	ldr	r2, [pc, #64]	; (8001268 <HAL_SPI_MspInit+0x88>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <HAL_SPI_MspInit+0x88>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800123a:	23e0      	movs	r3, #224	; 0xe0
 800123c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123e:	2302      	movs	r3, #2
 8001240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001246:	2300      	movs	r3, #0
 8001248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800124a:	2305      	movs	r3, #5
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124e:	f107 0314 	add.w	r3, r7, #20
 8001252:	4619      	mov	r1, r3
 8001254:	4805      	ldr	r0, [pc, #20]	; (800126c <HAL_SPI_MspInit+0x8c>)
 8001256:	f000 fa75 	bl	8001744 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800125a:	bf00      	nop
 800125c:	3728      	adds	r7, #40	; 0x28
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40013000 	.word	0x40013000
 8001268:	40023800 	.word	0x40023800
 800126c:	40020000 	.word	0x40020000

08001270 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a0b      	ldr	r2, [pc, #44]	; (80012ac <HAL_TIM_Base_MspInit+0x3c>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d10d      	bne.n	800129e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <HAL_TIM_Base_MspInit+0x40>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	4a09      	ldr	r2, [pc, #36]	; (80012b0 <HAL_TIM_Base_MspInit+0x40>)
 800128c:	f043 0320 	orr.w	r3, r3, #32
 8001290:	6413      	str	r3, [r2, #64]	; 0x40
 8001292:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <HAL_TIM_Base_MspInit+0x40>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	f003 0320 	and.w	r3, r3, #32
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800129e:	bf00      	nop
 80012a0:	3714      	adds	r7, #20
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	40001400 	.word	0x40001400
 80012b0:	40023800 	.word	0x40023800

080012b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <NMI_Handler+0x4>

080012ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012be:	e7fe      	b.n	80012be <HardFault_Handler+0x4>

080012c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <MemManage_Handler+0x4>

080012c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ca:	e7fe      	b.n	80012ca <BusFault_Handler+0x4>

080012cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d0:	e7fe      	b.n	80012d0 <UsageFault_Handler+0x4>

080012d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e4:	f000 f8d8 	bl	8001498 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80012e8:	f008 ffae 	bl	800a248 <xTaskGetSchedulerState>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d001      	beq.n	80012f6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80012f2:	f009 fe51 	bl	800af98 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001300:	4802      	ldr	r0, [pc, #8]	; (800130c <OTG_FS_IRQHandler+0x10>)
 8001302:	f000 fe71 	bl	8001fe8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20004f60 	.word	0x20004f60

08001310 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001318:	4a14      	ldr	r2, [pc, #80]	; (800136c <_sbrk+0x5c>)
 800131a:	4b15      	ldr	r3, [pc, #84]	; (8001370 <_sbrk+0x60>)
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001324:	4b13      	ldr	r3, [pc, #76]	; (8001374 <_sbrk+0x64>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d102      	bne.n	8001332 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800132c:	4b11      	ldr	r3, [pc, #68]	; (8001374 <_sbrk+0x64>)
 800132e:	4a12      	ldr	r2, [pc, #72]	; (8001378 <_sbrk+0x68>)
 8001330:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001332:	4b10      	ldr	r3, [pc, #64]	; (8001374 <_sbrk+0x64>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4413      	add	r3, r2
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	429a      	cmp	r2, r3
 800133e:	d207      	bcs.n	8001350 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001340:	f00a fba6 	bl	800ba90 <__errno>
 8001344:	4603      	mov	r3, r0
 8001346:	220c      	movs	r2, #12
 8001348:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800134a:	f04f 33ff 	mov.w	r3, #4294967295
 800134e:	e009      	b.n	8001364 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001350:	4b08      	ldr	r3, [pc, #32]	; (8001374 <_sbrk+0x64>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001356:	4b07      	ldr	r3, [pc, #28]	; (8001374 <_sbrk+0x64>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4413      	add	r3, r2
 800135e:	4a05      	ldr	r2, [pc, #20]	; (8001374 <_sbrk+0x64>)
 8001360:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001362:	68fb      	ldr	r3, [r7, #12]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20020000 	.word	0x20020000
 8001370:	00000400 	.word	0x00000400
 8001374:	200001fc 	.word	0x200001fc
 8001378:	20005278 	.word	0x20005278

0800137c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <SystemInit+0x20>)
 8001382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001386:	4a05      	ldr	r2, [pc, #20]	; (800139c <SystemInit+0x20>)
 8001388:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800138c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80013a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013a4:	480d      	ldr	r0, [pc, #52]	; (80013dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013a6:	490e      	ldr	r1, [pc, #56]	; (80013e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013a8:	4a0e      	ldr	r2, [pc, #56]	; (80013e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013ac:	e002      	b.n	80013b4 <LoopCopyDataInit>

080013ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013b2:	3304      	adds	r3, #4

080013b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b8:	d3f9      	bcc.n	80013ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ba:	4a0b      	ldr	r2, [pc, #44]	; (80013e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013bc:	4c0b      	ldr	r4, [pc, #44]	; (80013ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80013be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c0:	e001      	b.n	80013c6 <LoopFillZerobss>

080013c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c4:	3204      	adds	r2, #4

080013c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c8:	d3fb      	bcc.n	80013c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013ca:	f7ff ffd7 	bl	800137c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013ce:	f00a fb65 	bl	800ba9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013d2:	f7ff fadf 	bl	8000994 <main>
  bx  lr    
 80013d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80013d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e0:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80013e4:	0800de40 	.word	0x0800de40
  ldr r2, =_sbss
 80013e8:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80013ec:	20005274 	.word	0x20005274

080013f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013f0:	e7fe      	b.n	80013f0 <ADC_IRQHandler>
	...

080013f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013f8:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <HAL_Init+0x40>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a0d      	ldr	r2, [pc, #52]	; (8001434 <HAL_Init+0x40>)
 80013fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001402:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001404:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <HAL_Init+0x40>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <HAL_Init+0x40>)
 800140a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800140e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001410:	4b08      	ldr	r3, [pc, #32]	; (8001434 <HAL_Init+0x40>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a07      	ldr	r2, [pc, #28]	; (8001434 <HAL_Init+0x40>)
 8001416:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800141a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800141c:	2003      	movs	r0, #3
 800141e:	f000 f94f 	bl	80016c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001422:	200f      	movs	r0, #15
 8001424:	f000 f808 	bl	8001438 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001428:	f7ff fde6 	bl	8000ff8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40023c00 	.word	0x40023c00

08001438 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001440:	4b12      	ldr	r3, [pc, #72]	; (800148c <HAL_InitTick+0x54>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	4b12      	ldr	r3, [pc, #72]	; (8001490 <HAL_InitTick+0x58>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	4619      	mov	r1, r3
 800144a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800144e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001452:	fbb2 f3f3 	udiv	r3, r2, r3
 8001456:	4618      	mov	r0, r3
 8001458:	f000 f967 	bl	800172a <HAL_SYSTICK_Config>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e00e      	b.n	8001484 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b0f      	cmp	r3, #15
 800146a:	d80a      	bhi.n	8001482 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800146c:	2200      	movs	r2, #0
 800146e:	6879      	ldr	r1, [r7, #4]
 8001470:	f04f 30ff 	mov.w	r0, #4294967295
 8001474:	f000 f92f 	bl	80016d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001478:	4a06      	ldr	r2, [pc, #24]	; (8001494 <HAL_InitTick+0x5c>)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800147e:	2300      	movs	r3, #0
 8001480:	e000      	b.n	8001484 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
}
 8001484:	4618      	mov	r0, r3
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	20000000 	.word	0x20000000
 8001490:	20000008 	.word	0x20000008
 8001494:	20000004 	.word	0x20000004

08001498 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800149c:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <HAL_IncTick+0x20>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	461a      	mov	r2, r3
 80014a2:	4b06      	ldr	r3, [pc, #24]	; (80014bc <HAL_IncTick+0x24>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4413      	add	r3, r2
 80014a8:	4a04      	ldr	r2, [pc, #16]	; (80014bc <HAL_IncTick+0x24>)
 80014aa:	6013      	str	r3, [r2, #0]
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	20000008 	.word	0x20000008
 80014bc:	20000200 	.word	0x20000200

080014c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return uwTick;
 80014c4:	4b03      	ldr	r3, [pc, #12]	; (80014d4 <HAL_GetTick+0x14>)
 80014c6:	681b      	ldr	r3, [r3, #0]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	20000200 	.word	0x20000200

080014d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014e0:	f7ff ffee 	bl	80014c0 <HAL_GetTick>
 80014e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f0:	d005      	beq.n	80014fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014f2:	4b0a      	ldr	r3, [pc, #40]	; (800151c <HAL_Delay+0x44>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	461a      	mov	r2, r3
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	4413      	add	r3, r2
 80014fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014fe:	bf00      	nop
 8001500:	f7ff ffde 	bl	80014c0 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	429a      	cmp	r2, r3
 800150e:	d8f7      	bhi.n	8001500 <HAL_Delay+0x28>
  {
  }
}
 8001510:	bf00      	nop
 8001512:	bf00      	nop
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000008 	.word	0x20000008

08001520 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <__NVIC_SetPriorityGrouping+0x44>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001536:	68ba      	ldr	r2, [r7, #8]
 8001538:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800153c:	4013      	ands	r3, r2
 800153e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001548:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800154c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001550:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001552:	4a04      	ldr	r2, [pc, #16]	; (8001564 <__NVIC_SetPriorityGrouping+0x44>)
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	60d3      	str	r3, [r2, #12]
}
 8001558:	bf00      	nop
 800155a:	3714      	adds	r7, #20
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800156c:	4b04      	ldr	r3, [pc, #16]	; (8001580 <__NVIC_GetPriorityGrouping+0x18>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	0a1b      	lsrs	r3, r3, #8
 8001572:	f003 0307 	and.w	r3, r3, #7
}
 8001576:	4618      	mov	r0, r3
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800158e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001592:	2b00      	cmp	r3, #0
 8001594:	db0b      	blt.n	80015ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	f003 021f 	and.w	r2, r3, #31
 800159c:	4907      	ldr	r1, [pc, #28]	; (80015bc <__NVIC_EnableIRQ+0x38>)
 800159e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a2:	095b      	lsrs	r3, r3, #5
 80015a4:	2001      	movs	r0, #1
 80015a6:	fa00 f202 	lsl.w	r2, r0, r2
 80015aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	e000e100 	.word	0xe000e100

080015c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	6039      	str	r1, [r7, #0]
 80015ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	db0a      	blt.n	80015ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	490c      	ldr	r1, [pc, #48]	; (800160c <__NVIC_SetPriority+0x4c>)
 80015da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015de:	0112      	lsls	r2, r2, #4
 80015e0:	b2d2      	uxtb	r2, r2
 80015e2:	440b      	add	r3, r1
 80015e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015e8:	e00a      	b.n	8001600 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	4908      	ldr	r1, [pc, #32]	; (8001610 <__NVIC_SetPriority+0x50>)
 80015f0:	79fb      	ldrb	r3, [r7, #7]
 80015f2:	f003 030f 	and.w	r3, r3, #15
 80015f6:	3b04      	subs	r3, #4
 80015f8:	0112      	lsls	r2, r2, #4
 80015fa:	b2d2      	uxtb	r2, r2
 80015fc:	440b      	add	r3, r1
 80015fe:	761a      	strb	r2, [r3, #24]
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	e000e100 	.word	0xe000e100
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001614:	b480      	push	{r7}
 8001616:	b089      	sub	sp, #36	; 0x24
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	f1c3 0307 	rsb	r3, r3, #7
 800162e:	2b04      	cmp	r3, #4
 8001630:	bf28      	it	cs
 8001632:	2304      	movcs	r3, #4
 8001634:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	3304      	adds	r3, #4
 800163a:	2b06      	cmp	r3, #6
 800163c:	d902      	bls.n	8001644 <NVIC_EncodePriority+0x30>
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	3b03      	subs	r3, #3
 8001642:	e000      	b.n	8001646 <NVIC_EncodePriority+0x32>
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001648:	f04f 32ff 	mov.w	r2, #4294967295
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43da      	mvns	r2, r3
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	401a      	ands	r2, r3
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800165c:	f04f 31ff 	mov.w	r1, #4294967295
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	fa01 f303 	lsl.w	r3, r1, r3
 8001666:	43d9      	mvns	r1, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800166c:	4313      	orrs	r3, r2
         );
}
 800166e:	4618      	mov	r0, r3
 8001670:	3724      	adds	r7, #36	; 0x24
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
	...

0800167c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3b01      	subs	r3, #1
 8001688:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800168c:	d301      	bcc.n	8001692 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800168e:	2301      	movs	r3, #1
 8001690:	e00f      	b.n	80016b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001692:	4a0a      	ldr	r2, [pc, #40]	; (80016bc <SysTick_Config+0x40>)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3b01      	subs	r3, #1
 8001698:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800169a:	210f      	movs	r1, #15
 800169c:	f04f 30ff 	mov.w	r0, #4294967295
 80016a0:	f7ff ff8e 	bl	80015c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a4:	4b05      	ldr	r3, [pc, #20]	; (80016bc <SysTick_Config+0x40>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016aa:	4b04      	ldr	r3, [pc, #16]	; (80016bc <SysTick_Config+0x40>)
 80016ac:	2207      	movs	r2, #7
 80016ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	e000e010 	.word	0xe000e010

080016c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff ff29 	bl	8001520 <__NVIC_SetPriorityGrouping>
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b086      	sub	sp, #24
 80016da:	af00      	add	r7, sp, #0
 80016dc:	4603      	mov	r3, r0
 80016de:	60b9      	str	r1, [r7, #8]
 80016e0:	607a      	str	r2, [r7, #4]
 80016e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016e8:	f7ff ff3e 	bl	8001568 <__NVIC_GetPriorityGrouping>
 80016ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	68b9      	ldr	r1, [r7, #8]
 80016f2:	6978      	ldr	r0, [r7, #20]
 80016f4:	f7ff ff8e 	bl	8001614 <NVIC_EncodePriority>
 80016f8:	4602      	mov	r2, r0
 80016fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016fe:	4611      	mov	r1, r2
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff ff5d 	bl	80015c0 <__NVIC_SetPriority>
}
 8001706:	bf00      	nop
 8001708:	3718      	adds	r7, #24
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b082      	sub	sp, #8
 8001712:	af00      	add	r7, sp, #0
 8001714:	4603      	mov	r3, r0
 8001716:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff ff31 	bl	8001584 <__NVIC_EnableIRQ>
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7ff ffa2 	bl	800167c <SysTick_Config>
 8001738:	4603      	mov	r3, r0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
	...

08001744 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001744:	b480      	push	{r7}
 8001746:	b089      	sub	sp, #36	; 0x24
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001752:	2300      	movs	r3, #0
 8001754:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001756:	2300      	movs	r3, #0
 8001758:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]
 800175e:	e16b      	b.n	8001a38 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001760:	2201      	movs	r2, #1
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	697a      	ldr	r2, [r7, #20]
 8001770:	4013      	ands	r3, r2
 8001772:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	429a      	cmp	r2, r3
 800177a:	f040 815a 	bne.w	8001a32 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f003 0303 	and.w	r3, r3, #3
 8001786:	2b01      	cmp	r3, #1
 8001788:	d005      	beq.n	8001796 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001792:	2b02      	cmp	r3, #2
 8001794:	d130      	bne.n	80017f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	2203      	movs	r2, #3
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43db      	mvns	r3, r3
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4013      	ands	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	68da      	ldr	r2, [r3, #12]
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4313      	orrs	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017cc:	2201      	movs	r2, #1
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	43db      	mvns	r3, r3
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	4013      	ands	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	091b      	lsrs	r3, r3, #4
 80017e2:	f003 0201 	and.w	r2, r3, #1
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 0303 	and.w	r3, r3, #3
 8001800:	2b03      	cmp	r3, #3
 8001802:	d017      	beq.n	8001834 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	2203      	movs	r2, #3
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4013      	ands	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	4313      	orrs	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f003 0303 	and.w	r3, r3, #3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d123      	bne.n	8001888 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	08da      	lsrs	r2, r3, #3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3208      	adds	r2, #8
 8001848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800184c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	f003 0307 	and.w	r3, r3, #7
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	220f      	movs	r2, #15
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	43db      	mvns	r3, r3
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	4013      	ands	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	691a      	ldr	r2, [r3, #16]
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	4313      	orrs	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	08da      	lsrs	r2, r3, #3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	3208      	adds	r2, #8
 8001882:	69b9      	ldr	r1, [r7, #24]
 8001884:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	2203      	movs	r2, #3
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	43db      	mvns	r3, r3
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4013      	ands	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f003 0203 	and.w	r2, r3, #3
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f000 80b4 	beq.w	8001a32 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	4b60      	ldr	r3, [pc, #384]	; (8001a50 <HAL_GPIO_Init+0x30c>)
 80018d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d2:	4a5f      	ldr	r2, [pc, #380]	; (8001a50 <HAL_GPIO_Init+0x30c>)
 80018d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018d8:	6453      	str	r3, [r2, #68]	; 0x44
 80018da:	4b5d      	ldr	r3, [pc, #372]	; (8001a50 <HAL_GPIO_Init+0x30c>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018e6:	4a5b      	ldr	r2, [pc, #364]	; (8001a54 <HAL_GPIO_Init+0x310>)
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	089b      	lsrs	r3, r3, #2
 80018ec:	3302      	adds	r3, #2
 80018ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	f003 0303 	and.w	r3, r3, #3
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	220f      	movs	r2, #15
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	43db      	mvns	r3, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4013      	ands	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a52      	ldr	r2, [pc, #328]	; (8001a58 <HAL_GPIO_Init+0x314>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d02b      	beq.n	800196a <HAL_GPIO_Init+0x226>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a51      	ldr	r2, [pc, #324]	; (8001a5c <HAL_GPIO_Init+0x318>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d025      	beq.n	8001966 <HAL_GPIO_Init+0x222>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a50      	ldr	r2, [pc, #320]	; (8001a60 <HAL_GPIO_Init+0x31c>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d01f      	beq.n	8001962 <HAL_GPIO_Init+0x21e>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a4f      	ldr	r2, [pc, #316]	; (8001a64 <HAL_GPIO_Init+0x320>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d019      	beq.n	800195e <HAL_GPIO_Init+0x21a>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a4e      	ldr	r2, [pc, #312]	; (8001a68 <HAL_GPIO_Init+0x324>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d013      	beq.n	800195a <HAL_GPIO_Init+0x216>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a4d      	ldr	r2, [pc, #308]	; (8001a6c <HAL_GPIO_Init+0x328>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d00d      	beq.n	8001956 <HAL_GPIO_Init+0x212>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a4c      	ldr	r2, [pc, #304]	; (8001a70 <HAL_GPIO_Init+0x32c>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d007      	beq.n	8001952 <HAL_GPIO_Init+0x20e>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a4b      	ldr	r2, [pc, #300]	; (8001a74 <HAL_GPIO_Init+0x330>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d101      	bne.n	800194e <HAL_GPIO_Init+0x20a>
 800194a:	2307      	movs	r3, #7
 800194c:	e00e      	b.n	800196c <HAL_GPIO_Init+0x228>
 800194e:	2308      	movs	r3, #8
 8001950:	e00c      	b.n	800196c <HAL_GPIO_Init+0x228>
 8001952:	2306      	movs	r3, #6
 8001954:	e00a      	b.n	800196c <HAL_GPIO_Init+0x228>
 8001956:	2305      	movs	r3, #5
 8001958:	e008      	b.n	800196c <HAL_GPIO_Init+0x228>
 800195a:	2304      	movs	r3, #4
 800195c:	e006      	b.n	800196c <HAL_GPIO_Init+0x228>
 800195e:	2303      	movs	r3, #3
 8001960:	e004      	b.n	800196c <HAL_GPIO_Init+0x228>
 8001962:	2302      	movs	r3, #2
 8001964:	e002      	b.n	800196c <HAL_GPIO_Init+0x228>
 8001966:	2301      	movs	r3, #1
 8001968:	e000      	b.n	800196c <HAL_GPIO_Init+0x228>
 800196a:	2300      	movs	r3, #0
 800196c:	69fa      	ldr	r2, [r7, #28]
 800196e:	f002 0203 	and.w	r2, r2, #3
 8001972:	0092      	lsls	r2, r2, #2
 8001974:	4093      	lsls	r3, r2
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4313      	orrs	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800197c:	4935      	ldr	r1, [pc, #212]	; (8001a54 <HAL_GPIO_Init+0x310>)
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	089b      	lsrs	r3, r3, #2
 8001982:	3302      	adds	r3, #2
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800198a:	4b3b      	ldr	r3, [pc, #236]	; (8001a78 <HAL_GPIO_Init+0x334>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	43db      	mvns	r3, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4013      	ands	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d003      	beq.n	80019ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019ae:	4a32      	ldr	r2, [pc, #200]	; (8001a78 <HAL_GPIO_Init+0x334>)
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019b4:	4b30      	ldr	r3, [pc, #192]	; (8001a78 <HAL_GPIO_Init+0x334>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	43db      	mvns	r3, r3
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4013      	ands	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d003      	beq.n	80019d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019d8:	4a27      	ldr	r2, [pc, #156]	; (8001a78 <HAL_GPIO_Init+0x334>)
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019de:	4b26      	ldr	r3, [pc, #152]	; (8001a78 <HAL_GPIO_Init+0x334>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	43db      	mvns	r3, r3
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	4013      	ands	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a02:	4a1d      	ldr	r2, [pc, #116]	; (8001a78 <HAL_GPIO_Init+0x334>)
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a08:	4b1b      	ldr	r3, [pc, #108]	; (8001a78 <HAL_GPIO_Init+0x334>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	43db      	mvns	r3, r3
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4013      	ands	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d003      	beq.n	8001a2c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a2c:	4a12      	ldr	r2, [pc, #72]	; (8001a78 <HAL_GPIO_Init+0x334>)
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	3301      	adds	r3, #1
 8001a36:	61fb      	str	r3, [r7, #28]
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	2b0f      	cmp	r3, #15
 8001a3c:	f67f ae90 	bls.w	8001760 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a40:	bf00      	nop
 8001a42:	bf00      	nop
 8001a44:	3724      	adds	r7, #36	; 0x24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40013800 	.word	0x40013800
 8001a58:	40020000 	.word	0x40020000
 8001a5c:	40020400 	.word	0x40020400
 8001a60:	40020800 	.word	0x40020800
 8001a64:	40020c00 	.word	0x40020c00
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	40021400 	.word	0x40021400
 8001a70:	40021800 	.word	0x40021800
 8001a74:	40021c00 	.word	0x40021c00
 8001a78:	40013c00 	.word	0x40013c00

08001a7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	460b      	mov	r3, r1
 8001a86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	691a      	ldr	r2, [r3, #16]
 8001a8c:	887b      	ldrh	r3, [r7, #2]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d002      	beq.n	8001a9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a94:	2301      	movs	r3, #1
 8001a96:	73fb      	strb	r3, [r7, #15]
 8001a98:	e001      	b.n	8001a9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	807b      	strh	r3, [r7, #2]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001abc:	787b      	ldrb	r3, [r7, #1]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ac2:	887a      	ldrh	r2, [r7, #2]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ac8:	e003      	b.n	8001ad2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001aca:	887b      	ldrh	r3, [r7, #2]
 8001acc:	041a      	lsls	r2, r3, #16
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	619a      	str	r2, [r3, #24]
}
 8001ad2:	bf00      	nop
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b085      	sub	sp, #20
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001af0:	887a      	ldrh	r2, [r7, #2]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	4013      	ands	r3, r2
 8001af6:	041a      	lsls	r2, r3, #16
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	43d9      	mvns	r1, r3
 8001afc:	887b      	ldrh	r3, [r7, #2]
 8001afe:	400b      	ands	r3, r1
 8001b00:	431a      	orrs	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	619a      	str	r2, [r3, #24]
}
 8001b06:	bf00      	nop
 8001b08:	3714      	adds	r7, #20
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001b12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b14:	b08f      	sub	sp, #60	; 0x3c
 8001b16:	af0a      	add	r7, sp, #40	; 0x28
 8001b18:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d101      	bne.n	8001b24 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e054      	b.n	8001bce <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d106      	bne.n	8001b44 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f009 fcf8 	bl	800b534 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2203      	movs	r2, #3
 8001b48:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d102      	bne.n	8001b5e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f003 f9ee 	bl	8004f44 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	603b      	str	r3, [r7, #0]
 8001b6e:	687e      	ldr	r6, [r7, #4]
 8001b70:	466d      	mov	r5, sp
 8001b72:	f106 0410 	add.w	r4, r6, #16
 8001b76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b7e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b82:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b86:	1d33      	adds	r3, r6, #4
 8001b88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b8a:	6838      	ldr	r0, [r7, #0]
 8001b8c:	f003 f968 	bl	8004e60 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2101      	movs	r1, #1
 8001b96:	4618      	mov	r0, r3
 8001b98:	f003 f9e5 	bl	8004f66 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	603b      	str	r3, [r7, #0]
 8001ba2:	687e      	ldr	r6, [r7, #4]
 8001ba4:	466d      	mov	r5, sp
 8001ba6:	f106 0410 	add.w	r4, r6, #16
 8001baa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bb2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bb6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001bba:	1d33      	adds	r3, r6, #4
 8001bbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bbe:	6838      	ldr	r0, [r7, #0]
 8001bc0:	f003 fb6e 	bl	80052a0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001bd6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001bd6:	b590      	push	{r4, r7, lr}
 8001bd8:	b089      	sub	sp, #36	; 0x24
 8001bda:	af04      	add	r7, sp, #16
 8001bdc:	6078      	str	r0, [r7, #4]
 8001bde:	4608      	mov	r0, r1
 8001be0:	4611      	mov	r1, r2
 8001be2:	461a      	mov	r2, r3
 8001be4:	4603      	mov	r3, r0
 8001be6:	70fb      	strb	r3, [r7, #3]
 8001be8:	460b      	mov	r3, r1
 8001bea:	70bb      	strb	r3, [r7, #2]
 8001bec:	4613      	mov	r3, r2
 8001bee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d101      	bne.n	8001bfe <HAL_HCD_HC_Init+0x28>
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	e076      	b.n	8001cec <HAL_HCD_HC_Init+0x116>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2201      	movs	r2, #1
 8001c02:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001c06:	78fb      	ldrb	r3, [r7, #3]
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	212c      	movs	r1, #44	; 0x2c
 8001c0c:	fb01 f303 	mul.w	r3, r1, r3
 8001c10:	4413      	add	r3, r2
 8001c12:	333d      	adds	r3, #61	; 0x3d
 8001c14:	2200      	movs	r2, #0
 8001c16:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001c18:	78fb      	ldrb	r3, [r7, #3]
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	212c      	movs	r1, #44	; 0x2c
 8001c1e:	fb01 f303 	mul.w	r3, r1, r3
 8001c22:	4413      	add	r3, r2
 8001c24:	3338      	adds	r3, #56	; 0x38
 8001c26:	787a      	ldrb	r2, [r7, #1]
 8001c28:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001c2a:	78fb      	ldrb	r3, [r7, #3]
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	212c      	movs	r1, #44	; 0x2c
 8001c30:	fb01 f303 	mul.w	r3, r1, r3
 8001c34:	4413      	add	r3, r2
 8001c36:	3340      	adds	r3, #64	; 0x40
 8001c38:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001c3a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001c3c:	78fb      	ldrb	r3, [r7, #3]
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	212c      	movs	r1, #44	; 0x2c
 8001c42:	fb01 f303 	mul.w	r3, r1, r3
 8001c46:	4413      	add	r3, r2
 8001c48:	3339      	adds	r3, #57	; 0x39
 8001c4a:	78fa      	ldrb	r2, [r7, #3]
 8001c4c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001c4e:	78fb      	ldrb	r3, [r7, #3]
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	212c      	movs	r1, #44	; 0x2c
 8001c54:	fb01 f303 	mul.w	r3, r1, r3
 8001c58:	4413      	add	r3, r2
 8001c5a:	333f      	adds	r3, #63	; 0x3f
 8001c5c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001c60:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001c62:	78fb      	ldrb	r3, [r7, #3]
 8001c64:	78ba      	ldrb	r2, [r7, #2]
 8001c66:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c6a:	b2d0      	uxtb	r0, r2
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	212c      	movs	r1, #44	; 0x2c
 8001c70:	fb01 f303 	mul.w	r3, r1, r3
 8001c74:	4413      	add	r3, r2
 8001c76:	333a      	adds	r3, #58	; 0x3a
 8001c78:	4602      	mov	r2, r0
 8001c7a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001c7c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	da09      	bge.n	8001c98 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001c84:	78fb      	ldrb	r3, [r7, #3]
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	212c      	movs	r1, #44	; 0x2c
 8001c8a:	fb01 f303 	mul.w	r3, r1, r3
 8001c8e:	4413      	add	r3, r2
 8001c90:	333b      	adds	r3, #59	; 0x3b
 8001c92:	2201      	movs	r2, #1
 8001c94:	701a      	strb	r2, [r3, #0]
 8001c96:	e008      	b.n	8001caa <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001c98:	78fb      	ldrb	r3, [r7, #3]
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	212c      	movs	r1, #44	; 0x2c
 8001c9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ca2:	4413      	add	r3, r2
 8001ca4:	333b      	adds	r3, #59	; 0x3b
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001caa:	78fb      	ldrb	r3, [r7, #3]
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	212c      	movs	r1, #44	; 0x2c
 8001cb0:	fb01 f303 	mul.w	r3, r1, r3
 8001cb4:	4413      	add	r3, r2
 8001cb6:	333c      	adds	r3, #60	; 0x3c
 8001cb8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001cbc:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6818      	ldr	r0, [r3, #0]
 8001cc2:	787c      	ldrb	r4, [r7, #1]
 8001cc4:	78ba      	ldrb	r2, [r7, #2]
 8001cc6:	78f9      	ldrb	r1, [r7, #3]
 8001cc8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001cca:	9302      	str	r3, [sp, #8]
 8001ccc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001cd0:	9301      	str	r3, [sp, #4]
 8001cd2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001cd6:	9300      	str	r3, [sp, #0]
 8001cd8:	4623      	mov	r3, r4
 8001cda:	f003 fc67 	bl	80055ac <USB_HC_Init>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd90      	pop	{r4, r7, pc}

08001cf4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001d00:	2300      	movs	r3, #0
 8001d02:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d101      	bne.n	8001d12 <HAL_HCD_HC_Halt+0x1e>
 8001d0e:	2302      	movs	r3, #2
 8001d10:	e00f      	b.n	8001d32 <HAL_HCD_HC_Halt+0x3e>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2201      	movs	r2, #1
 8001d16:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	78fa      	ldrb	r2, [r7, #3]
 8001d20:	4611      	mov	r1, r2
 8001d22:	4618      	mov	r0, r3
 8001d24:	f003 feb7 	bl	8005a96 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
	...

08001d3c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	4608      	mov	r0, r1
 8001d46:	4611      	mov	r1, r2
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	70fb      	strb	r3, [r7, #3]
 8001d4e:	460b      	mov	r3, r1
 8001d50:	70bb      	strb	r3, [r7, #2]
 8001d52:	4613      	mov	r3, r2
 8001d54:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001d56:	78fb      	ldrb	r3, [r7, #3]
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	212c      	movs	r1, #44	; 0x2c
 8001d5c:	fb01 f303 	mul.w	r3, r1, r3
 8001d60:	4413      	add	r3, r2
 8001d62:	333b      	adds	r3, #59	; 0x3b
 8001d64:	78ba      	ldrb	r2, [r7, #2]
 8001d66:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001d68:	78fb      	ldrb	r3, [r7, #3]
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	212c      	movs	r1, #44	; 0x2c
 8001d6e:	fb01 f303 	mul.w	r3, r1, r3
 8001d72:	4413      	add	r3, r2
 8001d74:	333f      	adds	r3, #63	; 0x3f
 8001d76:	787a      	ldrb	r2, [r7, #1]
 8001d78:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001d7a:	7c3b      	ldrb	r3, [r7, #16]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d112      	bne.n	8001da6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001d80:	78fb      	ldrb	r3, [r7, #3]
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	212c      	movs	r1, #44	; 0x2c
 8001d86:	fb01 f303 	mul.w	r3, r1, r3
 8001d8a:	4413      	add	r3, r2
 8001d8c:	3342      	adds	r3, #66	; 0x42
 8001d8e:	2203      	movs	r2, #3
 8001d90:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001d92:	78fb      	ldrb	r3, [r7, #3]
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	212c      	movs	r1, #44	; 0x2c
 8001d98:	fb01 f303 	mul.w	r3, r1, r3
 8001d9c:	4413      	add	r3, r2
 8001d9e:	333d      	adds	r3, #61	; 0x3d
 8001da0:	7f3a      	ldrb	r2, [r7, #28]
 8001da2:	701a      	strb	r2, [r3, #0]
 8001da4:	e008      	b.n	8001db8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001da6:	78fb      	ldrb	r3, [r7, #3]
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	212c      	movs	r1, #44	; 0x2c
 8001dac:	fb01 f303 	mul.w	r3, r1, r3
 8001db0:	4413      	add	r3, r2
 8001db2:	3342      	adds	r3, #66	; 0x42
 8001db4:	2202      	movs	r2, #2
 8001db6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001db8:	787b      	ldrb	r3, [r7, #1]
 8001dba:	2b03      	cmp	r3, #3
 8001dbc:	f200 80c6 	bhi.w	8001f4c <HAL_HCD_HC_SubmitRequest+0x210>
 8001dc0:	a201      	add	r2, pc, #4	; (adr r2, 8001dc8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc6:	bf00      	nop
 8001dc8:	08001dd9 	.word	0x08001dd9
 8001dcc:	08001f39 	.word	0x08001f39
 8001dd0:	08001e3d 	.word	0x08001e3d
 8001dd4:	08001ebb 	.word	0x08001ebb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001dd8:	7c3b      	ldrb	r3, [r7, #16]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	f040 80b8 	bne.w	8001f50 <HAL_HCD_HC_SubmitRequest+0x214>
 8001de0:	78bb      	ldrb	r3, [r7, #2]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f040 80b4 	bne.w	8001f50 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001de8:	8b3b      	ldrh	r3, [r7, #24]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d108      	bne.n	8001e00 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001dee:	78fb      	ldrb	r3, [r7, #3]
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	212c      	movs	r1, #44	; 0x2c
 8001df4:	fb01 f303 	mul.w	r3, r1, r3
 8001df8:	4413      	add	r3, r2
 8001dfa:	3355      	adds	r3, #85	; 0x55
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001e00:	78fb      	ldrb	r3, [r7, #3]
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	212c      	movs	r1, #44	; 0x2c
 8001e06:	fb01 f303 	mul.w	r3, r1, r3
 8001e0a:	4413      	add	r3, r2
 8001e0c:	3355      	adds	r3, #85	; 0x55
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d109      	bne.n	8001e28 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e14:	78fb      	ldrb	r3, [r7, #3]
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	212c      	movs	r1, #44	; 0x2c
 8001e1a:	fb01 f303 	mul.w	r3, r1, r3
 8001e1e:	4413      	add	r3, r2
 8001e20:	3342      	adds	r3, #66	; 0x42
 8001e22:	2200      	movs	r2, #0
 8001e24:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001e26:	e093      	b.n	8001f50 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e28:	78fb      	ldrb	r3, [r7, #3]
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	212c      	movs	r1, #44	; 0x2c
 8001e2e:	fb01 f303 	mul.w	r3, r1, r3
 8001e32:	4413      	add	r3, r2
 8001e34:	3342      	adds	r3, #66	; 0x42
 8001e36:	2202      	movs	r2, #2
 8001e38:	701a      	strb	r2, [r3, #0]
      break;
 8001e3a:	e089      	b.n	8001f50 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001e3c:	78bb      	ldrb	r3, [r7, #2]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d11d      	bne.n	8001e7e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001e42:	78fb      	ldrb	r3, [r7, #3]
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	212c      	movs	r1, #44	; 0x2c
 8001e48:	fb01 f303 	mul.w	r3, r1, r3
 8001e4c:	4413      	add	r3, r2
 8001e4e:	3355      	adds	r3, #85	; 0x55
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d109      	bne.n	8001e6a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e56:	78fb      	ldrb	r3, [r7, #3]
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	212c      	movs	r1, #44	; 0x2c
 8001e5c:	fb01 f303 	mul.w	r3, r1, r3
 8001e60:	4413      	add	r3, r2
 8001e62:	3342      	adds	r3, #66	; 0x42
 8001e64:	2200      	movs	r2, #0
 8001e66:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001e68:	e073      	b.n	8001f52 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e6a:	78fb      	ldrb	r3, [r7, #3]
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	212c      	movs	r1, #44	; 0x2c
 8001e70:	fb01 f303 	mul.w	r3, r1, r3
 8001e74:	4413      	add	r3, r2
 8001e76:	3342      	adds	r3, #66	; 0x42
 8001e78:	2202      	movs	r2, #2
 8001e7a:	701a      	strb	r2, [r3, #0]
      break;
 8001e7c:	e069      	b.n	8001f52 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001e7e:	78fb      	ldrb	r3, [r7, #3]
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	212c      	movs	r1, #44	; 0x2c
 8001e84:	fb01 f303 	mul.w	r3, r1, r3
 8001e88:	4413      	add	r3, r2
 8001e8a:	3354      	adds	r3, #84	; 0x54
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d109      	bne.n	8001ea6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e92:	78fb      	ldrb	r3, [r7, #3]
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	212c      	movs	r1, #44	; 0x2c
 8001e98:	fb01 f303 	mul.w	r3, r1, r3
 8001e9c:	4413      	add	r3, r2
 8001e9e:	3342      	adds	r3, #66	; 0x42
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	701a      	strb	r2, [r3, #0]
      break;
 8001ea4:	e055      	b.n	8001f52 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ea6:	78fb      	ldrb	r3, [r7, #3]
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	212c      	movs	r1, #44	; 0x2c
 8001eac:	fb01 f303 	mul.w	r3, r1, r3
 8001eb0:	4413      	add	r3, r2
 8001eb2:	3342      	adds	r3, #66	; 0x42
 8001eb4:	2202      	movs	r2, #2
 8001eb6:	701a      	strb	r2, [r3, #0]
      break;
 8001eb8:	e04b      	b.n	8001f52 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001eba:	78bb      	ldrb	r3, [r7, #2]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d11d      	bne.n	8001efc <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ec0:	78fb      	ldrb	r3, [r7, #3]
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	212c      	movs	r1, #44	; 0x2c
 8001ec6:	fb01 f303 	mul.w	r3, r1, r3
 8001eca:	4413      	add	r3, r2
 8001ecc:	3355      	adds	r3, #85	; 0x55
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d109      	bne.n	8001ee8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ed4:	78fb      	ldrb	r3, [r7, #3]
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	212c      	movs	r1, #44	; 0x2c
 8001eda:	fb01 f303 	mul.w	r3, r1, r3
 8001ede:	4413      	add	r3, r2
 8001ee0:	3342      	adds	r3, #66	; 0x42
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001ee6:	e034      	b.n	8001f52 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ee8:	78fb      	ldrb	r3, [r7, #3]
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	212c      	movs	r1, #44	; 0x2c
 8001eee:	fb01 f303 	mul.w	r3, r1, r3
 8001ef2:	4413      	add	r3, r2
 8001ef4:	3342      	adds	r3, #66	; 0x42
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	701a      	strb	r2, [r3, #0]
      break;
 8001efa:	e02a      	b.n	8001f52 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001efc:	78fb      	ldrb	r3, [r7, #3]
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	212c      	movs	r1, #44	; 0x2c
 8001f02:	fb01 f303 	mul.w	r3, r1, r3
 8001f06:	4413      	add	r3, r2
 8001f08:	3354      	adds	r3, #84	; 0x54
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d109      	bne.n	8001f24 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f10:	78fb      	ldrb	r3, [r7, #3]
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	212c      	movs	r1, #44	; 0x2c
 8001f16:	fb01 f303 	mul.w	r3, r1, r3
 8001f1a:	4413      	add	r3, r2
 8001f1c:	3342      	adds	r3, #66	; 0x42
 8001f1e:	2200      	movs	r2, #0
 8001f20:	701a      	strb	r2, [r3, #0]
      break;
 8001f22:	e016      	b.n	8001f52 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f24:	78fb      	ldrb	r3, [r7, #3]
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	212c      	movs	r1, #44	; 0x2c
 8001f2a:	fb01 f303 	mul.w	r3, r1, r3
 8001f2e:	4413      	add	r3, r2
 8001f30:	3342      	adds	r3, #66	; 0x42
 8001f32:	2202      	movs	r2, #2
 8001f34:	701a      	strb	r2, [r3, #0]
      break;
 8001f36:	e00c      	b.n	8001f52 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f38:	78fb      	ldrb	r3, [r7, #3]
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	212c      	movs	r1, #44	; 0x2c
 8001f3e:	fb01 f303 	mul.w	r3, r1, r3
 8001f42:	4413      	add	r3, r2
 8001f44:	3342      	adds	r3, #66	; 0x42
 8001f46:	2200      	movs	r2, #0
 8001f48:	701a      	strb	r2, [r3, #0]
      break;
 8001f4a:	e002      	b.n	8001f52 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001f4c:	bf00      	nop
 8001f4e:	e000      	b.n	8001f52 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001f50:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001f52:	78fb      	ldrb	r3, [r7, #3]
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	212c      	movs	r1, #44	; 0x2c
 8001f58:	fb01 f303 	mul.w	r3, r1, r3
 8001f5c:	4413      	add	r3, r2
 8001f5e:	3344      	adds	r3, #68	; 0x44
 8001f60:	697a      	ldr	r2, [r7, #20]
 8001f62:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001f64:	78fb      	ldrb	r3, [r7, #3]
 8001f66:	8b3a      	ldrh	r2, [r7, #24]
 8001f68:	6879      	ldr	r1, [r7, #4]
 8001f6a:	202c      	movs	r0, #44	; 0x2c
 8001f6c:	fb00 f303 	mul.w	r3, r0, r3
 8001f70:	440b      	add	r3, r1
 8001f72:	334c      	adds	r3, #76	; 0x4c
 8001f74:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001f76:	78fb      	ldrb	r3, [r7, #3]
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	212c      	movs	r1, #44	; 0x2c
 8001f7c:	fb01 f303 	mul.w	r3, r1, r3
 8001f80:	4413      	add	r3, r2
 8001f82:	3360      	adds	r3, #96	; 0x60
 8001f84:	2200      	movs	r2, #0
 8001f86:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001f88:	78fb      	ldrb	r3, [r7, #3]
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	212c      	movs	r1, #44	; 0x2c
 8001f8e:	fb01 f303 	mul.w	r3, r1, r3
 8001f92:	4413      	add	r3, r2
 8001f94:	3350      	adds	r3, #80	; 0x50
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001f9a:	78fb      	ldrb	r3, [r7, #3]
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	212c      	movs	r1, #44	; 0x2c
 8001fa0:	fb01 f303 	mul.w	r3, r1, r3
 8001fa4:	4413      	add	r3, r2
 8001fa6:	3339      	adds	r3, #57	; 0x39
 8001fa8:	78fa      	ldrb	r2, [r7, #3]
 8001faa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001fac:	78fb      	ldrb	r3, [r7, #3]
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	212c      	movs	r1, #44	; 0x2c
 8001fb2:	fb01 f303 	mul.w	r3, r1, r3
 8001fb6:	4413      	add	r3, r2
 8001fb8:	3361      	adds	r3, #97	; 0x61
 8001fba:	2200      	movs	r2, #0
 8001fbc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6818      	ldr	r0, [r3, #0]
 8001fc2:	78fb      	ldrb	r3, [r7, #3]
 8001fc4:	222c      	movs	r2, #44	; 0x2c
 8001fc6:	fb02 f303 	mul.w	r3, r2, r3
 8001fca:	3338      	adds	r3, #56	; 0x38
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	18d1      	adds	r1, r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	f003 fc0a 	bl	80057f0 <USB_HC_StartXfer>
 8001fdc:	4603      	mov	r3, r0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop

08001fe8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f003 f90b 	bl	800521a <USB_GetMode>
 8002004:	4603      	mov	r3, r0
 8002006:	2b01      	cmp	r3, #1
 8002008:	f040 80f6 	bne.w	80021f8 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f003 f8ef 	bl	80051f4 <USB_ReadInterrupts>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 80ec 	beq.w	80021f6 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f003 f8e6 	bl	80051f4 <USB_ReadInterrupts>
 8002028:	4603      	mov	r3, r0
 800202a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800202e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002032:	d104      	bne.n	800203e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800203c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f003 f8d6 	bl	80051f4 <USB_ReadInterrupts>
 8002048:	4603      	mov	r3, r0
 800204a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800204e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002052:	d104      	bne.n	800205e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800205c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f003 f8c6 	bl	80051f4 <USB_ReadInterrupts>
 8002068:	4603      	mov	r3, r0
 800206a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800206e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002072:	d104      	bne.n	800207e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800207c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f003 f8b6 	bl	80051f4 <USB_ReadInterrupts>
 8002088:	4603      	mov	r3, r0
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b02      	cmp	r3, #2
 8002090:	d103      	bne.n	800209a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2202      	movs	r2, #2
 8002098:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f003 f8a8 	bl	80051f4 <USB_ReadInterrupts>
 80020a4:	4603      	mov	r3, r0
 80020a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020ae:	d11c      	bne.n	80020ea <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80020b8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10f      	bne.n	80020ea <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80020ca:	2110      	movs	r1, #16
 80020cc:	6938      	ldr	r0, [r7, #16]
 80020ce:	f002 ff97 	bl	8005000 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80020d2:	6938      	ldr	r0, [r7, #16]
 80020d4:	f002 ffc8 	bl	8005068 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2101      	movs	r1, #1
 80020de:	4618      	mov	r0, r3
 80020e0:	f003 f99e 	bl	8005420 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f009 faa3 	bl	800b630 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f003 f880 	bl	80051f4 <USB_ReadInterrupts>
 80020f4:	4603      	mov	r3, r0
 80020f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020fe:	d102      	bne.n	8002106 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f001 f89e 	bl	8003242 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f003 f872 	bl	80051f4 <USB_ReadInterrupts>
 8002110:	4603      	mov	r3, r0
 8002112:	f003 0308 	and.w	r3, r3, #8
 8002116:	2b08      	cmp	r3, #8
 8002118:	d106      	bne.n	8002128 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f009 fa6c 	bl	800b5f8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2208      	movs	r2, #8
 8002126:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4618      	mov	r0, r3
 800212e:	f003 f861 	bl	80051f4 <USB_ReadInterrupts>
 8002132:	4603      	mov	r3, r0
 8002134:	f003 0310 	and.w	r3, r3, #16
 8002138:	2b10      	cmp	r3, #16
 800213a:	d101      	bne.n	8002140 <HAL_HCD_IRQHandler+0x158>
 800213c:	2301      	movs	r3, #1
 800213e:	e000      	b.n	8002142 <HAL_HCD_IRQHandler+0x15a>
 8002140:	2300      	movs	r3, #0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d012      	beq.n	800216c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	699a      	ldr	r2, [r3, #24]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 0210 	bic.w	r2, r2, #16
 8002154:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 ffa1 	bl	800309e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	699a      	ldr	r2, [r3, #24]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f042 0210 	orr.w	r2, r2, #16
 800216a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f003 f83f 	bl	80051f4 <USB_ReadInterrupts>
 8002176:	4603      	mov	r3, r0
 8002178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002180:	d13a      	bne.n	80021f8 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f003 fc74 	bl	8005a74 <USB_HC_ReadInterrupt>
 800218c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800218e:	2300      	movs	r3, #0
 8002190:	617b      	str	r3, [r7, #20]
 8002192:	e025      	b.n	80021e0 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	f003 030f 	and.w	r3, r3, #15
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	fa22 f303 	lsr.w	r3, r2, r3
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d018      	beq.n	80021da <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	015a      	lsls	r2, r3, #5
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4413      	add	r3, r2
 80021b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021be:	d106      	bne.n	80021ce <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	4619      	mov	r1, r3
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 f8ab 	bl	8002322 <HCD_HC_IN_IRQHandler>
 80021cc:	e005      	b.n	80021da <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	4619      	mov	r1, r3
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 fbf9 	bl	80029cc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	3301      	adds	r3, #1
 80021de:	617b      	str	r3, [r7, #20]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	697a      	ldr	r2, [r7, #20]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d3d4      	bcc.n	8002194 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021f2:	615a      	str	r2, [r3, #20]
 80021f4:	e000      	b.n	80021f8 <HAL_HCD_IRQHandler+0x210>
      return;
 80021f6:	bf00      	nop
    }
  }
}
 80021f8:	3718      	adds	r7, #24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b082      	sub	sp, #8
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800220c:	2b01      	cmp	r3, #1
 800220e:	d101      	bne.n	8002214 <HAL_HCD_Start+0x16>
 8002210:	2302      	movs	r3, #2
 8002212:	e013      	b.n	800223c <HAL_HCD_Start+0x3e>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2101      	movs	r1, #1
 8002222:	4618      	mov	r0, r3
 8002224:	f003 f960 	bl	80054e8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4618      	mov	r0, r3
 800222e:	f002 fe78 	bl	8004f22 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002252:	2b01      	cmp	r3, #1
 8002254:	d101      	bne.n	800225a <HAL_HCD_Stop+0x16>
 8002256:	2302      	movs	r3, #2
 8002258:	e00d      	b.n	8002276 <HAL_HCD_Stop+0x32>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f003 fd4e 	bl	8005d08 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b082      	sub	sp, #8
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4618      	mov	r0, r3
 800228c:	f003 f902 	bl	8005494 <USB_ResetPort>
 8002290:	4603      	mov	r3, r0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800229a:	b480      	push	{r7}
 800229c:	b083      	sub	sp, #12
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
 80022a2:	460b      	mov	r3, r1
 80022a4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80022a6:	78fb      	ldrb	r3, [r7, #3]
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	212c      	movs	r1, #44	; 0x2c
 80022ac:	fb01 f303 	mul.w	r3, r1, r3
 80022b0:	4413      	add	r3, r2
 80022b2:	3360      	adds	r3, #96	; 0x60
 80022b4:	781b      	ldrb	r3, [r3, #0]
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80022c2:	b480      	push	{r7}
 80022c4:	b083      	sub	sp, #12
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
 80022ca:	460b      	mov	r3, r1
 80022cc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80022ce:	78fb      	ldrb	r3, [r7, #3]
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	212c      	movs	r1, #44	; 0x2c
 80022d4:	fb01 f303 	mul.w	r3, r1, r3
 80022d8:	4413      	add	r3, r2
 80022da:	3350      	adds	r3, #80	; 0x50
 80022dc:	681b      	ldr	r3, [r3, #0]
}
 80022de:	4618      	mov	r0, r3
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b082      	sub	sp, #8
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f003 f946 	bl	8005588 <USB_GetCurrentFrame>
 80022fc:	4603      	mov	r3, r0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b082      	sub	sp, #8
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f003 f921 	bl	800555a <USB_GetHostSpeed>
 8002318:	4603      	mov	r3, r0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b086      	sub	sp, #24
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
 800232a:	460b      	mov	r3, r1
 800232c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002338:	78fb      	ldrb	r3, [r7, #3]
 800233a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	015a      	lsls	r2, r3, #5
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	4413      	add	r3, r2
 8002344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 0304 	and.w	r3, r3, #4
 800234e:	2b04      	cmp	r3, #4
 8002350:	d11a      	bne.n	8002388 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	015a      	lsls	r2, r3, #5
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	4413      	add	r3, r2
 800235a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800235e:	461a      	mov	r2, r3
 8002360:	2304      	movs	r3, #4
 8002362:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	212c      	movs	r1, #44	; 0x2c
 800236a:	fb01 f303 	mul.w	r3, r1, r3
 800236e:	4413      	add	r3, r2
 8002370:	3361      	adds	r3, #97	; 0x61
 8002372:	2206      	movs	r2, #6
 8002374:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	b2d2      	uxtb	r2, r2
 800237e:	4611      	mov	r1, r2
 8002380:	4618      	mov	r0, r3
 8002382:	f003 fb88 	bl	8005a96 <USB_HC_Halt>
 8002386:	e0af      	b.n	80024e8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	015a      	lsls	r2, r3, #5
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	4413      	add	r3, r2
 8002390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800239e:	d11b      	bne.n	80023d8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	015a      	lsls	r2, r3, #5
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	4413      	add	r3, r2
 80023a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ac:	461a      	mov	r2, r3
 80023ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	212c      	movs	r1, #44	; 0x2c
 80023ba:	fb01 f303 	mul.w	r3, r1, r3
 80023be:	4413      	add	r3, r2
 80023c0:	3361      	adds	r3, #97	; 0x61
 80023c2:	2207      	movs	r2, #7
 80023c4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	4611      	mov	r1, r2
 80023d0:	4618      	mov	r0, r3
 80023d2:	f003 fb60 	bl	8005a96 <USB_HC_Halt>
 80023d6:	e087      	b.n	80024e8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	015a      	lsls	r2, r3, #5
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	4413      	add	r3, r2
 80023e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 0320 	and.w	r3, r3, #32
 80023ea:	2b20      	cmp	r3, #32
 80023ec:	d109      	bne.n	8002402 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	015a      	lsls	r2, r3, #5
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	4413      	add	r3, r2
 80023f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023fa:	461a      	mov	r2, r3
 80023fc:	2320      	movs	r3, #32
 80023fe:	6093      	str	r3, [r2, #8]
 8002400:	e072      	b.n	80024e8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	015a      	lsls	r2, r3, #5
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	4413      	add	r3, r2
 800240a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f003 0308 	and.w	r3, r3, #8
 8002414:	2b08      	cmp	r3, #8
 8002416:	d11a      	bne.n	800244e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	015a      	lsls	r2, r3, #5
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	4413      	add	r3, r2
 8002420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002424:	461a      	mov	r2, r3
 8002426:	2308      	movs	r3, #8
 8002428:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	212c      	movs	r1, #44	; 0x2c
 8002430:	fb01 f303 	mul.w	r3, r1, r3
 8002434:	4413      	add	r3, r2
 8002436:	3361      	adds	r3, #97	; 0x61
 8002438:	2205      	movs	r2, #5
 800243a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	b2d2      	uxtb	r2, r2
 8002444:	4611      	mov	r1, r2
 8002446:	4618      	mov	r0, r3
 8002448:	f003 fb25 	bl	8005a96 <USB_HC_Halt>
 800244c:	e04c      	b.n	80024e8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	015a      	lsls	r2, r3, #5
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	4413      	add	r3, r2
 8002456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002460:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002464:	d11b      	bne.n	800249e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	015a      	lsls	r2, r3, #5
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	4413      	add	r3, r2
 800246e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002472:	461a      	mov	r2, r3
 8002474:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002478:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	212c      	movs	r1, #44	; 0x2c
 8002480:	fb01 f303 	mul.w	r3, r1, r3
 8002484:	4413      	add	r3, r2
 8002486:	3361      	adds	r3, #97	; 0x61
 8002488:	2208      	movs	r2, #8
 800248a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	4611      	mov	r1, r2
 8002496:	4618      	mov	r0, r3
 8002498:	f003 fafd 	bl	8005a96 <USB_HC_Halt>
 800249c:	e024      	b.n	80024e8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	015a      	lsls	r2, r3, #5
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	4413      	add	r3, r2
 80024a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024b0:	2b80      	cmp	r3, #128	; 0x80
 80024b2:	d119      	bne.n	80024e8 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	015a      	lsls	r2, r3, #5
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	4413      	add	r3, r2
 80024bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c0:	461a      	mov	r2, r3
 80024c2:	2380      	movs	r3, #128	; 0x80
 80024c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	212c      	movs	r1, #44	; 0x2c
 80024cc:	fb01 f303 	mul.w	r3, r1, r3
 80024d0:	4413      	add	r3, r2
 80024d2:	3361      	adds	r3, #97	; 0x61
 80024d4:	2206      	movs	r2, #6
 80024d6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	b2d2      	uxtb	r2, r2
 80024e0:	4611      	mov	r1, r2
 80024e2:	4618      	mov	r0, r3
 80024e4:	f003 fad7 	bl	8005a96 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	015a      	lsls	r2, r3, #5
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	4413      	add	r3, r2
 80024f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024fe:	d112      	bne.n	8002526 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	4611      	mov	r1, r2
 800250a:	4618      	mov	r0, r3
 800250c:	f003 fac3 	bl	8005a96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	015a      	lsls	r2, r3, #5
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	4413      	add	r3, r2
 8002518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800251c:	461a      	mov	r2, r3
 800251e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002522:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002524:	e24e      	b.n	80029c4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	015a      	lsls	r2, r3, #5
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	4413      	add	r3, r2
 800252e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b01      	cmp	r3, #1
 800253a:	f040 80df 	bne.w	80026fc <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d019      	beq.n	800257a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	212c      	movs	r1, #44	; 0x2c
 800254c:	fb01 f303 	mul.w	r3, r1, r3
 8002550:	4413      	add	r3, r2
 8002552:	3348      	adds	r3, #72	; 0x48
 8002554:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	0159      	lsls	r1, r3, #5
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	440b      	add	r3, r1
 800255e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002568:	1ad2      	subs	r2, r2, r3
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	202c      	movs	r0, #44	; 0x2c
 8002570:	fb00 f303 	mul.w	r3, r0, r3
 8002574:	440b      	add	r3, r1
 8002576:	3350      	adds	r3, #80	; 0x50
 8002578:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	212c      	movs	r1, #44	; 0x2c
 8002580:	fb01 f303 	mul.w	r3, r1, r3
 8002584:	4413      	add	r3, r2
 8002586:	3361      	adds	r3, #97	; 0x61
 8002588:	2201      	movs	r2, #1
 800258a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	212c      	movs	r1, #44	; 0x2c
 8002592:	fb01 f303 	mul.w	r3, r1, r3
 8002596:	4413      	add	r3, r2
 8002598:	335c      	adds	r3, #92	; 0x5c
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	015a      	lsls	r2, r3, #5
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	4413      	add	r3, r2
 80025a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025aa:	461a      	mov	r2, r3
 80025ac:	2301      	movs	r3, #1
 80025ae:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	212c      	movs	r1, #44	; 0x2c
 80025b6:	fb01 f303 	mul.w	r3, r1, r3
 80025ba:	4413      	add	r3, r2
 80025bc:	333f      	adds	r3, #63	; 0x3f
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d009      	beq.n	80025d8 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	212c      	movs	r1, #44	; 0x2c
 80025ca:	fb01 f303 	mul.w	r3, r1, r3
 80025ce:	4413      	add	r3, r2
 80025d0:	333f      	adds	r3, #63	; 0x3f
 80025d2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d111      	bne.n	80025fc <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	4611      	mov	r1, r2
 80025e2:	4618      	mov	r0, r3
 80025e4:	f003 fa57 	bl	8005a96 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	015a      	lsls	r2, r3, #5
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	4413      	add	r3, r2
 80025f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f4:	461a      	mov	r2, r3
 80025f6:	2310      	movs	r3, #16
 80025f8:	6093      	str	r3, [r2, #8]
 80025fa:	e03a      	b.n	8002672 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	212c      	movs	r1, #44	; 0x2c
 8002602:	fb01 f303 	mul.w	r3, r1, r3
 8002606:	4413      	add	r3, r2
 8002608:	333f      	adds	r3, #63	; 0x3f
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b03      	cmp	r3, #3
 800260e:	d009      	beq.n	8002624 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	212c      	movs	r1, #44	; 0x2c
 8002616:	fb01 f303 	mul.w	r3, r1, r3
 800261a:	4413      	add	r3, r2
 800261c:	333f      	adds	r3, #63	; 0x3f
 800261e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002620:	2b01      	cmp	r3, #1
 8002622:	d126      	bne.n	8002672 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	015a      	lsls	r2, r3, #5
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	4413      	add	r3, r2
 800262c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	0151      	lsls	r1, r2, #5
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	440a      	add	r2, r1
 800263a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800263e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002642:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	212c      	movs	r1, #44	; 0x2c
 800264a:	fb01 f303 	mul.w	r3, r1, r3
 800264e:	4413      	add	r3, r2
 8002650:	3360      	adds	r3, #96	; 0x60
 8002652:	2201      	movs	r2, #1
 8002654:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	b2d9      	uxtb	r1, r3
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	202c      	movs	r0, #44	; 0x2c
 8002660:	fb00 f303 	mul.w	r3, r0, r3
 8002664:	4413      	add	r3, r2
 8002666:	3360      	adds	r3, #96	; 0x60
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	461a      	mov	r2, r3
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f008 ffed 	bl	800b64c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d12b      	bne.n	80026d2 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	212c      	movs	r1, #44	; 0x2c
 8002680:	fb01 f303 	mul.w	r3, r1, r3
 8002684:	4413      	add	r3, r2
 8002686:	3348      	adds	r3, #72	; 0x48
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	202c      	movs	r0, #44	; 0x2c
 8002690:	fb00 f202 	mul.w	r2, r0, r2
 8002694:	440a      	add	r2, r1
 8002696:	3240      	adds	r2, #64	; 0x40
 8002698:	8812      	ldrh	r2, [r2, #0]
 800269a:	fbb3 f3f2 	udiv	r3, r3, r2
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 818e 	beq.w	80029c4 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	212c      	movs	r1, #44	; 0x2c
 80026ae:	fb01 f303 	mul.w	r3, r1, r3
 80026b2:	4413      	add	r3, r2
 80026b4:	3354      	adds	r3, #84	; 0x54
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	f083 0301 	eor.w	r3, r3, #1
 80026bc:	b2d8      	uxtb	r0, r3
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	212c      	movs	r1, #44	; 0x2c
 80026c4:	fb01 f303 	mul.w	r3, r1, r3
 80026c8:	4413      	add	r3, r2
 80026ca:	3354      	adds	r3, #84	; 0x54
 80026cc:	4602      	mov	r2, r0
 80026ce:	701a      	strb	r2, [r3, #0]
}
 80026d0:	e178      	b.n	80029c4 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	212c      	movs	r1, #44	; 0x2c
 80026d8:	fb01 f303 	mul.w	r3, r1, r3
 80026dc:	4413      	add	r3, r2
 80026de:	3354      	adds	r3, #84	; 0x54
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	f083 0301 	eor.w	r3, r3, #1
 80026e6:	b2d8      	uxtb	r0, r3
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	212c      	movs	r1, #44	; 0x2c
 80026ee:	fb01 f303 	mul.w	r3, r1, r3
 80026f2:	4413      	add	r3, r2
 80026f4:	3354      	adds	r3, #84	; 0x54
 80026f6:	4602      	mov	r2, r0
 80026f8:	701a      	strb	r2, [r3, #0]
}
 80026fa:	e163      	b.n	80029c4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	015a      	lsls	r2, r3, #5
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	4413      	add	r3, r2
 8002704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b02      	cmp	r3, #2
 8002710:	f040 80f6 	bne.w	8002900 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	212c      	movs	r1, #44	; 0x2c
 800271a:	fb01 f303 	mul.w	r3, r1, r3
 800271e:	4413      	add	r3, r2
 8002720:	3361      	adds	r3, #97	; 0x61
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d109      	bne.n	800273c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	212c      	movs	r1, #44	; 0x2c
 800272e:	fb01 f303 	mul.w	r3, r1, r3
 8002732:	4413      	add	r3, r2
 8002734:	3360      	adds	r3, #96	; 0x60
 8002736:	2201      	movs	r2, #1
 8002738:	701a      	strb	r2, [r3, #0]
 800273a:	e0c9      	b.n	80028d0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	212c      	movs	r1, #44	; 0x2c
 8002742:	fb01 f303 	mul.w	r3, r1, r3
 8002746:	4413      	add	r3, r2
 8002748:	3361      	adds	r3, #97	; 0x61
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	2b05      	cmp	r3, #5
 800274e:	d109      	bne.n	8002764 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	212c      	movs	r1, #44	; 0x2c
 8002756:	fb01 f303 	mul.w	r3, r1, r3
 800275a:	4413      	add	r3, r2
 800275c:	3360      	adds	r3, #96	; 0x60
 800275e:	2205      	movs	r2, #5
 8002760:	701a      	strb	r2, [r3, #0]
 8002762:	e0b5      	b.n	80028d0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	212c      	movs	r1, #44	; 0x2c
 800276a:	fb01 f303 	mul.w	r3, r1, r3
 800276e:	4413      	add	r3, r2
 8002770:	3361      	adds	r3, #97	; 0x61
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	2b06      	cmp	r3, #6
 8002776:	d009      	beq.n	800278c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	212c      	movs	r1, #44	; 0x2c
 800277e:	fb01 f303 	mul.w	r3, r1, r3
 8002782:	4413      	add	r3, r2
 8002784:	3361      	adds	r3, #97	; 0x61
 8002786:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002788:	2b08      	cmp	r3, #8
 800278a:	d150      	bne.n	800282e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	212c      	movs	r1, #44	; 0x2c
 8002792:	fb01 f303 	mul.w	r3, r1, r3
 8002796:	4413      	add	r3, r2
 8002798:	335c      	adds	r3, #92	; 0x5c
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	1c5a      	adds	r2, r3, #1
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	202c      	movs	r0, #44	; 0x2c
 80027a4:	fb00 f303 	mul.w	r3, r0, r3
 80027a8:	440b      	add	r3, r1
 80027aa:	335c      	adds	r3, #92	; 0x5c
 80027ac:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	212c      	movs	r1, #44	; 0x2c
 80027b4:	fb01 f303 	mul.w	r3, r1, r3
 80027b8:	4413      	add	r3, r2
 80027ba:	335c      	adds	r3, #92	; 0x5c
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d912      	bls.n	80027e8 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	212c      	movs	r1, #44	; 0x2c
 80027c8:	fb01 f303 	mul.w	r3, r1, r3
 80027cc:	4413      	add	r3, r2
 80027ce:	335c      	adds	r3, #92	; 0x5c
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	212c      	movs	r1, #44	; 0x2c
 80027da:	fb01 f303 	mul.w	r3, r1, r3
 80027de:	4413      	add	r3, r2
 80027e0:	3360      	adds	r3, #96	; 0x60
 80027e2:	2204      	movs	r2, #4
 80027e4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80027e6:	e073      	b.n	80028d0 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	212c      	movs	r1, #44	; 0x2c
 80027ee:	fb01 f303 	mul.w	r3, r1, r3
 80027f2:	4413      	add	r3, r2
 80027f4:	3360      	adds	r3, #96	; 0x60
 80027f6:	2202      	movs	r2, #2
 80027f8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	015a      	lsls	r2, r3, #5
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	4413      	add	r3, r2
 8002802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002810:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002818:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	015a      	lsls	r2, r3, #5
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	4413      	add	r3, r2
 8002822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002826:	461a      	mov	r2, r3
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800282c:	e050      	b.n	80028d0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	212c      	movs	r1, #44	; 0x2c
 8002834:	fb01 f303 	mul.w	r3, r1, r3
 8002838:	4413      	add	r3, r2
 800283a:	3361      	adds	r3, #97	; 0x61
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	2b03      	cmp	r3, #3
 8002840:	d122      	bne.n	8002888 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	212c      	movs	r1, #44	; 0x2c
 8002848:	fb01 f303 	mul.w	r3, r1, r3
 800284c:	4413      	add	r3, r2
 800284e:	3360      	adds	r3, #96	; 0x60
 8002850:	2202      	movs	r2, #2
 8002852:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	015a      	lsls	r2, r3, #5
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	4413      	add	r3, r2
 800285c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800286a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002872:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	015a      	lsls	r2, r3, #5
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	4413      	add	r3, r2
 800287c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002880:	461a      	mov	r2, r3
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	e023      	b.n	80028d0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	212c      	movs	r1, #44	; 0x2c
 800288e:	fb01 f303 	mul.w	r3, r1, r3
 8002892:	4413      	add	r3, r2
 8002894:	3361      	adds	r3, #97	; 0x61
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	2b07      	cmp	r3, #7
 800289a:	d119      	bne.n	80028d0 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	212c      	movs	r1, #44	; 0x2c
 80028a2:	fb01 f303 	mul.w	r3, r1, r3
 80028a6:	4413      	add	r3, r2
 80028a8:	335c      	adds	r3, #92	; 0x5c
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	1c5a      	adds	r2, r3, #1
 80028ae:	6879      	ldr	r1, [r7, #4]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	202c      	movs	r0, #44	; 0x2c
 80028b4:	fb00 f303 	mul.w	r3, r0, r3
 80028b8:	440b      	add	r3, r1
 80028ba:	335c      	adds	r3, #92	; 0x5c
 80028bc:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	212c      	movs	r1, #44	; 0x2c
 80028c4:	fb01 f303 	mul.w	r3, r1, r3
 80028c8:	4413      	add	r3, r2
 80028ca:	3360      	adds	r3, #96	; 0x60
 80028cc:	2204      	movs	r2, #4
 80028ce:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	015a      	lsls	r2, r3, #5
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	4413      	add	r3, r2
 80028d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028dc:	461a      	mov	r2, r3
 80028de:	2302      	movs	r3, #2
 80028e0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	b2d9      	uxtb	r1, r3
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	202c      	movs	r0, #44	; 0x2c
 80028ec:	fb00 f303 	mul.w	r3, r0, r3
 80028f0:	4413      	add	r3, r2
 80028f2:	3360      	adds	r3, #96	; 0x60
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	461a      	mov	r2, r3
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f008 fea7 	bl	800b64c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80028fe:	e061      	b.n	80029c4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	015a      	lsls	r2, r3, #5
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	4413      	add	r3, r2
 8002908:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 0310 	and.w	r3, r3, #16
 8002912:	2b10      	cmp	r3, #16
 8002914:	d156      	bne.n	80029c4 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	212c      	movs	r1, #44	; 0x2c
 800291c:	fb01 f303 	mul.w	r3, r1, r3
 8002920:	4413      	add	r3, r2
 8002922:	333f      	adds	r3, #63	; 0x3f
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	2b03      	cmp	r3, #3
 8002928:	d111      	bne.n	800294e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	212c      	movs	r1, #44	; 0x2c
 8002930:	fb01 f303 	mul.w	r3, r1, r3
 8002934:	4413      	add	r3, r2
 8002936:	335c      	adds	r3, #92	; 0x5c
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	b2d2      	uxtb	r2, r2
 8002944:	4611      	mov	r1, r2
 8002946:	4618      	mov	r0, r3
 8002948:	f003 f8a5 	bl	8005a96 <USB_HC_Halt>
 800294c:	e031      	b.n	80029b2 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	212c      	movs	r1, #44	; 0x2c
 8002954:	fb01 f303 	mul.w	r3, r1, r3
 8002958:	4413      	add	r3, r2
 800295a:	333f      	adds	r3, #63	; 0x3f
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d009      	beq.n	8002976 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	212c      	movs	r1, #44	; 0x2c
 8002968:	fb01 f303 	mul.w	r3, r1, r3
 800296c:	4413      	add	r3, r2
 800296e:	333f      	adds	r3, #63	; 0x3f
 8002970:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002972:	2b02      	cmp	r3, #2
 8002974:	d11d      	bne.n	80029b2 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	212c      	movs	r1, #44	; 0x2c
 800297c:	fb01 f303 	mul.w	r3, r1, r3
 8002980:	4413      	add	r3, r2
 8002982:	335c      	adds	r3, #92	; 0x5c
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d110      	bne.n	80029b2 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	212c      	movs	r1, #44	; 0x2c
 8002996:	fb01 f303 	mul.w	r3, r1, r3
 800299a:	4413      	add	r3, r2
 800299c:	3361      	adds	r3, #97	; 0x61
 800299e:	2203      	movs	r2, #3
 80029a0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	b2d2      	uxtb	r2, r2
 80029aa:	4611      	mov	r1, r2
 80029ac:	4618      	mov	r0, r3
 80029ae:	f003 f872 	bl	8005a96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	015a      	lsls	r2, r3, #5
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	4413      	add	r3, r2
 80029ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029be:	461a      	mov	r2, r3
 80029c0:	2310      	movs	r3, #16
 80029c2:	6093      	str	r3, [r2, #8]
}
 80029c4:	bf00      	nop
 80029c6:	3718      	adds	r7, #24
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b088      	sub	sp, #32
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	460b      	mov	r3, r1
 80029d6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80029e2:	78fb      	ldrb	r3, [r7, #3]
 80029e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	015a      	lsls	r2, r3, #5
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	4413      	add	r3, r2
 80029ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	2b04      	cmp	r3, #4
 80029fa:	d11a      	bne.n	8002a32 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	015a      	lsls	r2, r3, #5
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	4413      	add	r3, r2
 8002a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a08:	461a      	mov	r2, r3
 8002a0a:	2304      	movs	r3, #4
 8002a0c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	212c      	movs	r1, #44	; 0x2c
 8002a14:	fb01 f303 	mul.w	r3, r1, r3
 8002a18:	4413      	add	r3, r2
 8002a1a:	3361      	adds	r3, #97	; 0x61
 8002a1c:	2206      	movs	r2, #6
 8002a1e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	b2d2      	uxtb	r2, r2
 8002a28:	4611      	mov	r1, r2
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f003 f833 	bl	8005a96 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002a30:	e331      	b.n	8003096 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	015a      	lsls	r2, r3, #5
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	4413      	add	r3, r2
 8002a3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f003 0320 	and.w	r3, r3, #32
 8002a44:	2b20      	cmp	r3, #32
 8002a46:	d12e      	bne.n	8002aa6 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	015a      	lsls	r2, r3, #5
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	4413      	add	r3, r2
 8002a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a54:	461a      	mov	r2, r3
 8002a56:	2320      	movs	r3, #32
 8002a58:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	212c      	movs	r1, #44	; 0x2c
 8002a60:	fb01 f303 	mul.w	r3, r1, r3
 8002a64:	4413      	add	r3, r2
 8002a66:	333d      	adds	r3, #61	; 0x3d
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	f040 8313 	bne.w	8003096 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	212c      	movs	r1, #44	; 0x2c
 8002a76:	fb01 f303 	mul.w	r3, r1, r3
 8002a7a:	4413      	add	r3, r2
 8002a7c:	333d      	adds	r3, #61	; 0x3d
 8002a7e:	2200      	movs	r2, #0
 8002a80:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	212c      	movs	r1, #44	; 0x2c
 8002a88:	fb01 f303 	mul.w	r3, r1, r3
 8002a8c:	4413      	add	r3, r2
 8002a8e:	3360      	adds	r3, #96	; 0x60
 8002a90:	2202      	movs	r2, #2
 8002a92:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	697a      	ldr	r2, [r7, #20]
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	4611      	mov	r1, r2
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f002 fff9 	bl	8005a96 <USB_HC_Halt>
}
 8002aa4:	e2f7      	b.n	8003096 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	015a      	lsls	r2, r3, #5
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	4413      	add	r3, r2
 8002aae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ab8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002abc:	d112      	bne.n	8002ae4 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	015a      	lsls	r2, r3, #5
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aca:	461a      	mov	r2, r3
 8002acc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ad0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	b2d2      	uxtb	r2, r2
 8002ada:	4611      	mov	r1, r2
 8002adc:	4618      	mov	r0, r3
 8002ade:	f002 ffda 	bl	8005a96 <USB_HC_Halt>
}
 8002ae2:	e2d8      	b.n	8003096 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	015a      	lsls	r2, r3, #5
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	4413      	add	r3, r2
 8002aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d140      	bne.n	8002b7c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	212c      	movs	r1, #44	; 0x2c
 8002b00:	fb01 f303 	mul.w	r3, r1, r3
 8002b04:	4413      	add	r3, r2
 8002b06:	335c      	adds	r3, #92	; 0x5c
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	015a      	lsls	r2, r3, #5
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	4413      	add	r3, r2
 8002b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1e:	2b40      	cmp	r3, #64	; 0x40
 8002b20:	d111      	bne.n	8002b46 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	212c      	movs	r1, #44	; 0x2c
 8002b28:	fb01 f303 	mul.w	r3, r1, r3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	333d      	adds	r3, #61	; 0x3d
 8002b30:	2201      	movs	r2, #1
 8002b32:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	015a      	lsls	r2, r3, #5
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b40:	461a      	mov	r2, r3
 8002b42:	2340      	movs	r3, #64	; 0x40
 8002b44:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	015a      	lsls	r2, r3, #5
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b52:	461a      	mov	r2, r3
 8002b54:	2301      	movs	r3, #1
 8002b56:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	212c      	movs	r1, #44	; 0x2c
 8002b5e:	fb01 f303 	mul.w	r3, r1, r3
 8002b62:	4413      	add	r3, r2
 8002b64:	3361      	adds	r3, #97	; 0x61
 8002b66:	2201      	movs	r2, #1
 8002b68:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	b2d2      	uxtb	r2, r2
 8002b72:	4611      	mov	r1, r2
 8002b74:	4618      	mov	r0, r3
 8002b76:	f002 ff8e 	bl	8005a96 <USB_HC_Halt>
}
 8002b7a:	e28c      	b.n	8003096 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	015a      	lsls	r2, r3, #5
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	4413      	add	r3, r2
 8002b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b8e:	2b40      	cmp	r3, #64	; 0x40
 8002b90:	d12c      	bne.n	8002bec <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	212c      	movs	r1, #44	; 0x2c
 8002b98:	fb01 f303 	mul.w	r3, r1, r3
 8002b9c:	4413      	add	r3, r2
 8002b9e:	3361      	adds	r3, #97	; 0x61
 8002ba0:	2204      	movs	r2, #4
 8002ba2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	212c      	movs	r1, #44	; 0x2c
 8002baa:	fb01 f303 	mul.w	r3, r1, r3
 8002bae:	4413      	add	r3, r2
 8002bb0:	333d      	adds	r3, #61	; 0x3d
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	212c      	movs	r1, #44	; 0x2c
 8002bbc:	fb01 f303 	mul.w	r3, r1, r3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	335c      	adds	r3, #92	; 0x5c
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	b2d2      	uxtb	r2, r2
 8002bd0:	4611      	mov	r1, r2
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f002 ff5f 	bl	8005a96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	015a      	lsls	r2, r3, #5
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	4413      	add	r3, r2
 8002be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be4:	461a      	mov	r2, r3
 8002be6:	2340      	movs	r3, #64	; 0x40
 8002be8:	6093      	str	r3, [r2, #8]
}
 8002bea:	e254      	b.n	8003096 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	015a      	lsls	r2, r3, #5
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f003 0308 	and.w	r3, r3, #8
 8002bfe:	2b08      	cmp	r3, #8
 8002c00:	d11a      	bne.n	8002c38 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	015a      	lsls	r2, r3, #5
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	4413      	add	r3, r2
 8002c0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c0e:	461a      	mov	r2, r3
 8002c10:	2308      	movs	r3, #8
 8002c12:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	212c      	movs	r1, #44	; 0x2c
 8002c1a:	fb01 f303 	mul.w	r3, r1, r3
 8002c1e:	4413      	add	r3, r2
 8002c20:	3361      	adds	r3, #97	; 0x61
 8002c22:	2205      	movs	r2, #5
 8002c24:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	b2d2      	uxtb	r2, r2
 8002c2e:	4611      	mov	r1, r2
 8002c30:	4618      	mov	r0, r3
 8002c32:	f002 ff30 	bl	8005a96 <USB_HC_Halt>
}
 8002c36:	e22e      	b.n	8003096 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	015a      	lsls	r2, r3, #5
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	4413      	add	r3, r2
 8002c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 0310 	and.w	r3, r3, #16
 8002c4a:	2b10      	cmp	r3, #16
 8002c4c:	d140      	bne.n	8002cd0 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	212c      	movs	r1, #44	; 0x2c
 8002c54:	fb01 f303 	mul.w	r3, r1, r3
 8002c58:	4413      	add	r3, r2
 8002c5a:	335c      	adds	r3, #92	; 0x5c
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	212c      	movs	r1, #44	; 0x2c
 8002c66:	fb01 f303 	mul.w	r3, r1, r3
 8002c6a:	4413      	add	r3, r2
 8002c6c:	3361      	adds	r3, #97	; 0x61
 8002c6e:	2203      	movs	r2, #3
 8002c70:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	212c      	movs	r1, #44	; 0x2c
 8002c78:	fb01 f303 	mul.w	r3, r1, r3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	333d      	adds	r3, #61	; 0x3d
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d112      	bne.n	8002cac <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	212c      	movs	r1, #44	; 0x2c
 8002c8c:	fb01 f303 	mul.w	r3, r1, r3
 8002c90:	4413      	add	r3, r2
 8002c92:	333c      	adds	r3, #60	; 0x3c
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d108      	bne.n	8002cac <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	212c      	movs	r1, #44	; 0x2c
 8002ca0:	fb01 f303 	mul.w	r3, r1, r3
 8002ca4:	4413      	add	r3, r2
 8002ca6:	333d      	adds	r3, #61	; 0x3d
 8002ca8:	2201      	movs	r2, #1
 8002caa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	4611      	mov	r1, r2
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f002 feed 	bl	8005a96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	015a      	lsls	r2, r3, #5
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc8:	461a      	mov	r2, r3
 8002cca:	2310      	movs	r3, #16
 8002ccc:	6093      	str	r3, [r2, #8]
}
 8002cce:	e1e2      	b.n	8003096 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	015a      	lsls	r2, r3, #5
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce2:	2b80      	cmp	r3, #128	; 0x80
 8002ce4:	d164      	bne.n	8002db0 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d111      	bne.n	8002d12 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	212c      	movs	r1, #44	; 0x2c
 8002cf4:	fb01 f303 	mul.w	r3, r1, r3
 8002cf8:	4413      	add	r3, r2
 8002cfa:	3361      	adds	r3, #97	; 0x61
 8002cfc:	2206      	movs	r2, #6
 8002cfe:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	b2d2      	uxtb	r2, r2
 8002d08:	4611      	mov	r1, r2
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f002 fec3 	bl	8005a96 <USB_HC_Halt>
 8002d10:	e044      	b.n	8002d9c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	212c      	movs	r1, #44	; 0x2c
 8002d18:	fb01 f303 	mul.w	r3, r1, r3
 8002d1c:	4413      	add	r3, r2
 8002d1e:	335c      	adds	r3, #92	; 0x5c
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	1c5a      	adds	r2, r3, #1
 8002d24:	6879      	ldr	r1, [r7, #4]
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	202c      	movs	r0, #44	; 0x2c
 8002d2a:	fb00 f303 	mul.w	r3, r0, r3
 8002d2e:	440b      	add	r3, r1
 8002d30:	335c      	adds	r3, #92	; 0x5c
 8002d32:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	212c      	movs	r1, #44	; 0x2c
 8002d3a:	fb01 f303 	mul.w	r3, r1, r3
 8002d3e:	4413      	add	r3, r2
 8002d40:	335c      	adds	r3, #92	; 0x5c
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d920      	bls.n	8002d8a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	212c      	movs	r1, #44	; 0x2c
 8002d4e:	fb01 f303 	mul.w	r3, r1, r3
 8002d52:	4413      	add	r3, r2
 8002d54:	335c      	adds	r3, #92	; 0x5c
 8002d56:	2200      	movs	r2, #0
 8002d58:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	212c      	movs	r1, #44	; 0x2c
 8002d60:	fb01 f303 	mul.w	r3, r1, r3
 8002d64:	4413      	add	r3, r2
 8002d66:	3360      	adds	r3, #96	; 0x60
 8002d68:	2204      	movs	r2, #4
 8002d6a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	b2d9      	uxtb	r1, r3
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	202c      	movs	r0, #44	; 0x2c
 8002d76:	fb00 f303 	mul.w	r3, r0, r3
 8002d7a:	4413      	add	r3, r2
 8002d7c:	3360      	adds	r3, #96	; 0x60
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	461a      	mov	r2, r3
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f008 fc62 	bl	800b64c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002d88:	e008      	b.n	8002d9c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	212c      	movs	r1, #44	; 0x2c
 8002d90:	fb01 f303 	mul.w	r3, r1, r3
 8002d94:	4413      	add	r3, r2
 8002d96:	3360      	adds	r3, #96	; 0x60
 8002d98:	2202      	movs	r2, #2
 8002d9a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	015a      	lsls	r2, r3, #5
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	4413      	add	r3, r2
 8002da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da8:	461a      	mov	r2, r3
 8002daa:	2380      	movs	r3, #128	; 0x80
 8002dac:	6093      	str	r3, [r2, #8]
}
 8002dae:	e172      	b.n	8003096 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	015a      	lsls	r2, r3, #5
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	4413      	add	r3, r2
 8002db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dc6:	d11b      	bne.n	8002e00 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	212c      	movs	r1, #44	; 0x2c
 8002dce:	fb01 f303 	mul.w	r3, r1, r3
 8002dd2:	4413      	add	r3, r2
 8002dd4:	3361      	adds	r3, #97	; 0x61
 8002dd6:	2208      	movs	r2, #8
 8002dd8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	b2d2      	uxtb	r2, r2
 8002de2:	4611      	mov	r1, r2
 8002de4:	4618      	mov	r0, r3
 8002de6:	f002 fe56 	bl	8005a96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	015a      	lsls	r2, r3, #5
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	4413      	add	r3, r2
 8002df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df6:	461a      	mov	r2, r3
 8002df8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dfc:	6093      	str	r3, [r2, #8]
}
 8002dfe:	e14a      	b.n	8003096 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	015a      	lsls	r2, r3, #5
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	4413      	add	r3, r2
 8002e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	f040 813f 	bne.w	8003096 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	212c      	movs	r1, #44	; 0x2c
 8002e1e:	fb01 f303 	mul.w	r3, r1, r3
 8002e22:	4413      	add	r3, r2
 8002e24:	3361      	adds	r3, #97	; 0x61
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d17d      	bne.n	8002f28 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	212c      	movs	r1, #44	; 0x2c
 8002e32:	fb01 f303 	mul.w	r3, r1, r3
 8002e36:	4413      	add	r3, r2
 8002e38:	3360      	adds	r3, #96	; 0x60
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	212c      	movs	r1, #44	; 0x2c
 8002e44:	fb01 f303 	mul.w	r3, r1, r3
 8002e48:	4413      	add	r3, r2
 8002e4a:	333f      	adds	r3, #63	; 0x3f
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d00a      	beq.n	8002e68 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	212c      	movs	r1, #44	; 0x2c
 8002e58:	fb01 f303 	mul.w	r3, r1, r3
 8002e5c:	4413      	add	r3, r2
 8002e5e:	333f      	adds	r3, #63	; 0x3f
 8002e60:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002e62:	2b03      	cmp	r3, #3
 8002e64:	f040 8100 	bne.w	8003068 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d113      	bne.n	8002e98 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	212c      	movs	r1, #44	; 0x2c
 8002e76:	fb01 f303 	mul.w	r3, r1, r3
 8002e7a:	4413      	add	r3, r2
 8002e7c:	3355      	adds	r3, #85	; 0x55
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	f083 0301 	eor.w	r3, r3, #1
 8002e84:	b2d8      	uxtb	r0, r3
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	212c      	movs	r1, #44	; 0x2c
 8002e8c:	fb01 f303 	mul.w	r3, r1, r3
 8002e90:	4413      	add	r3, r2
 8002e92:	3355      	adds	r3, #85	; 0x55
 8002e94:	4602      	mov	r2, r0
 8002e96:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	f040 80e3 	bne.w	8003068 <HCD_HC_OUT_IRQHandler+0x69c>
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	212c      	movs	r1, #44	; 0x2c
 8002ea8:	fb01 f303 	mul.w	r3, r1, r3
 8002eac:	4413      	add	r3, r2
 8002eae:	334c      	adds	r3, #76	; 0x4c
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f000 80d8 	beq.w	8003068 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	212c      	movs	r1, #44	; 0x2c
 8002ebe:	fb01 f303 	mul.w	r3, r1, r3
 8002ec2:	4413      	add	r3, r2
 8002ec4:	334c      	adds	r3, #76	; 0x4c
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6879      	ldr	r1, [r7, #4]
 8002eca:	697a      	ldr	r2, [r7, #20]
 8002ecc:	202c      	movs	r0, #44	; 0x2c
 8002ece:	fb00 f202 	mul.w	r2, r0, r2
 8002ed2:	440a      	add	r2, r1
 8002ed4:	3240      	adds	r2, #64	; 0x40
 8002ed6:	8812      	ldrh	r2, [r2, #0]
 8002ed8:	4413      	add	r3, r2
 8002eda:	3b01      	subs	r3, #1
 8002edc:	6879      	ldr	r1, [r7, #4]
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	202c      	movs	r0, #44	; 0x2c
 8002ee2:	fb00 f202 	mul.w	r2, r0, r2
 8002ee6:	440a      	add	r2, r1
 8002ee8:	3240      	adds	r2, #64	; 0x40
 8002eea:	8812      	ldrh	r2, [r2, #0]
 8002eec:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ef0:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f000 80b5 	beq.w	8003068 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	212c      	movs	r1, #44	; 0x2c
 8002f04:	fb01 f303 	mul.w	r3, r1, r3
 8002f08:	4413      	add	r3, r2
 8002f0a:	3355      	adds	r3, #85	; 0x55
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	f083 0301 	eor.w	r3, r3, #1
 8002f12:	b2d8      	uxtb	r0, r3
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	212c      	movs	r1, #44	; 0x2c
 8002f1a:	fb01 f303 	mul.w	r3, r1, r3
 8002f1e:	4413      	add	r3, r2
 8002f20:	3355      	adds	r3, #85	; 0x55
 8002f22:	4602      	mov	r2, r0
 8002f24:	701a      	strb	r2, [r3, #0]
 8002f26:	e09f      	b.n	8003068 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	212c      	movs	r1, #44	; 0x2c
 8002f2e:	fb01 f303 	mul.w	r3, r1, r3
 8002f32:	4413      	add	r3, r2
 8002f34:	3361      	adds	r3, #97	; 0x61
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	2b03      	cmp	r3, #3
 8002f3a:	d109      	bne.n	8002f50 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	212c      	movs	r1, #44	; 0x2c
 8002f42:	fb01 f303 	mul.w	r3, r1, r3
 8002f46:	4413      	add	r3, r2
 8002f48:	3360      	adds	r3, #96	; 0x60
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	701a      	strb	r2, [r3, #0]
 8002f4e:	e08b      	b.n	8003068 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	212c      	movs	r1, #44	; 0x2c
 8002f56:	fb01 f303 	mul.w	r3, r1, r3
 8002f5a:	4413      	add	r3, r2
 8002f5c:	3361      	adds	r3, #97	; 0x61
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	2b04      	cmp	r3, #4
 8002f62:	d109      	bne.n	8002f78 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	212c      	movs	r1, #44	; 0x2c
 8002f6a:	fb01 f303 	mul.w	r3, r1, r3
 8002f6e:	4413      	add	r3, r2
 8002f70:	3360      	adds	r3, #96	; 0x60
 8002f72:	2202      	movs	r2, #2
 8002f74:	701a      	strb	r2, [r3, #0]
 8002f76:	e077      	b.n	8003068 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	212c      	movs	r1, #44	; 0x2c
 8002f7e:	fb01 f303 	mul.w	r3, r1, r3
 8002f82:	4413      	add	r3, r2
 8002f84:	3361      	adds	r3, #97	; 0x61
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	2b05      	cmp	r3, #5
 8002f8a:	d109      	bne.n	8002fa0 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	212c      	movs	r1, #44	; 0x2c
 8002f92:	fb01 f303 	mul.w	r3, r1, r3
 8002f96:	4413      	add	r3, r2
 8002f98:	3360      	adds	r3, #96	; 0x60
 8002f9a:	2205      	movs	r2, #5
 8002f9c:	701a      	strb	r2, [r3, #0]
 8002f9e:	e063      	b.n	8003068 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	212c      	movs	r1, #44	; 0x2c
 8002fa6:	fb01 f303 	mul.w	r3, r1, r3
 8002faa:	4413      	add	r3, r2
 8002fac:	3361      	adds	r3, #97	; 0x61
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	2b06      	cmp	r3, #6
 8002fb2:	d009      	beq.n	8002fc8 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	212c      	movs	r1, #44	; 0x2c
 8002fba:	fb01 f303 	mul.w	r3, r1, r3
 8002fbe:	4413      	add	r3, r2
 8002fc0:	3361      	adds	r3, #97	; 0x61
 8002fc2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002fc4:	2b08      	cmp	r3, #8
 8002fc6:	d14f      	bne.n	8003068 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	212c      	movs	r1, #44	; 0x2c
 8002fce:	fb01 f303 	mul.w	r3, r1, r3
 8002fd2:	4413      	add	r3, r2
 8002fd4:	335c      	adds	r3, #92	; 0x5c
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	1c5a      	adds	r2, r3, #1
 8002fda:	6879      	ldr	r1, [r7, #4]
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	202c      	movs	r0, #44	; 0x2c
 8002fe0:	fb00 f303 	mul.w	r3, r0, r3
 8002fe4:	440b      	add	r3, r1
 8002fe6:	335c      	adds	r3, #92	; 0x5c
 8002fe8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	212c      	movs	r1, #44	; 0x2c
 8002ff0:	fb01 f303 	mul.w	r3, r1, r3
 8002ff4:	4413      	add	r3, r2
 8002ff6:	335c      	adds	r3, #92	; 0x5c
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d912      	bls.n	8003024 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	212c      	movs	r1, #44	; 0x2c
 8003004:	fb01 f303 	mul.w	r3, r1, r3
 8003008:	4413      	add	r3, r2
 800300a:	335c      	adds	r3, #92	; 0x5c
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	212c      	movs	r1, #44	; 0x2c
 8003016:	fb01 f303 	mul.w	r3, r1, r3
 800301a:	4413      	add	r3, r2
 800301c:	3360      	adds	r3, #96	; 0x60
 800301e:	2204      	movs	r2, #4
 8003020:	701a      	strb	r2, [r3, #0]
 8003022:	e021      	b.n	8003068 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	212c      	movs	r1, #44	; 0x2c
 800302a:	fb01 f303 	mul.w	r3, r1, r3
 800302e:	4413      	add	r3, r2
 8003030:	3360      	adds	r3, #96	; 0x60
 8003032:	2202      	movs	r2, #2
 8003034:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	015a      	lsls	r2, r3, #5
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	4413      	add	r3, r2
 800303e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800304c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003054:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	015a      	lsls	r2, r3, #5
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	4413      	add	r3, r2
 800305e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003062:	461a      	mov	r2, r3
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	015a      	lsls	r2, r3, #5
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	4413      	add	r3, r2
 8003070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003074:	461a      	mov	r2, r3
 8003076:	2302      	movs	r3, #2
 8003078:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	b2d9      	uxtb	r1, r3
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	202c      	movs	r0, #44	; 0x2c
 8003084:	fb00 f303 	mul.w	r3, r0, r3
 8003088:	4413      	add	r3, r2
 800308a:	3360      	adds	r3, #96	; 0x60
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	461a      	mov	r2, r3
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f008 fadb 	bl	800b64c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003096:	bf00      	nop
 8003098:	3720      	adds	r7, #32
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b08a      	sub	sp, #40	; 0x28
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ae:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	0c5b      	lsrs	r3, r3, #17
 80030c4:	f003 030f 	and.w	r3, r3, #15
 80030c8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	091b      	lsrs	r3, r3, #4
 80030ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030d2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d004      	beq.n	80030e4 <HCD_RXQLVL_IRQHandler+0x46>
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	2b05      	cmp	r3, #5
 80030de:	f000 80a9 	beq.w	8003234 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80030e2:	e0aa      	b.n	800323a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f000 80a6 	beq.w	8003238 <HCD_RXQLVL_IRQHandler+0x19a>
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	212c      	movs	r1, #44	; 0x2c
 80030f2:	fb01 f303 	mul.w	r3, r1, r3
 80030f6:	4413      	add	r3, r2
 80030f8:	3344      	adds	r3, #68	; 0x44
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 809b 	beq.w	8003238 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	212c      	movs	r1, #44	; 0x2c
 8003108:	fb01 f303 	mul.w	r3, r1, r3
 800310c:	4413      	add	r3, r2
 800310e:	3350      	adds	r3, #80	; 0x50
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	441a      	add	r2, r3
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	202c      	movs	r0, #44	; 0x2c
 800311c:	fb00 f303 	mul.w	r3, r0, r3
 8003120:	440b      	add	r3, r1
 8003122:	334c      	adds	r3, #76	; 0x4c
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	429a      	cmp	r2, r3
 8003128:	d87a      	bhi.n	8003220 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6818      	ldr	r0, [r3, #0]
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	212c      	movs	r1, #44	; 0x2c
 8003134:	fb01 f303 	mul.w	r3, r1, r3
 8003138:	4413      	add	r3, r2
 800313a:	3344      	adds	r3, #68	; 0x44
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	b292      	uxth	r2, r2
 8003142:	4619      	mov	r1, r3
 8003144:	f001 fffe 	bl	8005144 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	212c      	movs	r1, #44	; 0x2c
 800314e:	fb01 f303 	mul.w	r3, r1, r3
 8003152:	4413      	add	r3, r2
 8003154:	3344      	adds	r3, #68	; 0x44
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	441a      	add	r2, r3
 800315c:	6879      	ldr	r1, [r7, #4]
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	202c      	movs	r0, #44	; 0x2c
 8003162:	fb00 f303 	mul.w	r3, r0, r3
 8003166:	440b      	add	r3, r1
 8003168:	3344      	adds	r3, #68	; 0x44
 800316a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	212c      	movs	r1, #44	; 0x2c
 8003172:	fb01 f303 	mul.w	r3, r1, r3
 8003176:	4413      	add	r3, r2
 8003178:	3350      	adds	r3, #80	; 0x50
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	441a      	add	r2, r3
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	202c      	movs	r0, #44	; 0x2c
 8003186:	fb00 f303 	mul.w	r3, r0, r3
 800318a:	440b      	add	r3, r1
 800318c:	3350      	adds	r3, #80	; 0x50
 800318e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	015a      	lsls	r2, r3, #5
 8003194:	6a3b      	ldr	r3, [r7, #32]
 8003196:	4413      	add	r3, r2
 8003198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	0cdb      	lsrs	r3, r3, #19
 80031a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031a4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	212c      	movs	r1, #44	; 0x2c
 80031ac:	fb01 f303 	mul.w	r3, r1, r3
 80031b0:	4413      	add	r3, r2
 80031b2:	3340      	adds	r3, #64	; 0x40
 80031b4:	881b      	ldrh	r3, [r3, #0]
 80031b6:	461a      	mov	r2, r3
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d13c      	bne.n	8003238 <HCD_RXQLVL_IRQHandler+0x19a>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d039      	beq.n	8003238 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	015a      	lsls	r2, r3, #5
 80031c8:	6a3b      	ldr	r3, [r7, #32]
 80031ca:	4413      	add	r3, r2
 80031cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80031da:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80031e2:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	015a      	lsls	r2, r3, #5
 80031e8:	6a3b      	ldr	r3, [r7, #32]
 80031ea:	4413      	add	r3, r2
 80031ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f0:	461a      	mov	r2, r3
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	212c      	movs	r1, #44	; 0x2c
 80031fc:	fb01 f303 	mul.w	r3, r1, r3
 8003200:	4413      	add	r3, r2
 8003202:	3354      	adds	r3, #84	; 0x54
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	f083 0301 	eor.w	r3, r3, #1
 800320a:	b2d8      	uxtb	r0, r3
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	212c      	movs	r1, #44	; 0x2c
 8003212:	fb01 f303 	mul.w	r3, r1, r3
 8003216:	4413      	add	r3, r2
 8003218:	3354      	adds	r3, #84	; 0x54
 800321a:	4602      	mov	r2, r0
 800321c:	701a      	strb	r2, [r3, #0]
      break;
 800321e:	e00b      	b.n	8003238 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	212c      	movs	r1, #44	; 0x2c
 8003226:	fb01 f303 	mul.w	r3, r1, r3
 800322a:	4413      	add	r3, r2
 800322c:	3360      	adds	r3, #96	; 0x60
 800322e:	2204      	movs	r2, #4
 8003230:	701a      	strb	r2, [r3, #0]
      break;
 8003232:	e001      	b.n	8003238 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003234:	bf00      	nop
 8003236:	e000      	b.n	800323a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003238:	bf00      	nop
  }
}
 800323a:	bf00      	nop
 800323c:	3728      	adds	r7, #40	; 0x28
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b086      	sub	sp, #24
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800326e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b02      	cmp	r3, #2
 8003278:	d10b      	bne.n	8003292 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	2b01      	cmp	r3, #1
 8003282:	d102      	bne.n	800328a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f008 f9c5 	bl	800b614 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	f043 0302 	orr.w	r3, r3, #2
 8003290:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f003 0308 	and.w	r3, r3, #8
 8003298:	2b08      	cmp	r3, #8
 800329a:	d132      	bne.n	8003302 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	f043 0308 	orr.w	r3, r3, #8
 80032a2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f003 0304 	and.w	r3, r3, #4
 80032aa:	2b04      	cmp	r3, #4
 80032ac:	d126      	bne.n	80032fc <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d113      	bne.n	80032de <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80032bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80032c0:	d106      	bne.n	80032d0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2102      	movs	r1, #2
 80032c8:	4618      	mov	r0, r3
 80032ca:	f002 f8a9 	bl	8005420 <USB_InitFSLSPClkSel>
 80032ce:	e011      	b.n	80032f4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2101      	movs	r1, #1
 80032d6:	4618      	mov	r0, r3
 80032d8:	f002 f8a2 	bl	8005420 <USB_InitFSLSPClkSel>
 80032dc:	e00a      	b.n	80032f4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d106      	bne.n	80032f4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032ec:	461a      	mov	r2, r3
 80032ee:	f64e 2360 	movw	r3, #60000	; 0xea60
 80032f2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f008 f9bb 	bl	800b670 <HAL_HCD_PortEnabled_Callback>
 80032fa:	e002      	b.n	8003302 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f008 f9c5 	bl	800b68c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f003 0320 	and.w	r3, r3, #32
 8003308:	2b20      	cmp	r3, #32
 800330a:	d103      	bne.n	8003314 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	f043 0320 	orr.w	r3, r3, #32
 8003312:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800331a:	461a      	mov	r2, r3
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	6013      	str	r3, [r2, #0]
}
 8003320:	bf00      	nop
 8003322:	3718      	adds	r7, #24
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e12b      	b.n	8003592 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d106      	bne.n	8003354 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7fd fe7e 	bl	8001050 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2224      	movs	r2, #36	; 0x24
 8003358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 0201 	bic.w	r2, r2, #1
 800336a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800337a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800338a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800338c:	f001 fa20 	bl	80047d0 <HAL_RCC_GetPCLK1Freq>
 8003390:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	4a81      	ldr	r2, [pc, #516]	; (800359c <HAL_I2C_Init+0x274>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d807      	bhi.n	80033ac <HAL_I2C_Init+0x84>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	4a80      	ldr	r2, [pc, #512]	; (80035a0 <HAL_I2C_Init+0x278>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	bf94      	ite	ls
 80033a4:	2301      	movls	r3, #1
 80033a6:	2300      	movhi	r3, #0
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	e006      	b.n	80033ba <HAL_I2C_Init+0x92>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	4a7d      	ldr	r2, [pc, #500]	; (80035a4 <HAL_I2C_Init+0x27c>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	bf94      	ite	ls
 80033b4:	2301      	movls	r3, #1
 80033b6:	2300      	movhi	r3, #0
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e0e7      	b.n	8003592 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	4a78      	ldr	r2, [pc, #480]	; (80035a8 <HAL_I2C_Init+0x280>)
 80033c6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ca:	0c9b      	lsrs	r3, r3, #18
 80033cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68ba      	ldr	r2, [r7, #8]
 80033de:	430a      	orrs	r2, r1
 80033e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	4a6a      	ldr	r2, [pc, #424]	; (800359c <HAL_I2C_Init+0x274>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d802      	bhi.n	80033fc <HAL_I2C_Init+0xd4>
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	3301      	adds	r3, #1
 80033fa:	e009      	b.n	8003410 <HAL_I2C_Init+0xe8>
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003402:	fb02 f303 	mul.w	r3, r2, r3
 8003406:	4a69      	ldr	r2, [pc, #420]	; (80035ac <HAL_I2C_Init+0x284>)
 8003408:	fba2 2303 	umull	r2, r3, r2, r3
 800340c:	099b      	lsrs	r3, r3, #6
 800340e:	3301      	adds	r3, #1
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	6812      	ldr	r2, [r2, #0]
 8003414:	430b      	orrs	r3, r1
 8003416:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003422:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	495c      	ldr	r1, [pc, #368]	; (800359c <HAL_I2C_Init+0x274>)
 800342c:	428b      	cmp	r3, r1
 800342e:	d819      	bhi.n	8003464 <HAL_I2C_Init+0x13c>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	1e59      	subs	r1, r3, #1
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	fbb1 f3f3 	udiv	r3, r1, r3
 800343e:	1c59      	adds	r1, r3, #1
 8003440:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003444:	400b      	ands	r3, r1
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <HAL_I2C_Init+0x138>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	1e59      	subs	r1, r3, #1
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	fbb1 f3f3 	udiv	r3, r1, r3
 8003458:	3301      	adds	r3, #1
 800345a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800345e:	e051      	b.n	8003504 <HAL_I2C_Init+0x1dc>
 8003460:	2304      	movs	r3, #4
 8003462:	e04f      	b.n	8003504 <HAL_I2C_Init+0x1dc>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d111      	bne.n	8003490 <HAL_I2C_Init+0x168>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	1e58      	subs	r0, r3, #1
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6859      	ldr	r1, [r3, #4]
 8003474:	460b      	mov	r3, r1
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	440b      	add	r3, r1
 800347a:	fbb0 f3f3 	udiv	r3, r0, r3
 800347e:	3301      	adds	r3, #1
 8003480:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003484:	2b00      	cmp	r3, #0
 8003486:	bf0c      	ite	eq
 8003488:	2301      	moveq	r3, #1
 800348a:	2300      	movne	r3, #0
 800348c:	b2db      	uxtb	r3, r3
 800348e:	e012      	b.n	80034b6 <HAL_I2C_Init+0x18e>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	1e58      	subs	r0, r3, #1
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6859      	ldr	r1, [r3, #4]
 8003498:	460b      	mov	r3, r1
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	440b      	add	r3, r1
 800349e:	0099      	lsls	r1, r3, #2
 80034a0:	440b      	add	r3, r1
 80034a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80034a6:	3301      	adds	r3, #1
 80034a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	bf0c      	ite	eq
 80034b0:	2301      	moveq	r3, #1
 80034b2:	2300      	movne	r3, #0
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <HAL_I2C_Init+0x196>
 80034ba:	2301      	movs	r3, #1
 80034bc:	e022      	b.n	8003504 <HAL_I2C_Init+0x1dc>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10e      	bne.n	80034e4 <HAL_I2C_Init+0x1bc>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	1e58      	subs	r0, r3, #1
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6859      	ldr	r1, [r3, #4]
 80034ce:	460b      	mov	r3, r1
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	440b      	add	r3, r1
 80034d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80034d8:	3301      	adds	r3, #1
 80034da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034e2:	e00f      	b.n	8003504 <HAL_I2C_Init+0x1dc>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	1e58      	subs	r0, r3, #1
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6859      	ldr	r1, [r3, #4]
 80034ec:	460b      	mov	r3, r1
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	440b      	add	r3, r1
 80034f2:	0099      	lsls	r1, r3, #2
 80034f4:	440b      	add	r3, r1
 80034f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034fa:	3301      	adds	r3, #1
 80034fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003500:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003504:	6879      	ldr	r1, [r7, #4]
 8003506:	6809      	ldr	r1, [r1, #0]
 8003508:	4313      	orrs	r3, r2
 800350a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69da      	ldr	r2, [r3, #28]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	431a      	orrs	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	430a      	orrs	r2, r1
 8003526:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003532:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	6911      	ldr	r1, [r2, #16]
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	68d2      	ldr	r2, [r2, #12]
 800353e:	4311      	orrs	r1, r2
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	6812      	ldr	r2, [r2, #0]
 8003544:	430b      	orrs	r3, r1
 8003546:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	695a      	ldr	r2, [r3, #20]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f042 0201 	orr.w	r2, r2, #1
 8003572:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2220      	movs	r2, #32
 800357e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	000186a0 	.word	0x000186a0
 80035a0:	001e847f 	.word	0x001e847f
 80035a4:	003d08ff 	.word	0x003d08ff
 80035a8:	431bde83 	.word	0x431bde83
 80035ac:	10624dd3 	.word	0x10624dd3

080035b0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b088      	sub	sp, #32
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e128      	b.n	8003814 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d109      	bne.n	80035e2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a90      	ldr	r2, [pc, #576]	; (800381c <HAL_I2S_Init+0x26c>)
 80035da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f7fd fd7f 	bl	80010e0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2202      	movs	r2, #2
 80035e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	69db      	ldr	r3, [r3, #28]
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	6812      	ldr	r2, [r2, #0]
 80035f4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80035f8:	f023 030f 	bic.w	r3, r3, #15
 80035fc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2202      	movs	r2, #2
 8003604:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	2b02      	cmp	r3, #2
 800360c:	d060      	beq.n	80036d0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d102      	bne.n	800361c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003616:	2310      	movs	r3, #16
 8003618:	617b      	str	r3, [r7, #20]
 800361a:	e001      	b.n	8003620 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800361c:	2320      	movs	r3, #32
 800361e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	2b20      	cmp	r3, #32
 8003626:	d802      	bhi.n	800362e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800362e:	2001      	movs	r0, #1
 8003630:	f001 f9c4 	bl	80049bc <HAL_RCCEx_GetPeriphCLKFreq>
 8003634:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800363e:	d125      	bne.n	800368c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d010      	beq.n	800366a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003652:	4613      	mov	r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	4413      	add	r3, r2
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	461a      	mov	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	695b      	ldr	r3, [r3, #20]
 8003660:	fbb2 f3f3 	udiv	r3, r2, r3
 8003664:	3305      	adds	r3, #5
 8003666:	613b      	str	r3, [r7, #16]
 8003668:	e01f      	b.n	80036aa <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	00db      	lsls	r3, r3, #3
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	fbb2 f2f3 	udiv	r2, r2, r3
 8003674:	4613      	mov	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4413      	add	r3, r2
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	461a      	mov	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	fbb2 f3f3 	udiv	r3, r2, r3
 8003686:	3305      	adds	r3, #5
 8003688:	613b      	str	r3, [r7, #16]
 800368a:	e00e      	b.n	80036aa <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	fbb2 f2f3 	udiv	r2, r2, r3
 8003694:	4613      	mov	r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	4413      	add	r3, r2
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	461a      	mov	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a6:	3305      	adds	r3, #5
 80036a8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	4a5c      	ldr	r2, [pc, #368]	; (8003820 <HAL_I2S_Init+0x270>)
 80036ae:	fba2 2303 	umull	r2, r3, r2, r3
 80036b2:	08db      	lsrs	r3, r3, #3
 80036b4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	085b      	lsrs	r3, r3, #1
 80036c6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	021b      	lsls	r3, r3, #8
 80036cc:	61bb      	str	r3, [r7, #24]
 80036ce:	e003      	b.n	80036d8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80036d0:	2302      	movs	r3, #2
 80036d2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d902      	bls.n	80036e4 <HAL_I2S_Init+0x134>
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	2bff      	cmp	r3, #255	; 0xff
 80036e2:	d907      	bls.n	80036f4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e8:	f043 0210 	orr.w	r2, r3, #16
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e08f      	b.n	8003814 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	691a      	ldr	r2, [r3, #16]
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	ea42 0103 	orr.w	r1, r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	69fa      	ldr	r2, [r7, #28]
 8003704:	430a      	orrs	r2, r1
 8003706:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003712:	f023 030f 	bic.w	r3, r3, #15
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	6851      	ldr	r1, [r2, #4]
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	6892      	ldr	r2, [r2, #8]
 800371e:	4311      	orrs	r1, r2
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	68d2      	ldr	r2, [r2, #12]
 8003724:	4311      	orrs	r1, r2
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	6992      	ldr	r2, [r2, #24]
 800372a:	430a      	orrs	r2, r1
 800372c:	431a      	orrs	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003736:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d161      	bne.n	8003804 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a38      	ldr	r2, [pc, #224]	; (8003824 <HAL_I2S_Init+0x274>)
 8003744:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a37      	ldr	r2, [pc, #220]	; (8003828 <HAL_I2S_Init+0x278>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d101      	bne.n	8003754 <HAL_I2S_Init+0x1a4>
 8003750:	4b36      	ldr	r3, [pc, #216]	; (800382c <HAL_I2S_Init+0x27c>)
 8003752:	e001      	b.n	8003758 <HAL_I2S_Init+0x1a8>
 8003754:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003758:	69db      	ldr	r3, [r3, #28]
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6812      	ldr	r2, [r2, #0]
 800375e:	4932      	ldr	r1, [pc, #200]	; (8003828 <HAL_I2S_Init+0x278>)
 8003760:	428a      	cmp	r2, r1
 8003762:	d101      	bne.n	8003768 <HAL_I2S_Init+0x1b8>
 8003764:	4a31      	ldr	r2, [pc, #196]	; (800382c <HAL_I2S_Init+0x27c>)
 8003766:	e001      	b.n	800376c <HAL_I2S_Init+0x1bc>
 8003768:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800376c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003770:	f023 030f 	bic.w	r3, r3, #15
 8003774:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a2b      	ldr	r2, [pc, #172]	; (8003828 <HAL_I2S_Init+0x278>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d101      	bne.n	8003784 <HAL_I2S_Init+0x1d4>
 8003780:	4b2a      	ldr	r3, [pc, #168]	; (800382c <HAL_I2S_Init+0x27c>)
 8003782:	e001      	b.n	8003788 <HAL_I2S_Init+0x1d8>
 8003784:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003788:	2202      	movs	r2, #2
 800378a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a25      	ldr	r2, [pc, #148]	; (8003828 <HAL_I2S_Init+0x278>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d101      	bne.n	800379a <HAL_I2S_Init+0x1ea>
 8003796:	4b25      	ldr	r3, [pc, #148]	; (800382c <HAL_I2S_Init+0x27c>)
 8003798:	e001      	b.n	800379e <HAL_I2S_Init+0x1ee>
 800379a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800379e:	69db      	ldr	r3, [r3, #28]
 80037a0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037aa:	d003      	beq.n	80037b4 <HAL_I2S_Init+0x204>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d103      	bne.n	80037bc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80037b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037b8:	613b      	str	r3, [r7, #16]
 80037ba:	e001      	b.n	80037c0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80037bc:	2300      	movs	r3, #0
 80037be:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80037ca:	4313      	orrs	r3, r2
 80037cc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80037d4:	4313      	orrs	r3, r2
 80037d6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80037de:	4313      	orrs	r3, r2
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	897b      	ldrh	r3, [r7, #10]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80037ec:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a0d      	ldr	r2, [pc, #52]	; (8003828 <HAL_I2S_Init+0x278>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d101      	bne.n	80037fc <HAL_I2S_Init+0x24c>
 80037f8:	4b0c      	ldr	r3, [pc, #48]	; (800382c <HAL_I2S_Init+0x27c>)
 80037fa:	e001      	b.n	8003800 <HAL_I2S_Init+0x250>
 80037fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003800:	897a      	ldrh	r2, [r7, #10]
 8003802:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3720      	adds	r7, #32
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	08003927 	.word	0x08003927
 8003820:	cccccccd 	.word	0xcccccccd
 8003824:	08003a3d 	.word	0x08003a3d
 8003828:	40003800 	.word	0x40003800
 800382c:	40003400 	.word	0x40003400

08003830 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	881a      	ldrh	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003884:	1c9a      	adds	r2, r3, #2
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800388e:	b29b      	uxth	r3, r3
 8003890:	3b01      	subs	r3, #1
 8003892:	b29a      	uxth	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389c:	b29b      	uxth	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10e      	bne.n	80038c0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	685a      	ldr	r2, [r3, #4]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038b0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7ff ffb8 	bl	8003830 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80038c0:	bf00      	nop
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68da      	ldr	r2, [r3, #12]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038da:	b292      	uxth	r2, r2
 80038dc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e2:	1c9a      	adds	r2, r3, #2
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	3b01      	subs	r3, #1
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d10e      	bne.n	800391e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	685a      	ldr	r2, [r3, #4]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800390e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f7ff ff93 	bl	8003844 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800391e:	bf00      	nop
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b086      	sub	sp, #24
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b04      	cmp	r3, #4
 8003940:	d13a      	bne.n	80039b8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	2b01      	cmp	r3, #1
 800394a:	d109      	bne.n	8003960 <I2S_IRQHandler+0x3a>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003956:	2b40      	cmp	r3, #64	; 0x40
 8003958:	d102      	bne.n	8003960 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7ff ffb4 	bl	80038c8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003966:	2b40      	cmp	r3, #64	; 0x40
 8003968:	d126      	bne.n	80039b8 <I2S_IRQHandler+0x92>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f003 0320 	and.w	r3, r3, #32
 8003974:	2b20      	cmp	r3, #32
 8003976:	d11f      	bne.n	80039b8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685a      	ldr	r2, [r3, #4]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003986:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003988:	2300      	movs	r3, #0
 800398a:	613b      	str	r3, [r7, #16]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	613b      	str	r3, [r7, #16]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	613b      	str	r3, [r7, #16]
 800399c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039aa:	f043 0202 	orr.w	r2, r3, #2
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7ff ff50 	bl	8003858 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	2b03      	cmp	r3, #3
 80039c2:	d136      	bne.n	8003a32 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d109      	bne.n	80039e2 <I2S_IRQHandler+0xbc>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d8:	2b80      	cmp	r3, #128	; 0x80
 80039da:	d102      	bne.n	80039e2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f7ff ff45 	bl	800386c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	f003 0308 	and.w	r3, r3, #8
 80039e8:	2b08      	cmp	r3, #8
 80039ea:	d122      	bne.n	8003a32 <I2S_IRQHandler+0x10c>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f003 0320 	and.w	r3, r3, #32
 80039f6:	2b20      	cmp	r3, #32
 80039f8:	d11b      	bne.n	8003a32 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	685a      	ldr	r2, [r3, #4]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a08:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	60fb      	str	r3, [r7, #12]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	60fb      	str	r3, [r7, #12]
 8003a16:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a24:	f043 0204 	orr.w	r2, r3, #4
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f7ff ff13 	bl	8003858 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a32:	bf00      	nop
 8003a34:	3718      	adds	r7, #24
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
	...

08003a3c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b088      	sub	sp, #32
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a92      	ldr	r2, [pc, #584]	; (8003c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d101      	bne.n	8003a5a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003a56:	4b92      	ldr	r3, [pc, #584]	; (8003ca0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a58:	e001      	b.n	8003a5e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003a5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a8b      	ldr	r2, [pc, #556]	; (8003c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d101      	bne.n	8003a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003a74:	4b8a      	ldr	r3, [pc, #552]	; (8003ca0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a76:	e001      	b.n	8003a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003a78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a88:	d004      	beq.n	8003a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f040 8099 	bne.w	8003bc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d107      	bne.n	8003aae <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d002      	beq.n	8003aae <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 f925 	bl	8003cf8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	f003 0301 	and.w	r3, r3, #1
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d107      	bne.n	8003ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d002      	beq.n	8003ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f9c8 	bl	8003e58 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ace:	2b40      	cmp	r3, #64	; 0x40
 8003ad0:	d13a      	bne.n	8003b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	f003 0320 	and.w	r3, r3, #32
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d035      	beq.n	8003b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a6e      	ldr	r2, [pc, #440]	; (8003c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d101      	bne.n	8003aea <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003ae6:	4b6e      	ldr	r3, [pc, #440]	; (8003ca0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ae8:	e001      	b.n	8003aee <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003aea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4969      	ldr	r1, [pc, #420]	; (8003c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003af6:	428b      	cmp	r3, r1
 8003af8:	d101      	bne.n	8003afe <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003afa:	4b69      	ldr	r3, [pc, #420]	; (8003ca0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003afc:	e001      	b.n	8003b02 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003afe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b02:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b06:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b16:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003b18:	2300      	movs	r3, #0
 8003b1a:	60fb      	str	r3, [r7, #12]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	60fb      	str	r3, [r7, #12]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	60fb      	str	r3, [r7, #12]
 8003b2c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3a:	f043 0202 	orr.w	r2, r3, #2
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f7ff fe88 	bl	8003858 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	f003 0308 	and.w	r3, r3, #8
 8003b4e:	2b08      	cmp	r3, #8
 8003b50:	f040 80c3 	bne.w	8003cda <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	f003 0320 	and.w	r3, r3, #32
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f000 80bd 	beq.w	8003cda <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685a      	ldr	r2, [r3, #4]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b6e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a49      	ldr	r2, [pc, #292]	; (8003c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d101      	bne.n	8003b7e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003b7a:	4b49      	ldr	r3, [pc, #292]	; (8003ca0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b7c:	e001      	b.n	8003b82 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003b7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4944      	ldr	r1, [pc, #272]	; (8003c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b8a:	428b      	cmp	r3, r1
 8003b8c:	d101      	bne.n	8003b92 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003b8e:	4b44      	ldr	r3, [pc, #272]	; (8003ca0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b90:	e001      	b.n	8003b96 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003b92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b96:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b9a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	60bb      	str	r3, [r7, #8]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	60bb      	str	r3, [r7, #8]
 8003ba8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb6:	f043 0204 	orr.w	r2, r3, #4
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7ff fe4a 	bl	8003858 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003bc4:	e089      	b.n	8003cda <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d107      	bne.n	8003be0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d002      	beq.n	8003be0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f8be 	bl	8003d5c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d107      	bne.n	8003bfa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d002      	beq.n	8003bfa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 f8fd 	bl	8003df4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c00:	2b40      	cmp	r3, #64	; 0x40
 8003c02:	d12f      	bne.n	8003c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	f003 0320 	and.w	r3, r3, #32
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d02a      	beq.n	8003c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	685a      	ldr	r2, [r3, #4]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c1c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a1e      	ldr	r2, [pc, #120]	; (8003c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d101      	bne.n	8003c2c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003c28:	4b1d      	ldr	r3, [pc, #116]	; (8003ca0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c2a:	e001      	b.n	8003c30 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003c2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c30:	685a      	ldr	r2, [r3, #4]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4919      	ldr	r1, [pc, #100]	; (8003c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c38:	428b      	cmp	r3, r1
 8003c3a:	d101      	bne.n	8003c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003c3c:	4b18      	ldr	r3, [pc, #96]	; (8003ca0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c3e:	e001      	b.n	8003c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003c40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c44:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c48:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c56:	f043 0202 	orr.w	r2, r3, #2
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f7ff fdfa 	bl	8003858 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	f003 0308 	and.w	r3, r3, #8
 8003c6a:	2b08      	cmp	r3, #8
 8003c6c:	d136      	bne.n	8003cdc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	f003 0320 	and.w	r3, r3, #32
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d031      	beq.n	8003cdc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a07      	ldr	r2, [pc, #28]	; (8003c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d101      	bne.n	8003c86 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003c82:	4b07      	ldr	r3, [pc, #28]	; (8003ca0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c84:	e001      	b.n	8003c8a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003c86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c8a:	685a      	ldr	r2, [r3, #4]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4902      	ldr	r1, [pc, #8]	; (8003c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c92:	428b      	cmp	r3, r1
 8003c94:	d106      	bne.n	8003ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003c96:	4b02      	ldr	r3, [pc, #8]	; (8003ca0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c98:	e006      	b.n	8003ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003c9a:	bf00      	nop
 8003c9c:	40003800 	.word	0x40003800
 8003ca0:	40003400 	.word	0x40003400
 8003ca4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ca8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003cac:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	685a      	ldr	r2, [r3, #4]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003cbc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cca:	f043 0204 	orr.w	r2, r3, #4
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f7ff fdc0 	bl	8003858 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003cd8:	e000      	b.n	8003cdc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003cda:	bf00      	nop
}
 8003cdc:	bf00      	nop
 8003cde:	3720      	adds	r7, #32
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	1c99      	adds	r1, r3, #2
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	6251      	str	r1, [r2, #36]	; 0x24
 8003d0a:	881a      	ldrh	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d113      	bne.n	8003d52 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d38:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d106      	bne.n	8003d52 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f7ff ffc9 	bl	8003ce4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d52:	bf00      	nop
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
	...

08003d5c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d68:	1c99      	adds	r1, r3, #2
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	6251      	str	r1, [r2, #36]	; 0x24
 8003d6e:	8819      	ldrh	r1, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a1d      	ldr	r2, [pc, #116]	; (8003dec <I2SEx_TxISR_I2SExt+0x90>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d101      	bne.n	8003d7e <I2SEx_TxISR_I2SExt+0x22>
 8003d7a:	4b1d      	ldr	r3, [pc, #116]	; (8003df0 <I2SEx_TxISR_I2SExt+0x94>)
 8003d7c:	e001      	b.n	8003d82 <I2SEx_TxISR_I2SExt+0x26>
 8003d7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d82:	460a      	mov	r2, r1
 8003d84:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d121      	bne.n	8003de2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a12      	ldr	r2, [pc, #72]	; (8003dec <I2SEx_TxISR_I2SExt+0x90>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d101      	bne.n	8003dac <I2SEx_TxISR_I2SExt+0x50>
 8003da8:	4b11      	ldr	r3, [pc, #68]	; (8003df0 <I2SEx_TxISR_I2SExt+0x94>)
 8003daa:	e001      	b.n	8003db0 <I2SEx_TxISR_I2SExt+0x54>
 8003dac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003db0:	685a      	ldr	r2, [r3, #4]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	490d      	ldr	r1, [pc, #52]	; (8003dec <I2SEx_TxISR_I2SExt+0x90>)
 8003db8:	428b      	cmp	r3, r1
 8003dba:	d101      	bne.n	8003dc0 <I2SEx_TxISR_I2SExt+0x64>
 8003dbc:	4b0c      	ldr	r3, [pc, #48]	; (8003df0 <I2SEx_TxISR_I2SExt+0x94>)
 8003dbe:	e001      	b.n	8003dc4 <I2SEx_TxISR_I2SExt+0x68>
 8003dc0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dc4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003dc8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d106      	bne.n	8003de2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f7ff ff81 	bl	8003ce4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003de2:	bf00      	nop
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	40003800 	.word	0x40003800
 8003df0:	40003400 	.word	0x40003400

08003df4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68d8      	ldr	r0, [r3, #12]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e06:	1c99      	adds	r1, r3, #2
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003e0c:	b282      	uxth	r2, r0
 8003e0e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	3b01      	subs	r3, #1
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d113      	bne.n	8003e50 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e36:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d106      	bne.n	8003e50 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f7ff ff4a 	bl	8003ce4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e50:	bf00      	nop
 8003e52:	3708      	adds	r7, #8
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a20      	ldr	r2, [pc, #128]	; (8003ee8 <I2SEx_RxISR_I2SExt+0x90>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d101      	bne.n	8003e6e <I2SEx_RxISR_I2SExt+0x16>
 8003e6a:	4b20      	ldr	r3, [pc, #128]	; (8003eec <I2SEx_RxISR_I2SExt+0x94>)
 8003e6c:	e001      	b.n	8003e72 <I2SEx_RxISR_I2SExt+0x1a>
 8003e6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e72:	68d8      	ldr	r0, [r3, #12]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e78:	1c99      	adds	r1, r3, #2
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003e7e:	b282      	uxth	r2, r0
 8003e80:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d121      	bne.n	8003ede <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a12      	ldr	r2, [pc, #72]	; (8003ee8 <I2SEx_RxISR_I2SExt+0x90>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d101      	bne.n	8003ea8 <I2SEx_RxISR_I2SExt+0x50>
 8003ea4:	4b11      	ldr	r3, [pc, #68]	; (8003eec <I2SEx_RxISR_I2SExt+0x94>)
 8003ea6:	e001      	b.n	8003eac <I2SEx_RxISR_I2SExt+0x54>
 8003ea8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003eac:	685a      	ldr	r2, [r3, #4]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	490d      	ldr	r1, [pc, #52]	; (8003ee8 <I2SEx_RxISR_I2SExt+0x90>)
 8003eb4:	428b      	cmp	r3, r1
 8003eb6:	d101      	bne.n	8003ebc <I2SEx_RxISR_I2SExt+0x64>
 8003eb8:	4b0c      	ldr	r3, [pc, #48]	; (8003eec <I2SEx_RxISR_I2SExt+0x94>)
 8003eba:	e001      	b.n	8003ec0 <I2SEx_RxISR_I2SExt+0x68>
 8003ebc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ec0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ec4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d106      	bne.n	8003ede <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f7ff ff03 	bl	8003ce4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ede:	bf00      	nop
 8003ee0:	3708      	adds	r7, #8
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	40003800 	.word	0x40003800
 8003eec:	40003400 	.word	0x40003400

08003ef0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b086      	sub	sp, #24
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d101      	bne.n	8003f02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e267      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d075      	beq.n	8003ffa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f0e:	4b88      	ldr	r3, [pc, #544]	; (8004130 <HAL_RCC_OscConfig+0x240>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f003 030c 	and.w	r3, r3, #12
 8003f16:	2b04      	cmp	r3, #4
 8003f18:	d00c      	beq.n	8003f34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f1a:	4b85      	ldr	r3, [pc, #532]	; (8004130 <HAL_RCC_OscConfig+0x240>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f22:	2b08      	cmp	r3, #8
 8003f24:	d112      	bne.n	8003f4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f26:	4b82      	ldr	r3, [pc, #520]	; (8004130 <HAL_RCC_OscConfig+0x240>)
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f32:	d10b      	bne.n	8003f4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f34:	4b7e      	ldr	r3, [pc, #504]	; (8004130 <HAL_RCC_OscConfig+0x240>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d05b      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x108>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d157      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e242      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f54:	d106      	bne.n	8003f64 <HAL_RCC_OscConfig+0x74>
 8003f56:	4b76      	ldr	r3, [pc, #472]	; (8004130 <HAL_RCC_OscConfig+0x240>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a75      	ldr	r2, [pc, #468]	; (8004130 <HAL_RCC_OscConfig+0x240>)
 8003f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f60:	6013      	str	r3, [r2, #0]
 8003f62:	e01d      	b.n	8003fa0 <HAL_RCC_OscConfig+0xb0>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f6c:	d10c      	bne.n	8003f88 <HAL_RCC_OscConfig+0x98>
 8003f6e:	4b70      	ldr	r3, [pc, #448]	; (8004130 <HAL_RCC_OscConfig+0x240>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a6f      	ldr	r2, [pc, #444]	; (8004130 <HAL_RCC_OscConfig+0x240>)
 8003f74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f78:	6013      	str	r3, [r2, #0]
 8003f7a:	4b6d      	ldr	r3, [pc, #436]	; (8004130 <HAL_RCC_OscConfig+0x240>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a6c      	ldr	r2, [pc, #432]	; (8004130 <HAL_RCC_OscConfig+0x240>)
 8003f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f84:	6013      	str	r3, [r2, #0]
 8003f86:	e00b      	b.n	8003fa0 <HAL_RCC_OscConfig+0xb0>
 8003f88:	4b69      	ldr	r3, [pc, #420]	; (8004130 <HAL_RCC_OscConfig+0x240>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a68      	ldr	r2, [pc, #416]	; (8004130 <HAL_RCC_OscConfig+0x240>)
 8003f8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f92:	6013      	str	r3, [r2, #0]
 8003f94:	4b66      	ldr	r3, [pc, #408]	; (8004130 <HAL_RCC_OscConfig+0x240>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a65      	ldr	r2, [pc, #404]	; (8004130 <HAL_RCC_OscConfig+0x240>)
 8003f9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d013      	beq.n	8003fd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa8:	f7fd fa8a 	bl	80014c0 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fb0:	f7fd fa86 	bl	80014c0 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b64      	cmp	r3, #100	; 0x64
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e207      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fc2:	4b5b      	ldr	r3, [pc, #364]	; (8004130 <HAL_RCC_OscConfig+0x240>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d0f0      	beq.n	8003fb0 <HAL_RCC_OscConfig+0xc0>
 8003fce:	e014      	b.n	8003ffa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd0:	f7fd fa76 	bl	80014c0 <HAL_GetTick>
 8003fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fd6:	e008      	b.n	8003fea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fd8:	f7fd fa72 	bl	80014c0 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b64      	cmp	r3, #100	; 0x64
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e1f3      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fea:	4b51      	ldr	r3, [pc, #324]	; (8004130 <HAL_RCC_OscConfig+0x240>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1f0      	bne.n	8003fd8 <HAL_RCC_OscConfig+0xe8>
 8003ff6:	e000      	b.n	8003ffa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ff8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d063      	beq.n	80040ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004006:	4b4a      	ldr	r3, [pc, #296]	; (8004130 <HAL_RCC_OscConfig+0x240>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f003 030c 	and.w	r3, r3, #12
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00b      	beq.n	800402a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004012:	4b47      	ldr	r3, [pc, #284]	; (8004130 <HAL_RCC_OscConfig+0x240>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800401a:	2b08      	cmp	r3, #8
 800401c:	d11c      	bne.n	8004058 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800401e:	4b44      	ldr	r3, [pc, #272]	; (8004130 <HAL_RCC_OscConfig+0x240>)
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d116      	bne.n	8004058 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800402a:	4b41      	ldr	r3, [pc, #260]	; (8004130 <HAL_RCC_OscConfig+0x240>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d005      	beq.n	8004042 <HAL_RCC_OscConfig+0x152>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d001      	beq.n	8004042 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e1c7      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004042:	4b3b      	ldr	r3, [pc, #236]	; (8004130 <HAL_RCC_OscConfig+0x240>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	4937      	ldr	r1, [pc, #220]	; (8004130 <HAL_RCC_OscConfig+0x240>)
 8004052:	4313      	orrs	r3, r2
 8004054:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004056:	e03a      	b.n	80040ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d020      	beq.n	80040a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004060:	4b34      	ldr	r3, [pc, #208]	; (8004134 <HAL_RCC_OscConfig+0x244>)
 8004062:	2201      	movs	r2, #1
 8004064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004066:	f7fd fa2b 	bl	80014c0 <HAL_GetTick>
 800406a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800406c:	e008      	b.n	8004080 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800406e:	f7fd fa27 	bl	80014c0 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	2b02      	cmp	r3, #2
 800407a:	d901      	bls.n	8004080 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e1a8      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004080:	4b2b      	ldr	r3, [pc, #172]	; (8004130 <HAL_RCC_OscConfig+0x240>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0302 	and.w	r3, r3, #2
 8004088:	2b00      	cmp	r3, #0
 800408a:	d0f0      	beq.n	800406e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800408c:	4b28      	ldr	r3, [pc, #160]	; (8004130 <HAL_RCC_OscConfig+0x240>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	00db      	lsls	r3, r3, #3
 800409a:	4925      	ldr	r1, [pc, #148]	; (8004130 <HAL_RCC_OscConfig+0x240>)
 800409c:	4313      	orrs	r3, r2
 800409e:	600b      	str	r3, [r1, #0]
 80040a0:	e015      	b.n	80040ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040a2:	4b24      	ldr	r3, [pc, #144]	; (8004134 <HAL_RCC_OscConfig+0x244>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a8:	f7fd fa0a 	bl	80014c0 <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ae:	e008      	b.n	80040c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040b0:	f7fd fa06 	bl	80014c0 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e187      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040c2:	4b1b      	ldr	r3, [pc, #108]	; (8004130 <HAL_RCC_OscConfig+0x240>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1f0      	bne.n	80040b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0308 	and.w	r3, r3, #8
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d036      	beq.n	8004148 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d016      	beq.n	8004110 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040e2:	4b15      	ldr	r3, [pc, #84]	; (8004138 <HAL_RCC_OscConfig+0x248>)
 80040e4:	2201      	movs	r2, #1
 80040e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040e8:	f7fd f9ea 	bl	80014c0 <HAL_GetTick>
 80040ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ee:	e008      	b.n	8004102 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040f0:	f7fd f9e6 	bl	80014c0 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e167      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004102:	4b0b      	ldr	r3, [pc, #44]	; (8004130 <HAL_RCC_OscConfig+0x240>)
 8004104:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d0f0      	beq.n	80040f0 <HAL_RCC_OscConfig+0x200>
 800410e:	e01b      	b.n	8004148 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004110:	4b09      	ldr	r3, [pc, #36]	; (8004138 <HAL_RCC_OscConfig+0x248>)
 8004112:	2200      	movs	r2, #0
 8004114:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004116:	f7fd f9d3 	bl	80014c0 <HAL_GetTick>
 800411a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800411c:	e00e      	b.n	800413c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800411e:	f7fd f9cf 	bl	80014c0 <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	2b02      	cmp	r3, #2
 800412a:	d907      	bls.n	800413c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e150      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e2>
 8004130:	40023800 	.word	0x40023800
 8004134:	42470000 	.word	0x42470000
 8004138:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800413c:	4b88      	ldr	r3, [pc, #544]	; (8004360 <HAL_RCC_OscConfig+0x470>)
 800413e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1ea      	bne.n	800411e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0304 	and.w	r3, r3, #4
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 8097 	beq.w	8004284 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004156:	2300      	movs	r3, #0
 8004158:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800415a:	4b81      	ldr	r3, [pc, #516]	; (8004360 <HAL_RCC_OscConfig+0x470>)
 800415c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d10f      	bne.n	8004186 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004166:	2300      	movs	r3, #0
 8004168:	60bb      	str	r3, [r7, #8]
 800416a:	4b7d      	ldr	r3, [pc, #500]	; (8004360 <HAL_RCC_OscConfig+0x470>)
 800416c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416e:	4a7c      	ldr	r2, [pc, #496]	; (8004360 <HAL_RCC_OscConfig+0x470>)
 8004170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004174:	6413      	str	r3, [r2, #64]	; 0x40
 8004176:	4b7a      	ldr	r3, [pc, #488]	; (8004360 <HAL_RCC_OscConfig+0x470>)
 8004178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800417e:	60bb      	str	r3, [r7, #8]
 8004180:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004182:	2301      	movs	r3, #1
 8004184:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004186:	4b77      	ldr	r3, [pc, #476]	; (8004364 <HAL_RCC_OscConfig+0x474>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800418e:	2b00      	cmp	r3, #0
 8004190:	d118      	bne.n	80041c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004192:	4b74      	ldr	r3, [pc, #464]	; (8004364 <HAL_RCC_OscConfig+0x474>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a73      	ldr	r2, [pc, #460]	; (8004364 <HAL_RCC_OscConfig+0x474>)
 8004198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800419c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800419e:	f7fd f98f 	bl	80014c0 <HAL_GetTick>
 80041a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a4:	e008      	b.n	80041b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041a6:	f7fd f98b 	bl	80014c0 <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d901      	bls.n	80041b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e10c      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041b8:	4b6a      	ldr	r3, [pc, #424]	; (8004364 <HAL_RCC_OscConfig+0x474>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d0f0      	beq.n	80041a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d106      	bne.n	80041da <HAL_RCC_OscConfig+0x2ea>
 80041cc:	4b64      	ldr	r3, [pc, #400]	; (8004360 <HAL_RCC_OscConfig+0x470>)
 80041ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d0:	4a63      	ldr	r2, [pc, #396]	; (8004360 <HAL_RCC_OscConfig+0x470>)
 80041d2:	f043 0301 	orr.w	r3, r3, #1
 80041d6:	6713      	str	r3, [r2, #112]	; 0x70
 80041d8:	e01c      	b.n	8004214 <HAL_RCC_OscConfig+0x324>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	2b05      	cmp	r3, #5
 80041e0:	d10c      	bne.n	80041fc <HAL_RCC_OscConfig+0x30c>
 80041e2:	4b5f      	ldr	r3, [pc, #380]	; (8004360 <HAL_RCC_OscConfig+0x470>)
 80041e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e6:	4a5e      	ldr	r2, [pc, #376]	; (8004360 <HAL_RCC_OscConfig+0x470>)
 80041e8:	f043 0304 	orr.w	r3, r3, #4
 80041ec:	6713      	str	r3, [r2, #112]	; 0x70
 80041ee:	4b5c      	ldr	r3, [pc, #368]	; (8004360 <HAL_RCC_OscConfig+0x470>)
 80041f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f2:	4a5b      	ldr	r2, [pc, #364]	; (8004360 <HAL_RCC_OscConfig+0x470>)
 80041f4:	f043 0301 	orr.w	r3, r3, #1
 80041f8:	6713      	str	r3, [r2, #112]	; 0x70
 80041fa:	e00b      	b.n	8004214 <HAL_RCC_OscConfig+0x324>
 80041fc:	4b58      	ldr	r3, [pc, #352]	; (8004360 <HAL_RCC_OscConfig+0x470>)
 80041fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004200:	4a57      	ldr	r2, [pc, #348]	; (8004360 <HAL_RCC_OscConfig+0x470>)
 8004202:	f023 0301 	bic.w	r3, r3, #1
 8004206:	6713      	str	r3, [r2, #112]	; 0x70
 8004208:	4b55      	ldr	r3, [pc, #340]	; (8004360 <HAL_RCC_OscConfig+0x470>)
 800420a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800420c:	4a54      	ldr	r2, [pc, #336]	; (8004360 <HAL_RCC_OscConfig+0x470>)
 800420e:	f023 0304 	bic.w	r3, r3, #4
 8004212:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d015      	beq.n	8004248 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800421c:	f7fd f950 	bl	80014c0 <HAL_GetTick>
 8004220:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004222:	e00a      	b.n	800423a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004224:	f7fd f94c 	bl	80014c0 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004232:	4293      	cmp	r3, r2
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e0cb      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800423a:	4b49      	ldr	r3, [pc, #292]	; (8004360 <HAL_RCC_OscConfig+0x470>)
 800423c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d0ee      	beq.n	8004224 <HAL_RCC_OscConfig+0x334>
 8004246:	e014      	b.n	8004272 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004248:	f7fd f93a 	bl	80014c0 <HAL_GetTick>
 800424c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800424e:	e00a      	b.n	8004266 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004250:	f7fd f936 	bl	80014c0 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	f241 3288 	movw	r2, #5000	; 0x1388
 800425e:	4293      	cmp	r3, r2
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e0b5      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004266:	4b3e      	ldr	r3, [pc, #248]	; (8004360 <HAL_RCC_OscConfig+0x470>)
 8004268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1ee      	bne.n	8004250 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004272:	7dfb      	ldrb	r3, [r7, #23]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d105      	bne.n	8004284 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004278:	4b39      	ldr	r3, [pc, #228]	; (8004360 <HAL_RCC_OscConfig+0x470>)
 800427a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427c:	4a38      	ldr	r2, [pc, #224]	; (8004360 <HAL_RCC_OscConfig+0x470>)
 800427e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004282:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	2b00      	cmp	r3, #0
 800428a:	f000 80a1 	beq.w	80043d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800428e:	4b34      	ldr	r3, [pc, #208]	; (8004360 <HAL_RCC_OscConfig+0x470>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 030c 	and.w	r3, r3, #12
 8004296:	2b08      	cmp	r3, #8
 8004298:	d05c      	beq.n	8004354 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d141      	bne.n	8004326 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042a2:	4b31      	ldr	r3, [pc, #196]	; (8004368 <HAL_RCC_OscConfig+0x478>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a8:	f7fd f90a 	bl	80014c0 <HAL_GetTick>
 80042ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ae:	e008      	b.n	80042c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042b0:	f7fd f906 	bl	80014c0 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e087      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042c2:	4b27      	ldr	r3, [pc, #156]	; (8004360 <HAL_RCC_OscConfig+0x470>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1f0      	bne.n	80042b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	69da      	ldr	r2, [r3, #28]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	431a      	orrs	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042dc:	019b      	lsls	r3, r3, #6
 80042de:	431a      	orrs	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e4:	085b      	lsrs	r3, r3, #1
 80042e6:	3b01      	subs	r3, #1
 80042e8:	041b      	lsls	r3, r3, #16
 80042ea:	431a      	orrs	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f0:	061b      	lsls	r3, r3, #24
 80042f2:	491b      	ldr	r1, [pc, #108]	; (8004360 <HAL_RCC_OscConfig+0x470>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042f8:	4b1b      	ldr	r3, [pc, #108]	; (8004368 <HAL_RCC_OscConfig+0x478>)
 80042fa:	2201      	movs	r2, #1
 80042fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042fe:	f7fd f8df 	bl	80014c0 <HAL_GetTick>
 8004302:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004304:	e008      	b.n	8004318 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004306:	f7fd f8db 	bl	80014c0 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	2b02      	cmp	r3, #2
 8004312:	d901      	bls.n	8004318 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e05c      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004318:	4b11      	ldr	r3, [pc, #68]	; (8004360 <HAL_RCC_OscConfig+0x470>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d0f0      	beq.n	8004306 <HAL_RCC_OscConfig+0x416>
 8004324:	e054      	b.n	80043d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004326:	4b10      	ldr	r3, [pc, #64]	; (8004368 <HAL_RCC_OscConfig+0x478>)
 8004328:	2200      	movs	r2, #0
 800432a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800432c:	f7fd f8c8 	bl	80014c0 <HAL_GetTick>
 8004330:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004332:	e008      	b.n	8004346 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004334:	f7fd f8c4 	bl	80014c0 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b02      	cmp	r3, #2
 8004340:	d901      	bls.n	8004346 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e045      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004346:	4b06      	ldr	r3, [pc, #24]	; (8004360 <HAL_RCC_OscConfig+0x470>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1f0      	bne.n	8004334 <HAL_RCC_OscConfig+0x444>
 8004352:	e03d      	b.n	80043d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d107      	bne.n	800436c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e038      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e2>
 8004360:	40023800 	.word	0x40023800
 8004364:	40007000 	.word	0x40007000
 8004368:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800436c:	4b1b      	ldr	r3, [pc, #108]	; (80043dc <HAL_RCC_OscConfig+0x4ec>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d028      	beq.n	80043cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004384:	429a      	cmp	r2, r3
 8004386:	d121      	bne.n	80043cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004392:	429a      	cmp	r2, r3
 8004394:	d11a      	bne.n	80043cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800439c:	4013      	ands	r3, r2
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d111      	bne.n	80043cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b2:	085b      	lsrs	r3, r3, #1
 80043b4:	3b01      	subs	r3, #1
 80043b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d107      	bne.n	80043cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d001      	beq.n	80043d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e000      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3718      	adds	r7, #24
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	40023800 	.word	0x40023800

080043e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d101      	bne.n	80043f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e0cc      	b.n	800458e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043f4:	4b68      	ldr	r3, [pc, #416]	; (8004598 <HAL_RCC_ClockConfig+0x1b8>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0307 	and.w	r3, r3, #7
 80043fc:	683a      	ldr	r2, [r7, #0]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d90c      	bls.n	800441c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004402:	4b65      	ldr	r3, [pc, #404]	; (8004598 <HAL_RCC_ClockConfig+0x1b8>)
 8004404:	683a      	ldr	r2, [r7, #0]
 8004406:	b2d2      	uxtb	r2, r2
 8004408:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800440a:	4b63      	ldr	r3, [pc, #396]	; (8004598 <HAL_RCC_ClockConfig+0x1b8>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0307 	and.w	r3, r3, #7
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	429a      	cmp	r2, r3
 8004416:	d001      	beq.n	800441c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e0b8      	b.n	800458e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d020      	beq.n	800446a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0304 	and.w	r3, r3, #4
 8004430:	2b00      	cmp	r3, #0
 8004432:	d005      	beq.n	8004440 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004434:	4b59      	ldr	r3, [pc, #356]	; (800459c <HAL_RCC_ClockConfig+0x1bc>)
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	4a58      	ldr	r2, [pc, #352]	; (800459c <HAL_RCC_ClockConfig+0x1bc>)
 800443a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800443e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0308 	and.w	r3, r3, #8
 8004448:	2b00      	cmp	r3, #0
 800444a:	d005      	beq.n	8004458 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800444c:	4b53      	ldr	r3, [pc, #332]	; (800459c <HAL_RCC_ClockConfig+0x1bc>)
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	4a52      	ldr	r2, [pc, #328]	; (800459c <HAL_RCC_ClockConfig+0x1bc>)
 8004452:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004456:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004458:	4b50      	ldr	r3, [pc, #320]	; (800459c <HAL_RCC_ClockConfig+0x1bc>)
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	494d      	ldr	r1, [pc, #308]	; (800459c <HAL_RCC_ClockConfig+0x1bc>)
 8004466:	4313      	orrs	r3, r2
 8004468:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	2b00      	cmp	r3, #0
 8004474:	d044      	beq.n	8004500 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d107      	bne.n	800448e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800447e:	4b47      	ldr	r3, [pc, #284]	; (800459c <HAL_RCC_ClockConfig+0x1bc>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d119      	bne.n	80044be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e07f      	b.n	800458e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	2b02      	cmp	r3, #2
 8004494:	d003      	beq.n	800449e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800449a:	2b03      	cmp	r3, #3
 800449c:	d107      	bne.n	80044ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800449e:	4b3f      	ldr	r3, [pc, #252]	; (800459c <HAL_RCC_ClockConfig+0x1bc>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d109      	bne.n	80044be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e06f      	b.n	800458e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ae:	4b3b      	ldr	r3, [pc, #236]	; (800459c <HAL_RCC_ClockConfig+0x1bc>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e067      	b.n	800458e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044be:	4b37      	ldr	r3, [pc, #220]	; (800459c <HAL_RCC_ClockConfig+0x1bc>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f023 0203 	bic.w	r2, r3, #3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	4934      	ldr	r1, [pc, #208]	; (800459c <HAL_RCC_ClockConfig+0x1bc>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044d0:	f7fc fff6 	bl	80014c0 <HAL_GetTick>
 80044d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044d6:	e00a      	b.n	80044ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044d8:	f7fc fff2 	bl	80014c0 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e04f      	b.n	800458e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ee:	4b2b      	ldr	r3, [pc, #172]	; (800459c <HAL_RCC_ClockConfig+0x1bc>)
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f003 020c 	and.w	r2, r3, #12
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d1eb      	bne.n	80044d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004500:	4b25      	ldr	r3, [pc, #148]	; (8004598 <HAL_RCC_ClockConfig+0x1b8>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0307 	and.w	r3, r3, #7
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	429a      	cmp	r2, r3
 800450c:	d20c      	bcs.n	8004528 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800450e:	4b22      	ldr	r3, [pc, #136]	; (8004598 <HAL_RCC_ClockConfig+0x1b8>)
 8004510:	683a      	ldr	r2, [r7, #0]
 8004512:	b2d2      	uxtb	r2, r2
 8004514:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004516:	4b20      	ldr	r3, [pc, #128]	; (8004598 <HAL_RCC_ClockConfig+0x1b8>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0307 	and.w	r3, r3, #7
 800451e:	683a      	ldr	r2, [r7, #0]
 8004520:	429a      	cmp	r2, r3
 8004522:	d001      	beq.n	8004528 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e032      	b.n	800458e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0304 	and.w	r3, r3, #4
 8004530:	2b00      	cmp	r3, #0
 8004532:	d008      	beq.n	8004546 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004534:	4b19      	ldr	r3, [pc, #100]	; (800459c <HAL_RCC_ClockConfig+0x1bc>)
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	4916      	ldr	r1, [pc, #88]	; (800459c <HAL_RCC_ClockConfig+0x1bc>)
 8004542:	4313      	orrs	r3, r2
 8004544:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0308 	and.w	r3, r3, #8
 800454e:	2b00      	cmp	r3, #0
 8004550:	d009      	beq.n	8004566 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004552:	4b12      	ldr	r3, [pc, #72]	; (800459c <HAL_RCC_ClockConfig+0x1bc>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	00db      	lsls	r3, r3, #3
 8004560:	490e      	ldr	r1, [pc, #56]	; (800459c <HAL_RCC_ClockConfig+0x1bc>)
 8004562:	4313      	orrs	r3, r2
 8004564:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004566:	f000 f821 	bl	80045ac <HAL_RCC_GetSysClockFreq>
 800456a:	4602      	mov	r2, r0
 800456c:	4b0b      	ldr	r3, [pc, #44]	; (800459c <HAL_RCC_ClockConfig+0x1bc>)
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	091b      	lsrs	r3, r3, #4
 8004572:	f003 030f 	and.w	r3, r3, #15
 8004576:	490a      	ldr	r1, [pc, #40]	; (80045a0 <HAL_RCC_ClockConfig+0x1c0>)
 8004578:	5ccb      	ldrb	r3, [r1, r3]
 800457a:	fa22 f303 	lsr.w	r3, r2, r3
 800457e:	4a09      	ldr	r2, [pc, #36]	; (80045a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004580:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004582:	4b09      	ldr	r3, [pc, #36]	; (80045a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4618      	mov	r0, r3
 8004588:	f7fc ff56 	bl	8001438 <HAL_InitTick>

  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3710      	adds	r7, #16
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	40023c00 	.word	0x40023c00
 800459c:	40023800 	.word	0x40023800
 80045a0:	0800de18 	.word	0x0800de18
 80045a4:	20000000 	.word	0x20000000
 80045a8:	20000004 	.word	0x20000004

080045ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045b0:	b094      	sub	sp, #80	; 0x50
 80045b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80045b4:	2300      	movs	r3, #0
 80045b6:	647b      	str	r3, [r7, #68]	; 0x44
 80045b8:	2300      	movs	r3, #0
 80045ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045bc:	2300      	movs	r3, #0
 80045be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80045c0:	2300      	movs	r3, #0
 80045c2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045c4:	4b79      	ldr	r3, [pc, #484]	; (80047ac <HAL_RCC_GetSysClockFreq+0x200>)
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f003 030c 	and.w	r3, r3, #12
 80045cc:	2b08      	cmp	r3, #8
 80045ce:	d00d      	beq.n	80045ec <HAL_RCC_GetSysClockFreq+0x40>
 80045d0:	2b08      	cmp	r3, #8
 80045d2:	f200 80e1 	bhi.w	8004798 <HAL_RCC_GetSysClockFreq+0x1ec>
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d002      	beq.n	80045e0 <HAL_RCC_GetSysClockFreq+0x34>
 80045da:	2b04      	cmp	r3, #4
 80045dc:	d003      	beq.n	80045e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80045de:	e0db      	b.n	8004798 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045e0:	4b73      	ldr	r3, [pc, #460]	; (80047b0 <HAL_RCC_GetSysClockFreq+0x204>)
 80045e2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80045e4:	e0db      	b.n	800479e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045e6:	4b73      	ldr	r3, [pc, #460]	; (80047b4 <HAL_RCC_GetSysClockFreq+0x208>)
 80045e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045ea:	e0d8      	b.n	800479e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045ec:	4b6f      	ldr	r3, [pc, #444]	; (80047ac <HAL_RCC_GetSysClockFreq+0x200>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045f4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045f6:	4b6d      	ldr	r3, [pc, #436]	; (80047ac <HAL_RCC_GetSysClockFreq+0x200>)
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d063      	beq.n	80046ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004602:	4b6a      	ldr	r3, [pc, #424]	; (80047ac <HAL_RCC_GetSysClockFreq+0x200>)
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	099b      	lsrs	r3, r3, #6
 8004608:	2200      	movs	r2, #0
 800460a:	63bb      	str	r3, [r7, #56]	; 0x38
 800460c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800460e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004610:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004614:	633b      	str	r3, [r7, #48]	; 0x30
 8004616:	2300      	movs	r3, #0
 8004618:	637b      	str	r3, [r7, #52]	; 0x34
 800461a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800461e:	4622      	mov	r2, r4
 8004620:	462b      	mov	r3, r5
 8004622:	f04f 0000 	mov.w	r0, #0
 8004626:	f04f 0100 	mov.w	r1, #0
 800462a:	0159      	lsls	r1, r3, #5
 800462c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004630:	0150      	lsls	r0, r2, #5
 8004632:	4602      	mov	r2, r0
 8004634:	460b      	mov	r3, r1
 8004636:	4621      	mov	r1, r4
 8004638:	1a51      	subs	r1, r2, r1
 800463a:	6139      	str	r1, [r7, #16]
 800463c:	4629      	mov	r1, r5
 800463e:	eb63 0301 	sbc.w	r3, r3, r1
 8004642:	617b      	str	r3, [r7, #20]
 8004644:	f04f 0200 	mov.w	r2, #0
 8004648:	f04f 0300 	mov.w	r3, #0
 800464c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004650:	4659      	mov	r1, fp
 8004652:	018b      	lsls	r3, r1, #6
 8004654:	4651      	mov	r1, sl
 8004656:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800465a:	4651      	mov	r1, sl
 800465c:	018a      	lsls	r2, r1, #6
 800465e:	4651      	mov	r1, sl
 8004660:	ebb2 0801 	subs.w	r8, r2, r1
 8004664:	4659      	mov	r1, fp
 8004666:	eb63 0901 	sbc.w	r9, r3, r1
 800466a:	f04f 0200 	mov.w	r2, #0
 800466e:	f04f 0300 	mov.w	r3, #0
 8004672:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004676:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800467a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800467e:	4690      	mov	r8, r2
 8004680:	4699      	mov	r9, r3
 8004682:	4623      	mov	r3, r4
 8004684:	eb18 0303 	adds.w	r3, r8, r3
 8004688:	60bb      	str	r3, [r7, #8]
 800468a:	462b      	mov	r3, r5
 800468c:	eb49 0303 	adc.w	r3, r9, r3
 8004690:	60fb      	str	r3, [r7, #12]
 8004692:	f04f 0200 	mov.w	r2, #0
 8004696:	f04f 0300 	mov.w	r3, #0
 800469a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800469e:	4629      	mov	r1, r5
 80046a0:	024b      	lsls	r3, r1, #9
 80046a2:	4621      	mov	r1, r4
 80046a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80046a8:	4621      	mov	r1, r4
 80046aa:	024a      	lsls	r2, r1, #9
 80046ac:	4610      	mov	r0, r2
 80046ae:	4619      	mov	r1, r3
 80046b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046b2:	2200      	movs	r2, #0
 80046b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80046b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80046bc:	f7fb fd88 	bl	80001d0 <__aeabi_uldivmod>
 80046c0:	4602      	mov	r2, r0
 80046c2:	460b      	mov	r3, r1
 80046c4:	4613      	mov	r3, r2
 80046c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046c8:	e058      	b.n	800477c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046ca:	4b38      	ldr	r3, [pc, #224]	; (80047ac <HAL_RCC_GetSysClockFreq+0x200>)
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	099b      	lsrs	r3, r3, #6
 80046d0:	2200      	movs	r2, #0
 80046d2:	4618      	mov	r0, r3
 80046d4:	4611      	mov	r1, r2
 80046d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80046da:	623b      	str	r3, [r7, #32]
 80046dc:	2300      	movs	r3, #0
 80046de:	627b      	str	r3, [r7, #36]	; 0x24
 80046e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80046e4:	4642      	mov	r2, r8
 80046e6:	464b      	mov	r3, r9
 80046e8:	f04f 0000 	mov.w	r0, #0
 80046ec:	f04f 0100 	mov.w	r1, #0
 80046f0:	0159      	lsls	r1, r3, #5
 80046f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046f6:	0150      	lsls	r0, r2, #5
 80046f8:	4602      	mov	r2, r0
 80046fa:	460b      	mov	r3, r1
 80046fc:	4641      	mov	r1, r8
 80046fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8004702:	4649      	mov	r1, r9
 8004704:	eb63 0b01 	sbc.w	fp, r3, r1
 8004708:	f04f 0200 	mov.w	r2, #0
 800470c:	f04f 0300 	mov.w	r3, #0
 8004710:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004714:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004718:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800471c:	ebb2 040a 	subs.w	r4, r2, sl
 8004720:	eb63 050b 	sbc.w	r5, r3, fp
 8004724:	f04f 0200 	mov.w	r2, #0
 8004728:	f04f 0300 	mov.w	r3, #0
 800472c:	00eb      	lsls	r3, r5, #3
 800472e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004732:	00e2      	lsls	r2, r4, #3
 8004734:	4614      	mov	r4, r2
 8004736:	461d      	mov	r5, r3
 8004738:	4643      	mov	r3, r8
 800473a:	18e3      	adds	r3, r4, r3
 800473c:	603b      	str	r3, [r7, #0]
 800473e:	464b      	mov	r3, r9
 8004740:	eb45 0303 	adc.w	r3, r5, r3
 8004744:	607b      	str	r3, [r7, #4]
 8004746:	f04f 0200 	mov.w	r2, #0
 800474a:	f04f 0300 	mov.w	r3, #0
 800474e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004752:	4629      	mov	r1, r5
 8004754:	028b      	lsls	r3, r1, #10
 8004756:	4621      	mov	r1, r4
 8004758:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800475c:	4621      	mov	r1, r4
 800475e:	028a      	lsls	r2, r1, #10
 8004760:	4610      	mov	r0, r2
 8004762:	4619      	mov	r1, r3
 8004764:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004766:	2200      	movs	r2, #0
 8004768:	61bb      	str	r3, [r7, #24]
 800476a:	61fa      	str	r2, [r7, #28]
 800476c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004770:	f7fb fd2e 	bl	80001d0 <__aeabi_uldivmod>
 8004774:	4602      	mov	r2, r0
 8004776:	460b      	mov	r3, r1
 8004778:	4613      	mov	r3, r2
 800477a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800477c:	4b0b      	ldr	r3, [pc, #44]	; (80047ac <HAL_RCC_GetSysClockFreq+0x200>)
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	0c1b      	lsrs	r3, r3, #16
 8004782:	f003 0303 	and.w	r3, r3, #3
 8004786:	3301      	adds	r3, #1
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800478c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800478e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004790:	fbb2 f3f3 	udiv	r3, r2, r3
 8004794:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004796:	e002      	b.n	800479e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004798:	4b05      	ldr	r3, [pc, #20]	; (80047b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800479a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800479c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800479e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3750      	adds	r7, #80	; 0x50
 80047a4:	46bd      	mov	sp, r7
 80047a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047aa:	bf00      	nop
 80047ac:	40023800 	.word	0x40023800
 80047b0:	00f42400 	.word	0x00f42400
 80047b4:	007a1200 	.word	0x007a1200

080047b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047b8:	b480      	push	{r7}
 80047ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047bc:	4b03      	ldr	r3, [pc, #12]	; (80047cc <HAL_RCC_GetHCLKFreq+0x14>)
 80047be:	681b      	ldr	r3, [r3, #0]
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	20000000 	.word	0x20000000

080047d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047d4:	f7ff fff0 	bl	80047b8 <HAL_RCC_GetHCLKFreq>
 80047d8:	4602      	mov	r2, r0
 80047da:	4b05      	ldr	r3, [pc, #20]	; (80047f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	0a9b      	lsrs	r3, r3, #10
 80047e0:	f003 0307 	and.w	r3, r3, #7
 80047e4:	4903      	ldr	r1, [pc, #12]	; (80047f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047e6:	5ccb      	ldrb	r3, [r1, r3]
 80047e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	40023800 	.word	0x40023800
 80047f4:	0800de28 	.word	0x0800de28

080047f8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004800:	2300      	movs	r3, #0
 8004802:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004804:	2300      	movs	r3, #0
 8004806:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0301 	and.w	r3, r3, #1
 8004810:	2b00      	cmp	r3, #0
 8004812:	d105      	bne.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800481c:	2b00      	cmp	r3, #0
 800481e:	d035      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004820:	4b62      	ldr	r3, [pc, #392]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004822:	2200      	movs	r2, #0
 8004824:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004826:	f7fc fe4b 	bl	80014c0 <HAL_GetTick>
 800482a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800482c:	e008      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800482e:	f7fc fe47 	bl	80014c0 <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	2b02      	cmp	r3, #2
 800483a:	d901      	bls.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e0b0      	b.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004840:	4b5b      	ldr	r3, [pc, #364]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d1f0      	bne.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	019a      	lsls	r2, r3, #6
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	071b      	lsls	r3, r3, #28
 8004858:	4955      	ldr	r1, [pc, #340]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800485a:	4313      	orrs	r3, r2
 800485c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004860:	4b52      	ldr	r3, [pc, #328]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004862:	2201      	movs	r2, #1
 8004864:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004866:	f7fc fe2b 	bl	80014c0 <HAL_GetTick>
 800486a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800486c:	e008      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800486e:	f7fc fe27 	bl	80014c0 <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	2b02      	cmp	r3, #2
 800487a:	d901      	bls.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e090      	b.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004880:	4b4b      	ldr	r3, [pc, #300]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d0f0      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	2b00      	cmp	r3, #0
 8004896:	f000 8083 	beq.w	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800489a:	2300      	movs	r3, #0
 800489c:	60fb      	str	r3, [r7, #12]
 800489e:	4b44      	ldr	r3, [pc, #272]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a2:	4a43      	ldr	r2, [pc, #268]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048a8:	6413      	str	r3, [r2, #64]	; 0x40
 80048aa:	4b41      	ldr	r3, [pc, #260]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048b2:	60fb      	str	r3, [r7, #12]
 80048b4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80048b6:	4b3f      	ldr	r3, [pc, #252]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a3e      	ldr	r2, [pc, #248]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80048bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048c0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80048c2:	f7fc fdfd 	bl	80014c0 <HAL_GetTick>
 80048c6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80048c8:	e008      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80048ca:	f7fc fdf9 	bl	80014c0 <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d901      	bls.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e062      	b.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80048dc:	4b35      	ldr	r3, [pc, #212]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d0f0      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048e8:	4b31      	ldr	r3, [pc, #196]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048f0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d02f      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004900:	693a      	ldr	r2, [r7, #16]
 8004902:	429a      	cmp	r2, r3
 8004904:	d028      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004906:	4b2a      	ldr	r3, [pc, #168]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800490a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800490e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004910:	4b29      	ldr	r3, [pc, #164]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004912:	2201      	movs	r2, #1
 8004914:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004916:	4b28      	ldr	r3, [pc, #160]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004918:	2200      	movs	r2, #0
 800491a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800491c:	4a24      	ldr	r2, [pc, #144]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004922:	4b23      	ldr	r3, [pc, #140]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b01      	cmp	r3, #1
 800492c:	d114      	bne.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800492e:	f7fc fdc7 	bl	80014c0 <HAL_GetTick>
 8004932:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004934:	e00a      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004936:	f7fc fdc3 	bl	80014c0 <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	f241 3288 	movw	r2, #5000	; 0x1388
 8004944:	4293      	cmp	r3, r2
 8004946:	d901      	bls.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e02a      	b.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800494c:	4b18      	ldr	r3, [pc, #96]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800494e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004950:	f003 0302 	and.w	r3, r3, #2
 8004954:	2b00      	cmp	r3, #0
 8004956:	d0ee      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004960:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004964:	d10d      	bne.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004966:	4b12      	ldr	r3, [pc, #72]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004976:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800497a:	490d      	ldr	r1, [pc, #52]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800497c:	4313      	orrs	r3, r2
 800497e:	608b      	str	r3, [r1, #8]
 8004980:	e005      	b.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004982:	4b0b      	ldr	r3, [pc, #44]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	4a0a      	ldr	r2, [pc, #40]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004988:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800498c:	6093      	str	r3, [r2, #8]
 800498e:	4b08      	ldr	r3, [pc, #32]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004990:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800499a:	4905      	ldr	r1, [pc, #20]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800499c:	4313      	orrs	r3, r2
 800499e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3718      	adds	r7, #24
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	42470068 	.word	0x42470068
 80049b0:	40023800 	.word	0x40023800
 80049b4:	40007000 	.word	0x40007000
 80049b8:	42470e40 	.word	0x42470e40

080049bc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80049bc:	b480      	push	{r7}
 80049be:	b087      	sub	sp, #28
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80049c4:	2300      	movs	r3, #0
 80049c6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80049c8:	2300      	movs	r3, #0
 80049ca:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80049cc:	2300      	movs	r3, #0
 80049ce:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80049d0:	2300      	movs	r3, #0
 80049d2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d13e      	bne.n	8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80049da:	4b23      	ldr	r3, [pc, #140]	; (8004a68 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049e2:	60fb      	str	r3, [r7, #12]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d005      	beq.n	80049f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d12f      	bne.n	8004a50 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80049f0:	4b1e      	ldr	r3, [pc, #120]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80049f2:	617b      	str	r3, [r7, #20]
          break;
 80049f4:	e02f      	b.n	8004a56 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80049f6:	4b1c      	ldr	r3, [pc, #112]	; (8004a68 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a02:	d108      	bne.n	8004a16 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004a04:	4b18      	ldr	r3, [pc, #96]	; (8004a68 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a0c:	4a18      	ldr	r2, [pc, #96]	; (8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a12:	613b      	str	r3, [r7, #16]
 8004a14:	e007      	b.n	8004a26 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004a16:	4b14      	ldr	r3, [pc, #80]	; (8004a68 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a1e:	4a15      	ldr	r2, [pc, #84]	; (8004a74 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a24:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004a26:	4b10      	ldr	r3, [pc, #64]	; (8004a68 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004a28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a2c:	099b      	lsrs	r3, r3, #6
 8004a2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	fb02 f303 	mul.w	r3, r2, r3
 8004a38:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004a3a:	4b0b      	ldr	r3, [pc, #44]	; (8004a68 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004a3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a40:	0f1b      	lsrs	r3, r3, #28
 8004a42:	f003 0307 	and.w	r3, r3, #7
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a4c:	617b      	str	r3, [r7, #20]
          break;
 8004a4e:	e002      	b.n	8004a56 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004a50:	2300      	movs	r3, #0
 8004a52:	617b      	str	r3, [r7, #20]
          break;
 8004a54:	bf00      	nop
        }
      }
      break;
 8004a56:	bf00      	nop
    }
  }
  return frequency;
 8004a58:	697b      	ldr	r3, [r7, #20]
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	371c      	adds	r7, #28
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	40023800 	.word	0x40023800
 8004a6c:	00bb8000 	.word	0x00bb8000
 8004a70:	007a1200 	.word	0x007a1200
 8004a74:	00f42400 	.word	0x00f42400

08004a78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d101      	bne.n	8004a8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e07b      	b.n	8004b82 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d108      	bne.n	8004aa4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a9a:	d009      	beq.n	8004ab0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	61da      	str	r2, [r3, #28]
 8004aa2:	e005      	b.n	8004ab0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d106      	bne.n	8004ad0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f7fc fb88 	bl	80011e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2202      	movs	r2, #2
 8004ad4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ae6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004af8:	431a      	orrs	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b02:	431a      	orrs	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	f003 0302 	and.w	r3, r3, #2
 8004b0c:	431a      	orrs	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	431a      	orrs	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b20:	431a      	orrs	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	69db      	ldr	r3, [r3, #28]
 8004b26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b2a:	431a      	orrs	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a1b      	ldr	r3, [r3, #32]
 8004b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b34:	ea42 0103 	orr.w	r1, r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	430a      	orrs	r2, r1
 8004b46:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	0c1b      	lsrs	r3, r3, #16
 8004b4e:	f003 0104 	and.w	r1, r3, #4
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b56:	f003 0210 	and.w	r2, r3, #16
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	69da      	ldr	r2, [r3, #28]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b70:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3708      	adds	r7, #8
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b082      	sub	sp, #8
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d101      	bne.n	8004b9c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e041      	b.n	8004c20 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d106      	bne.n	8004bb6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f7fc fb5d 	bl	8001270 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2202      	movs	r2, #2
 8004bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	3304      	adds	r3, #4
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	4610      	mov	r0, r2
 8004bca:	f000 f82d 	bl	8004c28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2201      	movs	r2, #1
 8004c02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2201      	movs	r2, #1
 8004c12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3708      	adds	r7, #8
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a40      	ldr	r2, [pc, #256]	; (8004d3c <TIM_Base_SetConfig+0x114>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d013      	beq.n	8004c68 <TIM_Base_SetConfig+0x40>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c46:	d00f      	beq.n	8004c68 <TIM_Base_SetConfig+0x40>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a3d      	ldr	r2, [pc, #244]	; (8004d40 <TIM_Base_SetConfig+0x118>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d00b      	beq.n	8004c68 <TIM_Base_SetConfig+0x40>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a3c      	ldr	r2, [pc, #240]	; (8004d44 <TIM_Base_SetConfig+0x11c>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d007      	beq.n	8004c68 <TIM_Base_SetConfig+0x40>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a3b      	ldr	r2, [pc, #236]	; (8004d48 <TIM_Base_SetConfig+0x120>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d003      	beq.n	8004c68 <TIM_Base_SetConfig+0x40>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a3a      	ldr	r2, [pc, #232]	; (8004d4c <TIM_Base_SetConfig+0x124>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d108      	bne.n	8004c7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a2f      	ldr	r2, [pc, #188]	; (8004d3c <TIM_Base_SetConfig+0x114>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d02b      	beq.n	8004cda <TIM_Base_SetConfig+0xb2>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c88:	d027      	beq.n	8004cda <TIM_Base_SetConfig+0xb2>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a2c      	ldr	r2, [pc, #176]	; (8004d40 <TIM_Base_SetConfig+0x118>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d023      	beq.n	8004cda <TIM_Base_SetConfig+0xb2>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a2b      	ldr	r2, [pc, #172]	; (8004d44 <TIM_Base_SetConfig+0x11c>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d01f      	beq.n	8004cda <TIM_Base_SetConfig+0xb2>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a2a      	ldr	r2, [pc, #168]	; (8004d48 <TIM_Base_SetConfig+0x120>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d01b      	beq.n	8004cda <TIM_Base_SetConfig+0xb2>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a29      	ldr	r2, [pc, #164]	; (8004d4c <TIM_Base_SetConfig+0x124>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d017      	beq.n	8004cda <TIM_Base_SetConfig+0xb2>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a28      	ldr	r2, [pc, #160]	; (8004d50 <TIM_Base_SetConfig+0x128>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d013      	beq.n	8004cda <TIM_Base_SetConfig+0xb2>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a27      	ldr	r2, [pc, #156]	; (8004d54 <TIM_Base_SetConfig+0x12c>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d00f      	beq.n	8004cda <TIM_Base_SetConfig+0xb2>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a26      	ldr	r2, [pc, #152]	; (8004d58 <TIM_Base_SetConfig+0x130>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d00b      	beq.n	8004cda <TIM_Base_SetConfig+0xb2>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a25      	ldr	r2, [pc, #148]	; (8004d5c <TIM_Base_SetConfig+0x134>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d007      	beq.n	8004cda <TIM_Base_SetConfig+0xb2>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a24      	ldr	r2, [pc, #144]	; (8004d60 <TIM_Base_SetConfig+0x138>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d003      	beq.n	8004cda <TIM_Base_SetConfig+0xb2>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a23      	ldr	r2, [pc, #140]	; (8004d64 <TIM_Base_SetConfig+0x13c>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d108      	bne.n	8004cec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ce0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	689a      	ldr	r2, [r3, #8]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a0a      	ldr	r2, [pc, #40]	; (8004d3c <TIM_Base_SetConfig+0x114>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d003      	beq.n	8004d20 <TIM_Base_SetConfig+0xf8>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a0c      	ldr	r2, [pc, #48]	; (8004d4c <TIM_Base_SetConfig+0x124>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d103      	bne.n	8004d28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	691a      	ldr	r2, [r3, #16]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	615a      	str	r2, [r3, #20]
}
 8004d2e:	bf00      	nop
 8004d30:	3714      	adds	r7, #20
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	40010000 	.word	0x40010000
 8004d40:	40000400 	.word	0x40000400
 8004d44:	40000800 	.word	0x40000800
 8004d48:	40000c00 	.word	0x40000c00
 8004d4c:	40010400 	.word	0x40010400
 8004d50:	40014000 	.word	0x40014000
 8004d54:	40014400 	.word	0x40014400
 8004d58:	40014800 	.word	0x40014800
 8004d5c:	40001800 	.word	0x40001800
 8004d60:	40001c00 	.word	0x40001c00
 8004d64:	40002000 	.word	0x40002000

08004d68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d101      	bne.n	8004d80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	e05a      	b.n	8004e36 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004da6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a21      	ldr	r2, [pc, #132]	; (8004e44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d022      	beq.n	8004e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dcc:	d01d      	beq.n	8004e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a1d      	ldr	r2, [pc, #116]	; (8004e48 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d018      	beq.n	8004e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a1b      	ldr	r2, [pc, #108]	; (8004e4c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d013      	beq.n	8004e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a1a      	ldr	r2, [pc, #104]	; (8004e50 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d00e      	beq.n	8004e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a18      	ldr	r2, [pc, #96]	; (8004e54 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d009      	beq.n	8004e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a17      	ldr	r2, [pc, #92]	; (8004e58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d004      	beq.n	8004e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a15      	ldr	r2, [pc, #84]	; (8004e5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d10c      	bne.n	8004e24 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	68ba      	ldr	r2, [r7, #8]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68ba      	ldr	r2, [r7, #8]
 8004e22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3714      	adds	r7, #20
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop
 8004e44:	40010000 	.word	0x40010000
 8004e48:	40000400 	.word	0x40000400
 8004e4c:	40000800 	.word	0x40000800
 8004e50:	40000c00 	.word	0x40000c00
 8004e54:	40010400 	.word	0x40010400
 8004e58:	40014000 	.word	0x40014000
 8004e5c:	40001800 	.word	0x40001800

08004e60 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e60:	b084      	sub	sp, #16
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b084      	sub	sp, #16
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
 8004e6a:	f107 001c 	add.w	r0, r7, #28
 8004e6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d122      	bne.n	8004ebe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004e8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004ea0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d105      	bne.n	8004eb2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 f9c0 	bl	8005238 <USB_CoreReset>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	73fb      	strb	r3, [r7, #15]
 8004ebc:	e01a      	b.n	8004ef4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 f9b4 	bl	8005238 <USB_CoreReset>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004ed4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d106      	bne.n	8004ee8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ede:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	639a      	str	r2, [r3, #56]	; 0x38
 8004ee6:	e005      	b.n	8004ef4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d10b      	bne.n	8004f12 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f043 0206 	orr.w	r2, r3, #6
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f043 0220 	orr.w	r2, r3, #32
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3710      	adds	r7, #16
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f1e:	b004      	add	sp, #16
 8004f20:	4770      	bx	lr

08004f22 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f22:	b480      	push	{r7}
 8004f24:	b083      	sub	sp, #12
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f043 0201 	orr.w	r2, r3, #1
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	370c      	adds	r7, #12
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	f023 0201 	bic.w	r2, r3, #1
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr

08004f66 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b084      	sub	sp, #16
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
 8004f6e:	460b      	mov	r3, r1
 8004f70:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f72:	2300      	movs	r3, #0
 8004f74:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f82:	78fb      	ldrb	r3, [r7, #3]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d115      	bne.n	8004fb4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f94:	2001      	movs	r0, #1
 8004f96:	f7fc fa9f 	bl	80014d8 <HAL_Delay>
      ms++;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 f93a 	bl	800521a <USB_GetMode>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d01e      	beq.n	8004fea <USB_SetCurrentMode+0x84>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2b31      	cmp	r3, #49	; 0x31
 8004fb0:	d9f0      	bls.n	8004f94 <USB_SetCurrentMode+0x2e>
 8004fb2:	e01a      	b.n	8004fea <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004fb4:	78fb      	ldrb	r3, [r7, #3]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d115      	bne.n	8004fe6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004fc6:	2001      	movs	r0, #1
 8004fc8:	f7fc fa86 	bl	80014d8 <HAL_Delay>
      ms++;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	3301      	adds	r3, #1
 8004fd0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 f921 	bl	800521a <USB_GetMode>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d005      	beq.n	8004fea <USB_SetCurrentMode+0x84>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2b31      	cmp	r3, #49	; 0x31
 8004fe2:	d9f0      	bls.n	8004fc6 <USB_SetCurrentMode+0x60>
 8004fe4:	e001      	b.n	8004fea <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e005      	b.n	8004ff6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2b32      	cmp	r3, #50	; 0x32
 8004fee:	d101      	bne.n	8004ff4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e000      	b.n	8004ff6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
	...

08005000 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800500a:	2300      	movs	r3, #0
 800500c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	3301      	adds	r3, #1
 8005012:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	4a13      	ldr	r2, [pc, #76]	; (8005064 <USB_FlushTxFifo+0x64>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d901      	bls.n	8005020 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e01b      	b.n	8005058 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	2b00      	cmp	r3, #0
 8005026:	daf2      	bge.n	800500e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005028:	2300      	movs	r3, #0
 800502a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	019b      	lsls	r3, r3, #6
 8005030:	f043 0220 	orr.w	r2, r3, #32
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	3301      	adds	r3, #1
 800503c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	4a08      	ldr	r2, [pc, #32]	; (8005064 <USB_FlushTxFifo+0x64>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d901      	bls.n	800504a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e006      	b.n	8005058 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	f003 0320 	and.w	r3, r3, #32
 8005052:	2b20      	cmp	r3, #32
 8005054:	d0f0      	beq.n	8005038 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3714      	adds	r7, #20
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr
 8005064:	00030d40 	.word	0x00030d40

08005068 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005068:	b480      	push	{r7}
 800506a:	b085      	sub	sp, #20
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005070:	2300      	movs	r3, #0
 8005072:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	3301      	adds	r3, #1
 8005078:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	4a11      	ldr	r2, [pc, #68]	; (80050c4 <USB_FlushRxFifo+0x5c>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d901      	bls.n	8005086 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e018      	b.n	80050b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	2b00      	cmp	r3, #0
 800508c:	daf2      	bge.n	8005074 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800508e:	2300      	movs	r3, #0
 8005090:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2210      	movs	r2, #16
 8005096:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	3301      	adds	r3, #1
 800509c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	4a08      	ldr	r2, [pc, #32]	; (80050c4 <USB_FlushRxFifo+0x5c>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d901      	bls.n	80050aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e006      	b.n	80050b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	f003 0310 	and.w	r3, r3, #16
 80050b2:	2b10      	cmp	r3, #16
 80050b4:	d0f0      	beq.n	8005098 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3714      	adds	r7, #20
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr
 80050c4:	00030d40 	.word	0x00030d40

080050c8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b089      	sub	sp, #36	; 0x24
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	4611      	mov	r1, r2
 80050d4:	461a      	mov	r2, r3
 80050d6:	460b      	mov	r3, r1
 80050d8:	71fb      	strb	r3, [r7, #7]
 80050da:	4613      	mov	r3, r2
 80050dc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80050e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d123      	bne.n	8005136 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80050ee:	88bb      	ldrh	r3, [r7, #4]
 80050f0:	3303      	adds	r3, #3
 80050f2:	089b      	lsrs	r3, r3, #2
 80050f4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80050f6:	2300      	movs	r3, #0
 80050f8:	61bb      	str	r3, [r7, #24]
 80050fa:	e018      	b.n	800512e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80050fc:	79fb      	ldrb	r3, [r7, #7]
 80050fe:	031a      	lsls	r2, r3, #12
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	4413      	add	r3, r2
 8005104:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005108:	461a      	mov	r2, r3
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	3301      	adds	r3, #1
 8005114:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	3301      	adds	r3, #1
 800511a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	3301      	adds	r3, #1
 8005120:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	3301      	adds	r3, #1
 8005126:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	3301      	adds	r3, #1
 800512c:	61bb      	str	r3, [r7, #24]
 800512e:	69ba      	ldr	r2, [r7, #24]
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	429a      	cmp	r2, r3
 8005134:	d3e2      	bcc.n	80050fc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3724      	adds	r7, #36	; 0x24
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005144:	b480      	push	{r7}
 8005146:	b08b      	sub	sp, #44	; 0x2c
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	4613      	mov	r3, r2
 8005150:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800515a:	88fb      	ldrh	r3, [r7, #6]
 800515c:	089b      	lsrs	r3, r3, #2
 800515e:	b29b      	uxth	r3, r3
 8005160:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005162:	88fb      	ldrh	r3, [r7, #6]
 8005164:	f003 0303 	and.w	r3, r3, #3
 8005168:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800516a:	2300      	movs	r3, #0
 800516c:	623b      	str	r3, [r7, #32]
 800516e:	e014      	b.n	800519a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517a:	601a      	str	r2, [r3, #0]
    pDest++;
 800517c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517e:	3301      	adds	r3, #1
 8005180:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005184:	3301      	adds	r3, #1
 8005186:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518a:	3301      	adds	r3, #1
 800518c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800518e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005190:	3301      	adds	r3, #1
 8005192:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005194:	6a3b      	ldr	r3, [r7, #32]
 8005196:	3301      	adds	r3, #1
 8005198:	623b      	str	r3, [r7, #32]
 800519a:	6a3a      	ldr	r2, [r7, #32]
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d3e6      	bcc.n	8005170 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80051a2:	8bfb      	ldrh	r3, [r7, #30]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d01e      	beq.n	80051e6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80051a8:	2300      	movs	r3, #0
 80051aa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051b2:	461a      	mov	r2, r3
 80051b4:	f107 0310 	add.w	r3, r7, #16
 80051b8:	6812      	ldr	r2, [r2, #0]
 80051ba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80051bc:	693a      	ldr	r2, [r7, #16]
 80051be:	6a3b      	ldr	r3, [r7, #32]
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	00db      	lsls	r3, r3, #3
 80051c4:	fa22 f303 	lsr.w	r3, r2, r3
 80051c8:	b2da      	uxtb	r2, r3
 80051ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051cc:	701a      	strb	r2, [r3, #0]
      i++;
 80051ce:	6a3b      	ldr	r3, [r7, #32]
 80051d0:	3301      	adds	r3, #1
 80051d2:	623b      	str	r3, [r7, #32]
      pDest++;
 80051d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d6:	3301      	adds	r3, #1
 80051d8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80051da:	8bfb      	ldrh	r3, [r7, #30]
 80051dc:	3b01      	subs	r3, #1
 80051de:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80051e0:	8bfb      	ldrh	r3, [r7, #30]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1ea      	bne.n	80051bc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80051e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	372c      	adds	r7, #44	; 0x2c
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	695b      	ldr	r3, [r3, #20]
 8005200:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	4013      	ands	r3, r2
 800520a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800520c:	68fb      	ldr	r3, [r7, #12]
}
 800520e:	4618      	mov	r0, r3
 8005210:	3714      	adds	r7, #20
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr

0800521a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800521a:	b480      	push	{r7}
 800521c:	b083      	sub	sp, #12
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	f003 0301 	and.w	r3, r3, #1
}
 800522a:	4618      	mov	r0, r3
 800522c:	370c      	adds	r7, #12
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
	...

08005238 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005240:	2300      	movs	r3, #0
 8005242:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	3301      	adds	r3, #1
 8005248:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	4a13      	ldr	r2, [pc, #76]	; (800529c <USB_CoreReset+0x64>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d901      	bls.n	8005256 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e01b      	b.n	800528e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	2b00      	cmp	r3, #0
 800525c:	daf2      	bge.n	8005244 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800525e:	2300      	movs	r3, #0
 8005260:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	f043 0201 	orr.w	r2, r3, #1
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	3301      	adds	r3, #1
 8005272:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	4a09      	ldr	r2, [pc, #36]	; (800529c <USB_CoreReset+0x64>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d901      	bls.n	8005280 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e006      	b.n	800528e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	f003 0301 	and.w	r3, r3, #1
 8005288:	2b01      	cmp	r3, #1
 800528a:	d0f0      	beq.n	800526e <USB_CoreReset+0x36>

  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3714      	adds	r7, #20
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	00030d40 	.word	0x00030d40

080052a0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052a0:	b084      	sub	sp, #16
 80052a2:	b580      	push	{r7, lr}
 80052a4:	b086      	sub	sp, #24
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
 80052aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80052ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80052b2:	2300      	movs	r3, #0
 80052b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80052c0:	461a      	mov	r2, r3
 80052c2:	2300      	movs	r3, #0
 80052c4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d018      	beq.n	8005328 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80052f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d10a      	bne.n	8005312 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800530a:	f043 0304 	orr.w	r3, r3, #4
 800530e:	6013      	str	r3, [r2, #0]
 8005310:	e014      	b.n	800533c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005320:	f023 0304 	bic.w	r3, r3, #4
 8005324:	6013      	str	r3, [r2, #0]
 8005326:	e009      	b.n	800533c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005336:	f023 0304 	bic.w	r3, r3, #4
 800533a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800533c:	2110      	movs	r1, #16
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f7ff fe5e 	bl	8005000 <USB_FlushTxFifo>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d001      	beq.n	800534e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f7ff fe8a 	bl	8005068 <USB_FlushRxFifo>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d001      	beq.n	800535e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800535e:	2300      	movs	r3, #0
 8005360:	613b      	str	r3, [r7, #16]
 8005362:	e015      	b.n	8005390 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	015a      	lsls	r2, r3, #5
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	4413      	add	r3, r2
 800536c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005370:	461a      	mov	r2, r3
 8005372:	f04f 33ff 	mov.w	r3, #4294967295
 8005376:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	015a      	lsls	r2, r3, #5
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	4413      	add	r3, r2
 8005380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005384:	461a      	mov	r2, r3
 8005386:	2300      	movs	r3, #0
 8005388:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	3301      	adds	r3, #1
 800538e:	613b      	str	r3, [r7, #16]
 8005390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	429a      	cmp	r2, r3
 8005396:	d3e5      	bcc.n	8005364 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f04f 32ff 	mov.w	r2, #4294967295
 80053a4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00b      	beq.n	80053ca <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053b8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a13      	ldr	r2, [pc, #76]	; (800540c <USB_HostInit+0x16c>)
 80053be:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a13      	ldr	r2, [pc, #76]	; (8005410 <USB_HostInit+0x170>)
 80053c4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80053c8:	e009      	b.n	80053de <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2280      	movs	r2, #128	; 0x80
 80053ce:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a10      	ldr	r2, [pc, #64]	; (8005414 <USB_HostInit+0x174>)
 80053d4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a0f      	ldr	r2, [pc, #60]	; (8005418 <USB_HostInit+0x178>)
 80053da:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80053de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d105      	bne.n	80053f0 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	f043 0210 	orr.w	r2, r3, #16
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	699a      	ldr	r2, [r3, #24]
 80053f4:	4b09      	ldr	r3, [pc, #36]	; (800541c <USB_HostInit+0x17c>)
 80053f6:	4313      	orrs	r3, r2
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80053fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3718      	adds	r7, #24
 8005402:	46bd      	mov	sp, r7
 8005404:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005408:	b004      	add	sp, #16
 800540a:	4770      	bx	lr
 800540c:	01000200 	.word	0x01000200
 8005410:	00e00300 	.word	0x00e00300
 8005414:	00600080 	.word	0x00600080
 8005418:	004000e0 	.word	0x004000e0
 800541c:	a3200008 	.word	0xa3200008

08005420 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	460b      	mov	r3, r1
 800542a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800543e:	f023 0303 	bic.w	r3, r3, #3
 8005442:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	78fb      	ldrb	r3, [r7, #3]
 800544e:	f003 0303 	and.w	r3, r3, #3
 8005452:	68f9      	ldr	r1, [r7, #12]
 8005454:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005458:	4313      	orrs	r3, r2
 800545a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800545c:	78fb      	ldrb	r3, [r7, #3]
 800545e:	2b01      	cmp	r3, #1
 8005460:	d107      	bne.n	8005472 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005468:	461a      	mov	r2, r3
 800546a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800546e:	6053      	str	r3, [r2, #4]
 8005470:	e009      	b.n	8005486 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005472:	78fb      	ldrb	r3, [r7, #3]
 8005474:	2b02      	cmp	r3, #2
 8005476:	d106      	bne.n	8005486 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800547e:	461a      	mov	r2, r3
 8005480:	f241 7370 	movw	r3, #6000	; 0x1770
 8005484:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3714      	adds	r7, #20
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80054a0:	2300      	movs	r3, #0
 80054a2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80054b4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80054be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054c2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80054c4:	2064      	movs	r0, #100	; 0x64
 80054c6:	f7fc f807 	bl	80014d8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80054d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054d6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80054d8:	200a      	movs	r0, #10
 80054da:	f7fb fffd 	bl	80014d8 <HAL_Delay>

  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3710      	adds	r7, #16
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	460b      	mov	r3, r1
 80054f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80054f8:	2300      	movs	r3, #0
 80054fa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800550c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d109      	bne.n	800552c <USB_DriveVbus+0x44>
 8005518:	78fb      	ldrb	r3, [r7, #3]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d106      	bne.n	800552c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005526:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800552a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005536:	d109      	bne.n	800554c <USB_DriveVbus+0x64>
 8005538:	78fb      	ldrb	r3, [r7, #3]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d106      	bne.n	800554c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005546:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800554a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3714      	adds	r7, #20
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr

0800555a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800555a:	b480      	push	{r7}
 800555c:	b085      	sub	sp, #20
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005566:	2300      	movs	r3, #0
 8005568:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	0c5b      	lsrs	r3, r3, #17
 8005578:	f003 0303 	and.w	r3, r3, #3
}
 800557c:	4618      	mov	r0, r3
 800557e:	3714      	adds	r7, #20
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	b29b      	uxth	r3, r3
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3714      	adds	r7, #20
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
	...

080055ac <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b088      	sub	sp, #32
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	4608      	mov	r0, r1
 80055b6:	4611      	mov	r1, r2
 80055b8:	461a      	mov	r2, r3
 80055ba:	4603      	mov	r3, r0
 80055bc:	70fb      	strb	r3, [r7, #3]
 80055be:	460b      	mov	r3, r1
 80055c0:	70bb      	strb	r3, [r7, #2]
 80055c2:	4613      	mov	r3, r2
 80055c4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80055c6:	2300      	movs	r3, #0
 80055c8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80055ce:	78fb      	ldrb	r3, [r7, #3]
 80055d0:	015a      	lsls	r2, r3, #5
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	4413      	add	r3, r2
 80055d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055da:	461a      	mov	r2, r3
 80055dc:	f04f 33ff 	mov.w	r3, #4294967295
 80055e0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80055e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80055e6:	2b03      	cmp	r3, #3
 80055e8:	d87e      	bhi.n	80056e8 <USB_HC_Init+0x13c>
 80055ea:	a201      	add	r2, pc, #4	; (adr r2, 80055f0 <USB_HC_Init+0x44>)
 80055ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f0:	08005601 	.word	0x08005601
 80055f4:	080056ab 	.word	0x080056ab
 80055f8:	08005601 	.word	0x08005601
 80055fc:	0800566d 	.word	0x0800566d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005600:	78fb      	ldrb	r3, [r7, #3]
 8005602:	015a      	lsls	r2, r3, #5
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	4413      	add	r3, r2
 8005608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800560c:	461a      	mov	r2, r3
 800560e:	f240 439d 	movw	r3, #1181	; 0x49d
 8005612:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005614:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005618:	2b00      	cmp	r3, #0
 800561a:	da10      	bge.n	800563e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800561c:	78fb      	ldrb	r3, [r7, #3]
 800561e:	015a      	lsls	r2, r3, #5
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	4413      	add	r3, r2
 8005624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	78fa      	ldrb	r2, [r7, #3]
 800562c:	0151      	lsls	r1, r2, #5
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	440a      	add	r2, r1
 8005632:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005636:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800563a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800563c:	e057      	b.n	80056ee <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005646:	2b00      	cmp	r3, #0
 8005648:	d051      	beq.n	80056ee <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800564a:	78fb      	ldrb	r3, [r7, #3]
 800564c:	015a      	lsls	r2, r3, #5
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	4413      	add	r3, r2
 8005652:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	78fa      	ldrb	r2, [r7, #3]
 800565a:	0151      	lsls	r1, r2, #5
 800565c:	693a      	ldr	r2, [r7, #16]
 800565e:	440a      	add	r2, r1
 8005660:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005664:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005668:	60d3      	str	r3, [r2, #12]
      break;
 800566a:	e040      	b.n	80056ee <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800566c:	78fb      	ldrb	r3, [r7, #3]
 800566e:	015a      	lsls	r2, r3, #5
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	4413      	add	r3, r2
 8005674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005678:	461a      	mov	r2, r3
 800567a:	f240 639d 	movw	r3, #1693	; 0x69d
 800567e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005680:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005684:	2b00      	cmp	r3, #0
 8005686:	da34      	bge.n	80056f2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005688:	78fb      	ldrb	r3, [r7, #3]
 800568a:	015a      	lsls	r2, r3, #5
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	4413      	add	r3, r2
 8005690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	78fa      	ldrb	r2, [r7, #3]
 8005698:	0151      	lsls	r1, r2, #5
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	440a      	add	r2, r1
 800569e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056a6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80056a8:	e023      	b.n	80056f2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80056aa:	78fb      	ldrb	r3, [r7, #3]
 80056ac:	015a      	lsls	r2, r3, #5
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	4413      	add	r3, r2
 80056b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056b6:	461a      	mov	r2, r3
 80056b8:	f240 2325 	movw	r3, #549	; 0x225
 80056bc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80056be:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	da17      	bge.n	80056f6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80056c6:	78fb      	ldrb	r3, [r7, #3]
 80056c8:	015a      	lsls	r2, r3, #5
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	4413      	add	r3, r2
 80056ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	78fa      	ldrb	r2, [r7, #3]
 80056d6:	0151      	lsls	r1, r2, #5
 80056d8:	693a      	ldr	r2, [r7, #16]
 80056da:	440a      	add	r2, r1
 80056dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056e0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80056e4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80056e6:	e006      	b.n	80056f6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	77fb      	strb	r3, [r7, #31]
      break;
 80056ec:	e004      	b.n	80056f8 <USB_HC_Init+0x14c>
      break;
 80056ee:	bf00      	nop
 80056f0:	e002      	b.n	80056f8 <USB_HC_Init+0x14c>
      break;
 80056f2:	bf00      	nop
 80056f4:	e000      	b.n	80056f8 <USB_HC_Init+0x14c>
      break;
 80056f6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80056f8:	78fb      	ldrb	r3, [r7, #3]
 80056fa:	015a      	lsls	r2, r3, #5
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	4413      	add	r3, r2
 8005700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	78fa      	ldrb	r2, [r7, #3]
 8005708:	0151      	lsls	r1, r2, #5
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	440a      	add	r2, r1
 800570e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005712:	f043 0302 	orr.w	r3, r3, #2
 8005716:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800571e:	699a      	ldr	r2, [r3, #24]
 8005720:	78fb      	ldrb	r3, [r7, #3]
 8005722:	f003 030f 	and.w	r3, r3, #15
 8005726:	2101      	movs	r1, #1
 8005728:	fa01 f303 	lsl.w	r3, r1, r3
 800572c:	6939      	ldr	r1, [r7, #16]
 800572e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005732:	4313      	orrs	r3, r2
 8005734:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005742:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005746:	2b00      	cmp	r3, #0
 8005748:	da03      	bge.n	8005752 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800574a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800574e:	61bb      	str	r3, [r7, #24]
 8005750:	e001      	b.n	8005756 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005752:	2300      	movs	r3, #0
 8005754:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f7ff feff 	bl	800555a <USB_GetHostSpeed>
 800575c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800575e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005762:	2b02      	cmp	r3, #2
 8005764:	d106      	bne.n	8005774 <USB_HC_Init+0x1c8>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2b02      	cmp	r3, #2
 800576a:	d003      	beq.n	8005774 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800576c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005770:	617b      	str	r3, [r7, #20]
 8005772:	e001      	b.n	8005778 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005774:	2300      	movs	r3, #0
 8005776:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005778:	787b      	ldrb	r3, [r7, #1]
 800577a:	059b      	lsls	r3, r3, #22
 800577c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005780:	78bb      	ldrb	r3, [r7, #2]
 8005782:	02db      	lsls	r3, r3, #11
 8005784:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005788:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800578a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800578e:	049b      	lsls	r3, r3, #18
 8005790:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005794:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005796:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005798:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800579c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80057a2:	78fb      	ldrb	r3, [r7, #3]
 80057a4:	0159      	lsls	r1, r3, #5
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	440b      	add	r3, r1
 80057aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ae:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80057b4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80057b6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80057ba:	2b03      	cmp	r3, #3
 80057bc:	d003      	beq.n	80057c6 <USB_HC_Init+0x21a>
 80057be:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d10f      	bne.n	80057e6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80057c6:	78fb      	ldrb	r3, [r7, #3]
 80057c8:	015a      	lsls	r2, r3, #5
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	4413      	add	r3, r2
 80057ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	78fa      	ldrb	r2, [r7, #3]
 80057d6:	0151      	lsls	r1, r2, #5
 80057d8:	693a      	ldr	r2, [r7, #16]
 80057da:	440a      	add	r2, r1
 80057dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057e4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80057e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3720      	adds	r7, #32
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b08c      	sub	sp, #48	; 0x30
 80057f4:	af02      	add	r7, sp, #8
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	4613      	mov	r3, r2
 80057fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	785b      	ldrb	r3, [r3, #1]
 8005806:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005808:	f44f 7380 	mov.w	r3, #256	; 0x100
 800580c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005816:	2b00      	cmp	r3, #0
 8005818:	d02d      	beq.n	8005876 <USB_HC_StartXfer+0x86>
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	791b      	ldrb	r3, [r3, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d129      	bne.n	8005876 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005822:	79fb      	ldrb	r3, [r7, #7]
 8005824:	2b01      	cmp	r3, #1
 8005826:	d117      	bne.n	8005858 <USB_HC_StartXfer+0x68>
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	79db      	ldrb	r3, [r3, #7]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d003      	beq.n	8005838 <USB_HC_StartXfer+0x48>
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	79db      	ldrb	r3, [r3, #7]
 8005834:	2b02      	cmp	r3, #2
 8005836:	d10f      	bne.n	8005858 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	015a      	lsls	r2, r3, #5
 800583c:	6a3b      	ldr	r3, [r7, #32]
 800583e:	4413      	add	r3, r2
 8005840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	69fa      	ldr	r2, [r7, #28]
 8005848:	0151      	lsls	r1, r2, #5
 800584a:	6a3a      	ldr	r2, [r7, #32]
 800584c:	440a      	add	r2, r1
 800584e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005856:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005858:	79fb      	ldrb	r3, [r7, #7]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d10b      	bne.n	8005876 <USB_HC_StartXfer+0x86>
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	795b      	ldrb	r3, [r3, #5]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d107      	bne.n	8005876 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	785b      	ldrb	r3, [r3, #1]
 800586a:	4619      	mov	r1, r3
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	f000 fa0f 	bl	8005c90 <USB_DoPing>
      return HAL_OK;
 8005872:	2300      	movs	r3, #0
 8005874:	e0f8      	b.n	8005a68 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	695b      	ldr	r3, [r3, #20]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d018      	beq.n	80058b0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	68ba      	ldr	r2, [r7, #8]
 8005884:	8912      	ldrh	r2, [r2, #8]
 8005886:	4413      	add	r3, r2
 8005888:	3b01      	subs	r3, #1
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	8912      	ldrh	r2, [r2, #8]
 800588e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005892:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005894:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005896:	8b7b      	ldrh	r3, [r7, #26]
 8005898:	429a      	cmp	r2, r3
 800589a:	d90b      	bls.n	80058b4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800589c:	8b7b      	ldrh	r3, [r7, #26]
 800589e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80058a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058a2:	68ba      	ldr	r2, [r7, #8]
 80058a4:	8912      	ldrh	r2, [r2, #8]
 80058a6:	fb03 f202 	mul.w	r2, r3, r2
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	611a      	str	r2, [r3, #16]
 80058ae:	e001      	b.n	80058b4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80058b0:	2301      	movs	r3, #1
 80058b2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	78db      	ldrb	r3, [r3, #3]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d007      	beq.n	80058cc <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80058bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058be:	68ba      	ldr	r2, [r7, #8]
 80058c0:	8912      	ldrh	r2, [r2, #8]
 80058c2:	fb03 f202 	mul.w	r2, r3, r2
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	611a      	str	r2, [r3, #16]
 80058ca:	e003      	b.n	80058d4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	695a      	ldr	r2, [r3, #20]
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80058dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058de:	04d9      	lsls	r1, r3, #19
 80058e0:	4b63      	ldr	r3, [pc, #396]	; (8005a70 <USB_HC_StartXfer+0x280>)
 80058e2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80058e4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	7a9b      	ldrb	r3, [r3, #10]
 80058ea:	075b      	lsls	r3, r3, #29
 80058ec:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80058f0:	69f9      	ldr	r1, [r7, #28]
 80058f2:	0148      	lsls	r0, r1, #5
 80058f4:	6a39      	ldr	r1, [r7, #32]
 80058f6:	4401      	add	r1, r0
 80058f8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80058fc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80058fe:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005900:	79fb      	ldrb	r3, [r7, #7]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d009      	beq.n	800591a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	68d9      	ldr	r1, [r3, #12]
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	015a      	lsls	r2, r3, #5
 800590e:	6a3b      	ldr	r3, [r7, #32]
 8005910:	4413      	add	r3, r2
 8005912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005916:	460a      	mov	r2, r1
 8005918:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f003 0301 	and.w	r3, r3, #1
 8005926:	2b00      	cmp	r3, #0
 8005928:	bf0c      	ite	eq
 800592a:	2301      	moveq	r3, #1
 800592c:	2300      	movne	r3, #0
 800592e:	b2db      	uxtb	r3, r3
 8005930:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	015a      	lsls	r2, r3, #5
 8005936:	6a3b      	ldr	r3, [r7, #32]
 8005938:	4413      	add	r3, r2
 800593a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	69fa      	ldr	r2, [r7, #28]
 8005942:	0151      	lsls	r1, r2, #5
 8005944:	6a3a      	ldr	r2, [r7, #32]
 8005946:	440a      	add	r2, r1
 8005948:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800594c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005950:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	015a      	lsls	r2, r3, #5
 8005956:	6a3b      	ldr	r3, [r7, #32]
 8005958:	4413      	add	r3, r2
 800595a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	7e7b      	ldrb	r3, [r7, #25]
 8005962:	075b      	lsls	r3, r3, #29
 8005964:	69f9      	ldr	r1, [r7, #28]
 8005966:	0148      	lsls	r0, r1, #5
 8005968:	6a39      	ldr	r1, [r7, #32]
 800596a:	4401      	add	r1, r0
 800596c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005970:	4313      	orrs	r3, r2
 8005972:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	015a      	lsls	r2, r3, #5
 8005978:	6a3b      	ldr	r3, [r7, #32]
 800597a:	4413      	add	r3, r2
 800597c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800598a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	78db      	ldrb	r3, [r3, #3]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d004      	beq.n	800599e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800599a:	613b      	str	r3, [r7, #16]
 800599c:	e003      	b.n	80059a6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80059a4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059ac:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	015a      	lsls	r2, r3, #5
 80059b2:	6a3b      	ldr	r3, [r7, #32]
 80059b4:	4413      	add	r3, r2
 80059b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ba:	461a      	mov	r2, r3
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80059c0:	79fb      	ldrb	r3, [r7, #7]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d001      	beq.n	80059ca <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80059c6:	2300      	movs	r3, #0
 80059c8:	e04e      	b.n	8005a68 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	78db      	ldrb	r3, [r3, #3]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d149      	bne.n	8005a66 <USB_HC_StartXfer+0x276>
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d045      	beq.n	8005a66 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	79db      	ldrb	r3, [r3, #7]
 80059de:	2b03      	cmp	r3, #3
 80059e0:	d830      	bhi.n	8005a44 <USB_HC_StartXfer+0x254>
 80059e2:	a201      	add	r2, pc, #4	; (adr r2, 80059e8 <USB_HC_StartXfer+0x1f8>)
 80059e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e8:	080059f9 	.word	0x080059f9
 80059ec:	08005a1d 	.word	0x08005a1d
 80059f0:	080059f9 	.word	0x080059f9
 80059f4:	08005a1d 	.word	0x08005a1d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	695b      	ldr	r3, [r3, #20]
 80059fc:	3303      	adds	r3, #3
 80059fe:	089b      	lsrs	r3, r3, #2
 8005a00:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005a02:	8afa      	ldrh	r2, [r7, #22]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d91c      	bls.n	8005a48 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	f043 0220 	orr.w	r2, r3, #32
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	619a      	str	r2, [r3, #24]
        }
        break;
 8005a1a:	e015      	b.n	8005a48 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	695b      	ldr	r3, [r3, #20]
 8005a20:	3303      	adds	r3, #3
 8005a22:	089b      	lsrs	r3, r3, #2
 8005a24:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005a26:	8afa      	ldrh	r2, [r7, #22]
 8005a28:	6a3b      	ldr	r3, [r7, #32]
 8005a2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d90a      	bls.n	8005a4c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	619a      	str	r2, [r3, #24]
        }
        break;
 8005a42:	e003      	b.n	8005a4c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005a44:	bf00      	nop
 8005a46:	e002      	b.n	8005a4e <USB_HC_StartXfer+0x25e>
        break;
 8005a48:	bf00      	nop
 8005a4a:	e000      	b.n	8005a4e <USB_HC_StartXfer+0x25e>
        break;
 8005a4c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	68d9      	ldr	r1, [r3, #12]
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	785a      	ldrb	r2, [r3, #1]
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	2000      	movs	r0, #0
 8005a5e:	9000      	str	r0, [sp, #0]
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f7ff fb31 	bl	80050c8 <USB_WritePacket>
  }

  return HAL_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3728      	adds	r7, #40	; 0x28
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	1ff80000 	.word	0x1ff80000

08005a74 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b085      	sub	sp, #20
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a86:	695b      	ldr	r3, [r3, #20]
 8005a88:	b29b      	uxth	r3, r3
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3714      	adds	r7, #20
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr

08005a96 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005a96:	b480      	push	{r7}
 8005a98:	b089      	sub	sp, #36	; 0x24
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005aa6:	78fb      	ldrb	r3, [r7, #3]
 8005aa8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	015a      	lsls	r2, r3, #5
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	0c9b      	lsrs	r3, r3, #18
 8005abe:	f003 0303 	and.w	r3, r3, #3
 8005ac2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	015a      	lsls	r2, r3, #5
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	4413      	add	r3, r2
 8005acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	0fdb      	lsrs	r3, r3, #31
 8005ad4:	f003 0301 	and.w	r3, r3, #1
 8005ad8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	f003 0320 	and.w	r3, r3, #32
 8005ae2:	2b20      	cmp	r3, #32
 8005ae4:	d104      	bne.n	8005af0 <USB_HC_Halt+0x5a>
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d101      	bne.n	8005af0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005aec:	2300      	movs	r3, #0
 8005aee:	e0c8      	b.n	8005c82 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d002      	beq.n	8005afc <USB_HC_Halt+0x66>
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d163      	bne.n	8005bc4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	015a      	lsls	r2, r3, #5
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	4413      	add	r3, r2
 8005b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	69ba      	ldr	r2, [r7, #24]
 8005b0c:	0151      	lsls	r1, r2, #5
 8005b0e:	69fa      	ldr	r2, [r7, #28]
 8005b10:	440a      	add	r2, r1
 8005b12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b1a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f003 0320 	and.w	r3, r3, #32
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	f040 80ab 	bne.w	8005c80 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d133      	bne.n	8005b9e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	015a      	lsls	r2, r3, #5
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	69ba      	ldr	r2, [r7, #24]
 8005b46:	0151      	lsls	r1, r2, #5
 8005b48:	69fa      	ldr	r2, [r7, #28]
 8005b4a:	440a      	add	r2, r1
 8005b4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b54:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	015a      	lsls	r2, r3, #5
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	69ba      	ldr	r2, [r7, #24]
 8005b66:	0151      	lsls	r1, r2, #5
 8005b68:	69fa      	ldr	r2, [r7, #28]
 8005b6a:	440a      	add	r2, r1
 8005b6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b74:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b82:	d81d      	bhi.n	8005bc0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	015a      	lsls	r2, r3, #5
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b9a:	d0ec      	beq.n	8005b76 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005b9c:	e070      	b.n	8005c80 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	015a      	lsls	r2, r3, #5
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	69ba      	ldr	r2, [r7, #24]
 8005bae:	0151      	lsls	r1, r2, #5
 8005bb0:	69fa      	ldr	r2, [r7, #28]
 8005bb2:	440a      	add	r2, r1
 8005bb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005bbc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005bbe:	e05f      	b.n	8005c80 <USB_HC_Halt+0x1ea>
            break;
 8005bc0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005bc2:	e05d      	b.n	8005c80 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	015a      	lsls	r2, r3, #5
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	4413      	add	r3, r2
 8005bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	69ba      	ldr	r2, [r7, #24]
 8005bd4:	0151      	lsls	r1, r2, #5
 8005bd6:	69fa      	ldr	r2, [r7, #28]
 8005bd8:	440a      	add	r2, r1
 8005bda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bde:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005be2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d133      	bne.n	8005c5c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	015a      	lsls	r2, r3, #5
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	69ba      	ldr	r2, [r7, #24]
 8005c04:	0151      	lsls	r1, r2, #5
 8005c06:	69fa      	ldr	r2, [r7, #28]
 8005c08:	440a      	add	r2, r1
 8005c0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c12:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	015a      	lsls	r2, r3, #5
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	69ba      	ldr	r2, [r7, #24]
 8005c24:	0151      	lsls	r1, r2, #5
 8005c26:	69fa      	ldr	r2, [r7, #28]
 8005c28:	440a      	add	r2, r1
 8005c2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c32:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	3301      	adds	r3, #1
 8005c38:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c40:	d81d      	bhi.n	8005c7e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	015a      	lsls	r2, r3, #5
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	4413      	add	r3, r2
 8005c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c58:	d0ec      	beq.n	8005c34 <USB_HC_Halt+0x19e>
 8005c5a:	e011      	b.n	8005c80 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	015a      	lsls	r2, r3, #5
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	4413      	add	r3, r2
 8005c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	69ba      	ldr	r2, [r7, #24]
 8005c6c:	0151      	lsls	r1, r2, #5
 8005c6e:	69fa      	ldr	r2, [r7, #28]
 8005c70:	440a      	add	r2, r1
 8005c72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c7a:	6013      	str	r3, [r2, #0]
 8005c7c:	e000      	b.n	8005c80 <USB_HC_Halt+0x1ea>
          break;
 8005c7e:	bf00      	nop
    }
  }

  return HAL_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3724      	adds	r7, #36	; 0x24
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr
	...

08005c90 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b087      	sub	sp, #28
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	460b      	mov	r3, r1
 8005c9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005ca0:	78fb      	ldrb	r3, [r7, #3]
 8005ca2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	04da      	lsls	r2, r3, #19
 8005cac:	4b15      	ldr	r3, [pc, #84]	; (8005d04 <USB_DoPing+0x74>)
 8005cae:	4013      	ands	r3, r2
 8005cb0:	693a      	ldr	r2, [r7, #16]
 8005cb2:	0151      	lsls	r1, r2, #5
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	440a      	add	r2, r1
 8005cb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005cc0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	015a      	lsls	r2, r3, #5
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	4413      	add	r3, r2
 8005cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005cd8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ce0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	015a      	lsls	r2, r3, #5
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	4413      	add	r3, r2
 8005cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cee:	461a      	mov	r2, r3
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	371c      	adds	r7, #28
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	1ff80000 	.word	0x1ff80000

08005d08 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b088      	sub	sp, #32
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d10:	2300      	movs	r3, #0
 8005d12:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f7ff f911 	bl	8004f44 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d22:	2110      	movs	r1, #16
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f7ff f96b 	bl	8005000 <USB_FlushTxFifo>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d001      	beq.n	8005d34 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f7ff f997 	bl	8005068 <USB_FlushRxFifo>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d001      	beq.n	8005d44 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005d44:	2300      	movs	r3, #0
 8005d46:	61bb      	str	r3, [r7, #24]
 8005d48:	e01f      	b.n	8005d8a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	015a      	lsls	r2, r3, #5
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	4413      	add	r3, r2
 8005d52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d60:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d68:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d70:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	015a      	lsls	r2, r3, #5
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	4413      	add	r3, r2
 8005d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d7e:	461a      	mov	r2, r3
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	3301      	adds	r3, #1
 8005d88:	61bb      	str	r3, [r7, #24]
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	2b0f      	cmp	r3, #15
 8005d8e:	d9dc      	bls.n	8005d4a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005d90:	2300      	movs	r3, #0
 8005d92:	61bb      	str	r3, [r7, #24]
 8005d94:	e034      	b.n	8005e00 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	015a      	lsls	r2, r3, #5
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005dac:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005db4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005dbc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	015a      	lsls	r2, r3, #5
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dca:	461a      	mov	r2, r3
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ddc:	d80c      	bhi.n	8005df8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	015a      	lsls	r2, r3, #5
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	4413      	add	r3, r2
 8005de6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005df0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005df4:	d0ec      	beq.n	8005dd0 <USB_StopHost+0xc8>
 8005df6:	e000      	b.n	8005dfa <USB_StopHost+0xf2>
        break;
 8005df8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	61bb      	str	r3, [r7, #24]
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	2b0f      	cmp	r3, #15
 8005e04:	d9c7      	bls.n	8005d96 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e12:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f04f 32ff 	mov.w	r2, #4294967295
 8005e1a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f7ff f880 	bl	8004f22 <USB_EnableGlobalInt>

  return ret;
 8005e22:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3720      	adds	r7, #32
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005e2c:	b590      	push	{r4, r7, lr}
 8005e2e:	b089      	sub	sp, #36	; 0x24
 8005e30:	af04      	add	r7, sp, #16
 8005e32:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005e34:	2301      	movs	r3, #1
 8005e36:	2202      	movs	r2, #2
 8005e38:	2102      	movs	r1, #2
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 fcb2 	bl	80067a4 <USBH_FindInterface>
 8005e40:	4603      	mov	r3, r0
 8005e42:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005e44:	7bfb      	ldrb	r3, [r7, #15]
 8005e46:	2bff      	cmp	r3, #255	; 0xff
 8005e48:	d002      	beq.n	8005e50 <USBH_CDC_InterfaceInit+0x24>
 8005e4a:	7bfb      	ldrb	r3, [r7, #15]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d901      	bls.n	8005e54 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005e50:	2302      	movs	r3, #2
 8005e52:	e13d      	b.n	80060d0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005e54:	7bfb      	ldrb	r3, [r7, #15]
 8005e56:	4619      	mov	r1, r3
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 fc87 	bl	800676c <USBH_SelectInterface>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005e62:	7bbb      	ldrb	r3, [r7, #14]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d001      	beq.n	8005e6c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005e68:	2302      	movs	r3, #2
 8005e6a:	e131      	b.n	80060d0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005e72:	2050      	movs	r0, #80	; 0x50
 8005e74:	f005 fe36 	bl	800bae4 <malloc>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e82:	69db      	ldr	r3, [r3, #28]
 8005e84:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d101      	bne.n	8005e90 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005e8c:	2302      	movs	r3, #2
 8005e8e:	e11f      	b.n	80060d0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005e90:	2250      	movs	r2, #80	; 0x50
 8005e92:	2100      	movs	r1, #0
 8005e94:	68b8      	ldr	r0, [r7, #8]
 8005e96:	f005 fe43 	bl	800bb20 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005e9a:	7bfb      	ldrb	r3, [r7, #15]
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	211a      	movs	r1, #26
 8005ea0:	fb01 f303 	mul.w	r3, r1, r3
 8005ea4:	4413      	add	r3, r2
 8005ea6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	b25b      	sxtb	r3, r3
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	da15      	bge.n	8005ede <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005eb2:	7bfb      	ldrb	r3, [r7, #15]
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	211a      	movs	r1, #26
 8005eb8:	fb01 f303 	mul.w	r3, r1, r3
 8005ebc:	4413      	add	r3, r2
 8005ebe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005ec2:	781a      	ldrb	r2, [r3, #0]
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005ec8:	7bfb      	ldrb	r3, [r7, #15]
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	211a      	movs	r1, #26
 8005ece:	fb01 f303 	mul.w	r3, r1, r3
 8005ed2:	4413      	add	r3, r2
 8005ed4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005ed8:	881a      	ldrh	r2, [r3, #0]
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	785b      	ldrb	r3, [r3, #1]
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f002 f984 	bl	80081f2 <USBH_AllocPipe>
 8005eea:	4603      	mov	r3, r0
 8005eec:	461a      	mov	r2, r3
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	7819      	ldrb	r1, [r3, #0]
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	7858      	ldrb	r0, [r3, #1]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005f06:	68ba      	ldr	r2, [r7, #8]
 8005f08:	8952      	ldrh	r2, [r2, #10]
 8005f0a:	9202      	str	r2, [sp, #8]
 8005f0c:	2203      	movs	r2, #3
 8005f0e:	9201      	str	r2, [sp, #4]
 8005f10:	9300      	str	r3, [sp, #0]
 8005f12:	4623      	mov	r3, r4
 8005f14:	4602      	mov	r2, r0
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f002 f93c 	bl	8008194 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	2200      	movs	r2, #0
 8005f22:	4619      	mov	r1, r3
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f005 fd2f 	bl	800b988 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	210a      	movs	r1, #10
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 fc37 	bl	80067a4 <USBH_FindInterface>
 8005f36:	4603      	mov	r3, r0
 8005f38:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005f3a:	7bfb      	ldrb	r3, [r7, #15]
 8005f3c:	2bff      	cmp	r3, #255	; 0xff
 8005f3e:	d002      	beq.n	8005f46 <USBH_CDC_InterfaceInit+0x11a>
 8005f40:	7bfb      	ldrb	r3, [r7, #15]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d901      	bls.n	8005f4a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005f46:	2302      	movs	r3, #2
 8005f48:	e0c2      	b.n	80060d0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005f4a:	7bfb      	ldrb	r3, [r7, #15]
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	211a      	movs	r1, #26
 8005f50:	fb01 f303 	mul.w	r3, r1, r3
 8005f54:	4413      	add	r3, r2
 8005f56:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	b25b      	sxtb	r3, r3
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	da16      	bge.n	8005f90 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005f62:	7bfb      	ldrb	r3, [r7, #15]
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	211a      	movs	r1, #26
 8005f68:	fb01 f303 	mul.w	r3, r1, r3
 8005f6c:	4413      	add	r3, r2
 8005f6e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005f72:	781a      	ldrb	r2, [r3, #0]
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005f78:	7bfb      	ldrb	r3, [r7, #15]
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	211a      	movs	r1, #26
 8005f7e:	fb01 f303 	mul.w	r3, r1, r3
 8005f82:	4413      	add	r3, r2
 8005f84:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005f88:	881a      	ldrh	r2, [r3, #0]
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	835a      	strh	r2, [r3, #26]
 8005f8e:	e015      	b.n	8005fbc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005f90:	7bfb      	ldrb	r3, [r7, #15]
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	211a      	movs	r1, #26
 8005f96:	fb01 f303 	mul.w	r3, r1, r3
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005fa0:	781a      	ldrb	r2, [r3, #0]
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005fa6:	7bfb      	ldrb	r3, [r7, #15]
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	211a      	movs	r1, #26
 8005fac:	fb01 f303 	mul.w	r3, r1, r3
 8005fb0:	4413      	add	r3, r2
 8005fb2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005fb6:	881a      	ldrh	r2, [r3, #0]
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005fbc:	7bfb      	ldrb	r3, [r7, #15]
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	211a      	movs	r1, #26
 8005fc2:	fb01 f303 	mul.w	r3, r1, r3
 8005fc6:	4413      	add	r3, r2
 8005fc8:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	b25b      	sxtb	r3, r3
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	da16      	bge.n	8006002 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005fd4:	7bfb      	ldrb	r3, [r7, #15]
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	211a      	movs	r1, #26
 8005fda:	fb01 f303 	mul.w	r3, r1, r3
 8005fde:	4413      	add	r3, r2
 8005fe0:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005fe4:	781a      	ldrb	r2, [r3, #0]
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005fea:	7bfb      	ldrb	r3, [r7, #15]
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	211a      	movs	r1, #26
 8005ff0:	fb01 f303 	mul.w	r3, r1, r3
 8005ff4:	4413      	add	r3, r2
 8005ff6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005ffa:	881a      	ldrh	r2, [r3, #0]
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	835a      	strh	r2, [r3, #26]
 8006000:	e015      	b.n	800602e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006002:	7bfb      	ldrb	r3, [r7, #15]
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	211a      	movs	r1, #26
 8006008:	fb01 f303 	mul.w	r3, r1, r3
 800600c:	4413      	add	r3, r2
 800600e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006012:	781a      	ldrb	r2, [r3, #0]
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006018:	7bfb      	ldrb	r3, [r7, #15]
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	211a      	movs	r1, #26
 800601e:	fb01 f303 	mul.w	r3, r1, r3
 8006022:	4413      	add	r3, r2
 8006024:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006028:	881a      	ldrh	r2, [r3, #0]
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	7b9b      	ldrb	r3, [r3, #14]
 8006032:	4619      	mov	r1, r3
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f002 f8dc 	bl	80081f2 <USBH_AllocPipe>
 800603a:	4603      	mov	r3, r0
 800603c:	461a      	mov	r2, r3
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	7bdb      	ldrb	r3, [r3, #15]
 8006046:	4619      	mov	r1, r3
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f002 f8d2 	bl	80081f2 <USBH_AllocPipe>
 800604e:	4603      	mov	r3, r0
 8006050:	461a      	mov	r2, r3
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	7b59      	ldrb	r1, [r3, #13]
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	7b98      	ldrb	r0, [r3, #14]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800606a:	68ba      	ldr	r2, [r7, #8]
 800606c:	8b12      	ldrh	r2, [r2, #24]
 800606e:	9202      	str	r2, [sp, #8]
 8006070:	2202      	movs	r2, #2
 8006072:	9201      	str	r2, [sp, #4]
 8006074:	9300      	str	r3, [sp, #0]
 8006076:	4623      	mov	r3, r4
 8006078:	4602      	mov	r2, r0
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f002 f88a 	bl	8008194 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	7b19      	ldrb	r1, [r3, #12]
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	7bd8      	ldrb	r0, [r3, #15]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006094:	68ba      	ldr	r2, [r7, #8]
 8006096:	8b52      	ldrh	r2, [r2, #26]
 8006098:	9202      	str	r2, [sp, #8]
 800609a:	2202      	movs	r2, #2
 800609c:	9201      	str	r2, [sp, #4]
 800609e:	9300      	str	r3, [sp, #0]
 80060a0:	4623      	mov	r3, r4
 80060a2:	4602      	mov	r2, r0
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f002 f875 	bl	8008194 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	7b5b      	ldrb	r3, [r3, #13]
 80060b6:	2200      	movs	r2, #0
 80060b8:	4619      	mov	r1, r3
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f005 fc64 	bl	800b988 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	7b1b      	ldrb	r3, [r3, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	4619      	mov	r1, r3
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f005 fc5d 	bl	800b988 <USBH_LL_SetToggle>

  return USBH_OK;
 80060ce:	2300      	movs	r3, #0
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3714      	adds	r7, #20
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd90      	pop	{r4, r7, pc}

080060d8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060e6:	69db      	ldr	r3, [r3, #28]
 80060e8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00e      	beq.n	8006110 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	4619      	mov	r1, r3
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f002 f86a 	bl	80081d2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	4619      	mov	r1, r3
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f002 f895 	bl	8008234 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2200      	movs	r2, #0
 800610e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	7b1b      	ldrb	r3, [r3, #12]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d00e      	beq.n	8006136 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	7b1b      	ldrb	r3, [r3, #12]
 800611c:	4619      	mov	r1, r3
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f002 f857 	bl	80081d2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	7b1b      	ldrb	r3, [r3, #12]
 8006128:	4619      	mov	r1, r3
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f002 f882 	bl	8008234 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2200      	movs	r2, #0
 8006134:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	7b5b      	ldrb	r3, [r3, #13]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00e      	beq.n	800615c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	7b5b      	ldrb	r3, [r3, #13]
 8006142:	4619      	mov	r1, r3
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f002 f844 	bl	80081d2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	7b5b      	ldrb	r3, [r3, #13]
 800614e:	4619      	mov	r1, r3
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f002 f86f 	bl	8008234 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2200      	movs	r2, #0
 800615a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006162:	69db      	ldr	r3, [r3, #28]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d00b      	beq.n	8006180 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800616e:	69db      	ldr	r3, [r3, #28]
 8006170:	4618      	mov	r0, r3
 8006172:	f005 fcbf 	bl	800baf4 <free>
    phost->pActiveClass->pData = 0U;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800617c:	2200      	movs	r2, #0
 800617e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3710      	adds	r7, #16
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800618a:	b580      	push	{r7, lr}
 800618c:	b084      	sub	sp, #16
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006198:	69db      	ldr	r3, [r3, #28]
 800619a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	3340      	adds	r3, #64	; 0x40
 80061a0:	4619      	mov	r1, r3
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 f8b1 	bl	800630a <GetLineCoding>
 80061a8:	4603      	mov	r3, r0
 80061aa:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80061ac:	7afb      	ldrb	r3, [r7, #11]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d105      	bne.n	80061be <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80061b8:	2102      	movs	r1, #2
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80061be:	7afb      	ldrb	r3, [r7, #11]
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3710      	adds	r7, #16
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b084      	sub	sp, #16
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80061d0:	2301      	movs	r3, #1
 80061d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80061d4:	2300      	movs	r3, #0
 80061d6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061de:	69db      	ldr	r3, [r3, #28]
 80061e0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80061e8:	2b04      	cmp	r3, #4
 80061ea:	d877      	bhi.n	80062dc <USBH_CDC_Process+0x114>
 80061ec:	a201      	add	r2, pc, #4	; (adr r2, 80061f4 <USBH_CDC_Process+0x2c>)
 80061ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f2:	bf00      	nop
 80061f4:	08006209 	.word	0x08006209
 80061f8:	0800620f 	.word	0x0800620f
 80061fc:	0800623f 	.word	0x0800623f
 8006200:	080062b3 	.word	0x080062b3
 8006204:	080062c1 	.word	0x080062c1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006208:	2300      	movs	r3, #0
 800620a:	73fb      	strb	r3, [r7, #15]
      break;
 800620c:	e06d      	b.n	80062ea <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006212:	4619      	mov	r1, r3
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 f897 	bl	8006348 <SetLineCoding>
 800621a:	4603      	mov	r3, r0
 800621c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800621e:	7bbb      	ldrb	r3, [r7, #14]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d104      	bne.n	800622e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	2202      	movs	r2, #2
 8006228:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800622c:	e058      	b.n	80062e0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800622e:	7bbb      	ldrb	r3, [r7, #14]
 8006230:	2b01      	cmp	r3, #1
 8006232:	d055      	beq.n	80062e0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	2204      	movs	r2, #4
 8006238:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800623c:	e050      	b.n	80062e0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	3340      	adds	r3, #64	; 0x40
 8006242:	4619      	mov	r1, r3
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 f860 	bl	800630a <GetLineCoding>
 800624a:	4603      	mov	r3, r0
 800624c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800624e:	7bbb      	ldrb	r3, [r7, #14]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d126      	bne.n	80062a2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006266:	791b      	ldrb	r3, [r3, #4]
 8006268:	429a      	cmp	r2, r3
 800626a:	d13b      	bne.n	80062e4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006276:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006278:	429a      	cmp	r2, r3
 800627a:	d133      	bne.n	80062e4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006286:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006288:	429a      	cmp	r2, r3
 800628a:	d12b      	bne.n	80062e4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006294:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006296:	429a      	cmp	r2, r3
 8006298:	d124      	bne.n	80062e4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 f982 	bl	80065a4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80062a0:	e020      	b.n	80062e4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80062a2:	7bbb      	ldrb	r3, [r7, #14]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d01d      	beq.n	80062e4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	2204      	movs	r2, #4
 80062ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80062b0:	e018      	b.n	80062e4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 f867 	bl	8006386 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 f8f6 	bl	80064aa <CDC_ProcessReception>
      break;
 80062be:	e014      	b.n	80062ea <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80062c0:	2100      	movs	r1, #0
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f001 f957 	bl	8007576 <USBH_ClrFeature>
 80062c8:	4603      	mov	r3, r0
 80062ca:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80062cc:	7bbb      	ldrb	r3, [r7, #14]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d10a      	bne.n	80062e8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80062da:	e005      	b.n	80062e8 <USBH_CDC_Process+0x120>

    default:
      break;
 80062dc:	bf00      	nop
 80062de:	e004      	b.n	80062ea <USBH_CDC_Process+0x122>
      break;
 80062e0:	bf00      	nop
 80062e2:	e002      	b.n	80062ea <USBH_CDC_Process+0x122>
      break;
 80062e4:	bf00      	nop
 80062e6:	e000      	b.n	80062ea <USBH_CDC_Process+0x122>
      break;
 80062e8:	bf00      	nop

  }

  return status;
 80062ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3710      	adds	r7, #16
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	370c      	adds	r7, #12
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr

0800630a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800630a:	b580      	push	{r7, lr}
 800630c:	b082      	sub	sp, #8
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
 8006312:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	22a1      	movs	r2, #161	; 0xa1
 8006318:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2221      	movs	r2, #33	; 0x21
 800631e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2207      	movs	r2, #7
 8006330:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	2207      	movs	r2, #7
 8006336:	4619      	mov	r1, r3
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f001 fbe9 	bl	8007b10 <USBH_CtlReq>
 800633e:	4603      	mov	r3, r0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3708      	adds	r7, #8
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2221      	movs	r2, #33	; 0x21
 8006356:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2220      	movs	r2, #32
 800635c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2207      	movs	r2, #7
 800636e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	2207      	movs	r2, #7
 8006374:	4619      	mov	r1, r3
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f001 fbca 	bl	8007b10 <USBH_CtlReq>
 800637c:	4603      	mov	r3, r0
}
 800637e:	4618      	mov	r0, r3
 8006380:	3708      	adds	r7, #8
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}

08006386 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006386:	b580      	push	{r7, lr}
 8006388:	b086      	sub	sp, #24
 800638a:	af02      	add	r7, sp, #8
 800638c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006394:	69db      	ldr	r3, [r3, #28]
 8006396:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006398:	2300      	movs	r3, #0
 800639a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d002      	beq.n	80063ac <CDC_ProcessTransmission+0x26>
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d023      	beq.n	80063f2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80063aa:	e07a      	b.n	80064a2 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	8b12      	ldrh	r2, [r2, #24]
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d90b      	bls.n	80063d0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	69d9      	ldr	r1, [r3, #28]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	8b1a      	ldrh	r2, [r3, #24]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	7b5b      	ldrb	r3, [r3, #13]
 80063c4:	2001      	movs	r0, #1
 80063c6:	9000      	str	r0, [sp, #0]
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f001 fea0 	bl	800810e <USBH_BulkSendData>
 80063ce:	e00b      	b.n	80063e8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80063d8:	b29a      	uxth	r2, r3
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	7b5b      	ldrb	r3, [r3, #13]
 80063de:	2001      	movs	r0, #1
 80063e0:	9000      	str	r0, [sp, #0]
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f001 fe93 	bl	800810e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2202      	movs	r2, #2
 80063ec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80063f0:	e057      	b.n	80064a2 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	7b5b      	ldrb	r3, [r3, #13]
 80063f6:	4619      	mov	r1, r3
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f005 fa9b 	bl	800b934 <USBH_LL_GetURBState>
 80063fe:	4603      	mov	r3, r0
 8006400:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006402:	7afb      	ldrb	r3, [r7, #11]
 8006404:	2b01      	cmp	r3, #1
 8006406:	d136      	bne.n	8006476 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	8b12      	ldrh	r2, [r2, #24]
 8006410:	4293      	cmp	r3, r2
 8006412:	d90e      	bls.n	8006432 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	8b12      	ldrh	r2, [r2, #24]
 800641c:	1a9a      	subs	r2, r3, r2
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	69db      	ldr	r3, [r3, #28]
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	8b12      	ldrh	r2, [r2, #24]
 800642a:	441a      	add	r2, r3
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	61da      	str	r2, [r3, #28]
 8006430:	e002      	b.n	8006438 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643c:	2b00      	cmp	r3, #0
 800643e:	d004      	beq.n	800644a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8006448:	e006      	b.n	8006458 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 f892 	bl	800657c <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2204      	movs	r2, #4
 800645c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800646c:	2300      	movs	r3, #0
 800646e:	2200      	movs	r2, #0
 8006470:	f002 f980 	bl	8008774 <osMessageQueuePut>
      break;
 8006474:	e014      	b.n	80064a0 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8006476:	7afb      	ldrb	r3, [r7, #11]
 8006478:	2b02      	cmp	r3, #2
 800647a:	d111      	bne.n	80064a0 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2204      	movs	r2, #4
 8006488:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006498:	2300      	movs	r3, #0
 800649a:	2200      	movs	r2, #0
 800649c:	f002 f96a 	bl	8008774 <osMessageQueuePut>
      break;
 80064a0:	bf00      	nop
  }
}
 80064a2:	bf00      	nop
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}

080064aa <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80064aa:	b580      	push	{r7, lr}
 80064ac:	b086      	sub	sp, #24
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064b8:	69db      	ldr	r3, [r3, #28]
 80064ba:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80064bc:	2300      	movs	r3, #0
 80064be:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80064c6:	2b03      	cmp	r3, #3
 80064c8:	d002      	beq.n	80064d0 <CDC_ProcessReception+0x26>
 80064ca:	2b04      	cmp	r3, #4
 80064cc:	d00e      	beq.n	80064ec <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80064ce:	e051      	b.n	8006574 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	6a19      	ldr	r1, [r3, #32]
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	8b5a      	ldrh	r2, [r3, #26]
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	7b1b      	ldrb	r3, [r3, #12]
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f001 fe3b 	bl	8008158 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	2204      	movs	r2, #4
 80064e6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80064ea:	e043      	b.n	8006574 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	7b1b      	ldrb	r3, [r3, #12]
 80064f0:	4619      	mov	r1, r3
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f005 fa1e 	bl	800b934 <USBH_LL_GetURBState>
 80064f8:	4603      	mov	r3, r0
 80064fa:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80064fc:	7cfb      	ldrb	r3, [r7, #19]
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d137      	bne.n	8006572 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	7b1b      	ldrb	r3, [r3, #12]
 8006506:	4619      	mov	r1, r3
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f005 f981 	bl	800b810 <USBH_LL_GetLastXferSize>
 800650e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	429a      	cmp	r2, r3
 8006518:	d016      	beq.n	8006548 <CDC_ProcessReception+0x9e>
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	8b5b      	ldrh	r3, [r3, #26]
 800651e:	461a      	mov	r2, r3
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	4293      	cmp	r3, r2
 8006524:	d910      	bls.n	8006548 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	1ad2      	subs	r2, r2, r3
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	6a1a      	ldr	r2, [r3, #32]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	441a      	add	r2, r3
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	2203      	movs	r2, #3
 8006542:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8006546:	e006      	b.n	8006556 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 f81d 	bl	8006590 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2204      	movs	r2, #4
 800655a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800656a:	2300      	movs	r3, #0
 800656c:	2200      	movs	r2, #0
 800656e:	f002 f901 	bl	8008774 <osMessageQueuePut>
      break;
 8006572:	bf00      	nop
  }
}
 8006574:	bf00      	nop
 8006576:	3718      	adds	r7, #24
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006584:	bf00      	nop
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006598:	bf00      	nop
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80065ac:	bf00      	nop
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	4613      	mov	r3, r2
 80065c4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d101      	bne.n	80065d0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80065cc:	2302      	movs	r3, #2
 80065ce:	e044      	b.n	800665a <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	79fa      	ldrb	r2, [r7, #7]
 80065d4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2200      	movs	r2, #0
 80065dc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f000 f841 	bl	8006670 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2200      	movs	r2, #0
 80065fa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2200      	movs	r2, #0
 800660a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d003      	beq.n	800661c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	68ba      	ldr	r2, [r7, #8]
 8006618:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800661c:	2200      	movs	r2, #0
 800661e:	2104      	movs	r1, #4
 8006620:	2010      	movs	r0, #16
 8006622:	f002 f833 	bl	800868c <osMessageQueueNew>
 8006626:	4602      	mov	r2, r0
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800662e:	4b0d      	ldr	r3, [pc, #52]	; (8006664 <USBH_Init+0xac>)
 8006630:	4a0d      	ldr	r2, [pc, #52]	; (8006668 <USBH_Init+0xb0>)
 8006632:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 8006634:	4b0b      	ldr	r3, [pc, #44]	; (8006664 <USBH_Init+0xac>)
 8006636:	2280      	movs	r2, #128	; 0x80
 8006638:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800663a:	4b0a      	ldr	r3, [pc, #40]	; (8006664 <USBH_Init+0xac>)
 800663c:	2218      	movs	r2, #24
 800663e:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8006640:	4a08      	ldr	r2, [pc, #32]	; (8006664 <USBH_Init+0xac>)
 8006642:	68f9      	ldr	r1, [r7, #12]
 8006644:	4809      	ldr	r0, [pc, #36]	; (800666c <USBH_Init+0xb4>)
 8006646:	f001 feb5 	bl	80083b4 <osThreadNew>
 800664a:	4602      	mov	r2, r0
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f005 f828 	bl	800b6a8 <USBH_LL_Init>

  return USBH_OK;
 8006658:	2300      	movs	r3, #0
}
 800665a:	4618      	mov	r0, r3
 800665c:	3710      	adds	r7, #16
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	20000204 	.word	0x20000204
 8006668:	0800bd78 	.word	0x0800bd78
 800666c:	080072ed 	.word	0x080072ed

08006670 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006670:	b480      	push	{r7}
 8006672:	b085      	sub	sp, #20
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006678:	2300      	movs	r3, #0
 800667a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800667c:	2300      	movs	r3, #0
 800667e:	60fb      	str	r3, [r7, #12]
 8006680:	e009      	b.n	8006696 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	33e0      	adds	r3, #224	; 0xe0
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	4413      	add	r3, r2
 800668c:	2200      	movs	r2, #0
 800668e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	3301      	adds	r3, #1
 8006694:	60fb      	str	r3, [r7, #12]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2b0f      	cmp	r3, #15
 800669a:	d9f2      	bls.n	8006682 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800669c:	2300      	movs	r3, #0
 800669e:	60fb      	str	r3, [r7, #12]
 80066a0:	e009      	b.n	80066b6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	4413      	add	r3, r2
 80066a8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80066ac:	2200      	movs	r2, #0
 80066ae:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	3301      	adds	r3, #1
 80066b4:	60fb      	str	r3, [r7, #12]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066bc:	d3f1      	bcc.n	80066a2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2201      	movs	r2, #1
 80066ce:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2240      	movs	r2, #64	; 0x40
 80066e2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3714      	adds	r7, #20
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006722:	2300      	movs	r3, #0
 8006724:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d016      	beq.n	800675a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006732:	2b00      	cmp	r3, #0
 8006734:	d10e      	bne.n	8006754 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800673c:	1c59      	adds	r1, r3, #1
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	33de      	adds	r3, #222	; 0xde
 8006748:	6839      	ldr	r1, [r7, #0]
 800674a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800674e:	2300      	movs	r3, #0
 8006750:	73fb      	strb	r3, [r7, #15]
 8006752:	e004      	b.n	800675e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006754:	2302      	movs	r3, #2
 8006756:	73fb      	strb	r3, [r7, #15]
 8006758:	e001      	b.n	800675e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800675a:	2302      	movs	r3, #2
 800675c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800675e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006760:	4618      	mov	r0, r3
 8006762:	3714      	adds	r7, #20
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	460b      	mov	r3, r1
 8006776:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006778:	2300      	movs	r3, #0
 800677a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006782:	78fa      	ldrb	r2, [r7, #3]
 8006784:	429a      	cmp	r2, r3
 8006786:	d204      	bcs.n	8006792 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	78fa      	ldrb	r2, [r7, #3]
 800678c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006790:	e001      	b.n	8006796 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006792:	2302      	movs	r3, #2
 8006794:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006796:	7bfb      	ldrb	r3, [r7, #15]
}
 8006798:	4618      	mov	r0, r3
 800679a:	3714      	adds	r7, #20
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b087      	sub	sp, #28
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	4608      	mov	r0, r1
 80067ae:	4611      	mov	r1, r2
 80067b0:	461a      	mov	r2, r3
 80067b2:	4603      	mov	r3, r0
 80067b4:	70fb      	strb	r3, [r7, #3]
 80067b6:	460b      	mov	r3, r1
 80067b8:	70bb      	strb	r3, [r7, #2]
 80067ba:	4613      	mov	r3, r2
 80067bc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80067be:	2300      	movs	r3, #0
 80067c0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80067c2:	2300      	movs	r3, #0
 80067c4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80067cc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80067ce:	e025      	b.n	800681c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80067d0:	7dfb      	ldrb	r3, [r7, #23]
 80067d2:	221a      	movs	r2, #26
 80067d4:	fb02 f303 	mul.w	r3, r2, r3
 80067d8:	3308      	adds	r3, #8
 80067da:	68fa      	ldr	r2, [r7, #12]
 80067dc:	4413      	add	r3, r2
 80067de:	3302      	adds	r3, #2
 80067e0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	795b      	ldrb	r3, [r3, #5]
 80067e6:	78fa      	ldrb	r2, [r7, #3]
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d002      	beq.n	80067f2 <USBH_FindInterface+0x4e>
 80067ec:	78fb      	ldrb	r3, [r7, #3]
 80067ee:	2bff      	cmp	r3, #255	; 0xff
 80067f0:	d111      	bne.n	8006816 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80067f6:	78ba      	ldrb	r2, [r7, #2]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d002      	beq.n	8006802 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80067fc:	78bb      	ldrb	r3, [r7, #2]
 80067fe:	2bff      	cmp	r3, #255	; 0xff
 8006800:	d109      	bne.n	8006816 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006806:	787a      	ldrb	r2, [r7, #1]
 8006808:	429a      	cmp	r2, r3
 800680a:	d002      	beq.n	8006812 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800680c:	787b      	ldrb	r3, [r7, #1]
 800680e:	2bff      	cmp	r3, #255	; 0xff
 8006810:	d101      	bne.n	8006816 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006812:	7dfb      	ldrb	r3, [r7, #23]
 8006814:	e006      	b.n	8006824 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006816:	7dfb      	ldrb	r3, [r7, #23]
 8006818:	3301      	adds	r3, #1
 800681a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800681c:	7dfb      	ldrb	r3, [r7, #23]
 800681e:	2b01      	cmp	r3, #1
 8006820:	d9d6      	bls.n	80067d0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006822:	23ff      	movs	r3, #255	; 0xff
}
 8006824:	4618      	mov	r0, r3
 8006826:	371c      	adds	r7, #28
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f004 ff71 	bl	800b720 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800683e:	2101      	movs	r1, #1
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f005 f88a 	bl	800b95a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	3708      	adds	r7, #8
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b088      	sub	sp, #32
 8006854:	af04      	add	r7, sp, #16
 8006856:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006858:	2302      	movs	r3, #2
 800685a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800685c:	2300      	movs	r3, #0
 800685e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006866:	b2db      	uxtb	r3, r3
 8006868:	2b01      	cmp	r3, #1
 800686a:	d102      	bne.n	8006872 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2203      	movs	r2, #3
 8006870:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	b2db      	uxtb	r3, r3
 8006878:	2b0b      	cmp	r3, #11
 800687a:	f200 8247 	bhi.w	8006d0c <USBH_Process+0x4bc>
 800687e:	a201      	add	r2, pc, #4	; (adr r2, 8006884 <USBH_Process+0x34>)
 8006880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006884:	080068b5 	.word	0x080068b5
 8006888:	08006903 	.word	0x08006903
 800688c:	08006987 	.word	0x08006987
 8006890:	08006c8b 	.word	0x08006c8b
 8006894:	08006d0d 	.word	0x08006d0d
 8006898:	08006a47 	.word	0x08006a47
 800689c:	08006c15 	.word	0x08006c15
 80068a0:	08006a99 	.word	0x08006a99
 80068a4:	08006ad5 	.word	0x08006ad5
 80068a8:	08006b0f 	.word	0x08006b0f
 80068ac:	08006b6d 	.word	0x08006b6d
 80068b0:	08006c73 	.word	0x08006c73
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	2b00      	cmp	r3, #0
 80068be:	f000 8227 	beq.w	8006d10 <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2201      	movs	r2, #1
 80068c6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80068c8:	20c8      	movs	r0, #200	; 0xc8
 80068ca:	f005 f88d 	bl	800b9e8 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f004 ff83 	bl	800b7da <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80068f8:	2300      	movs	r3, #0
 80068fa:	2200      	movs	r2, #0
 80068fc:	f001 ff3a 	bl	8008774 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8006900:	e206      	b.n	8006d10 <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006908:	2b01      	cmp	r3, #1
 800690a:	d107      	bne.n	800691c <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2202      	movs	r2, #2
 8006918:	701a      	strb	r2, [r3, #0]
 800691a:	e025      	b.n	8006968 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006922:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006926:	d914      	bls.n	8006952 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800692e:	3301      	adds	r3, #1
 8006930:	b2da      	uxtb	r2, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800693e:	2b03      	cmp	r3, #3
 8006940:	d903      	bls.n	800694a <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	220d      	movs	r2, #13
 8006946:	701a      	strb	r2, [r3, #0]
 8006948:	e00e      	b.n	8006968 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	701a      	strb	r2, [r3, #0]
 8006950:	e00a      	b.n	8006968 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006958:	f103 020a 	add.w	r2, r3, #10
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006962:	200a      	movs	r0, #10
 8006964:	f005 f840 	bl	800b9e8 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2201      	movs	r2, #1
 800696c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800697c:	2300      	movs	r3, #0
 800697e:	2200      	movs	r2, #0
 8006980:	f001 fef8 	bl	8008774 <osMessageQueuePut>
#endif
#endif
      break;
 8006984:	e1cb      	b.n	8006d1e <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800698c:	2b00      	cmp	r3, #0
 800698e:	d005      	beq.n	800699c <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006996:	2104      	movs	r1, #4
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800699c:	2064      	movs	r0, #100	; 0x64
 800699e:	f005 f823 	bl	800b9e8 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f004 fef2 	bl	800b78c <USBH_LL_GetSpeed>
 80069a8:	4603      	mov	r3, r0
 80069aa:	461a      	mov	r2, r3
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2205      	movs	r2, #5
 80069b6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80069b8:	2100      	movs	r1, #0
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f001 fc19 	bl	80081f2 <USBH_AllocPipe>
 80069c0:	4603      	mov	r3, r0
 80069c2:	461a      	mov	r2, r3
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80069c8:	2180      	movs	r1, #128	; 0x80
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f001 fc11 	bl	80081f2 <USBH_AllocPipe>
 80069d0:	4603      	mov	r3, r0
 80069d2:	461a      	mov	r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	7919      	ldrb	r1, [r3, #4]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80069ec:	b292      	uxth	r2, r2
 80069ee:	9202      	str	r2, [sp, #8]
 80069f0:	2200      	movs	r2, #0
 80069f2:	9201      	str	r2, [sp, #4]
 80069f4:	9300      	str	r3, [sp, #0]
 80069f6:	4603      	mov	r3, r0
 80069f8:	2280      	movs	r2, #128	; 0x80
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f001 fbca 	bl	8008194 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	7959      	ldrb	r1, [r3, #5]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006a14:	b292      	uxth	r2, r2
 8006a16:	9202      	str	r2, [sp, #8]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	9201      	str	r2, [sp, #4]
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	4603      	mov	r3, r0
 8006a20:	2200      	movs	r2, #0
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f001 fbb6 	bl	8008194 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f001 fe98 	bl	8008774 <osMessageQueuePut>
#endif
#endif
      break;
 8006a44:	e16b      	b.n	8006d1e <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 f96e 	bl	8006d28 <USBH_HandleEnum>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006a50:	7bbb      	ldrb	r3, [r7, #14]
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f040 815d 	bne.w	8006d14 <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d103      	bne.n	8006a74 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2208      	movs	r2, #8
 8006a70:	701a      	strb	r2, [r3, #0]
 8006a72:	e002      	b.n	8006a7a <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2207      	movs	r2, #7
 8006a78:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2205      	movs	r2, #5
 8006a7e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006a8e:	2300      	movs	r3, #0
 8006a90:	2200      	movs	r2, #0
 8006a92:	f001 fe6f 	bl	8008774 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8006a96:	e13d      	b.n	8006d14 <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f000 813a 	beq.w	8006d18 <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006aaa:	2101      	movs	r1, #1
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2208      	movs	r2, #8
 8006ab4:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2205      	movs	r2, #5
 8006aba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006aca:	2300      	movs	r3, #0
 8006acc:	2200      	movs	r2, #0
 8006ace:	f001 fe51 	bl	8008774 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 8006ad2:	e121      	b.n	8006d18 <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	4619      	mov	r1, r3
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 fd02 	bl	80074e8 <USBH_SetCfg>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d102      	bne.n	8006af0 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2209      	movs	r2, #9
 8006aee:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006b04:	2300      	movs	r3, #0
 8006b06:	2200      	movs	r2, #0
 8006b08:	f001 fe34 	bl	8008774 <osMessageQueuePut>
#endif
#endif
      break;
 8006b0c:	e107      	b.n	8006d1e <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006b14:	f003 0320 	and.w	r3, r3, #32
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d015      	beq.n	8006b48 <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006b1c:	2101      	movs	r1, #1
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 fd05 	bl	800752e <USBH_SetFeature>
 8006b24:	4603      	mov	r3, r0
 8006b26:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006b28:	7bbb      	ldrb	r3, [r7, #14]
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d103      	bne.n	8006b38 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	220a      	movs	r2, #10
 8006b34:	701a      	strb	r2, [r3, #0]
 8006b36:	e00a      	b.n	8006b4e <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 8006b38:	7bbb      	ldrb	r3, [r7, #14]
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	2b03      	cmp	r3, #3
 8006b3e:	d106      	bne.n	8006b4e <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	220a      	movs	r2, #10
 8006b44:	701a      	strb	r2, [r3, #0]
 8006b46:	e002      	b.n	8006b4e <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	220a      	movs	r2, #10
 8006b4c:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2201      	movs	r2, #1
 8006b52:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006b62:	2300      	movs	r3, #0
 8006b64:	2200      	movs	r2, #0
 8006b66:	f001 fe05 	bl	8008774 <osMessageQueuePut>
#endif
#endif
      break;
 8006b6a:	e0d8      	b.n	8006d1e <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d03f      	beq.n	8006bf6 <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006b7e:	2300      	movs	r3, #0
 8006b80:	73fb      	strb	r3, [r7, #15]
 8006b82:	e016      	b.n	8006bb2 <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006b84:	7bfa      	ldrb	r2, [r7, #15]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	32de      	adds	r2, #222	; 0xde
 8006b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b8e:	791a      	ldrb	r2, [r3, #4]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d108      	bne.n	8006bac <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006b9a:	7bfa      	ldrb	r2, [r7, #15]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	32de      	adds	r2, #222	; 0xde
 8006ba0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006baa:	e005      	b.n	8006bb8 <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006bac:	7bfb      	ldrb	r3, [r7, #15]
 8006bae:	3301      	adds	r3, #1
 8006bb0:	73fb      	strb	r3, [r7, #15]
 8006bb2:	7bfb      	ldrb	r3, [r7, #15]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d0e5      	beq.n	8006b84 <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d016      	beq.n	8006bf0 <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	4798      	blx	r3
 8006bce:	4603      	mov	r3, r0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d109      	bne.n	8006be8 <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2206      	movs	r2, #6
 8006bd8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006be0:	2103      	movs	r1, #3
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	4798      	blx	r3
 8006be6:	e006      	b.n	8006bf6 <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	220d      	movs	r2, #13
 8006bec:	701a      	strb	r2, [r3, #0]
 8006bee:	e002      	b.n	8006bf6 <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	220d      	movs	r2, #13
 8006bf4:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2205      	movs	r2, #5
 8006bfa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f001 fdb1 	bl	8008774 <osMessageQueuePut>
#endif
#endif
      break;
 8006c12:	e084      	b.n	8006d1e <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d017      	beq.n	8006c4e <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	4798      	blx	r3
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006c2e:	7bbb      	ldrb	r3, [r7, #14]
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d103      	bne.n	8006c3e <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	220b      	movs	r2, #11
 8006c3a:	701a      	strb	r2, [r3, #0]
 8006c3c:	e00a      	b.n	8006c54 <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 8006c3e:	7bbb      	ldrb	r3, [r7, #14]
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	2b02      	cmp	r3, #2
 8006c44:	d106      	bne.n	8006c54 <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	220d      	movs	r2, #13
 8006c4a:	701a      	strb	r2, [r3, #0]
 8006c4c:	e002      	b.n	8006c54 <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	220d      	movs	r2, #13
 8006c52:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2205      	movs	r2, #5
 8006c58:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006c68:	2300      	movs	r3, #0
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f001 fd82 	bl	8008774 <osMessageQueuePut>
#endif
#endif
      break;
 8006c70:	e055      	b.n	8006d1e <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d04f      	beq.n	8006d1c <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c82:	695b      	ldr	r3, [r3, #20]
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	4798      	blx	r3
      }
      break;
 8006c88:	e048      	b.n	8006d1c <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f7ff fcec 	bl	8006670 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d009      	beq.n	8006cb6 <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d005      	beq.n	8006ccc <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006cc6:	2105      	movs	r1, #5
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d107      	bne.n	8006ce8 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f7ff fda5 	bl	8006830 <USBH_Start>
 8006ce6:	e002      	b.n	8006cee <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f004 fd19 	bl	800b720 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006d02:	2300      	movs	r3, #0
 8006d04:	2200      	movs	r2, #0
 8006d06:	f001 fd35 	bl	8008774 <osMessageQueuePut>
#endif
#endif
      break;
 8006d0a:	e008      	b.n	8006d1e <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 8006d0c:	bf00      	nop
 8006d0e:	e006      	b.n	8006d1e <USBH_Process+0x4ce>
      break;
 8006d10:	bf00      	nop
 8006d12:	e004      	b.n	8006d1e <USBH_Process+0x4ce>
      break;
 8006d14:	bf00      	nop
 8006d16:	e002      	b.n	8006d1e <USBH_Process+0x4ce>
    break;
 8006d18:	bf00      	nop
 8006d1a:	e000      	b.n	8006d1e <USBH_Process+0x4ce>
      break;
 8006d1c:	bf00      	nop
  }
  return USBH_OK;
 8006d1e:	2300      	movs	r3, #0
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3710      	adds	r7, #16
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b088      	sub	sp, #32
 8006d2c:	af04      	add	r7, sp, #16
 8006d2e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006d30:	2301      	movs	r3, #1
 8006d32:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006d34:	2301      	movs	r3, #1
 8006d36:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	785b      	ldrb	r3, [r3, #1]
 8006d3c:	2b07      	cmp	r3, #7
 8006d3e:	f200 8208 	bhi.w	8007152 <USBH_HandleEnum+0x42a>
 8006d42:	a201      	add	r2, pc, #4	; (adr r2, 8006d48 <USBH_HandleEnum+0x20>)
 8006d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d48:	08006d69 	.word	0x08006d69
 8006d4c:	08006e27 	.word	0x08006e27
 8006d50:	08006e91 	.word	0x08006e91
 8006d54:	08006f1f 	.word	0x08006f1f
 8006d58:	08006f89 	.word	0x08006f89
 8006d5c:	08006ff9 	.word	0x08006ff9
 8006d60:	08007095 	.word	0x08007095
 8006d64:	08007113 	.word	0x08007113
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006d68:	2108      	movs	r1, #8
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 faec 	bl	8007348 <USBH_Get_DevDesc>
 8006d70:	4603      	mov	r3, r0
 8006d72:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d74:	7bbb      	ldrb	r3, [r7, #14]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d130      	bne.n	8006ddc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2201      	movs	r2, #1
 8006d88:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	7919      	ldrb	r1, [r3, #4]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006d9e:	b292      	uxth	r2, r2
 8006da0:	9202      	str	r2, [sp, #8]
 8006da2:	2200      	movs	r2, #0
 8006da4:	9201      	str	r2, [sp, #4]
 8006da6:	9300      	str	r3, [sp, #0]
 8006da8:	4603      	mov	r3, r0
 8006daa:	2280      	movs	r2, #128	; 0x80
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f001 f9f1 	bl	8008194 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	7959      	ldrb	r1, [r3, #5]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006dc6:	b292      	uxth	r2, r2
 8006dc8:	9202      	str	r2, [sp, #8]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	9201      	str	r2, [sp, #4]
 8006dce:	9300      	str	r3, [sp, #0]
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f001 f9dd 	bl	8008194 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006dda:	e1bc      	b.n	8007156 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ddc:	7bbb      	ldrb	r3, [r7, #14]
 8006dde:	2b03      	cmp	r3, #3
 8006de0:	f040 81b9 	bne.w	8007156 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006dea:	3301      	adds	r3, #1
 8006dec:	b2da      	uxtb	r2, r3
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006dfa:	2b03      	cmp	r3, #3
 8006dfc:	d903      	bls.n	8006e06 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	220d      	movs	r2, #13
 8006e02:	701a      	strb	r2, [r3, #0]
      break;
 8006e04:	e1a7      	b.n	8007156 <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	795b      	ldrb	r3, [r3, #5]
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f001 fa11 	bl	8008234 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	791b      	ldrb	r3, [r3, #4]
 8006e16:	4619      	mov	r1, r3
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f001 fa0b 	bl	8008234 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	701a      	strb	r2, [r3, #0]
      break;
 8006e24:	e197      	b.n	8007156 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006e26:	2112      	movs	r1, #18
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 fa8d 	bl	8007348 <USBH_Get_DevDesc>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006e32:	7bbb      	ldrb	r3, [r7, #14]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d103      	bne.n	8006e40 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2202      	movs	r2, #2
 8006e3c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006e3e:	e18c      	b.n	800715a <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e40:	7bbb      	ldrb	r3, [r7, #14]
 8006e42:	2b03      	cmp	r3, #3
 8006e44:	f040 8189 	bne.w	800715a <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e4e:	3301      	adds	r3, #1
 8006e50:	b2da      	uxtb	r2, r3
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e5e:	2b03      	cmp	r3, #3
 8006e60:	d903      	bls.n	8006e6a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	220d      	movs	r2, #13
 8006e66:	701a      	strb	r2, [r3, #0]
      break;
 8006e68:	e177      	b.n	800715a <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	795b      	ldrb	r3, [r3, #5]
 8006e6e:	4619      	mov	r1, r3
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f001 f9df 	bl	8008234 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	791b      	ldrb	r3, [r3, #4]
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f001 f9d9 	bl	8008234 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	701a      	strb	r2, [r3, #0]
      break;
 8006e8e:	e164      	b.n	800715a <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006e90:	2101      	movs	r1, #1
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 fb04 	bl	80074a0 <USBH_SetAddress>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006e9c:	7bbb      	ldrb	r3, [r7, #14]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d132      	bne.n	8006f08 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006ea2:	2002      	movs	r0, #2
 8006ea4:	f004 fda0 	bl	800b9e8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2203      	movs	r2, #3
 8006eb4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	7919      	ldrb	r1, [r3, #4]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006eca:	b292      	uxth	r2, r2
 8006ecc:	9202      	str	r2, [sp, #8]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	9201      	str	r2, [sp, #4]
 8006ed2:	9300      	str	r3, [sp, #0]
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2280      	movs	r2, #128	; 0x80
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f001 f95b 	bl	8008194 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	7959      	ldrb	r1, [r3, #5]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006ef2:	b292      	uxth	r2, r2
 8006ef4:	9202      	str	r2, [sp, #8]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	9201      	str	r2, [sp, #4]
 8006efa:	9300      	str	r3, [sp, #0]
 8006efc:	4603      	mov	r3, r0
 8006efe:	2200      	movs	r2, #0
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f001 f947 	bl	8008194 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006f06:	e12a      	b.n	800715e <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f08:	7bbb      	ldrb	r3, [r7, #14]
 8006f0a:	2b03      	cmp	r3, #3
 8006f0c:	f040 8127 	bne.w	800715e <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	220d      	movs	r2, #13
 8006f14:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	705a      	strb	r2, [r3, #1]
      break;
 8006f1c:	e11f      	b.n	800715e <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006f1e:	2109      	movs	r1, #9
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 fa39 	bl	8007398 <USBH_Get_CfgDesc>
 8006f26:	4603      	mov	r3, r0
 8006f28:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006f2a:	7bbb      	ldrb	r3, [r7, #14]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d103      	bne.n	8006f38 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2204      	movs	r2, #4
 8006f34:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006f36:	e114      	b.n	8007162 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f38:	7bbb      	ldrb	r3, [r7, #14]
 8006f3a:	2b03      	cmp	r3, #3
 8006f3c:	f040 8111 	bne.w	8007162 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006f46:	3301      	adds	r3, #1
 8006f48:	b2da      	uxtb	r2, r3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006f56:	2b03      	cmp	r3, #3
 8006f58:	d903      	bls.n	8006f62 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	220d      	movs	r2, #13
 8006f5e:	701a      	strb	r2, [r3, #0]
      break;
 8006f60:	e0ff      	b.n	8007162 <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	795b      	ldrb	r3, [r3, #5]
 8006f66:	4619      	mov	r1, r3
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f001 f963 	bl	8008234 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	791b      	ldrb	r3, [r3, #4]
 8006f72:	4619      	mov	r1, r3
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f001 f95d 	bl	8008234 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	701a      	strb	r2, [r3, #0]
      break;
 8006f86:	e0ec      	b.n	8007162 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006f8e:	4619      	mov	r1, r3
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 fa01 	bl	8007398 <USBH_Get_CfgDesc>
 8006f96:	4603      	mov	r3, r0
 8006f98:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006f9a:	7bbb      	ldrb	r3, [r7, #14]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d103      	bne.n	8006fa8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2205      	movs	r2, #5
 8006fa4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006fa6:	e0de      	b.n	8007166 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006fa8:	7bbb      	ldrb	r3, [r7, #14]
 8006faa:	2b03      	cmp	r3, #3
 8006fac:	f040 80db 	bne.w	8007166 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	b2da      	uxtb	r2, r3
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006fc6:	2b03      	cmp	r3, #3
 8006fc8:	d903      	bls.n	8006fd2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	220d      	movs	r2, #13
 8006fce:	701a      	strb	r2, [r3, #0]
      break;
 8006fd0:	e0c9      	b.n	8007166 <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	795b      	ldrb	r3, [r3, #5]
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f001 f92b 	bl	8008234 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	791b      	ldrb	r3, [r3, #4]
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f001 f925 	bl	8008234 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	701a      	strb	r2, [r3, #0]
      break;
 8006ff6:	e0b6      	b.n	8007166 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d036      	beq.n	8007070 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800700e:	23ff      	movs	r3, #255	; 0xff
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 f9e5 	bl	80073e0 <USBH_Get_StringDesc>
 8007016:	4603      	mov	r3, r0
 8007018:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800701a:	7bbb      	ldrb	r3, [r7, #14]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d111      	bne.n	8007044 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2206      	movs	r2, #6
 8007024:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2205      	movs	r2, #5
 800702a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800703a:	2300      	movs	r3, #0
 800703c:	2200      	movs	r2, #0
 800703e:	f001 fb99 	bl	8008774 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007042:	e092      	b.n	800716a <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007044:	7bbb      	ldrb	r3, [r7, #14]
 8007046:	2b03      	cmp	r3, #3
 8007048:	f040 808f 	bne.w	800716a <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2206      	movs	r2, #6
 8007050:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2205      	movs	r2, #5
 8007056:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007066:	2300      	movs	r3, #0
 8007068:	2200      	movs	r2, #0
 800706a:	f001 fb83 	bl	8008774 <osMessageQueuePut>
      break;
 800706e:	e07c      	b.n	800716a <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2206      	movs	r2, #6
 8007074:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2205      	movs	r2, #5
 800707a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800708a:	2300      	movs	r3, #0
 800708c:	2200      	movs	r2, #0
 800708e:	f001 fb71 	bl	8008774 <osMessageQueuePut>
      break;
 8007092:	e06a      	b.n	800716a <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800709a:	2b00      	cmp	r3, #0
 800709c:	d027      	beq.n	80070ee <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80070aa:	23ff      	movs	r3, #255	; 0xff
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 f997 	bl	80073e0 <USBH_Get_StringDesc>
 80070b2:	4603      	mov	r3, r0
 80070b4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80070b6:	7bbb      	ldrb	r3, [r7, #14]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d103      	bne.n	80070c4 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2207      	movs	r2, #7
 80070c0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80070c2:	e054      	b.n	800716e <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80070c4:	7bbb      	ldrb	r3, [r7, #14]
 80070c6:	2b03      	cmp	r3, #3
 80070c8:	d151      	bne.n	800716e <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2207      	movs	r2, #7
 80070ce:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2205      	movs	r2, #5
 80070d4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80070e4:	2300      	movs	r3, #0
 80070e6:	2200      	movs	r2, #0
 80070e8:	f001 fb44 	bl	8008774 <osMessageQueuePut>
      break;
 80070ec:	e03f      	b.n	800716e <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2207      	movs	r2, #7
 80070f2:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2205      	movs	r2, #5
 80070f8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007108:	2300      	movs	r3, #0
 800710a:	2200      	movs	r2, #0
 800710c:	f001 fb32 	bl	8008774 <osMessageQueuePut>
      break;
 8007110:	e02d      	b.n	800716e <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007118:	2b00      	cmp	r3, #0
 800711a:	d017      	beq.n	800714c <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007128:	23ff      	movs	r3, #255	; 0xff
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 f958 	bl	80073e0 <USBH_Get_StringDesc>
 8007130:	4603      	mov	r3, r0
 8007132:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007134:	7bbb      	ldrb	r3, [r7, #14]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d102      	bne.n	8007140 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800713a:	2300      	movs	r3, #0
 800713c:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800713e:	e018      	b.n	8007172 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007140:	7bbb      	ldrb	r3, [r7, #14]
 8007142:	2b03      	cmp	r3, #3
 8007144:	d115      	bne.n	8007172 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 8007146:	2300      	movs	r3, #0
 8007148:	73fb      	strb	r3, [r7, #15]
      break;
 800714a:	e012      	b.n	8007172 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800714c:	2300      	movs	r3, #0
 800714e:	73fb      	strb	r3, [r7, #15]
      break;
 8007150:	e00f      	b.n	8007172 <USBH_HandleEnum+0x44a>

    default:
      break;
 8007152:	bf00      	nop
 8007154:	e00e      	b.n	8007174 <USBH_HandleEnum+0x44c>
      break;
 8007156:	bf00      	nop
 8007158:	e00c      	b.n	8007174 <USBH_HandleEnum+0x44c>
      break;
 800715a:	bf00      	nop
 800715c:	e00a      	b.n	8007174 <USBH_HandleEnum+0x44c>
      break;
 800715e:	bf00      	nop
 8007160:	e008      	b.n	8007174 <USBH_HandleEnum+0x44c>
      break;
 8007162:	bf00      	nop
 8007164:	e006      	b.n	8007174 <USBH_HandleEnum+0x44c>
      break;
 8007166:	bf00      	nop
 8007168:	e004      	b.n	8007174 <USBH_HandleEnum+0x44c>
      break;
 800716a:	bf00      	nop
 800716c:	e002      	b.n	8007174 <USBH_HandleEnum+0x44c>
      break;
 800716e:	bf00      	nop
 8007170:	e000      	b.n	8007174 <USBH_HandleEnum+0x44c>
      break;
 8007172:	bf00      	nop
  }
  return Status;
 8007174:	7bfb      	ldrb	r3, [r7, #15]
}
 8007176:	4618      	mov	r0, r3
 8007178:	3710      	adds	r7, #16
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop

08007180 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	683a      	ldr	r2, [r7, #0]
 800718e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007192:	bf00      	nop
 8007194:	370c      	adds	r7, #12
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr

0800719e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800719e:	b580      	push	{r7, lr}
 80071a0:	b082      	sub	sp, #8
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80071ac:	1c5a      	adds	r2, r3, #1
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 f804 	bl	80071c2 <USBH_HandleSof>
}
 80071ba:	bf00      	nop
 80071bc:	3708      	adds	r7, #8
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b082      	sub	sp, #8
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	2b0b      	cmp	r3, #11
 80071d2:	d10a      	bne.n	80071ea <USBH_HandleSof+0x28>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d005      	beq.n	80071ea <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071e4:	699b      	ldr	r3, [r3, #24]
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	4798      	blx	r3
  }
}
 80071ea:	bf00      	nop
 80071ec:	3708      	adds	r7, #8
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}

080071f2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80071f2:	b580      	push	{r7, lr}
 80071f4:	b082      	sub	sp, #8
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2201      	movs	r2, #1
 80071fe:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2201      	movs	r2, #1
 8007206:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007216:	2300      	movs	r3, #0
 8007218:	2200      	movs	r2, #0
 800721a:	f001 faab 	bl	8008774 <osMessageQueuePut>
#endif
#endif

  return;
 800721e:	bf00      	nop
}
 8007220:	3708      	adds	r7, #8
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}

08007226 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007226:	b480      	push	{r7}
 8007228:	b083      	sub	sp, #12
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007236:	bf00      	nop
}
 8007238:	370c      	adds	r7, #12
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr

08007242 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007242:	b580      	push	{r7, lr}
 8007244:	b082      	sub	sp, #8
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2201      	movs	r2, #1
 800724e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2201      	movs	r2, #1
 8007266:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007276:	2300      	movs	r3, #0
 8007278:	2200      	movs	r2, #0
 800727a:	f001 fa7b 	bl	8008774 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800727e:	2300      	movs	r3, #0
}
 8007280:	4618      	mov	r0, r3
 8007282:	3708      	adds	r7, #8
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2201      	movs	r2, #1
 8007294:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f004 fa54 	bl	800b756 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	791b      	ldrb	r3, [r3, #4]
 80072b2:	4619      	mov	r1, r3
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 ffbd 	bl	8008234 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	795b      	ldrb	r3, [r3, #5]
 80072be:	4619      	mov	r1, r3
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 ffb7 	bl	8008234 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2201      	movs	r2, #1
 80072ca:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80072da:	2300      	movs	r3, #0
 80072dc:	2200      	movs	r2, #0
 80072de:	f001 fa49 	bl	8008774 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 80072e2:	2300      	movs	r3, #0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3708      	adds	r7, #8
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007300:	f04f 33ff 	mov.w	r3, #4294967295
 8007304:	2200      	movs	r2, #0
 8007306:	f001 fa95 	bl	8008834 <osMessageQueueGet>
 800730a:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d1f0      	bne.n	80072f4 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f7ff fa9c 	bl	8006850 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007318:	e7ec      	b.n	80072f4 <USBH_Process_OS+0x8>

0800731a <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800731a:	b580      	push	{r7, lr}
 800731c:	b082      	sub	sp, #8
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2201      	movs	r2, #1
 8007326:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007336:	2300      	movs	r3, #0
 8007338:	2200      	movs	r2, #0
 800733a:	f001 fa1b 	bl	8008774 <osMessageQueuePut>
#endif

  return USBH_OK;
 800733e:	2300      	movs	r3, #0
}
 8007340:	4618      	mov	r0, r3
 8007342:	3708      	adds	r7, #8
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b086      	sub	sp, #24
 800734c:	af02      	add	r7, sp, #8
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	460b      	mov	r3, r1
 8007352:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800735a:	78fb      	ldrb	r3, [r7, #3]
 800735c:	b29b      	uxth	r3, r3
 800735e:	9300      	str	r3, [sp, #0]
 8007360:	4613      	mov	r3, r2
 8007362:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007366:	2100      	movs	r1, #0
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 f864 	bl	8007436 <USBH_GetDescriptor>
 800736e:	4603      	mov	r3, r0
 8007370:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8007372:	7bfb      	ldrb	r3, [r7, #15]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d10a      	bne.n	800738e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007384:	78fa      	ldrb	r2, [r7, #3]
 8007386:	b292      	uxth	r2, r2
 8007388:	4619      	mov	r1, r3
 800738a:	f000 f918 	bl	80075be <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800738e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007390:	4618      	mov	r0, r3
 8007392:	3710      	adds	r7, #16
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007398:	b580      	push	{r7, lr}
 800739a:	b086      	sub	sp, #24
 800739c:	af02      	add	r7, sp, #8
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	460b      	mov	r3, r1
 80073a2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	331c      	adds	r3, #28
 80073a8:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80073aa:	887b      	ldrh	r3, [r7, #2]
 80073ac:	9300      	str	r3, [sp, #0]
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073b4:	2100      	movs	r1, #0
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 f83d 	bl	8007436 <USBH_GetDescriptor>
 80073bc:	4603      	mov	r3, r0
 80073be:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80073c0:	7bfb      	ldrb	r3, [r7, #15]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d107      	bne.n	80073d6 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80073c6:	887b      	ldrh	r3, [r7, #2]
 80073c8:	461a      	mov	r2, r3
 80073ca:	68b9      	ldr	r1, [r7, #8]
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 f987 	bl	80076e0 <USBH_ParseCfgDesc>
 80073d2:	4603      	mov	r3, r0
 80073d4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80073d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3710      	adds	r7, #16
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b088      	sub	sp, #32
 80073e4:	af02      	add	r7, sp, #8
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	607a      	str	r2, [r7, #4]
 80073ea:	461a      	mov	r2, r3
 80073ec:	460b      	mov	r3, r1
 80073ee:	72fb      	strb	r3, [r7, #11]
 80073f0:	4613      	mov	r3, r2
 80073f2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80073f4:	7afb      	ldrb	r3, [r7, #11]
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80073fc:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007404:	893b      	ldrh	r3, [r7, #8]
 8007406:	9300      	str	r3, [sp, #0]
 8007408:	460b      	mov	r3, r1
 800740a:	2100      	movs	r1, #0
 800740c:	68f8      	ldr	r0, [r7, #12]
 800740e:	f000 f812 	bl	8007436 <USBH_GetDescriptor>
 8007412:	4603      	mov	r3, r0
 8007414:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007416:	7dfb      	ldrb	r3, [r7, #23]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d107      	bne.n	800742c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007422:	893a      	ldrh	r2, [r7, #8]
 8007424:	6879      	ldr	r1, [r7, #4]
 8007426:	4618      	mov	r0, r3
 8007428:	f000 fb24 	bl	8007a74 <USBH_ParseStringDesc>
  }

  return status;
 800742c:	7dfb      	ldrb	r3, [r7, #23]
}
 800742e:	4618      	mov	r0, r3
 8007430:	3718      	adds	r7, #24
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007436:	b580      	push	{r7, lr}
 8007438:	b084      	sub	sp, #16
 800743a:	af00      	add	r7, sp, #0
 800743c:	60f8      	str	r0, [r7, #12]
 800743e:	607b      	str	r3, [r7, #4]
 8007440:	460b      	mov	r3, r1
 8007442:	72fb      	strb	r3, [r7, #11]
 8007444:	4613      	mov	r3, r2
 8007446:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	789b      	ldrb	r3, [r3, #2]
 800744c:	2b01      	cmp	r3, #1
 800744e:	d11c      	bne.n	800748a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007450:	7afb      	ldrb	r3, [r7, #11]
 8007452:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007456:	b2da      	uxtb	r2, r3
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2206      	movs	r2, #6
 8007460:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	893a      	ldrh	r2, [r7, #8]
 8007466:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007468:	893b      	ldrh	r3, [r7, #8]
 800746a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800746e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007472:	d104      	bne.n	800747e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f240 4209 	movw	r2, #1033	; 0x409
 800747a:	829a      	strh	r2, [r3, #20]
 800747c:	e002      	b.n	8007484 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2200      	movs	r2, #0
 8007482:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	8b3a      	ldrh	r2, [r7, #24]
 8007488:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800748a:	8b3b      	ldrh	r3, [r7, #24]
 800748c:	461a      	mov	r2, r3
 800748e:	6879      	ldr	r1, [r7, #4]
 8007490:	68f8      	ldr	r0, [r7, #12]
 8007492:	f000 fb3d 	bl	8007b10 <USBH_CtlReq>
 8007496:	4603      	mov	r3, r0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3710      	adds	r7, #16
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	460b      	mov	r3, r1
 80074aa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	789b      	ldrb	r3, [r3, #2]
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d10f      	bne.n	80074d4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2205      	movs	r2, #5
 80074be:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80074c0:	78fb      	ldrb	r3, [r7, #3]
 80074c2:	b29a      	uxth	r2, r3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2200      	movs	r2, #0
 80074cc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80074d4:	2200      	movs	r2, #0
 80074d6:	2100      	movs	r1, #0
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 fb19 	bl	8007b10 <USBH_CtlReq>
 80074de:	4603      	mov	r3, r0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3708      	adds	r7, #8
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	460b      	mov	r3, r1
 80074f2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	789b      	ldrb	r3, [r3, #2]
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d10e      	bne.n	800751a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2209      	movs	r2, #9
 8007506:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	887a      	ldrh	r2, [r7, #2]
 800750c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800751a:	2200      	movs	r2, #0
 800751c:	2100      	movs	r1, #0
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 faf6 	bl	8007b10 <USBH_CtlReq>
 8007524:	4603      	mov	r3, r0
}
 8007526:	4618      	mov	r0, r3
 8007528:	3708      	adds	r7, #8
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800752e:	b580      	push	{r7, lr}
 8007530:	b082      	sub	sp, #8
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
 8007536:	460b      	mov	r3, r1
 8007538:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	789b      	ldrb	r3, [r3, #2]
 800753e:	2b01      	cmp	r3, #1
 8007540:	d10f      	bne.n	8007562 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2203      	movs	r2, #3
 800754c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800754e:	78fb      	ldrb	r3, [r7, #3]
 8007550:	b29a      	uxth	r2, r3
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007562:	2200      	movs	r2, #0
 8007564:	2100      	movs	r1, #0
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 fad2 	bl	8007b10 <USBH_CtlReq>
 800756c:	4603      	mov	r3, r0
}
 800756e:	4618      	mov	r0, r3
 8007570:	3708      	adds	r7, #8
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}

08007576 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007576:	b580      	push	{r7, lr}
 8007578:	b082      	sub	sp, #8
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
 800757e:	460b      	mov	r3, r1
 8007580:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	789b      	ldrb	r3, [r3, #2]
 8007586:	2b01      	cmp	r3, #1
 8007588:	d10f      	bne.n	80075aa <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2202      	movs	r2, #2
 800758e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2201      	movs	r2, #1
 8007594:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800759c:	78fb      	ldrb	r3, [r7, #3]
 800759e:	b29a      	uxth	r2, r3
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80075aa:	2200      	movs	r2, #0
 80075ac:	2100      	movs	r1, #0
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 faae 	bl	8007b10 <USBH_CtlReq>
 80075b4:	4603      	mov	r3, r0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3708      	adds	r7, #8
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}

080075be <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80075be:	b480      	push	{r7}
 80075c0:	b085      	sub	sp, #20
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	60f8      	str	r0, [r7, #12]
 80075c6:	60b9      	str	r1, [r7, #8]
 80075c8:	4613      	mov	r3, r2
 80075ca:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	781a      	ldrb	r2, [r3, #0]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	785a      	ldrb	r2, [r3, #1]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	3302      	adds	r3, #2
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	b29a      	uxth	r2, r3
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	3303      	adds	r3, #3
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	021b      	lsls	r3, r3, #8
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	4313      	orrs	r3, r2
 80075f2:	b29a      	uxth	r2, r3
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	791a      	ldrb	r2, [r3, #4]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	795a      	ldrb	r2, [r3, #5]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	799a      	ldrb	r2, [r3, #6]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	79da      	ldrb	r2, [r3, #7]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	79db      	ldrb	r3, [r3, #7]
 800761c:	2b20      	cmp	r3, #32
 800761e:	dc11      	bgt.n	8007644 <USBH_ParseDevDesc+0x86>
 8007620:	2b08      	cmp	r3, #8
 8007622:	db16      	blt.n	8007652 <USBH_ParseDevDesc+0x94>
 8007624:	3b08      	subs	r3, #8
 8007626:	2201      	movs	r2, #1
 8007628:	fa02 f303 	lsl.w	r3, r2, r3
 800762c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007630:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007634:	2b00      	cmp	r3, #0
 8007636:	bf14      	ite	ne
 8007638:	2301      	movne	r3, #1
 800763a:	2300      	moveq	r3, #0
 800763c:	b2db      	uxtb	r3, r3
 800763e:	2b00      	cmp	r3, #0
 8007640:	d102      	bne.n	8007648 <USBH_ParseDevDesc+0x8a>
 8007642:	e006      	b.n	8007652 <USBH_ParseDevDesc+0x94>
 8007644:	2b40      	cmp	r3, #64	; 0x40
 8007646:	d104      	bne.n	8007652 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	79da      	ldrb	r2, [r3, #7]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	71da      	strb	r2, [r3, #7]
      break;
 8007650:	e003      	b.n	800765a <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2240      	movs	r2, #64	; 0x40
 8007656:	71da      	strb	r2, [r3, #7]
      break;
 8007658:	bf00      	nop
  }

  if (length > 8U)
 800765a:	88fb      	ldrh	r3, [r7, #6]
 800765c:	2b08      	cmp	r3, #8
 800765e:	d939      	bls.n	80076d4 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	3308      	adds	r3, #8
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	b29a      	uxth	r2, r3
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	3309      	adds	r3, #9
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	b29b      	uxth	r3, r3
 8007670:	021b      	lsls	r3, r3, #8
 8007672:	b29b      	uxth	r3, r3
 8007674:	4313      	orrs	r3, r2
 8007676:	b29a      	uxth	r2, r3
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	330a      	adds	r3, #10
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	b29a      	uxth	r2, r3
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	330b      	adds	r3, #11
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	b29b      	uxth	r3, r3
 800768c:	021b      	lsls	r3, r3, #8
 800768e:	b29b      	uxth	r3, r3
 8007690:	4313      	orrs	r3, r2
 8007692:	b29a      	uxth	r2, r3
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	330c      	adds	r3, #12
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	b29a      	uxth	r2, r3
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	330d      	adds	r3, #13
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	021b      	lsls	r3, r3, #8
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	4313      	orrs	r3, r2
 80076ae:	b29a      	uxth	r2, r3
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	7b9a      	ldrb	r2, [r3, #14]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	7bda      	ldrb	r2, [r3, #15]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	7c1a      	ldrb	r2, [r3, #16]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	7c5a      	ldrb	r2, [r3, #17]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	745a      	strb	r2, [r3, #17]
  }
}
 80076d4:	bf00      	nop
 80076d6:	3714      	adds	r7, #20
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b08c      	sub	sp, #48	; 0x30
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	60b9      	str	r1, [r7, #8]
 80076ea:	4613      	mov	r3, r2
 80076ec:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80076f4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80076f6:	2300      	movs	r3, #0
 80076f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007700:	2300      	movs	r3, #0
 8007702:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007706:	2300      	movs	r3, #0
 8007708:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	781a      	ldrb	r2, [r3, #0]
 8007714:	6a3b      	ldr	r3, [r7, #32]
 8007716:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	785a      	ldrb	r2, [r3, #1]
 800771c:	6a3b      	ldr	r3, [r7, #32]
 800771e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	3302      	adds	r3, #2
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	b29a      	uxth	r2, r3
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	3303      	adds	r3, #3
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	b29b      	uxth	r3, r3
 8007730:	021b      	lsls	r3, r3, #8
 8007732:	b29b      	uxth	r3, r3
 8007734:	4313      	orrs	r3, r2
 8007736:	b29b      	uxth	r3, r3
 8007738:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800773c:	bf28      	it	cs
 800773e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007742:	b29a      	uxth	r2, r3
 8007744:	6a3b      	ldr	r3, [r7, #32]
 8007746:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	791a      	ldrb	r2, [r3, #4]
 800774c:	6a3b      	ldr	r3, [r7, #32]
 800774e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	795a      	ldrb	r2, [r3, #5]
 8007754:	6a3b      	ldr	r3, [r7, #32]
 8007756:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	799a      	ldrb	r2, [r3, #6]
 800775c:	6a3b      	ldr	r3, [r7, #32]
 800775e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	79da      	ldrb	r2, [r3, #7]
 8007764:	6a3b      	ldr	r3, [r7, #32]
 8007766:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	7a1a      	ldrb	r2, [r3, #8]
 800776c:	6a3b      	ldr	r3, [r7, #32]
 800776e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007770:	6a3b      	ldr	r3, [r7, #32]
 8007772:	781b      	ldrb	r3, [r3, #0]
 8007774:	2b09      	cmp	r3, #9
 8007776:	d002      	beq.n	800777e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007778:	6a3b      	ldr	r3, [r7, #32]
 800777a:	2209      	movs	r2, #9
 800777c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800777e:	88fb      	ldrh	r3, [r7, #6]
 8007780:	2b09      	cmp	r3, #9
 8007782:	f240 809d 	bls.w	80078c0 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007786:	2309      	movs	r3, #9
 8007788:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800778a:	2300      	movs	r3, #0
 800778c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800778e:	e081      	b.n	8007894 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007790:	f107 0316 	add.w	r3, r7, #22
 8007794:	4619      	mov	r1, r3
 8007796:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007798:	f000 f99f 	bl	8007ada <USBH_GetNextDesc>
 800779c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800779e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a0:	785b      	ldrb	r3, [r3, #1]
 80077a2:	2b04      	cmp	r3, #4
 80077a4:	d176      	bne.n	8007894 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80077a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	2b09      	cmp	r3, #9
 80077ac:	d002      	beq.n	80077b4 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80077ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b0:	2209      	movs	r2, #9
 80077b2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80077b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077b8:	221a      	movs	r2, #26
 80077ba:	fb02 f303 	mul.w	r3, r2, r3
 80077be:	3308      	adds	r3, #8
 80077c0:	6a3a      	ldr	r2, [r7, #32]
 80077c2:	4413      	add	r3, r2
 80077c4:	3302      	adds	r3, #2
 80077c6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80077c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077ca:	69f8      	ldr	r0, [r7, #28]
 80077cc:	f000 f87e 	bl	80078cc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80077d0:	2300      	movs	r3, #0
 80077d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80077d6:	2300      	movs	r3, #0
 80077d8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80077da:	e043      	b.n	8007864 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80077dc:	f107 0316 	add.w	r3, r7, #22
 80077e0:	4619      	mov	r1, r3
 80077e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077e4:	f000 f979 	bl	8007ada <USBH_GetNextDesc>
 80077e8:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80077ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ec:	785b      	ldrb	r3, [r3, #1]
 80077ee:	2b05      	cmp	r3, #5
 80077f0:	d138      	bne.n	8007864 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	795b      	ldrb	r3, [r3, #5]
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d10f      	bne.n	800781a <USBH_ParseCfgDesc+0x13a>
 80077fa:	69fb      	ldr	r3, [r7, #28]
 80077fc:	799b      	ldrb	r3, [r3, #6]
 80077fe:	2b02      	cmp	r3, #2
 8007800:	d10b      	bne.n	800781a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007802:	69fb      	ldr	r3, [r7, #28]
 8007804:	79db      	ldrb	r3, [r3, #7]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d10f      	bne.n	800782a <USBH_ParseCfgDesc+0x14a>
 800780a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	2b09      	cmp	r3, #9
 8007810:	d00b      	beq.n	800782a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007814:	2209      	movs	r2, #9
 8007816:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007818:	e007      	b.n	800782a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800781a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	2b07      	cmp	r3, #7
 8007820:	d004      	beq.n	800782c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007824:	2207      	movs	r2, #7
 8007826:	701a      	strb	r2, [r3, #0]
 8007828:	e000      	b.n	800782c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800782a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800782c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007830:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007834:	3201      	adds	r2, #1
 8007836:	00d2      	lsls	r2, r2, #3
 8007838:	211a      	movs	r1, #26
 800783a:	fb01 f303 	mul.w	r3, r1, r3
 800783e:	4413      	add	r3, r2
 8007840:	3308      	adds	r3, #8
 8007842:	6a3a      	ldr	r2, [r7, #32]
 8007844:	4413      	add	r3, r2
 8007846:	3304      	adds	r3, #4
 8007848:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800784a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800784c:	69b9      	ldr	r1, [r7, #24]
 800784e:	68f8      	ldr	r0, [r7, #12]
 8007850:	f000 f86b 	bl	800792a <USBH_ParseEPDesc>
 8007854:	4603      	mov	r3, r0
 8007856:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800785a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800785e:	3301      	adds	r3, #1
 8007860:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	791b      	ldrb	r3, [r3, #4]
 8007868:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800786c:	429a      	cmp	r2, r3
 800786e:	d204      	bcs.n	800787a <USBH_ParseCfgDesc+0x19a>
 8007870:	6a3b      	ldr	r3, [r7, #32]
 8007872:	885a      	ldrh	r2, [r3, #2]
 8007874:	8afb      	ldrh	r3, [r7, #22]
 8007876:	429a      	cmp	r2, r3
 8007878:	d8b0      	bhi.n	80077dc <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800787a:	69fb      	ldr	r3, [r7, #28]
 800787c:	791b      	ldrb	r3, [r3, #4]
 800787e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007882:	429a      	cmp	r2, r3
 8007884:	d201      	bcs.n	800788a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007886:	2303      	movs	r3, #3
 8007888:	e01c      	b.n	80078c4 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800788a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800788e:	3301      	adds	r3, #1
 8007890:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007894:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007898:	2b01      	cmp	r3, #1
 800789a:	d805      	bhi.n	80078a8 <USBH_ParseCfgDesc+0x1c8>
 800789c:	6a3b      	ldr	r3, [r7, #32]
 800789e:	885a      	ldrh	r2, [r3, #2]
 80078a0:	8afb      	ldrh	r3, [r7, #22]
 80078a2:	429a      	cmp	r2, r3
 80078a4:	f63f af74 	bhi.w	8007790 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80078a8:	6a3b      	ldr	r3, [r7, #32]
 80078aa:	791b      	ldrb	r3, [r3, #4]
 80078ac:	2b02      	cmp	r3, #2
 80078ae:	bf28      	it	cs
 80078b0:	2302      	movcs	r3, #2
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d201      	bcs.n	80078c0 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 80078bc:	2303      	movs	r3, #3
 80078be:	e001      	b.n	80078c4 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 80078c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3730      	adds	r7, #48	; 0x30
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	781a      	ldrb	r2, [r3, #0]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	785a      	ldrb	r2, [r3, #1]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	789a      	ldrb	r2, [r3, #2]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	78da      	ldrb	r2, [r3, #3]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	791a      	ldrb	r2, [r3, #4]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	795a      	ldrb	r2, [r3, #5]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	799a      	ldrb	r2, [r3, #6]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	79da      	ldrb	r2, [r3, #7]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	7a1a      	ldrb	r2, [r3, #8]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	721a      	strb	r2, [r3, #8]
}
 800791e:	bf00      	nop
 8007920:	370c      	adds	r7, #12
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr

0800792a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800792a:	b480      	push	{r7}
 800792c:	b087      	sub	sp, #28
 800792e:	af00      	add	r7, sp, #0
 8007930:	60f8      	str	r0, [r7, #12]
 8007932:	60b9      	str	r1, [r7, #8]
 8007934:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007936:	2300      	movs	r3, #0
 8007938:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	781a      	ldrb	r2, [r3, #0]
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	785a      	ldrb	r2, [r3, #1]
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	789a      	ldrb	r2, [r3, #2]
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	78da      	ldrb	r2, [r3, #3]
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	3304      	adds	r3, #4
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	b29a      	uxth	r2, r3
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	3305      	adds	r3, #5
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	b29b      	uxth	r3, r3
 800796a:	021b      	lsls	r3, r3, #8
 800796c:	b29b      	uxth	r3, r3
 800796e:	4313      	orrs	r3, r2
 8007970:	b29a      	uxth	r2, r3
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	799a      	ldrb	r2, [r3, #6]
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	889b      	ldrh	r3, [r3, #4]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d102      	bne.n	800798c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007986:	2303      	movs	r3, #3
 8007988:	75fb      	strb	r3, [r7, #23]
 800798a:	e033      	b.n	80079f4 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	889b      	ldrh	r3, [r3, #4]
 8007990:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007994:	f023 0307 	bic.w	r3, r3, #7
 8007998:	b29a      	uxth	r2, r3
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	889b      	ldrh	r3, [r3, #4]
 80079a2:	b21a      	sxth	r2, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	3304      	adds	r3, #4
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	b299      	uxth	r1, r3
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	3305      	adds	r3, #5
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	021b      	lsls	r3, r3, #8
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	430b      	orrs	r3, r1
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d110      	bne.n	80079e6 <USBH_ParseEPDesc+0xbc>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	3304      	adds	r3, #4
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	b299      	uxth	r1, r3
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	3305      	adds	r3, #5
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	021b      	lsls	r3, r3, #8
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	430b      	orrs	r3, r1
 80079da:	b29b      	uxth	r3, r3
 80079dc:	b21b      	sxth	r3, r3
 80079de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80079e2:	b21b      	sxth	r3, r3
 80079e4:	e001      	b.n	80079ea <USBH_ParseEPDesc+0xc0>
 80079e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079ea:	4313      	orrs	r3, r2
 80079ec:	b21b      	sxth	r3, r3
 80079ee:	b29a      	uxth	r2, r3
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d116      	bne.n	8007a2c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	78db      	ldrb	r3, [r3, #3]
 8007a02:	f003 0303 	and.w	r3, r3, #3
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d005      	beq.n	8007a16 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	78db      	ldrb	r3, [r3, #3]
 8007a0e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007a12:	2b03      	cmp	r3, #3
 8007a14:	d127      	bne.n	8007a66 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	799b      	ldrb	r3, [r3, #6]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d003      	beq.n	8007a26 <USBH_ParseEPDesc+0xfc>
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	799b      	ldrb	r3, [r3, #6]
 8007a22:	2b10      	cmp	r3, #16
 8007a24:	d91f      	bls.n	8007a66 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007a26:	2303      	movs	r3, #3
 8007a28:	75fb      	strb	r3, [r7, #23]
 8007a2a:	e01c      	b.n	8007a66 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	78db      	ldrb	r3, [r3, #3]
 8007a30:	f003 0303 	and.w	r3, r3, #3
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d10a      	bne.n	8007a4e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	799b      	ldrb	r3, [r3, #6]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d003      	beq.n	8007a48 <USBH_ParseEPDesc+0x11e>
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	799b      	ldrb	r3, [r3, #6]
 8007a44:	2b10      	cmp	r3, #16
 8007a46:	d90e      	bls.n	8007a66 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007a48:	2303      	movs	r3, #3
 8007a4a:	75fb      	strb	r3, [r7, #23]
 8007a4c:	e00b      	b.n	8007a66 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	78db      	ldrb	r3, [r3, #3]
 8007a52:	f003 0303 	and.w	r3, r3, #3
 8007a56:	2b03      	cmp	r3, #3
 8007a58:	d105      	bne.n	8007a66 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	799b      	ldrb	r3, [r3, #6]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d101      	bne.n	8007a66 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007a62:	2303      	movs	r3, #3
 8007a64:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8007a66:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	371c      	adds	r7, #28
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b087      	sub	sp, #28
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	60f8      	str	r0, [r7, #12]
 8007a7c:	60b9      	str	r1, [r7, #8]
 8007a7e:	4613      	mov	r3, r2
 8007a80:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	3301      	adds	r3, #1
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	2b03      	cmp	r3, #3
 8007a8a:	d120      	bne.n	8007ace <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	1e9a      	subs	r2, r3, #2
 8007a92:	88fb      	ldrh	r3, [r7, #6]
 8007a94:	4293      	cmp	r3, r2
 8007a96:	bf28      	it	cs
 8007a98:	4613      	movcs	r3, r2
 8007a9a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	3302      	adds	r3, #2
 8007aa0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	82fb      	strh	r3, [r7, #22]
 8007aa6:	e00b      	b.n	8007ac0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007aa8:	8afb      	ldrh	r3, [r7, #22]
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	4413      	add	r3, r2
 8007aae:	781a      	ldrb	r2, [r3, #0]
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007aba:	8afb      	ldrh	r3, [r7, #22]
 8007abc:	3302      	adds	r3, #2
 8007abe:	82fb      	strh	r3, [r7, #22]
 8007ac0:	8afa      	ldrh	r2, [r7, #22]
 8007ac2:	8abb      	ldrh	r3, [r7, #20]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d3ef      	bcc.n	8007aa8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	2200      	movs	r2, #0
 8007acc:	701a      	strb	r2, [r3, #0]
  }
}
 8007ace:	bf00      	nop
 8007ad0:	371c      	adds	r7, #28
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr

08007ada <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007ada:	b480      	push	{r7}
 8007adc:	b085      	sub	sp, #20
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
 8007ae2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	881a      	ldrh	r2, [r3, #0]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	4413      	add	r3, r2
 8007af0:	b29a      	uxth	r2, r3
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4413      	add	r3, r2
 8007b00:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007b02:	68fb      	ldr	r3, [r7, #12]
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3714      	adds	r7, #20
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b086      	sub	sp, #24
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	60f8      	str	r0, [r7, #12]
 8007b18:	60b9      	str	r1, [r7, #8]
 8007b1a:	4613      	mov	r3, r2
 8007b1c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	789b      	ldrb	r3, [r3, #2]
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d002      	beq.n	8007b30 <USBH_CtlReq+0x20>
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	d01d      	beq.n	8007b6a <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8007b2e:	e043      	b.n	8007bb8 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	68ba      	ldr	r2, [r7, #8]
 8007b34:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	88fa      	ldrh	r2, [r7, #6]
 8007b3a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2202      	movs	r2, #2
 8007b46:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2203      	movs	r2, #3
 8007b50:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007b60:	2300      	movs	r3, #0
 8007b62:	2200      	movs	r2, #0
 8007b64:	f000 fe06 	bl	8008774 <osMessageQueuePut>
      break;
 8007b68:	e026      	b.n	8007bb8 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8007b6a:	68f8      	ldr	r0, [r7, #12]
 8007b6c:	f000 f82a 	bl	8007bc4 <USBH_HandleControl>
 8007b70:	4603      	mov	r3, r0
 8007b72:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007b74:	7dfb      	ldrb	r3, [r7, #23]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d002      	beq.n	8007b80 <USBH_CtlReq+0x70>
 8007b7a:	7dfb      	ldrb	r3, [r7, #23]
 8007b7c:	2b03      	cmp	r3, #3
 8007b7e:	d106      	bne.n	8007b8e <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2201      	movs	r2, #1
 8007b84:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	761a      	strb	r2, [r3, #24]
 8007b8c:	e005      	b.n	8007b9a <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8007b8e:	7dfb      	ldrb	r3, [r7, #23]
 8007b90:	2b02      	cmp	r3, #2
 8007b92:	d102      	bne.n	8007b9a <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2201      	movs	r2, #1
 8007b98:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2203      	movs	r2, #3
 8007b9e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007bae:	2300      	movs	r3, #0
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f000 fddf 	bl	8008774 <osMessageQueuePut>
      break;
 8007bb6:	bf00      	nop
  }
  return status;
 8007bb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3718      	adds	r7, #24
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
	...

08007bc4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b086      	sub	sp, #24
 8007bc8:	af02      	add	r7, sp, #8
 8007bca:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	7e1b      	ldrb	r3, [r3, #24]
 8007bd8:	3b01      	subs	r3, #1
 8007bda:	2b0a      	cmp	r3, #10
 8007bdc:	f200 8229 	bhi.w	8008032 <USBH_HandleControl+0x46e>
 8007be0:	a201      	add	r2, pc, #4	; (adr r2, 8007be8 <USBH_HandleControl+0x24>)
 8007be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be6:	bf00      	nop
 8007be8:	08007c15 	.word	0x08007c15
 8007bec:	08007c2f 	.word	0x08007c2f
 8007bf0:	08007cd1 	.word	0x08007cd1
 8007bf4:	08007cf7 	.word	0x08007cf7
 8007bf8:	08007d83 	.word	0x08007d83
 8007bfc:	08007dad 	.word	0x08007dad
 8007c00:	08007e6f 	.word	0x08007e6f
 8007c04:	08007e91 	.word	0x08007e91
 8007c08:	08007f23 	.word	0x08007f23
 8007c0c:	08007f49 	.word	0x08007f49
 8007c10:	08007fdb 	.word	0x08007fdb
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f103 0110 	add.w	r1, r3, #16
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	795b      	ldrb	r3, [r3, #5]
 8007c1e:	461a      	mov	r2, r3
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 fa17 	bl	8008054 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2202      	movs	r2, #2
 8007c2a:	761a      	strb	r2, [r3, #24]
      break;
 8007c2c:	e20c      	b.n	8008048 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	795b      	ldrb	r3, [r3, #5]
 8007c32:	4619      	mov	r1, r3
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f003 fe7d 	bl	800b934 <USBH_LL_GetURBState>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007c3e:	7bbb      	ldrb	r3, [r7, #14]
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d12c      	bne.n	8007c9e <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	7c1b      	ldrb	r3, [r3, #16]
 8007c48:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007c4c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	8adb      	ldrh	r3, [r3, #22]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d00a      	beq.n	8007c6c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007c56:	7b7b      	ldrb	r3, [r7, #13]
 8007c58:	2b80      	cmp	r3, #128	; 0x80
 8007c5a:	d103      	bne.n	8007c64 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2203      	movs	r2, #3
 8007c60:	761a      	strb	r2, [r3, #24]
 8007c62:	e00d      	b.n	8007c80 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2205      	movs	r2, #5
 8007c68:	761a      	strb	r2, [r3, #24]
 8007c6a:	e009      	b.n	8007c80 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8007c6c:	7b7b      	ldrb	r3, [r7, #13]
 8007c6e:	2b80      	cmp	r3, #128	; 0x80
 8007c70:	d103      	bne.n	8007c7a <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2209      	movs	r2, #9
 8007c76:	761a      	strb	r2, [r3, #24]
 8007c78:	e002      	b.n	8007c80 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2207      	movs	r2, #7
 8007c7e:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2203      	movs	r2, #3
 8007c84:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007c94:	2300      	movs	r3, #0
 8007c96:	2200      	movs	r2, #0
 8007c98:	f000 fd6c 	bl	8008774 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007c9c:	e1cb      	b.n	8008036 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007c9e:	7bbb      	ldrb	r3, [r7, #14]
 8007ca0:	2b04      	cmp	r3, #4
 8007ca2:	d003      	beq.n	8007cac <USBH_HandleControl+0xe8>
 8007ca4:	7bbb      	ldrb	r3, [r7, #14]
 8007ca6:	2b02      	cmp	r3, #2
 8007ca8:	f040 81c5 	bne.w	8008036 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	220b      	movs	r2, #11
 8007cb0:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2203      	movs	r2, #3
 8007cb6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	2200      	movs	r2, #0
 8007cca:	f000 fd53 	bl	8008774 <osMessageQueuePut>
      break;
 8007cce:	e1b2      	b.n	8008036 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007cd6:	b29a      	uxth	r2, r3
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6899      	ldr	r1, [r3, #8]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	899a      	ldrh	r2, [r3, #12]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	791b      	ldrb	r3, [r3, #4]
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 f9f2 	bl	80080d2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2204      	movs	r2, #4
 8007cf2:	761a      	strb	r2, [r3, #24]
      break;
 8007cf4:	e1a8      	b.n	8008048 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	791b      	ldrb	r3, [r3, #4]
 8007cfa:	4619      	mov	r1, r3
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f003 fe19 	bl	800b934 <USBH_LL_GetURBState>
 8007d02:	4603      	mov	r3, r0
 8007d04:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007d06:	7bbb      	ldrb	r3, [r7, #14]
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d110      	bne.n	8007d2e <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2209      	movs	r2, #9
 8007d10:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2203      	movs	r2, #3
 8007d16:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007d26:	2300      	movs	r3, #0
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f000 fd23 	bl	8008774 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007d2e:	7bbb      	ldrb	r3, [r7, #14]
 8007d30:	2b05      	cmp	r3, #5
 8007d32:	d110      	bne.n	8007d56 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007d34:	2303      	movs	r3, #3
 8007d36:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2203      	movs	r2, #3
 8007d3c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f000 fd10 	bl	8008774 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007d54:	e171      	b.n	800803a <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 8007d56:	7bbb      	ldrb	r3, [r7, #14]
 8007d58:	2b04      	cmp	r3, #4
 8007d5a:	f040 816e 	bne.w	800803a <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	220b      	movs	r2, #11
 8007d62:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2203      	movs	r2, #3
 8007d68:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007d78:	2300      	movs	r3, #0
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f000 fcfa 	bl	8008774 <osMessageQueuePut>
      break;
 8007d80:	e15b      	b.n	800803a <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6899      	ldr	r1, [r3, #8]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	899a      	ldrh	r2, [r3, #12]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	795b      	ldrb	r3, [r3, #5]
 8007d8e:	2001      	movs	r0, #1
 8007d90:	9000      	str	r0, [sp, #0]
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 f978 	bl	8008088 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007d9e:	b29a      	uxth	r2, r3
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2206      	movs	r2, #6
 8007da8:	761a      	strb	r2, [r3, #24]
      break;
 8007daa:	e14d      	b.n	8008048 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	795b      	ldrb	r3, [r3, #5]
 8007db0:	4619      	mov	r1, r3
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f003 fdbe 	bl	800b934 <USBH_LL_GetURBState>
 8007db8:	4603      	mov	r3, r0
 8007dba:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007dbc:	7bbb      	ldrb	r3, [r7, #14]
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d111      	bne.n	8007de6 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2207      	movs	r2, #7
 8007dc6:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2203      	movs	r2, #3
 8007dcc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007ddc:	2300      	movs	r3, #0
 8007dde:	2200      	movs	r2, #0
 8007de0:	f000 fcc8 	bl	8008774 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007de4:	e12b      	b.n	800803e <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8007de6:	7bbb      	ldrb	r3, [r7, #14]
 8007de8:	2b05      	cmp	r3, #5
 8007dea:	d113      	bne.n	8007e14 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	220c      	movs	r2, #12
 8007df0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007df2:	2303      	movs	r3, #3
 8007df4:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2203      	movs	r2, #3
 8007dfa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	f000 fcb1 	bl	8008774 <osMessageQueuePut>
      break;
 8007e12:	e114      	b.n	800803e <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007e14:	7bbb      	ldrb	r3, [r7, #14]
 8007e16:	2b02      	cmp	r3, #2
 8007e18:	d111      	bne.n	8007e3e <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2205      	movs	r2, #5
 8007e1e:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2203      	movs	r2, #3
 8007e24:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007e34:	2300      	movs	r3, #0
 8007e36:	2200      	movs	r2, #0
 8007e38:	f000 fc9c 	bl	8008774 <osMessageQueuePut>
      break;
 8007e3c:	e0ff      	b.n	800803e <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8007e3e:	7bbb      	ldrb	r3, [r7, #14]
 8007e40:	2b04      	cmp	r3, #4
 8007e42:	f040 80fc 	bne.w	800803e <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	220b      	movs	r2, #11
 8007e4a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007e4c:	2302      	movs	r3, #2
 8007e4e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2203      	movs	r2, #3
 8007e54:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007e64:	2300      	movs	r3, #0
 8007e66:	2200      	movs	r2, #0
 8007e68:	f000 fc84 	bl	8008774 <osMessageQueuePut>
      break;
 8007e6c:	e0e7      	b.n	800803e <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	791b      	ldrb	r3, [r3, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	2100      	movs	r1, #0
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 f92b 	bl	80080d2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e82:	b29a      	uxth	r2, r3
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2208      	movs	r2, #8
 8007e8c:	761a      	strb	r2, [r3, #24]

      break;
 8007e8e:	e0db      	b.n	8008048 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	791b      	ldrb	r3, [r3, #4]
 8007e94:	4619      	mov	r1, r3
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f003 fd4c 	bl	800b934 <USBH_LL_GetURBState>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007ea0:	7bbb      	ldrb	r3, [r7, #14]
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d113      	bne.n	8007ece <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	220d      	movs	r2, #13
 8007eaa:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007eac:	2300      	movs	r3, #0
 8007eae:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2203      	movs	r2, #3
 8007eb4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f000 fc54 	bl	8008774 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007ecc:	e0b9      	b.n	8008042 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 8007ece:	7bbb      	ldrb	r3, [r7, #14]
 8007ed0:	2b04      	cmp	r3, #4
 8007ed2:	d111      	bne.n	8007ef8 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	220b      	movs	r2, #11
 8007ed8:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2203      	movs	r2, #3
 8007ede:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007eee:	2300      	movs	r3, #0
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f000 fc3f 	bl	8008774 <osMessageQueuePut>
      break;
 8007ef6:	e0a4      	b.n	8008042 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8007ef8:	7bbb      	ldrb	r3, [r7, #14]
 8007efa:	2b05      	cmp	r3, #5
 8007efc:	f040 80a1 	bne.w	8008042 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 8007f00:	2303      	movs	r3, #3
 8007f02:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2203      	movs	r2, #3
 8007f08:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007f18:	2300      	movs	r3, #0
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f000 fc2a 	bl	8008774 <osMessageQueuePut>
      break;
 8007f20:	e08f      	b.n	8008042 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	795b      	ldrb	r3, [r3, #5]
 8007f26:	2201      	movs	r2, #1
 8007f28:	9200      	str	r2, [sp, #0]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	2100      	movs	r1, #0
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 f8aa 	bl	8008088 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007f3a:	b29a      	uxth	r2, r3
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	220a      	movs	r2, #10
 8007f44:	761a      	strb	r2, [r3, #24]
      break;
 8007f46:	e07f      	b.n	8008048 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	795b      	ldrb	r3, [r3, #5]
 8007f4c:	4619      	mov	r1, r3
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f003 fcf0 	bl	800b934 <USBH_LL_GetURBState>
 8007f54:	4603      	mov	r3, r0
 8007f56:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007f58:	7bbb      	ldrb	r3, [r7, #14]
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d113      	bne.n	8007f86 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	220d      	movs	r2, #13
 8007f66:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2203      	movs	r2, #3
 8007f6c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f000 fbf8 	bl	8008774 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007f84:	e05f      	b.n	8008046 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007f86:	7bbb      	ldrb	r3, [r7, #14]
 8007f88:	2b02      	cmp	r3, #2
 8007f8a:	d111      	bne.n	8007fb0 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2209      	movs	r2, #9
 8007f90:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2203      	movs	r2, #3
 8007f96:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f000 fbe3 	bl	8008774 <osMessageQueuePut>
      break;
 8007fae:	e04a      	b.n	8008046 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8007fb0:	7bbb      	ldrb	r3, [r7, #14]
 8007fb2:	2b04      	cmp	r3, #4
 8007fb4:	d147      	bne.n	8008046 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	220b      	movs	r2, #11
 8007fba:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2203      	movs	r2, #3
 8007fc0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f000 fbce 	bl	8008774 <osMessageQueuePut>
      break;
 8007fd8:	e035      	b.n	8008046 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	7e5b      	ldrb	r3, [r3, #25]
 8007fde:	3301      	adds	r3, #1
 8007fe0:	b2da      	uxtb	r2, r3
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	765a      	strb	r2, [r3, #25]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	7e5b      	ldrb	r3, [r3, #25]
 8007fea:	2b02      	cmp	r3, #2
 8007fec:	d806      	bhi.n	8007ffc <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007ffa:	e025      	b.n	8008048 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008002:	2106      	movs	r1, #6
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2200      	movs	r2, #0
 800800c:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	795b      	ldrb	r3, [r3, #5]
 8008012:	4619      	mov	r1, r3
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 f90d 	bl	8008234 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	791b      	ldrb	r3, [r3, #4]
 800801e:	4619      	mov	r1, r3
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 f907 	bl	8008234 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800802c:	2302      	movs	r3, #2
 800802e:	73fb      	strb	r3, [r7, #15]
      break;
 8008030:	e00a      	b.n	8008048 <USBH_HandleControl+0x484>

    default:
      break;
 8008032:	bf00      	nop
 8008034:	e008      	b.n	8008048 <USBH_HandleControl+0x484>
      break;
 8008036:	bf00      	nop
 8008038:	e006      	b.n	8008048 <USBH_HandleControl+0x484>
      break;
 800803a:	bf00      	nop
 800803c:	e004      	b.n	8008048 <USBH_HandleControl+0x484>
      break;
 800803e:	bf00      	nop
 8008040:	e002      	b.n	8008048 <USBH_HandleControl+0x484>
      break;
 8008042:	bf00      	nop
 8008044:	e000      	b.n	8008048 <USBH_HandleControl+0x484>
      break;
 8008046:	bf00      	nop
  }

  return status;
 8008048:	7bfb      	ldrb	r3, [r7, #15]
}
 800804a:	4618      	mov	r0, r3
 800804c:	3710      	adds	r7, #16
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop

08008054 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b088      	sub	sp, #32
 8008058:	af04      	add	r7, sp, #16
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	60b9      	str	r1, [r7, #8]
 800805e:	4613      	mov	r3, r2
 8008060:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008062:	79f9      	ldrb	r1, [r7, #7]
 8008064:	2300      	movs	r3, #0
 8008066:	9303      	str	r3, [sp, #12]
 8008068:	2308      	movs	r3, #8
 800806a:	9302      	str	r3, [sp, #8]
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	9301      	str	r3, [sp, #4]
 8008070:	2300      	movs	r3, #0
 8008072:	9300      	str	r3, [sp, #0]
 8008074:	2300      	movs	r3, #0
 8008076:	2200      	movs	r2, #0
 8008078:	68f8      	ldr	r0, [r7, #12]
 800807a:	f003 fc2a 	bl	800b8d2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800807e:	2300      	movs	r3, #0
}
 8008080:	4618      	mov	r0, r3
 8008082:	3710      	adds	r7, #16
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b088      	sub	sp, #32
 800808c:	af04      	add	r7, sp, #16
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	60b9      	str	r1, [r7, #8]
 8008092:	4611      	mov	r1, r2
 8008094:	461a      	mov	r2, r3
 8008096:	460b      	mov	r3, r1
 8008098:	80fb      	strh	r3, [r7, #6]
 800809a:	4613      	mov	r3, r2
 800809c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d001      	beq.n	80080ac <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80080a8:	2300      	movs	r3, #0
 80080aa:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80080ac:	7979      	ldrb	r1, [r7, #5]
 80080ae:	7e3b      	ldrb	r3, [r7, #24]
 80080b0:	9303      	str	r3, [sp, #12]
 80080b2:	88fb      	ldrh	r3, [r7, #6]
 80080b4:	9302      	str	r3, [sp, #8]
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	9301      	str	r3, [sp, #4]
 80080ba:	2301      	movs	r3, #1
 80080bc:	9300      	str	r3, [sp, #0]
 80080be:	2300      	movs	r3, #0
 80080c0:	2200      	movs	r2, #0
 80080c2:	68f8      	ldr	r0, [r7, #12]
 80080c4:	f003 fc05 	bl	800b8d2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80080c8:	2300      	movs	r3, #0
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3710      	adds	r7, #16
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}

080080d2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80080d2:	b580      	push	{r7, lr}
 80080d4:	b088      	sub	sp, #32
 80080d6:	af04      	add	r7, sp, #16
 80080d8:	60f8      	str	r0, [r7, #12]
 80080da:	60b9      	str	r1, [r7, #8]
 80080dc:	4611      	mov	r1, r2
 80080de:	461a      	mov	r2, r3
 80080e0:	460b      	mov	r3, r1
 80080e2:	80fb      	strh	r3, [r7, #6]
 80080e4:	4613      	mov	r3, r2
 80080e6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80080e8:	7979      	ldrb	r1, [r7, #5]
 80080ea:	2300      	movs	r3, #0
 80080ec:	9303      	str	r3, [sp, #12]
 80080ee:	88fb      	ldrh	r3, [r7, #6]
 80080f0:	9302      	str	r3, [sp, #8]
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	9301      	str	r3, [sp, #4]
 80080f6:	2301      	movs	r3, #1
 80080f8:	9300      	str	r3, [sp, #0]
 80080fa:	2300      	movs	r3, #0
 80080fc:	2201      	movs	r2, #1
 80080fe:	68f8      	ldr	r0, [r7, #12]
 8008100:	f003 fbe7 	bl	800b8d2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008104:	2300      	movs	r3, #0

}
 8008106:	4618      	mov	r0, r3
 8008108:	3710      	adds	r7, #16
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}

0800810e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800810e:	b580      	push	{r7, lr}
 8008110:	b088      	sub	sp, #32
 8008112:	af04      	add	r7, sp, #16
 8008114:	60f8      	str	r0, [r7, #12]
 8008116:	60b9      	str	r1, [r7, #8]
 8008118:	4611      	mov	r1, r2
 800811a:	461a      	mov	r2, r3
 800811c:	460b      	mov	r3, r1
 800811e:	80fb      	strh	r3, [r7, #6]
 8008120:	4613      	mov	r3, r2
 8008122:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800812a:	2b00      	cmp	r3, #0
 800812c:	d001      	beq.n	8008132 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800812e:	2300      	movs	r3, #0
 8008130:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008132:	7979      	ldrb	r1, [r7, #5]
 8008134:	7e3b      	ldrb	r3, [r7, #24]
 8008136:	9303      	str	r3, [sp, #12]
 8008138:	88fb      	ldrh	r3, [r7, #6]
 800813a:	9302      	str	r3, [sp, #8]
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	9301      	str	r3, [sp, #4]
 8008140:	2301      	movs	r3, #1
 8008142:	9300      	str	r3, [sp, #0]
 8008144:	2302      	movs	r3, #2
 8008146:	2200      	movs	r2, #0
 8008148:	68f8      	ldr	r0, [r7, #12]
 800814a:	f003 fbc2 	bl	800b8d2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800814e:	2300      	movs	r3, #0
}
 8008150:	4618      	mov	r0, r3
 8008152:	3710      	adds	r7, #16
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b088      	sub	sp, #32
 800815c:	af04      	add	r7, sp, #16
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	60b9      	str	r1, [r7, #8]
 8008162:	4611      	mov	r1, r2
 8008164:	461a      	mov	r2, r3
 8008166:	460b      	mov	r3, r1
 8008168:	80fb      	strh	r3, [r7, #6]
 800816a:	4613      	mov	r3, r2
 800816c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800816e:	7979      	ldrb	r1, [r7, #5]
 8008170:	2300      	movs	r3, #0
 8008172:	9303      	str	r3, [sp, #12]
 8008174:	88fb      	ldrh	r3, [r7, #6]
 8008176:	9302      	str	r3, [sp, #8]
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	9301      	str	r3, [sp, #4]
 800817c:	2301      	movs	r3, #1
 800817e:	9300      	str	r3, [sp, #0]
 8008180:	2302      	movs	r3, #2
 8008182:	2201      	movs	r2, #1
 8008184:	68f8      	ldr	r0, [r7, #12]
 8008186:	f003 fba4 	bl	800b8d2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800818a:	2300      	movs	r3, #0
}
 800818c:	4618      	mov	r0, r3
 800818e:	3710      	adds	r7, #16
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b086      	sub	sp, #24
 8008198:	af04      	add	r7, sp, #16
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	4608      	mov	r0, r1
 800819e:	4611      	mov	r1, r2
 80081a0:	461a      	mov	r2, r3
 80081a2:	4603      	mov	r3, r0
 80081a4:	70fb      	strb	r3, [r7, #3]
 80081a6:	460b      	mov	r3, r1
 80081a8:	70bb      	strb	r3, [r7, #2]
 80081aa:	4613      	mov	r3, r2
 80081ac:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80081ae:	7878      	ldrb	r0, [r7, #1]
 80081b0:	78ba      	ldrb	r2, [r7, #2]
 80081b2:	78f9      	ldrb	r1, [r7, #3]
 80081b4:	8b3b      	ldrh	r3, [r7, #24]
 80081b6:	9302      	str	r3, [sp, #8]
 80081b8:	7d3b      	ldrb	r3, [r7, #20]
 80081ba:	9301      	str	r3, [sp, #4]
 80081bc:	7c3b      	ldrb	r3, [r7, #16]
 80081be:	9300      	str	r3, [sp, #0]
 80081c0:	4603      	mov	r3, r0
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f003 fb37 	bl	800b836 <USBH_LL_OpenPipe>

  return USBH_OK;
 80081c8:	2300      	movs	r3, #0
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3708      	adds	r7, #8
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}

080081d2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80081d2:	b580      	push	{r7, lr}
 80081d4:	b082      	sub	sp, #8
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
 80081da:	460b      	mov	r3, r1
 80081dc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80081de:	78fb      	ldrb	r3, [r7, #3]
 80081e0:	4619      	mov	r1, r3
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f003 fb56 	bl	800b894 <USBH_LL_ClosePipe>

  return USBH_OK;
 80081e8:	2300      	movs	r3, #0
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3708      	adds	r7, #8
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}

080081f2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80081f2:	b580      	push	{r7, lr}
 80081f4:	b084      	sub	sp, #16
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
 80081fa:	460b      	mov	r3, r1
 80081fc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 f836 	bl	8008270 <USBH_GetFreePipe>
 8008204:	4603      	mov	r3, r0
 8008206:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008208:	89fb      	ldrh	r3, [r7, #14]
 800820a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800820e:	4293      	cmp	r3, r2
 8008210:	d00a      	beq.n	8008228 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008212:	78fa      	ldrb	r2, [r7, #3]
 8008214:	89fb      	ldrh	r3, [r7, #14]
 8008216:	f003 030f 	and.w	r3, r3, #15
 800821a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800821e:	6879      	ldr	r1, [r7, #4]
 8008220:	33e0      	adds	r3, #224	; 0xe0
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	440b      	add	r3, r1
 8008226:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008228:	89fb      	ldrh	r3, [r7, #14]
 800822a:	b2db      	uxtb	r3, r3
}
 800822c:	4618      	mov	r0, r3
 800822e:	3710      	adds	r7, #16
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008234:	b480      	push	{r7}
 8008236:	b083      	sub	sp, #12
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	460b      	mov	r3, r1
 800823e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008240:	78fb      	ldrb	r3, [r7, #3]
 8008242:	2b0f      	cmp	r3, #15
 8008244:	d80d      	bhi.n	8008262 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008246:	78fb      	ldrb	r3, [r7, #3]
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	33e0      	adds	r3, #224	; 0xe0
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	4413      	add	r3, r2
 8008250:	685a      	ldr	r2, [r3, #4]
 8008252:	78fb      	ldrb	r3, [r7, #3]
 8008254:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008258:	6879      	ldr	r1, [r7, #4]
 800825a:	33e0      	adds	r3, #224	; 0xe0
 800825c:	009b      	lsls	r3, r3, #2
 800825e:	440b      	add	r3, r1
 8008260:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008262:	2300      	movs	r3, #0
}
 8008264:	4618      	mov	r0, r3
 8008266:	370c      	adds	r7, #12
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr

08008270 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008270:	b480      	push	{r7}
 8008272:	b085      	sub	sp, #20
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008278:	2300      	movs	r3, #0
 800827a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800827c:	2300      	movs	r3, #0
 800827e:	73fb      	strb	r3, [r7, #15]
 8008280:	e00f      	b.n	80082a2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008282:	7bfb      	ldrb	r3, [r7, #15]
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	33e0      	adds	r3, #224	; 0xe0
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	4413      	add	r3, r2
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008292:	2b00      	cmp	r3, #0
 8008294:	d102      	bne.n	800829c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008296:	7bfb      	ldrb	r3, [r7, #15]
 8008298:	b29b      	uxth	r3, r3
 800829a:	e007      	b.n	80082ac <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800829c:	7bfb      	ldrb	r3, [r7, #15]
 800829e:	3301      	adds	r3, #1
 80082a0:	73fb      	strb	r3, [r7, #15]
 80082a2:	7bfb      	ldrb	r3, [r7, #15]
 80082a4:	2b0f      	cmp	r3, #15
 80082a6:	d9ec      	bls.n	8008282 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80082a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3714      	adds	r7, #20
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr

080082b8 <__NVIC_SetPriority>:
{
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	4603      	mov	r3, r0
 80082c0:	6039      	str	r1, [r7, #0]
 80082c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80082c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	db0a      	blt.n	80082e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	b2da      	uxtb	r2, r3
 80082d0:	490c      	ldr	r1, [pc, #48]	; (8008304 <__NVIC_SetPriority+0x4c>)
 80082d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082d6:	0112      	lsls	r2, r2, #4
 80082d8:	b2d2      	uxtb	r2, r2
 80082da:	440b      	add	r3, r1
 80082dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80082e0:	e00a      	b.n	80082f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	b2da      	uxtb	r2, r3
 80082e6:	4908      	ldr	r1, [pc, #32]	; (8008308 <__NVIC_SetPriority+0x50>)
 80082e8:	79fb      	ldrb	r3, [r7, #7]
 80082ea:	f003 030f 	and.w	r3, r3, #15
 80082ee:	3b04      	subs	r3, #4
 80082f0:	0112      	lsls	r2, r2, #4
 80082f2:	b2d2      	uxtb	r2, r2
 80082f4:	440b      	add	r3, r1
 80082f6:	761a      	strb	r2, [r3, #24]
}
 80082f8:	bf00      	nop
 80082fa:	370c      	adds	r7, #12
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr
 8008304:	e000e100 	.word	0xe000e100
 8008308:	e000ed00 	.word	0xe000ed00

0800830c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800830c:	b580      	push	{r7, lr}
 800830e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008310:	2100      	movs	r1, #0
 8008312:	f06f 0004 	mvn.w	r0, #4
 8008316:	f7ff ffcf 	bl	80082b8 <__NVIC_SetPriority>
#endif
}
 800831a:	bf00      	nop
 800831c:	bd80      	pop	{r7, pc}
	...

08008320 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008320:	b480      	push	{r7}
 8008322:	b083      	sub	sp, #12
 8008324:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008326:	f3ef 8305 	mrs	r3, IPSR
 800832a:	603b      	str	r3, [r7, #0]
  return(result);
 800832c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800832e:	2b00      	cmp	r3, #0
 8008330:	d003      	beq.n	800833a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008332:	f06f 0305 	mvn.w	r3, #5
 8008336:	607b      	str	r3, [r7, #4]
 8008338:	e00c      	b.n	8008354 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800833a:	4b0a      	ldr	r3, [pc, #40]	; (8008364 <osKernelInitialize+0x44>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d105      	bne.n	800834e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008342:	4b08      	ldr	r3, [pc, #32]	; (8008364 <osKernelInitialize+0x44>)
 8008344:	2201      	movs	r2, #1
 8008346:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008348:	2300      	movs	r3, #0
 800834a:	607b      	str	r3, [r7, #4]
 800834c:	e002      	b.n	8008354 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800834e:	f04f 33ff 	mov.w	r3, #4294967295
 8008352:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008354:	687b      	ldr	r3, [r7, #4]
}
 8008356:	4618      	mov	r0, r3
 8008358:	370c      	adds	r7, #12
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr
 8008362:	bf00      	nop
 8008364:	20000228 	.word	0x20000228

08008368 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800836e:	f3ef 8305 	mrs	r3, IPSR
 8008372:	603b      	str	r3, [r7, #0]
  return(result);
 8008374:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008376:	2b00      	cmp	r3, #0
 8008378:	d003      	beq.n	8008382 <osKernelStart+0x1a>
    stat = osErrorISR;
 800837a:	f06f 0305 	mvn.w	r3, #5
 800837e:	607b      	str	r3, [r7, #4]
 8008380:	e010      	b.n	80083a4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008382:	4b0b      	ldr	r3, [pc, #44]	; (80083b0 <osKernelStart+0x48>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	2b01      	cmp	r3, #1
 8008388:	d109      	bne.n	800839e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800838a:	f7ff ffbf 	bl	800830c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800838e:	4b08      	ldr	r3, [pc, #32]	; (80083b0 <osKernelStart+0x48>)
 8008390:	2202      	movs	r2, #2
 8008392:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008394:	f001 fb10 	bl	80099b8 <vTaskStartScheduler>
      stat = osOK;
 8008398:	2300      	movs	r3, #0
 800839a:	607b      	str	r3, [r7, #4]
 800839c:	e002      	b.n	80083a4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800839e:	f04f 33ff 	mov.w	r3, #4294967295
 80083a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80083a4:	687b      	ldr	r3, [r7, #4]
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3708      	adds	r7, #8
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	bf00      	nop
 80083b0:	20000228 	.word	0x20000228

080083b4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b08e      	sub	sp, #56	; 0x38
 80083b8:	af04      	add	r7, sp, #16
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80083c0:	2300      	movs	r3, #0
 80083c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083c4:	f3ef 8305 	mrs	r3, IPSR
 80083c8:	617b      	str	r3, [r7, #20]
  return(result);
 80083ca:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d17e      	bne.n	80084ce <osThreadNew+0x11a>
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d07b      	beq.n	80084ce <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80083d6:	2380      	movs	r3, #128	; 0x80
 80083d8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80083da:	2318      	movs	r3, #24
 80083dc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80083de:	2300      	movs	r3, #0
 80083e0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80083e2:	f04f 33ff 	mov.w	r3, #4294967295
 80083e6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d045      	beq.n	800847a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d002      	beq.n	80083fc <osThreadNew+0x48>
        name = attr->name;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	699b      	ldr	r3, [r3, #24]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d002      	beq.n	800840a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	699b      	ldr	r3, [r3, #24]
 8008408:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800840a:	69fb      	ldr	r3, [r7, #28]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d008      	beq.n	8008422 <osThreadNew+0x6e>
 8008410:	69fb      	ldr	r3, [r7, #28]
 8008412:	2b38      	cmp	r3, #56	; 0x38
 8008414:	d805      	bhi.n	8008422 <osThreadNew+0x6e>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	f003 0301 	and.w	r3, r3, #1
 800841e:	2b00      	cmp	r3, #0
 8008420:	d001      	beq.n	8008426 <osThreadNew+0x72>
        return (NULL);
 8008422:	2300      	movs	r3, #0
 8008424:	e054      	b.n	80084d0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	695b      	ldr	r3, [r3, #20]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d003      	beq.n	8008436 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	695b      	ldr	r3, [r3, #20]
 8008432:	089b      	lsrs	r3, r3, #2
 8008434:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	689b      	ldr	r3, [r3, #8]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d00e      	beq.n	800845c <osThreadNew+0xa8>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	68db      	ldr	r3, [r3, #12]
 8008442:	2b5b      	cmp	r3, #91	; 0x5b
 8008444:	d90a      	bls.n	800845c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800844a:	2b00      	cmp	r3, #0
 800844c:	d006      	beq.n	800845c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	695b      	ldr	r3, [r3, #20]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d002      	beq.n	800845c <osThreadNew+0xa8>
        mem = 1;
 8008456:	2301      	movs	r3, #1
 8008458:	61bb      	str	r3, [r7, #24]
 800845a:	e010      	b.n	800847e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d10c      	bne.n	800847e <osThreadNew+0xca>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	68db      	ldr	r3, [r3, #12]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d108      	bne.n	800847e <osThreadNew+0xca>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	691b      	ldr	r3, [r3, #16]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d104      	bne.n	800847e <osThreadNew+0xca>
          mem = 0;
 8008474:	2300      	movs	r3, #0
 8008476:	61bb      	str	r3, [r7, #24]
 8008478:	e001      	b.n	800847e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800847a:	2300      	movs	r3, #0
 800847c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800847e:	69bb      	ldr	r3, [r7, #24]
 8008480:	2b01      	cmp	r3, #1
 8008482:	d110      	bne.n	80084a6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800848c:	9202      	str	r2, [sp, #8]
 800848e:	9301      	str	r3, [sp, #4]
 8008490:	69fb      	ldr	r3, [r7, #28]
 8008492:	9300      	str	r3, [sp, #0]
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	6a3a      	ldr	r2, [r7, #32]
 8008498:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800849a:	68f8      	ldr	r0, [r7, #12]
 800849c:	f001 f8b6 	bl	800960c <xTaskCreateStatic>
 80084a0:	4603      	mov	r3, r0
 80084a2:	613b      	str	r3, [r7, #16]
 80084a4:	e013      	b.n	80084ce <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80084a6:	69bb      	ldr	r3, [r7, #24]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d110      	bne.n	80084ce <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80084ac:	6a3b      	ldr	r3, [r7, #32]
 80084ae:	b29a      	uxth	r2, r3
 80084b0:	f107 0310 	add.w	r3, r7, #16
 80084b4:	9301      	str	r3, [sp, #4]
 80084b6:	69fb      	ldr	r3, [r7, #28]
 80084b8:	9300      	str	r3, [sp, #0]
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80084be:	68f8      	ldr	r0, [r7, #12]
 80084c0:	f001 f901 	bl	80096c6 <xTaskCreate>
 80084c4:	4603      	mov	r3, r0
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d001      	beq.n	80084ce <osThreadNew+0x11a>
            hTask = NULL;
 80084ca:	2300      	movs	r3, #0
 80084cc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80084ce:	693b      	ldr	r3, [r7, #16]
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3728      	adds	r7, #40	; 0x28
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084e0:	f3ef 8305 	mrs	r3, IPSR
 80084e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80084e6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d003      	beq.n	80084f4 <osDelay+0x1c>
    stat = osErrorISR;
 80084ec:	f06f 0305 	mvn.w	r3, #5
 80084f0:	60fb      	str	r3, [r7, #12]
 80084f2:	e007      	b.n	8008504 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80084f4:	2300      	movs	r3, #0
 80084f6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d002      	beq.n	8008504 <osDelay+0x2c>
      vTaskDelay(ticks);
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f001 fa26 	bl	8009950 <vTaskDelay>
    }
  }

  return (stat);
 8008504:	68fb      	ldr	r3, [r7, #12]
}
 8008506:	4618      	mov	r0, r3
 8008508:	3710      	adds	r7, #16
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}

0800850e <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800850e:	b580      	push	{r7, lr}
 8008510:	b084      	sub	sp, #16
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f002 fb5e 	bl	800abd8 <pvTimerGetTimerID>
 800851c:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d005      	beq.n	8008530 <TimerCallback+0x22>
    callb->func (callb->arg);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	68fa      	ldr	r2, [r7, #12]
 800852a:	6852      	ldr	r2, [r2, #4]
 800852c:	4610      	mov	r0, r2
 800852e:	4798      	blx	r3
  }
}
 8008530:	bf00      	nop
 8008532:	3710      	adds	r7, #16
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8008538:	b580      	push	{r7, lr}
 800853a:	b08c      	sub	sp, #48	; 0x30
 800853c:	af02      	add	r7, sp, #8
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	607a      	str	r2, [r7, #4]
 8008542:	603b      	str	r3, [r7, #0]
 8008544:	460b      	mov	r3, r1
 8008546:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8008548:	2300      	movs	r3, #0
 800854a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800854c:	f3ef 8305 	mrs	r3, IPSR
 8008550:	613b      	str	r3, [r7, #16]
  return(result);
 8008552:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8008554:	2b00      	cmp	r3, #0
 8008556:	d163      	bne.n	8008620 <osTimerNew+0xe8>
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d060      	beq.n	8008620 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800855e:	2008      	movs	r0, #8
 8008560:	f002 fdaa 	bl	800b0b8 <pvPortMalloc>
 8008564:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d059      	beq.n	8008620 <osTimerNew+0xe8>
      callb->func = func;
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	68fa      	ldr	r2, [r7, #12]
 8008570:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8008578:	7afb      	ldrb	r3, [r7, #11]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d102      	bne.n	8008584 <osTimerNew+0x4c>
        reload = pdFALSE;
 800857e:	2300      	movs	r3, #0
 8008580:	61fb      	str	r3, [r7, #28]
 8008582:	e001      	b.n	8008588 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8008584:	2301      	movs	r3, #1
 8008586:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8008588:	f04f 33ff 	mov.w	r3, #4294967295
 800858c:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800858e:	2300      	movs	r3, #0
 8008590:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d01c      	beq.n	80085d2 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d002      	beq.n	80085a6 <osTimerNew+0x6e>
          name = attr->name;
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d006      	beq.n	80085bc <osTimerNew+0x84>
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	68db      	ldr	r3, [r3, #12]
 80085b2:	2b2b      	cmp	r3, #43	; 0x2b
 80085b4:	d902      	bls.n	80085bc <osTimerNew+0x84>
          mem = 1;
 80085b6:	2301      	movs	r3, #1
 80085b8:	61bb      	str	r3, [r7, #24]
 80085ba:	e00c      	b.n	80085d6 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	689b      	ldr	r3, [r3, #8]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d108      	bne.n	80085d6 <osTimerNew+0x9e>
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d104      	bne.n	80085d6 <osTimerNew+0x9e>
            mem = 0;
 80085cc:	2300      	movs	r3, #0
 80085ce:	61bb      	str	r3, [r7, #24]
 80085d0:	e001      	b.n	80085d6 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 80085d2:	2300      	movs	r3, #0
 80085d4:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80085d6:	69bb      	ldr	r3, [r7, #24]
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d10c      	bne.n	80085f6 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	689b      	ldr	r3, [r3, #8]
 80085e0:	9301      	str	r3, [sp, #4]
 80085e2:	4b12      	ldr	r3, [pc, #72]	; (800862c <osTimerNew+0xf4>)
 80085e4:	9300      	str	r3, [sp, #0]
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	69fa      	ldr	r2, [r7, #28]
 80085ea:	2101      	movs	r1, #1
 80085ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80085ee:	f001 ff74 	bl	800a4da <xTimerCreateStatic>
 80085f2:	6238      	str	r0, [r7, #32]
 80085f4:	e00b      	b.n	800860e <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 80085f6:	69bb      	ldr	r3, [r7, #24]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d108      	bne.n	800860e <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80085fc:	4b0b      	ldr	r3, [pc, #44]	; (800862c <osTimerNew+0xf4>)
 80085fe:	9300      	str	r3, [sp, #0]
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	69fa      	ldr	r2, [r7, #28]
 8008604:	2101      	movs	r1, #1
 8008606:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008608:	f001 ff46 	bl	800a498 <xTimerCreate>
 800860c:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800860e:	6a3b      	ldr	r3, [r7, #32]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d105      	bne.n	8008620 <osTimerNew+0xe8>
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d002      	beq.n	8008620 <osTimerNew+0xe8>
        vPortFree (callb);
 800861a:	6978      	ldr	r0, [r7, #20]
 800861c:	f002 fe18 	bl	800b250 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8008620:	6a3b      	ldr	r3, [r7, #32]
}
 8008622:	4618      	mov	r0, r3
 8008624:	3728      	adds	r7, #40	; 0x28
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
 800862a:	bf00      	nop
 800862c:	0800850f 	.word	0x0800850f

08008630 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8008630:	b580      	push	{r7, lr}
 8008632:	b088      	sub	sp, #32
 8008634:	af02      	add	r7, sp, #8
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800863e:	f3ef 8305 	mrs	r3, IPSR
 8008642:	60fb      	str	r3, [r7, #12]
  return(result);
 8008644:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008646:	2b00      	cmp	r3, #0
 8008648:	d003      	beq.n	8008652 <osTimerStart+0x22>
    stat = osErrorISR;
 800864a:	f06f 0305 	mvn.w	r3, #5
 800864e:	617b      	str	r3, [r7, #20]
 8008650:	e017      	b.n	8008682 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d103      	bne.n	8008660 <osTimerStart+0x30>
    stat = osErrorParameter;
 8008658:	f06f 0303 	mvn.w	r3, #3
 800865c:	617b      	str	r3, [r7, #20]
 800865e:	e010      	b.n	8008682 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8008660:	2300      	movs	r3, #0
 8008662:	9300      	str	r3, [sp, #0]
 8008664:	2300      	movs	r3, #0
 8008666:	683a      	ldr	r2, [r7, #0]
 8008668:	2104      	movs	r1, #4
 800866a:	6938      	ldr	r0, [r7, #16]
 800866c:	f001 ffae 	bl	800a5cc <xTimerGenericCommand>
 8008670:	4603      	mov	r3, r0
 8008672:	2b01      	cmp	r3, #1
 8008674:	d102      	bne.n	800867c <osTimerStart+0x4c>
      stat = osOK;
 8008676:	2300      	movs	r3, #0
 8008678:	617b      	str	r3, [r7, #20]
 800867a:	e002      	b.n	8008682 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800867c:	f06f 0302 	mvn.w	r3, #2
 8008680:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008682:	697b      	ldr	r3, [r7, #20]
}
 8008684:	4618      	mov	r0, r3
 8008686:	3718      	adds	r7, #24
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800868c:	b580      	push	{r7, lr}
 800868e:	b08a      	sub	sp, #40	; 0x28
 8008690:	af02      	add	r7, sp, #8
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	60b9      	str	r1, [r7, #8]
 8008696:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008698:	2300      	movs	r3, #0
 800869a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800869c:	f3ef 8305 	mrs	r3, IPSR
 80086a0:	613b      	str	r3, [r7, #16]
  return(result);
 80086a2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d15f      	bne.n	8008768 <osMessageQueueNew+0xdc>
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d05c      	beq.n	8008768 <osMessageQueueNew+0xdc>
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d059      	beq.n	8008768 <osMessageQueueNew+0xdc>
    mem = -1;
 80086b4:	f04f 33ff 	mov.w	r3, #4294967295
 80086b8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d029      	beq.n	8008714 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	689b      	ldr	r3, [r3, #8]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d012      	beq.n	80086ee <osMessageQueueNew+0x62>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	2b4f      	cmp	r3, #79	; 0x4f
 80086ce:	d90e      	bls.n	80086ee <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d00a      	beq.n	80086ee <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	695a      	ldr	r2, [r3, #20]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	68b9      	ldr	r1, [r7, #8]
 80086e0:	fb01 f303 	mul.w	r3, r1, r3
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d302      	bcc.n	80086ee <osMessageQueueNew+0x62>
        mem = 1;
 80086e8:	2301      	movs	r3, #1
 80086ea:	61bb      	str	r3, [r7, #24]
 80086ec:	e014      	b.n	8008718 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	689b      	ldr	r3, [r3, #8]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d110      	bne.n	8008718 <osMessageQueueNew+0x8c>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	68db      	ldr	r3, [r3, #12]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d10c      	bne.n	8008718 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008702:	2b00      	cmp	r3, #0
 8008704:	d108      	bne.n	8008718 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	695b      	ldr	r3, [r3, #20]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d104      	bne.n	8008718 <osMessageQueueNew+0x8c>
          mem = 0;
 800870e:	2300      	movs	r3, #0
 8008710:	61bb      	str	r3, [r7, #24]
 8008712:	e001      	b.n	8008718 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008714:	2300      	movs	r3, #0
 8008716:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008718:	69bb      	ldr	r3, [r7, #24]
 800871a:	2b01      	cmp	r3, #1
 800871c:	d10b      	bne.n	8008736 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	691a      	ldr	r2, [r3, #16]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	689b      	ldr	r3, [r3, #8]
 8008726:	2100      	movs	r1, #0
 8008728:	9100      	str	r1, [sp, #0]
 800872a:	68b9      	ldr	r1, [r7, #8]
 800872c:	68f8      	ldr	r0, [r7, #12]
 800872e:	f000 fa2f 	bl	8008b90 <xQueueGenericCreateStatic>
 8008732:	61f8      	str	r0, [r7, #28]
 8008734:	e008      	b.n	8008748 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8008736:	69bb      	ldr	r3, [r7, #24]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d105      	bne.n	8008748 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800873c:	2200      	movs	r2, #0
 800873e:	68b9      	ldr	r1, [r7, #8]
 8008740:	68f8      	ldr	r0, [r7, #12]
 8008742:	f000 fa9d 	bl	8008c80 <xQueueGenericCreate>
 8008746:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008748:	69fb      	ldr	r3, [r7, #28]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d00c      	beq.n	8008768 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d003      	beq.n	800875c <osMessageQueueNew+0xd0>
        name = attr->name;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	617b      	str	r3, [r7, #20]
 800875a:	e001      	b.n	8008760 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800875c:	2300      	movs	r3, #0
 800875e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008760:	6979      	ldr	r1, [r7, #20]
 8008762:	69f8      	ldr	r0, [r7, #28]
 8008764:	f000 fef4 	bl	8009550 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008768:	69fb      	ldr	r3, [r7, #28]
}
 800876a:	4618      	mov	r0, r3
 800876c:	3720      	adds	r7, #32
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
	...

08008774 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008774:	b580      	push	{r7, lr}
 8008776:	b088      	sub	sp, #32
 8008778:	af00      	add	r7, sp, #0
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	603b      	str	r3, [r7, #0]
 8008780:	4613      	mov	r3, r2
 8008782:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008788:	2300      	movs	r3, #0
 800878a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800878c:	f3ef 8305 	mrs	r3, IPSR
 8008790:	617b      	str	r3, [r7, #20]
  return(result);
 8008792:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008794:	2b00      	cmp	r3, #0
 8008796:	d028      	beq.n	80087ea <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008798:	69bb      	ldr	r3, [r7, #24]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d005      	beq.n	80087aa <osMessageQueuePut+0x36>
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d002      	beq.n	80087aa <osMessageQueuePut+0x36>
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d003      	beq.n	80087b2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80087aa:	f06f 0303 	mvn.w	r3, #3
 80087ae:	61fb      	str	r3, [r7, #28]
 80087b0:	e038      	b.n	8008824 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80087b2:	2300      	movs	r3, #0
 80087b4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80087b6:	f107 0210 	add.w	r2, r7, #16
 80087ba:	2300      	movs	r3, #0
 80087bc:	68b9      	ldr	r1, [r7, #8]
 80087be:	69b8      	ldr	r0, [r7, #24]
 80087c0:	f000 fbba 	bl	8008f38 <xQueueGenericSendFromISR>
 80087c4:	4603      	mov	r3, r0
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d003      	beq.n	80087d2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80087ca:	f06f 0302 	mvn.w	r3, #2
 80087ce:	61fb      	str	r3, [r7, #28]
 80087d0:	e028      	b.n	8008824 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d025      	beq.n	8008824 <osMessageQueuePut+0xb0>
 80087d8:	4b15      	ldr	r3, [pc, #84]	; (8008830 <osMessageQueuePut+0xbc>)
 80087da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087de:	601a      	str	r2, [r3, #0]
 80087e0:	f3bf 8f4f 	dsb	sy
 80087e4:	f3bf 8f6f 	isb	sy
 80087e8:	e01c      	b.n	8008824 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80087ea:	69bb      	ldr	r3, [r7, #24]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d002      	beq.n	80087f6 <osMessageQueuePut+0x82>
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d103      	bne.n	80087fe <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80087f6:	f06f 0303 	mvn.w	r3, #3
 80087fa:	61fb      	str	r3, [r7, #28]
 80087fc:	e012      	b.n	8008824 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80087fe:	2300      	movs	r3, #0
 8008800:	683a      	ldr	r2, [r7, #0]
 8008802:	68b9      	ldr	r1, [r7, #8]
 8008804:	69b8      	ldr	r0, [r7, #24]
 8008806:	f000 fa99 	bl	8008d3c <xQueueGenericSend>
 800880a:	4603      	mov	r3, r0
 800880c:	2b01      	cmp	r3, #1
 800880e:	d009      	beq.n	8008824 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d003      	beq.n	800881e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8008816:	f06f 0301 	mvn.w	r3, #1
 800881a:	61fb      	str	r3, [r7, #28]
 800881c:	e002      	b.n	8008824 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800881e:	f06f 0302 	mvn.w	r3, #2
 8008822:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008824:	69fb      	ldr	r3, [r7, #28]
}
 8008826:	4618      	mov	r0, r3
 8008828:	3720      	adds	r7, #32
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
 800882e:	bf00      	nop
 8008830:	e000ed04 	.word	0xe000ed04

08008834 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008834:	b580      	push	{r7, lr}
 8008836:	b088      	sub	sp, #32
 8008838:	af00      	add	r7, sp, #0
 800883a:	60f8      	str	r0, [r7, #12]
 800883c:	60b9      	str	r1, [r7, #8]
 800883e:	607a      	str	r2, [r7, #4]
 8008840:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008846:	2300      	movs	r3, #0
 8008848:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800884a:	f3ef 8305 	mrs	r3, IPSR
 800884e:	617b      	str	r3, [r7, #20]
  return(result);
 8008850:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008852:	2b00      	cmp	r3, #0
 8008854:	d028      	beq.n	80088a8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008856:	69bb      	ldr	r3, [r7, #24]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d005      	beq.n	8008868 <osMessageQueueGet+0x34>
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d002      	beq.n	8008868 <osMessageQueueGet+0x34>
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d003      	beq.n	8008870 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8008868:	f06f 0303 	mvn.w	r3, #3
 800886c:	61fb      	str	r3, [r7, #28]
 800886e:	e037      	b.n	80088e0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008870:	2300      	movs	r3, #0
 8008872:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008874:	f107 0310 	add.w	r3, r7, #16
 8008878:	461a      	mov	r2, r3
 800887a:	68b9      	ldr	r1, [r7, #8]
 800887c:	69b8      	ldr	r0, [r7, #24]
 800887e:	f000 fcd7 	bl	8009230 <xQueueReceiveFromISR>
 8008882:	4603      	mov	r3, r0
 8008884:	2b01      	cmp	r3, #1
 8008886:	d003      	beq.n	8008890 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008888:	f06f 0302 	mvn.w	r3, #2
 800888c:	61fb      	str	r3, [r7, #28]
 800888e:	e027      	b.n	80088e0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d024      	beq.n	80088e0 <osMessageQueueGet+0xac>
 8008896:	4b15      	ldr	r3, [pc, #84]	; (80088ec <osMessageQueueGet+0xb8>)
 8008898:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800889c:	601a      	str	r2, [r3, #0]
 800889e:	f3bf 8f4f 	dsb	sy
 80088a2:	f3bf 8f6f 	isb	sy
 80088a6:	e01b      	b.n	80088e0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80088a8:	69bb      	ldr	r3, [r7, #24]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d002      	beq.n	80088b4 <osMessageQueueGet+0x80>
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d103      	bne.n	80088bc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80088b4:	f06f 0303 	mvn.w	r3, #3
 80088b8:	61fb      	str	r3, [r7, #28]
 80088ba:	e011      	b.n	80088e0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80088bc:	683a      	ldr	r2, [r7, #0]
 80088be:	68b9      	ldr	r1, [r7, #8]
 80088c0:	69b8      	ldr	r0, [r7, #24]
 80088c2:	f000 fbd5 	bl	8009070 <xQueueReceive>
 80088c6:	4603      	mov	r3, r0
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	d009      	beq.n	80088e0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d003      	beq.n	80088da <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80088d2:	f06f 0301 	mvn.w	r3, #1
 80088d6:	61fb      	str	r3, [r7, #28]
 80088d8:	e002      	b.n	80088e0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80088da:	f06f 0302 	mvn.w	r3, #2
 80088de:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80088e0:	69fb      	ldr	r3, [r7, #28]
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3720      	adds	r7, #32
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	bf00      	nop
 80088ec:	e000ed04 	.word	0xe000ed04

080088f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80088f0:	b480      	push	{r7}
 80088f2:	b085      	sub	sp, #20
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	60f8      	str	r0, [r7, #12]
 80088f8:	60b9      	str	r1, [r7, #8]
 80088fa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	4a07      	ldr	r2, [pc, #28]	; (800891c <vApplicationGetIdleTaskMemory+0x2c>)
 8008900:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	4a06      	ldr	r2, [pc, #24]	; (8008920 <vApplicationGetIdleTaskMemory+0x30>)
 8008906:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2280      	movs	r2, #128	; 0x80
 800890c:	601a      	str	r2, [r3, #0]
}
 800890e:	bf00      	nop
 8008910:	3714      	adds	r7, #20
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr
 800891a:	bf00      	nop
 800891c:	2000022c 	.word	0x2000022c
 8008920:	20000288 	.word	0x20000288

08008924 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008924:	b480      	push	{r7}
 8008926:	b085      	sub	sp, #20
 8008928:	af00      	add	r7, sp, #0
 800892a:	60f8      	str	r0, [r7, #12]
 800892c:	60b9      	str	r1, [r7, #8]
 800892e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	4a07      	ldr	r2, [pc, #28]	; (8008950 <vApplicationGetTimerTaskMemory+0x2c>)
 8008934:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	4a06      	ldr	r2, [pc, #24]	; (8008954 <vApplicationGetTimerTaskMemory+0x30>)
 800893a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008942:	601a      	str	r2, [r3, #0]
}
 8008944:	bf00      	nop
 8008946:	3714      	adds	r7, #20
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr
 8008950:	20000488 	.word	0x20000488
 8008954:	200004e4 	.word	0x200004e4

08008958 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008958:	b480      	push	{r7}
 800895a:	b083      	sub	sp, #12
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f103 0208 	add.w	r2, r3, #8
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f04f 32ff 	mov.w	r2, #4294967295
 8008970:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f103 0208 	add.w	r2, r3, #8
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f103 0208 	add.w	r2, r3, #8
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2200      	movs	r2, #0
 800898a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800898c:	bf00      	nop
 800898e:	370c      	adds	r7, #12
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2200      	movs	r2, #0
 80089a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80089a6:	bf00      	nop
 80089a8:	370c      	adds	r7, #12
 80089aa:	46bd      	mov	sp, r7
 80089ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b0:	4770      	bx	lr

080089b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80089b2:	b480      	push	{r7}
 80089b4:	b085      	sub	sp, #20
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
 80089ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	68fa      	ldr	r2, [r7, #12]
 80089c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	689a      	ldr	r2, [r3, #8]
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	689b      	ldr	r3, [r3, #8]
 80089d4:	683a      	ldr	r2, [r7, #0]
 80089d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	683a      	ldr	r2, [r7, #0]
 80089dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	687a      	ldr	r2, [r7, #4]
 80089e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	1c5a      	adds	r2, r3, #1
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	601a      	str	r2, [r3, #0]
}
 80089ee:	bf00      	nop
 80089f0:	3714      	adds	r7, #20
 80089f2:	46bd      	mov	sp, r7
 80089f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f8:	4770      	bx	lr

080089fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80089fa:	b480      	push	{r7}
 80089fc:	b085      	sub	sp, #20
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6078      	str	r0, [r7, #4]
 8008a02:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a10:	d103      	bne.n	8008a1a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	691b      	ldr	r3, [r3, #16]
 8008a16:	60fb      	str	r3, [r7, #12]
 8008a18:	e00c      	b.n	8008a34 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	3308      	adds	r3, #8
 8008a1e:	60fb      	str	r3, [r7, #12]
 8008a20:	e002      	b.n	8008a28 <vListInsert+0x2e>
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	60fb      	str	r3, [r7, #12]
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	68ba      	ldr	r2, [r7, #8]
 8008a30:	429a      	cmp	r2, r3
 8008a32:	d2f6      	bcs.n	8008a22 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	685a      	ldr	r2, [r3, #4]
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	683a      	ldr	r2, [r7, #0]
 8008a42:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	68fa      	ldr	r2, [r7, #12]
 8008a48:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	683a      	ldr	r2, [r7, #0]
 8008a4e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	1c5a      	adds	r2, r3, #1
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	601a      	str	r2, [r3, #0]
}
 8008a60:	bf00      	nop
 8008a62:	3714      	adds	r7, #20
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr

08008a6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b085      	sub	sp, #20
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	691b      	ldr	r3, [r3, #16]
 8008a78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	6892      	ldr	r2, [r2, #8]
 8008a82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	689b      	ldr	r3, [r3, #8]
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	6852      	ldr	r2, [r2, #4]
 8008a8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d103      	bne.n	8008aa0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	689a      	ldr	r2, [r3, #8]
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	1e5a      	subs	r2, r3, #1
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3714      	adds	r7, #20
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr

08008ac0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b084      	sub	sp, #16
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d10a      	bne.n	8008aea <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad8:	f383 8811 	msr	BASEPRI, r3
 8008adc:	f3bf 8f6f 	isb	sy
 8008ae0:	f3bf 8f4f 	dsb	sy
 8008ae4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008ae6:	bf00      	nop
 8008ae8:	e7fe      	b.n	8008ae8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008aea:	f002 f9c3 	bl	800ae74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681a      	ldr	r2, [r3, #0]
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008af6:	68f9      	ldr	r1, [r7, #12]
 8008af8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008afa:	fb01 f303 	mul.w	r3, r1, r3
 8008afe:	441a      	add	r2, r3
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2200      	movs	r2, #0
 8008b08:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b1a:	3b01      	subs	r3, #1
 8008b1c:	68f9      	ldr	r1, [r7, #12]
 8008b1e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008b20:	fb01 f303 	mul.w	r3, r1, r3
 8008b24:	441a      	add	r2, r3
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	22ff      	movs	r2, #255	; 0xff
 8008b2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	22ff      	movs	r2, #255	; 0xff
 8008b36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d114      	bne.n	8008b6a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	691b      	ldr	r3, [r3, #16]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d01a      	beq.n	8008b7e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	3310      	adds	r3, #16
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f001 f9bd 	bl	8009ecc <xTaskRemoveFromEventList>
 8008b52:	4603      	mov	r3, r0
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d012      	beq.n	8008b7e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008b58:	4b0c      	ldr	r3, [pc, #48]	; (8008b8c <xQueueGenericReset+0xcc>)
 8008b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b5e:	601a      	str	r2, [r3, #0]
 8008b60:	f3bf 8f4f 	dsb	sy
 8008b64:	f3bf 8f6f 	isb	sy
 8008b68:	e009      	b.n	8008b7e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	3310      	adds	r3, #16
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f7ff fef2 	bl	8008958 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	3324      	adds	r3, #36	; 0x24
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f7ff feed 	bl	8008958 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008b7e:	f002 f9a9 	bl	800aed4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008b82:	2301      	movs	r3, #1
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3710      	adds	r7, #16
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}
 8008b8c:	e000ed04 	.word	0xe000ed04

08008b90 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b08e      	sub	sp, #56	; 0x38
 8008b94:	af02      	add	r7, sp, #8
 8008b96:	60f8      	str	r0, [r7, #12]
 8008b98:	60b9      	str	r1, [r7, #8]
 8008b9a:	607a      	str	r2, [r7, #4]
 8008b9c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d10a      	bne.n	8008bba <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba8:	f383 8811 	msr	BASEPRI, r3
 8008bac:	f3bf 8f6f 	isb	sy
 8008bb0:	f3bf 8f4f 	dsb	sy
 8008bb4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008bb6:	bf00      	nop
 8008bb8:	e7fe      	b.n	8008bb8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d10a      	bne.n	8008bd6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc4:	f383 8811 	msr	BASEPRI, r3
 8008bc8:	f3bf 8f6f 	isb	sy
 8008bcc:	f3bf 8f4f 	dsb	sy
 8008bd0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008bd2:	bf00      	nop
 8008bd4:	e7fe      	b.n	8008bd4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d002      	beq.n	8008be2 <xQueueGenericCreateStatic+0x52>
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d001      	beq.n	8008be6 <xQueueGenericCreateStatic+0x56>
 8008be2:	2301      	movs	r3, #1
 8008be4:	e000      	b.n	8008be8 <xQueueGenericCreateStatic+0x58>
 8008be6:	2300      	movs	r3, #0
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d10a      	bne.n	8008c02 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf0:	f383 8811 	msr	BASEPRI, r3
 8008bf4:	f3bf 8f6f 	isb	sy
 8008bf8:	f3bf 8f4f 	dsb	sy
 8008bfc:	623b      	str	r3, [r7, #32]
}
 8008bfe:	bf00      	nop
 8008c00:	e7fe      	b.n	8008c00 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d102      	bne.n	8008c0e <xQueueGenericCreateStatic+0x7e>
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d101      	bne.n	8008c12 <xQueueGenericCreateStatic+0x82>
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e000      	b.n	8008c14 <xQueueGenericCreateStatic+0x84>
 8008c12:	2300      	movs	r3, #0
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d10a      	bne.n	8008c2e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c1c:	f383 8811 	msr	BASEPRI, r3
 8008c20:	f3bf 8f6f 	isb	sy
 8008c24:	f3bf 8f4f 	dsb	sy
 8008c28:	61fb      	str	r3, [r7, #28]
}
 8008c2a:	bf00      	nop
 8008c2c:	e7fe      	b.n	8008c2c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008c2e:	2350      	movs	r3, #80	; 0x50
 8008c30:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	2b50      	cmp	r3, #80	; 0x50
 8008c36:	d00a      	beq.n	8008c4e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c3c:	f383 8811 	msr	BASEPRI, r3
 8008c40:	f3bf 8f6f 	isb	sy
 8008c44:	f3bf 8f4f 	dsb	sy
 8008c48:	61bb      	str	r3, [r7, #24]
}
 8008c4a:	bf00      	nop
 8008c4c:	e7fe      	b.n	8008c4c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008c4e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d00d      	beq.n	8008c76 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008c62:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c68:	9300      	str	r3, [sp, #0]
 8008c6a:	4613      	mov	r3, r2
 8008c6c:	687a      	ldr	r2, [r7, #4]
 8008c6e:	68b9      	ldr	r1, [r7, #8]
 8008c70:	68f8      	ldr	r0, [r7, #12]
 8008c72:	f000 f83f 	bl	8008cf4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3730      	adds	r7, #48	; 0x30
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b08a      	sub	sp, #40	; 0x28
 8008c84:	af02      	add	r7, sp, #8
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	4613      	mov	r3, r2
 8008c8c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d10a      	bne.n	8008caa <xQueueGenericCreate+0x2a>
	__asm volatile
 8008c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c98:	f383 8811 	msr	BASEPRI, r3
 8008c9c:	f3bf 8f6f 	isb	sy
 8008ca0:	f3bf 8f4f 	dsb	sy
 8008ca4:	613b      	str	r3, [r7, #16]
}
 8008ca6:	bf00      	nop
 8008ca8:	e7fe      	b.n	8008ca8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	68ba      	ldr	r2, [r7, #8]
 8008cae:	fb02 f303 	mul.w	r3, r2, r3
 8008cb2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008cb4:	69fb      	ldr	r3, [r7, #28]
 8008cb6:	3350      	adds	r3, #80	; 0x50
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f002 f9fd 	bl	800b0b8 <pvPortMalloc>
 8008cbe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008cc0:	69bb      	ldr	r3, [r7, #24]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d011      	beq.n	8008cea <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008cc6:	69bb      	ldr	r3, [r7, #24]
 8008cc8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	3350      	adds	r3, #80	; 0x50
 8008cce:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008cd0:	69bb      	ldr	r3, [r7, #24]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008cd8:	79fa      	ldrb	r2, [r7, #7]
 8008cda:	69bb      	ldr	r3, [r7, #24]
 8008cdc:	9300      	str	r3, [sp, #0]
 8008cde:	4613      	mov	r3, r2
 8008ce0:	697a      	ldr	r2, [r7, #20]
 8008ce2:	68b9      	ldr	r1, [r7, #8]
 8008ce4:	68f8      	ldr	r0, [r7, #12]
 8008ce6:	f000 f805 	bl	8008cf4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008cea:	69bb      	ldr	r3, [r7, #24]
	}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3720      	adds	r7, #32
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b084      	sub	sp, #16
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	60f8      	str	r0, [r7, #12]
 8008cfc:	60b9      	str	r1, [r7, #8]
 8008cfe:	607a      	str	r2, [r7, #4]
 8008d00:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d103      	bne.n	8008d10 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008d08:	69bb      	ldr	r3, [r7, #24]
 8008d0a:	69ba      	ldr	r2, [r7, #24]
 8008d0c:	601a      	str	r2, [r3, #0]
 8008d0e:	e002      	b.n	8008d16 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008d10:	69bb      	ldr	r3, [r7, #24]
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008d16:	69bb      	ldr	r3, [r7, #24]
 8008d18:	68fa      	ldr	r2, [r7, #12]
 8008d1a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008d1c:	69bb      	ldr	r3, [r7, #24]
 8008d1e:	68ba      	ldr	r2, [r7, #8]
 8008d20:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008d22:	2101      	movs	r1, #1
 8008d24:	69b8      	ldr	r0, [r7, #24]
 8008d26:	f7ff fecb 	bl	8008ac0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008d2a:	69bb      	ldr	r3, [r7, #24]
 8008d2c:	78fa      	ldrb	r2, [r7, #3]
 8008d2e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008d32:	bf00      	nop
 8008d34:	3710      	adds	r7, #16
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
	...

08008d3c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b08e      	sub	sp, #56	; 0x38
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	60b9      	str	r1, [r7, #8]
 8008d46:	607a      	str	r2, [r7, #4]
 8008d48:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d10a      	bne.n	8008d6e <xQueueGenericSend+0x32>
	__asm volatile
 8008d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d5c:	f383 8811 	msr	BASEPRI, r3
 8008d60:	f3bf 8f6f 	isb	sy
 8008d64:	f3bf 8f4f 	dsb	sy
 8008d68:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008d6a:	bf00      	nop
 8008d6c:	e7fe      	b.n	8008d6c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d103      	bne.n	8008d7c <xQueueGenericSend+0x40>
 8008d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d101      	bne.n	8008d80 <xQueueGenericSend+0x44>
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	e000      	b.n	8008d82 <xQueueGenericSend+0x46>
 8008d80:	2300      	movs	r3, #0
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d10a      	bne.n	8008d9c <xQueueGenericSend+0x60>
	__asm volatile
 8008d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d8a:	f383 8811 	msr	BASEPRI, r3
 8008d8e:	f3bf 8f6f 	isb	sy
 8008d92:	f3bf 8f4f 	dsb	sy
 8008d96:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008d98:	bf00      	nop
 8008d9a:	e7fe      	b.n	8008d9a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	2b02      	cmp	r3, #2
 8008da0:	d103      	bne.n	8008daa <xQueueGenericSend+0x6e>
 8008da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d101      	bne.n	8008dae <xQueueGenericSend+0x72>
 8008daa:	2301      	movs	r3, #1
 8008dac:	e000      	b.n	8008db0 <xQueueGenericSend+0x74>
 8008dae:	2300      	movs	r3, #0
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d10a      	bne.n	8008dca <xQueueGenericSend+0x8e>
	__asm volatile
 8008db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db8:	f383 8811 	msr	BASEPRI, r3
 8008dbc:	f3bf 8f6f 	isb	sy
 8008dc0:	f3bf 8f4f 	dsb	sy
 8008dc4:	623b      	str	r3, [r7, #32]
}
 8008dc6:	bf00      	nop
 8008dc8:	e7fe      	b.n	8008dc8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008dca:	f001 fa3d 	bl	800a248 <xTaskGetSchedulerState>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d102      	bne.n	8008dda <xQueueGenericSend+0x9e>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d101      	bne.n	8008dde <xQueueGenericSend+0xa2>
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e000      	b.n	8008de0 <xQueueGenericSend+0xa4>
 8008dde:	2300      	movs	r3, #0
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d10a      	bne.n	8008dfa <xQueueGenericSend+0xbe>
	__asm volatile
 8008de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de8:	f383 8811 	msr	BASEPRI, r3
 8008dec:	f3bf 8f6f 	isb	sy
 8008df0:	f3bf 8f4f 	dsb	sy
 8008df4:	61fb      	str	r3, [r7, #28]
}
 8008df6:	bf00      	nop
 8008df8:	e7fe      	b.n	8008df8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008dfa:	f002 f83b 	bl	800ae74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d302      	bcc.n	8008e10 <xQueueGenericSend+0xd4>
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	2b02      	cmp	r3, #2
 8008e0e:	d129      	bne.n	8008e64 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008e10:	683a      	ldr	r2, [r7, #0]
 8008e12:	68b9      	ldr	r1, [r7, #8]
 8008e14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e16:	f000 fa8b 	bl	8009330 <prvCopyDataToQueue>
 8008e1a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d010      	beq.n	8008e46 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e26:	3324      	adds	r3, #36	; 0x24
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f001 f84f 	bl	8009ecc <xTaskRemoveFromEventList>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d013      	beq.n	8008e5c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008e34:	4b3f      	ldr	r3, [pc, #252]	; (8008f34 <xQueueGenericSend+0x1f8>)
 8008e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e3a:	601a      	str	r2, [r3, #0]
 8008e3c:	f3bf 8f4f 	dsb	sy
 8008e40:	f3bf 8f6f 	isb	sy
 8008e44:	e00a      	b.n	8008e5c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d007      	beq.n	8008e5c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008e4c:	4b39      	ldr	r3, [pc, #228]	; (8008f34 <xQueueGenericSend+0x1f8>)
 8008e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e52:	601a      	str	r2, [r3, #0]
 8008e54:	f3bf 8f4f 	dsb	sy
 8008e58:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008e5c:	f002 f83a 	bl	800aed4 <vPortExitCritical>
				return pdPASS;
 8008e60:	2301      	movs	r3, #1
 8008e62:	e063      	b.n	8008f2c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d103      	bne.n	8008e72 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008e6a:	f002 f833 	bl	800aed4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	e05c      	b.n	8008f2c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d106      	bne.n	8008e86 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008e78:	f107 0314 	add.w	r3, r7, #20
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f001 f889 	bl	8009f94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008e82:	2301      	movs	r3, #1
 8008e84:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008e86:	f002 f825 	bl	800aed4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008e8a:	f000 fdfb 	bl	8009a84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008e8e:	f001 fff1 	bl	800ae74 <vPortEnterCritical>
 8008e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e98:	b25b      	sxtb	r3, r3
 8008e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e9e:	d103      	bne.n	8008ea8 <xQueueGenericSend+0x16c>
 8008ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eaa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008eae:	b25b      	sxtb	r3, r3
 8008eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eb4:	d103      	bne.n	8008ebe <xQueueGenericSend+0x182>
 8008eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb8:	2200      	movs	r2, #0
 8008eba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ebe:	f002 f809 	bl	800aed4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ec2:	1d3a      	adds	r2, r7, #4
 8008ec4:	f107 0314 	add.w	r3, r7, #20
 8008ec8:	4611      	mov	r1, r2
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f001 f878 	bl	8009fc0 <xTaskCheckForTimeOut>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d124      	bne.n	8008f20 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008ed6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ed8:	f000 fb22 	bl	8009520 <prvIsQueueFull>
 8008edc:	4603      	mov	r3, r0
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d018      	beq.n	8008f14 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee4:	3310      	adds	r3, #16
 8008ee6:	687a      	ldr	r2, [r7, #4]
 8008ee8:	4611      	mov	r1, r2
 8008eea:	4618      	mov	r0, r3
 8008eec:	f000 ff9e 	bl	8009e2c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008ef0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ef2:	f000 faad 	bl	8009450 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008ef6:	f000 fdd3 	bl	8009aa0 <xTaskResumeAll>
 8008efa:	4603      	mov	r3, r0
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	f47f af7c 	bne.w	8008dfa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008f02:	4b0c      	ldr	r3, [pc, #48]	; (8008f34 <xQueueGenericSend+0x1f8>)
 8008f04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f08:	601a      	str	r2, [r3, #0]
 8008f0a:	f3bf 8f4f 	dsb	sy
 8008f0e:	f3bf 8f6f 	isb	sy
 8008f12:	e772      	b.n	8008dfa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008f14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f16:	f000 fa9b 	bl	8009450 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f1a:	f000 fdc1 	bl	8009aa0 <xTaskResumeAll>
 8008f1e:	e76c      	b.n	8008dfa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008f20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f22:	f000 fa95 	bl	8009450 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008f26:	f000 fdbb 	bl	8009aa0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008f2a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3738      	adds	r7, #56	; 0x38
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}
 8008f34:	e000ed04 	.word	0xe000ed04

08008f38 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b090      	sub	sp, #64	; 0x40
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	60b9      	str	r1, [r7, #8]
 8008f42:	607a      	str	r2, [r7, #4]
 8008f44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d10a      	bne.n	8008f66 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f54:	f383 8811 	msr	BASEPRI, r3
 8008f58:	f3bf 8f6f 	isb	sy
 8008f5c:	f3bf 8f4f 	dsb	sy
 8008f60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008f62:	bf00      	nop
 8008f64:	e7fe      	b.n	8008f64 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d103      	bne.n	8008f74 <xQueueGenericSendFromISR+0x3c>
 8008f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d101      	bne.n	8008f78 <xQueueGenericSendFromISR+0x40>
 8008f74:	2301      	movs	r3, #1
 8008f76:	e000      	b.n	8008f7a <xQueueGenericSendFromISR+0x42>
 8008f78:	2300      	movs	r3, #0
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d10a      	bne.n	8008f94 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f82:	f383 8811 	msr	BASEPRI, r3
 8008f86:	f3bf 8f6f 	isb	sy
 8008f8a:	f3bf 8f4f 	dsb	sy
 8008f8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008f90:	bf00      	nop
 8008f92:	e7fe      	b.n	8008f92 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	2b02      	cmp	r3, #2
 8008f98:	d103      	bne.n	8008fa2 <xQueueGenericSendFromISR+0x6a>
 8008f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	d101      	bne.n	8008fa6 <xQueueGenericSendFromISR+0x6e>
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	e000      	b.n	8008fa8 <xQueueGenericSendFromISR+0x70>
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d10a      	bne.n	8008fc2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb0:	f383 8811 	msr	BASEPRI, r3
 8008fb4:	f3bf 8f6f 	isb	sy
 8008fb8:	f3bf 8f4f 	dsb	sy
 8008fbc:	623b      	str	r3, [r7, #32]
}
 8008fbe:	bf00      	nop
 8008fc0:	e7fe      	b.n	8008fc0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008fc2:	f002 f839 	bl	800b038 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008fc6:	f3ef 8211 	mrs	r2, BASEPRI
 8008fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fce:	f383 8811 	msr	BASEPRI, r3
 8008fd2:	f3bf 8f6f 	isb	sy
 8008fd6:	f3bf 8f4f 	dsb	sy
 8008fda:	61fa      	str	r2, [r7, #28]
 8008fdc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008fde:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008fe0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fe4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d302      	bcc.n	8008ff4 <xQueueGenericSendFromISR+0xbc>
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	2b02      	cmp	r3, #2
 8008ff2:	d12f      	bne.n	8009054 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ffa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009002:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009004:	683a      	ldr	r2, [r7, #0]
 8009006:	68b9      	ldr	r1, [r7, #8]
 8009008:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800900a:	f000 f991 	bl	8009330 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800900e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009016:	d112      	bne.n	800903e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800901a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800901c:	2b00      	cmp	r3, #0
 800901e:	d016      	beq.n	800904e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009022:	3324      	adds	r3, #36	; 0x24
 8009024:	4618      	mov	r0, r3
 8009026:	f000 ff51 	bl	8009ecc <xTaskRemoveFromEventList>
 800902a:	4603      	mov	r3, r0
 800902c:	2b00      	cmp	r3, #0
 800902e:	d00e      	beq.n	800904e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d00b      	beq.n	800904e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2201      	movs	r2, #1
 800903a:	601a      	str	r2, [r3, #0]
 800903c:	e007      	b.n	800904e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800903e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009042:	3301      	adds	r3, #1
 8009044:	b2db      	uxtb	r3, r3
 8009046:	b25a      	sxtb	r2, r3
 8009048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800904a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800904e:	2301      	movs	r3, #1
 8009050:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009052:	e001      	b.n	8009058 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009054:	2300      	movs	r3, #0
 8009056:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800905a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009062:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009066:	4618      	mov	r0, r3
 8009068:	3740      	adds	r7, #64	; 0x40
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}
	...

08009070 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b08c      	sub	sp, #48	; 0x30
 8009074:	af00      	add	r7, sp, #0
 8009076:	60f8      	str	r0, [r7, #12]
 8009078:	60b9      	str	r1, [r7, #8]
 800907a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800907c:	2300      	movs	r3, #0
 800907e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009086:	2b00      	cmp	r3, #0
 8009088:	d10a      	bne.n	80090a0 <xQueueReceive+0x30>
	__asm volatile
 800908a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800908e:	f383 8811 	msr	BASEPRI, r3
 8009092:	f3bf 8f6f 	isb	sy
 8009096:	f3bf 8f4f 	dsb	sy
 800909a:	623b      	str	r3, [r7, #32]
}
 800909c:	bf00      	nop
 800909e:	e7fe      	b.n	800909e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d103      	bne.n	80090ae <xQueueReceive+0x3e>
 80090a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d101      	bne.n	80090b2 <xQueueReceive+0x42>
 80090ae:	2301      	movs	r3, #1
 80090b0:	e000      	b.n	80090b4 <xQueueReceive+0x44>
 80090b2:	2300      	movs	r3, #0
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d10a      	bne.n	80090ce <xQueueReceive+0x5e>
	__asm volatile
 80090b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090bc:	f383 8811 	msr	BASEPRI, r3
 80090c0:	f3bf 8f6f 	isb	sy
 80090c4:	f3bf 8f4f 	dsb	sy
 80090c8:	61fb      	str	r3, [r7, #28]
}
 80090ca:	bf00      	nop
 80090cc:	e7fe      	b.n	80090cc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80090ce:	f001 f8bb 	bl	800a248 <xTaskGetSchedulerState>
 80090d2:	4603      	mov	r3, r0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d102      	bne.n	80090de <xQueueReceive+0x6e>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d101      	bne.n	80090e2 <xQueueReceive+0x72>
 80090de:	2301      	movs	r3, #1
 80090e0:	e000      	b.n	80090e4 <xQueueReceive+0x74>
 80090e2:	2300      	movs	r3, #0
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d10a      	bne.n	80090fe <xQueueReceive+0x8e>
	__asm volatile
 80090e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ec:	f383 8811 	msr	BASEPRI, r3
 80090f0:	f3bf 8f6f 	isb	sy
 80090f4:	f3bf 8f4f 	dsb	sy
 80090f8:	61bb      	str	r3, [r7, #24]
}
 80090fa:	bf00      	nop
 80090fc:	e7fe      	b.n	80090fc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80090fe:	f001 feb9 	bl	800ae74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009106:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910a:	2b00      	cmp	r3, #0
 800910c:	d01f      	beq.n	800914e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800910e:	68b9      	ldr	r1, [r7, #8]
 8009110:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009112:	f000 f977 	bl	8009404 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009118:	1e5a      	subs	r2, r3, #1
 800911a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800911c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800911e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009120:	691b      	ldr	r3, [r3, #16]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d00f      	beq.n	8009146 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009128:	3310      	adds	r3, #16
 800912a:	4618      	mov	r0, r3
 800912c:	f000 fece 	bl	8009ecc <xTaskRemoveFromEventList>
 8009130:	4603      	mov	r3, r0
 8009132:	2b00      	cmp	r3, #0
 8009134:	d007      	beq.n	8009146 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009136:	4b3d      	ldr	r3, [pc, #244]	; (800922c <xQueueReceive+0x1bc>)
 8009138:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800913c:	601a      	str	r2, [r3, #0]
 800913e:	f3bf 8f4f 	dsb	sy
 8009142:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009146:	f001 fec5 	bl	800aed4 <vPortExitCritical>
				return pdPASS;
 800914a:	2301      	movs	r3, #1
 800914c:	e069      	b.n	8009222 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d103      	bne.n	800915c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009154:	f001 febe 	bl	800aed4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009158:	2300      	movs	r3, #0
 800915a:	e062      	b.n	8009222 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800915c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800915e:	2b00      	cmp	r3, #0
 8009160:	d106      	bne.n	8009170 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009162:	f107 0310 	add.w	r3, r7, #16
 8009166:	4618      	mov	r0, r3
 8009168:	f000 ff14 	bl	8009f94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800916c:	2301      	movs	r3, #1
 800916e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009170:	f001 feb0 	bl	800aed4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009174:	f000 fc86 	bl	8009a84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009178:	f001 fe7c 	bl	800ae74 <vPortEnterCritical>
 800917c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800917e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009182:	b25b      	sxtb	r3, r3
 8009184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009188:	d103      	bne.n	8009192 <xQueueReceive+0x122>
 800918a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800918c:	2200      	movs	r2, #0
 800918e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009194:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009198:	b25b      	sxtb	r3, r3
 800919a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800919e:	d103      	bne.n	80091a8 <xQueueReceive+0x138>
 80091a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a2:	2200      	movs	r2, #0
 80091a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80091a8:	f001 fe94 	bl	800aed4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80091ac:	1d3a      	adds	r2, r7, #4
 80091ae:	f107 0310 	add.w	r3, r7, #16
 80091b2:	4611      	mov	r1, r2
 80091b4:	4618      	mov	r0, r3
 80091b6:	f000 ff03 	bl	8009fc0 <xTaskCheckForTimeOut>
 80091ba:	4603      	mov	r3, r0
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d123      	bne.n	8009208 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80091c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091c2:	f000 f997 	bl	80094f4 <prvIsQueueEmpty>
 80091c6:	4603      	mov	r3, r0
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d017      	beq.n	80091fc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80091cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ce:	3324      	adds	r3, #36	; 0x24
 80091d0:	687a      	ldr	r2, [r7, #4]
 80091d2:	4611      	mov	r1, r2
 80091d4:	4618      	mov	r0, r3
 80091d6:	f000 fe29 	bl	8009e2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80091da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091dc:	f000 f938 	bl	8009450 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80091e0:	f000 fc5e 	bl	8009aa0 <xTaskResumeAll>
 80091e4:	4603      	mov	r3, r0
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d189      	bne.n	80090fe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80091ea:	4b10      	ldr	r3, [pc, #64]	; (800922c <xQueueReceive+0x1bc>)
 80091ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091f0:	601a      	str	r2, [r3, #0]
 80091f2:	f3bf 8f4f 	dsb	sy
 80091f6:	f3bf 8f6f 	isb	sy
 80091fa:	e780      	b.n	80090fe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80091fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091fe:	f000 f927 	bl	8009450 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009202:	f000 fc4d 	bl	8009aa0 <xTaskResumeAll>
 8009206:	e77a      	b.n	80090fe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009208:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800920a:	f000 f921 	bl	8009450 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800920e:	f000 fc47 	bl	8009aa0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009212:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009214:	f000 f96e 	bl	80094f4 <prvIsQueueEmpty>
 8009218:	4603      	mov	r3, r0
 800921a:	2b00      	cmp	r3, #0
 800921c:	f43f af6f 	beq.w	80090fe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009220:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009222:	4618      	mov	r0, r3
 8009224:	3730      	adds	r7, #48	; 0x30
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
 800922a:	bf00      	nop
 800922c:	e000ed04 	.word	0xe000ed04

08009230 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b08e      	sub	sp, #56	; 0x38
 8009234:	af00      	add	r7, sp, #0
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	60b9      	str	r1, [r7, #8]
 800923a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009242:	2b00      	cmp	r3, #0
 8009244:	d10a      	bne.n	800925c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800924a:	f383 8811 	msr	BASEPRI, r3
 800924e:	f3bf 8f6f 	isb	sy
 8009252:	f3bf 8f4f 	dsb	sy
 8009256:	623b      	str	r3, [r7, #32]
}
 8009258:	bf00      	nop
 800925a:	e7fe      	b.n	800925a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d103      	bne.n	800926a <xQueueReceiveFromISR+0x3a>
 8009262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009266:	2b00      	cmp	r3, #0
 8009268:	d101      	bne.n	800926e <xQueueReceiveFromISR+0x3e>
 800926a:	2301      	movs	r3, #1
 800926c:	e000      	b.n	8009270 <xQueueReceiveFromISR+0x40>
 800926e:	2300      	movs	r3, #0
 8009270:	2b00      	cmp	r3, #0
 8009272:	d10a      	bne.n	800928a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009278:	f383 8811 	msr	BASEPRI, r3
 800927c:	f3bf 8f6f 	isb	sy
 8009280:	f3bf 8f4f 	dsb	sy
 8009284:	61fb      	str	r3, [r7, #28]
}
 8009286:	bf00      	nop
 8009288:	e7fe      	b.n	8009288 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800928a:	f001 fed5 	bl	800b038 <vPortValidateInterruptPriority>
	__asm volatile
 800928e:	f3ef 8211 	mrs	r2, BASEPRI
 8009292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009296:	f383 8811 	msr	BASEPRI, r3
 800929a:	f3bf 8f6f 	isb	sy
 800929e:	f3bf 8f4f 	dsb	sy
 80092a2:	61ba      	str	r2, [r7, #24]
 80092a4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80092a6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80092a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80092aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ae:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80092b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d02f      	beq.n	8009316 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80092b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80092bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80092c0:	68b9      	ldr	r1, [r7, #8]
 80092c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092c4:	f000 f89e 	bl	8009404 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80092c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ca:	1e5a      	subs	r2, r3, #1
 80092cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ce:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80092d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80092d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092d8:	d112      	bne.n	8009300 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092dc:	691b      	ldr	r3, [r3, #16]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d016      	beq.n	8009310 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80092e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e4:	3310      	adds	r3, #16
 80092e6:	4618      	mov	r0, r3
 80092e8:	f000 fdf0 	bl	8009ecc <xTaskRemoveFromEventList>
 80092ec:	4603      	mov	r3, r0
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d00e      	beq.n	8009310 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d00b      	beq.n	8009310 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2201      	movs	r2, #1
 80092fc:	601a      	str	r2, [r3, #0]
 80092fe:	e007      	b.n	8009310 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009300:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009304:	3301      	adds	r3, #1
 8009306:	b2db      	uxtb	r3, r3
 8009308:	b25a      	sxtb	r2, r3
 800930a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800930c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009310:	2301      	movs	r3, #1
 8009312:	637b      	str	r3, [r7, #52]	; 0x34
 8009314:	e001      	b.n	800931a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8009316:	2300      	movs	r3, #0
 8009318:	637b      	str	r3, [r7, #52]	; 0x34
 800931a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800931c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	f383 8811 	msr	BASEPRI, r3
}
 8009324:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009328:	4618      	mov	r0, r3
 800932a:	3738      	adds	r7, #56	; 0x38
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b086      	sub	sp, #24
 8009334:	af00      	add	r7, sp, #0
 8009336:	60f8      	str	r0, [r7, #12]
 8009338:	60b9      	str	r1, [r7, #8]
 800933a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800933c:	2300      	movs	r3, #0
 800933e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009344:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800934a:	2b00      	cmp	r3, #0
 800934c:	d10d      	bne.n	800936a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d14d      	bne.n	80093f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	689b      	ldr	r3, [r3, #8]
 800935a:	4618      	mov	r0, r3
 800935c:	f000 ff92 	bl	800a284 <xTaskPriorityDisinherit>
 8009360:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2200      	movs	r2, #0
 8009366:	609a      	str	r2, [r3, #8]
 8009368:	e043      	b.n	80093f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d119      	bne.n	80093a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	6858      	ldr	r0, [r3, #4]
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009378:	461a      	mov	r2, r3
 800937a:	68b9      	ldr	r1, [r7, #8]
 800937c:	f002 fbc2 	bl	800bb04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	685a      	ldr	r2, [r3, #4]
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009388:	441a      	add	r2, r3
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	685a      	ldr	r2, [r3, #4]
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	689b      	ldr	r3, [r3, #8]
 8009396:	429a      	cmp	r2, r3
 8009398:	d32b      	bcc.n	80093f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681a      	ldr	r2, [r3, #0]
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	605a      	str	r2, [r3, #4]
 80093a2:	e026      	b.n	80093f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	68d8      	ldr	r0, [r3, #12]
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ac:	461a      	mov	r2, r3
 80093ae:	68b9      	ldr	r1, [r7, #8]
 80093b0:	f002 fba8 	bl	800bb04 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	68da      	ldr	r2, [r3, #12]
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093bc:	425b      	negs	r3, r3
 80093be:	441a      	add	r2, r3
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	68da      	ldr	r2, [r3, #12]
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d207      	bcs.n	80093e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	689a      	ldr	r2, [r3, #8]
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093d8:	425b      	negs	r3, r3
 80093da:	441a      	add	r2, r3
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2b02      	cmp	r3, #2
 80093e4:	d105      	bne.n	80093f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d002      	beq.n	80093f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	3b01      	subs	r3, #1
 80093f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	1c5a      	adds	r2, r3, #1
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80093fa:	697b      	ldr	r3, [r7, #20]
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3718      	adds	r7, #24
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b082      	sub	sp, #8
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009412:	2b00      	cmp	r3, #0
 8009414:	d018      	beq.n	8009448 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	68da      	ldr	r2, [r3, #12]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800941e:	441a      	add	r2, r3
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	68da      	ldr	r2, [r3, #12]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	689b      	ldr	r3, [r3, #8]
 800942c:	429a      	cmp	r2, r3
 800942e:	d303      	bcc.n	8009438 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681a      	ldr	r2, [r3, #0]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	68d9      	ldr	r1, [r3, #12]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009440:	461a      	mov	r2, r3
 8009442:	6838      	ldr	r0, [r7, #0]
 8009444:	f002 fb5e 	bl	800bb04 <memcpy>
	}
}
 8009448:	bf00      	nop
 800944a:	3708      	adds	r7, #8
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}

08009450 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b084      	sub	sp, #16
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009458:	f001 fd0c 	bl	800ae74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009462:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009464:	e011      	b.n	800948a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800946a:	2b00      	cmp	r3, #0
 800946c:	d012      	beq.n	8009494 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	3324      	adds	r3, #36	; 0x24
 8009472:	4618      	mov	r0, r3
 8009474:	f000 fd2a 	bl	8009ecc <xTaskRemoveFromEventList>
 8009478:	4603      	mov	r3, r0
 800947a:	2b00      	cmp	r3, #0
 800947c:	d001      	beq.n	8009482 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800947e:	f000 fe01 	bl	800a084 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009482:	7bfb      	ldrb	r3, [r7, #15]
 8009484:	3b01      	subs	r3, #1
 8009486:	b2db      	uxtb	r3, r3
 8009488:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800948a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800948e:	2b00      	cmp	r3, #0
 8009490:	dce9      	bgt.n	8009466 <prvUnlockQueue+0x16>
 8009492:	e000      	b.n	8009496 <prvUnlockQueue+0x46>
					break;
 8009494:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	22ff      	movs	r2, #255	; 0xff
 800949a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800949e:	f001 fd19 	bl	800aed4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80094a2:	f001 fce7 	bl	800ae74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80094ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80094ae:	e011      	b.n	80094d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	691b      	ldr	r3, [r3, #16]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d012      	beq.n	80094de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	3310      	adds	r3, #16
 80094bc:	4618      	mov	r0, r3
 80094be:	f000 fd05 	bl	8009ecc <xTaskRemoveFromEventList>
 80094c2:	4603      	mov	r3, r0
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d001      	beq.n	80094cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80094c8:	f000 fddc 	bl	800a084 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80094cc:	7bbb      	ldrb	r3, [r7, #14]
 80094ce:	3b01      	subs	r3, #1
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80094d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	dce9      	bgt.n	80094b0 <prvUnlockQueue+0x60>
 80094dc:	e000      	b.n	80094e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80094de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	22ff      	movs	r2, #255	; 0xff
 80094e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80094e8:	f001 fcf4 	bl	800aed4 <vPortExitCritical>
}
 80094ec:	bf00      	nop
 80094ee:	3710      	adds	r7, #16
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}

080094f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b084      	sub	sp, #16
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80094fc:	f001 fcba 	bl	800ae74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009504:	2b00      	cmp	r3, #0
 8009506:	d102      	bne.n	800950e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009508:	2301      	movs	r3, #1
 800950a:	60fb      	str	r3, [r7, #12]
 800950c:	e001      	b.n	8009512 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800950e:	2300      	movs	r3, #0
 8009510:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009512:	f001 fcdf 	bl	800aed4 <vPortExitCritical>

	return xReturn;
 8009516:	68fb      	ldr	r3, [r7, #12]
}
 8009518:	4618      	mov	r0, r3
 800951a:	3710      	adds	r7, #16
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b084      	sub	sp, #16
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009528:	f001 fca4 	bl	800ae74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009534:	429a      	cmp	r2, r3
 8009536:	d102      	bne.n	800953e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009538:	2301      	movs	r3, #1
 800953a:	60fb      	str	r3, [r7, #12]
 800953c:	e001      	b.n	8009542 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800953e:	2300      	movs	r3, #0
 8009540:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009542:	f001 fcc7 	bl	800aed4 <vPortExitCritical>

	return xReturn;
 8009546:	68fb      	ldr	r3, [r7, #12]
}
 8009548:	4618      	mov	r0, r3
 800954a:	3710      	adds	r7, #16
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009550:	b480      	push	{r7}
 8009552:	b085      	sub	sp, #20
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800955a:	2300      	movs	r3, #0
 800955c:	60fb      	str	r3, [r7, #12]
 800955e:	e014      	b.n	800958a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009560:	4a0f      	ldr	r2, [pc, #60]	; (80095a0 <vQueueAddToRegistry+0x50>)
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d10b      	bne.n	8009584 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800956c:	490c      	ldr	r1, [pc, #48]	; (80095a0 <vQueueAddToRegistry+0x50>)
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	683a      	ldr	r2, [r7, #0]
 8009572:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009576:	4a0a      	ldr	r2, [pc, #40]	; (80095a0 <vQueueAddToRegistry+0x50>)
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	00db      	lsls	r3, r3, #3
 800957c:	4413      	add	r3, r2
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009582:	e006      	b.n	8009592 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	3301      	adds	r3, #1
 8009588:	60fb      	str	r3, [r7, #12]
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2b07      	cmp	r3, #7
 800958e:	d9e7      	bls.n	8009560 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009590:	bf00      	nop
 8009592:	bf00      	nop
 8009594:	3714      	adds	r7, #20
 8009596:	46bd      	mov	sp, r7
 8009598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959c:	4770      	bx	lr
 800959e:	bf00      	nop
 80095a0:	200008e4 	.word	0x200008e4

080095a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b086      	sub	sp, #24
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	60f8      	str	r0, [r7, #12]
 80095ac:	60b9      	str	r1, [r7, #8]
 80095ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80095b4:	f001 fc5e 	bl	800ae74 <vPortEnterCritical>
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80095be:	b25b      	sxtb	r3, r3
 80095c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095c4:	d103      	bne.n	80095ce <vQueueWaitForMessageRestricted+0x2a>
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	2200      	movs	r2, #0
 80095ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095d4:	b25b      	sxtb	r3, r3
 80095d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095da:	d103      	bne.n	80095e4 <vQueueWaitForMessageRestricted+0x40>
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	2200      	movs	r2, #0
 80095e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80095e4:	f001 fc76 	bl	800aed4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d106      	bne.n	80095fe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	3324      	adds	r3, #36	; 0x24
 80095f4:	687a      	ldr	r2, [r7, #4]
 80095f6:	68b9      	ldr	r1, [r7, #8]
 80095f8:	4618      	mov	r0, r3
 80095fa:	f000 fc3b 	bl	8009e74 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80095fe:	6978      	ldr	r0, [r7, #20]
 8009600:	f7ff ff26 	bl	8009450 <prvUnlockQueue>
	}
 8009604:	bf00      	nop
 8009606:	3718      	adds	r7, #24
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}

0800960c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800960c:	b580      	push	{r7, lr}
 800960e:	b08e      	sub	sp, #56	; 0x38
 8009610:	af04      	add	r7, sp, #16
 8009612:	60f8      	str	r0, [r7, #12]
 8009614:	60b9      	str	r1, [r7, #8]
 8009616:	607a      	str	r2, [r7, #4]
 8009618:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800961a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800961c:	2b00      	cmp	r3, #0
 800961e:	d10a      	bne.n	8009636 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009624:	f383 8811 	msr	BASEPRI, r3
 8009628:	f3bf 8f6f 	isb	sy
 800962c:	f3bf 8f4f 	dsb	sy
 8009630:	623b      	str	r3, [r7, #32]
}
 8009632:	bf00      	nop
 8009634:	e7fe      	b.n	8009634 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009638:	2b00      	cmp	r3, #0
 800963a:	d10a      	bne.n	8009652 <xTaskCreateStatic+0x46>
	__asm volatile
 800963c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009640:	f383 8811 	msr	BASEPRI, r3
 8009644:	f3bf 8f6f 	isb	sy
 8009648:	f3bf 8f4f 	dsb	sy
 800964c:	61fb      	str	r3, [r7, #28]
}
 800964e:	bf00      	nop
 8009650:	e7fe      	b.n	8009650 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009652:	235c      	movs	r3, #92	; 0x5c
 8009654:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	2b5c      	cmp	r3, #92	; 0x5c
 800965a:	d00a      	beq.n	8009672 <xTaskCreateStatic+0x66>
	__asm volatile
 800965c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009660:	f383 8811 	msr	BASEPRI, r3
 8009664:	f3bf 8f6f 	isb	sy
 8009668:	f3bf 8f4f 	dsb	sy
 800966c:	61bb      	str	r3, [r7, #24]
}
 800966e:	bf00      	nop
 8009670:	e7fe      	b.n	8009670 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009672:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009676:	2b00      	cmp	r3, #0
 8009678:	d01e      	beq.n	80096b8 <xTaskCreateStatic+0xac>
 800967a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800967c:	2b00      	cmp	r3, #0
 800967e:	d01b      	beq.n	80096b8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009682:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009686:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009688:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800968a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800968c:	2202      	movs	r2, #2
 800968e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009692:	2300      	movs	r3, #0
 8009694:	9303      	str	r3, [sp, #12]
 8009696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009698:	9302      	str	r3, [sp, #8]
 800969a:	f107 0314 	add.w	r3, r7, #20
 800969e:	9301      	str	r3, [sp, #4]
 80096a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a2:	9300      	str	r3, [sp, #0]
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	687a      	ldr	r2, [r7, #4]
 80096a8:	68b9      	ldr	r1, [r7, #8]
 80096aa:	68f8      	ldr	r0, [r7, #12]
 80096ac:	f000 f850 	bl	8009750 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80096b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80096b2:	f000 f8dd 	bl	8009870 <prvAddNewTaskToReadyList>
 80096b6:	e001      	b.n	80096bc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80096b8:	2300      	movs	r3, #0
 80096ba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80096bc:	697b      	ldr	r3, [r7, #20]
	}
 80096be:	4618      	mov	r0, r3
 80096c0:	3728      	adds	r7, #40	; 0x28
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}

080096c6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80096c6:	b580      	push	{r7, lr}
 80096c8:	b08c      	sub	sp, #48	; 0x30
 80096ca:	af04      	add	r7, sp, #16
 80096cc:	60f8      	str	r0, [r7, #12]
 80096ce:	60b9      	str	r1, [r7, #8]
 80096d0:	603b      	str	r3, [r7, #0]
 80096d2:	4613      	mov	r3, r2
 80096d4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80096d6:	88fb      	ldrh	r3, [r7, #6]
 80096d8:	009b      	lsls	r3, r3, #2
 80096da:	4618      	mov	r0, r3
 80096dc:	f001 fcec 	bl	800b0b8 <pvPortMalloc>
 80096e0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d00e      	beq.n	8009706 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80096e8:	205c      	movs	r0, #92	; 0x5c
 80096ea:	f001 fce5 	bl	800b0b8 <pvPortMalloc>
 80096ee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80096f0:	69fb      	ldr	r3, [r7, #28]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d003      	beq.n	80096fe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80096f6:	69fb      	ldr	r3, [r7, #28]
 80096f8:	697a      	ldr	r2, [r7, #20]
 80096fa:	631a      	str	r2, [r3, #48]	; 0x30
 80096fc:	e005      	b.n	800970a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80096fe:	6978      	ldr	r0, [r7, #20]
 8009700:	f001 fda6 	bl	800b250 <vPortFree>
 8009704:	e001      	b.n	800970a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009706:	2300      	movs	r3, #0
 8009708:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800970a:	69fb      	ldr	r3, [r7, #28]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d017      	beq.n	8009740 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009710:	69fb      	ldr	r3, [r7, #28]
 8009712:	2200      	movs	r2, #0
 8009714:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009718:	88fa      	ldrh	r2, [r7, #6]
 800971a:	2300      	movs	r3, #0
 800971c:	9303      	str	r3, [sp, #12]
 800971e:	69fb      	ldr	r3, [r7, #28]
 8009720:	9302      	str	r3, [sp, #8]
 8009722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009724:	9301      	str	r3, [sp, #4]
 8009726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009728:	9300      	str	r3, [sp, #0]
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	68b9      	ldr	r1, [r7, #8]
 800972e:	68f8      	ldr	r0, [r7, #12]
 8009730:	f000 f80e 	bl	8009750 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009734:	69f8      	ldr	r0, [r7, #28]
 8009736:	f000 f89b 	bl	8009870 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800973a:	2301      	movs	r3, #1
 800973c:	61bb      	str	r3, [r7, #24]
 800973e:	e002      	b.n	8009746 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009740:	f04f 33ff 	mov.w	r3, #4294967295
 8009744:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009746:	69bb      	ldr	r3, [r7, #24]
	}
 8009748:	4618      	mov	r0, r3
 800974a:	3720      	adds	r7, #32
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}

08009750 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b088      	sub	sp, #32
 8009754:	af00      	add	r7, sp, #0
 8009756:	60f8      	str	r0, [r7, #12]
 8009758:	60b9      	str	r1, [r7, #8]
 800975a:	607a      	str	r2, [r7, #4]
 800975c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800975e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009760:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	009b      	lsls	r3, r3, #2
 8009766:	461a      	mov	r2, r3
 8009768:	21a5      	movs	r1, #165	; 0xa5
 800976a:	f002 f9d9 	bl	800bb20 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800976e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009770:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009778:	3b01      	subs	r3, #1
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	4413      	add	r3, r2
 800977e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009780:	69bb      	ldr	r3, [r7, #24]
 8009782:	f023 0307 	bic.w	r3, r3, #7
 8009786:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009788:	69bb      	ldr	r3, [r7, #24]
 800978a:	f003 0307 	and.w	r3, r3, #7
 800978e:	2b00      	cmp	r3, #0
 8009790:	d00a      	beq.n	80097a8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009796:	f383 8811 	msr	BASEPRI, r3
 800979a:	f3bf 8f6f 	isb	sy
 800979e:	f3bf 8f4f 	dsb	sy
 80097a2:	617b      	str	r3, [r7, #20]
}
 80097a4:	bf00      	nop
 80097a6:	e7fe      	b.n	80097a6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d01f      	beq.n	80097ee <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80097ae:	2300      	movs	r3, #0
 80097b0:	61fb      	str	r3, [r7, #28]
 80097b2:	e012      	b.n	80097da <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80097b4:	68ba      	ldr	r2, [r7, #8]
 80097b6:	69fb      	ldr	r3, [r7, #28]
 80097b8:	4413      	add	r3, r2
 80097ba:	7819      	ldrb	r1, [r3, #0]
 80097bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097be:	69fb      	ldr	r3, [r7, #28]
 80097c0:	4413      	add	r3, r2
 80097c2:	3334      	adds	r3, #52	; 0x34
 80097c4:	460a      	mov	r2, r1
 80097c6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80097c8:	68ba      	ldr	r2, [r7, #8]
 80097ca:	69fb      	ldr	r3, [r7, #28]
 80097cc:	4413      	add	r3, r2
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d006      	beq.n	80097e2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80097d4:	69fb      	ldr	r3, [r7, #28]
 80097d6:	3301      	adds	r3, #1
 80097d8:	61fb      	str	r3, [r7, #28]
 80097da:	69fb      	ldr	r3, [r7, #28]
 80097dc:	2b0f      	cmp	r3, #15
 80097de:	d9e9      	bls.n	80097b4 <prvInitialiseNewTask+0x64>
 80097e0:	e000      	b.n	80097e4 <prvInitialiseNewTask+0x94>
			{
				break;
 80097e2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80097e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e6:	2200      	movs	r2, #0
 80097e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80097ec:	e003      	b.n	80097f6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80097ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f0:	2200      	movs	r2, #0
 80097f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80097f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f8:	2b37      	cmp	r3, #55	; 0x37
 80097fa:	d901      	bls.n	8009800 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80097fc:	2337      	movs	r3, #55	; 0x37
 80097fe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009802:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009804:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009808:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800980a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800980c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800980e:	2200      	movs	r2, #0
 8009810:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009814:	3304      	adds	r3, #4
 8009816:	4618      	mov	r0, r3
 8009818:	f7ff f8be 	bl	8008998 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800981c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800981e:	3318      	adds	r3, #24
 8009820:	4618      	mov	r0, r3
 8009822:	f7ff f8b9 	bl	8008998 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800982a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800982c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800982e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009834:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009838:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800983a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800983c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800983e:	2200      	movs	r2, #0
 8009840:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009844:	2200      	movs	r2, #0
 8009846:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800984a:	683a      	ldr	r2, [r7, #0]
 800984c:	68f9      	ldr	r1, [r7, #12]
 800984e:	69b8      	ldr	r0, [r7, #24]
 8009850:	f001 f9e2 	bl	800ac18 <pxPortInitialiseStack>
 8009854:	4602      	mov	r2, r0
 8009856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009858:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800985a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800985c:	2b00      	cmp	r3, #0
 800985e:	d002      	beq.n	8009866 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009862:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009864:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009866:	bf00      	nop
 8009868:	3720      	adds	r7, #32
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}
	...

08009870 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b082      	sub	sp, #8
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009878:	f001 fafc 	bl	800ae74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800987c:	4b2d      	ldr	r3, [pc, #180]	; (8009934 <prvAddNewTaskToReadyList+0xc4>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	3301      	adds	r3, #1
 8009882:	4a2c      	ldr	r2, [pc, #176]	; (8009934 <prvAddNewTaskToReadyList+0xc4>)
 8009884:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009886:	4b2c      	ldr	r3, [pc, #176]	; (8009938 <prvAddNewTaskToReadyList+0xc8>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d109      	bne.n	80098a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800988e:	4a2a      	ldr	r2, [pc, #168]	; (8009938 <prvAddNewTaskToReadyList+0xc8>)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009894:	4b27      	ldr	r3, [pc, #156]	; (8009934 <prvAddNewTaskToReadyList+0xc4>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	2b01      	cmp	r3, #1
 800989a:	d110      	bne.n	80098be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800989c:	f000 fc16 	bl	800a0cc <prvInitialiseTaskLists>
 80098a0:	e00d      	b.n	80098be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80098a2:	4b26      	ldr	r3, [pc, #152]	; (800993c <prvAddNewTaskToReadyList+0xcc>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d109      	bne.n	80098be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80098aa:	4b23      	ldr	r3, [pc, #140]	; (8009938 <prvAddNewTaskToReadyList+0xc8>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098b4:	429a      	cmp	r2, r3
 80098b6:	d802      	bhi.n	80098be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80098b8:	4a1f      	ldr	r2, [pc, #124]	; (8009938 <prvAddNewTaskToReadyList+0xc8>)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80098be:	4b20      	ldr	r3, [pc, #128]	; (8009940 <prvAddNewTaskToReadyList+0xd0>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	3301      	adds	r3, #1
 80098c4:	4a1e      	ldr	r2, [pc, #120]	; (8009940 <prvAddNewTaskToReadyList+0xd0>)
 80098c6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80098c8:	4b1d      	ldr	r3, [pc, #116]	; (8009940 <prvAddNewTaskToReadyList+0xd0>)
 80098ca:	681a      	ldr	r2, [r3, #0]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098d4:	4b1b      	ldr	r3, [pc, #108]	; (8009944 <prvAddNewTaskToReadyList+0xd4>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	429a      	cmp	r2, r3
 80098da:	d903      	bls.n	80098e4 <prvAddNewTaskToReadyList+0x74>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e0:	4a18      	ldr	r2, [pc, #96]	; (8009944 <prvAddNewTaskToReadyList+0xd4>)
 80098e2:	6013      	str	r3, [r2, #0]
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098e8:	4613      	mov	r3, r2
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	4413      	add	r3, r2
 80098ee:	009b      	lsls	r3, r3, #2
 80098f0:	4a15      	ldr	r2, [pc, #84]	; (8009948 <prvAddNewTaskToReadyList+0xd8>)
 80098f2:	441a      	add	r2, r3
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	3304      	adds	r3, #4
 80098f8:	4619      	mov	r1, r3
 80098fa:	4610      	mov	r0, r2
 80098fc:	f7ff f859 	bl	80089b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009900:	f001 fae8 	bl	800aed4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009904:	4b0d      	ldr	r3, [pc, #52]	; (800993c <prvAddNewTaskToReadyList+0xcc>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d00e      	beq.n	800992a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800990c:	4b0a      	ldr	r3, [pc, #40]	; (8009938 <prvAddNewTaskToReadyList+0xc8>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009916:	429a      	cmp	r2, r3
 8009918:	d207      	bcs.n	800992a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800991a:	4b0c      	ldr	r3, [pc, #48]	; (800994c <prvAddNewTaskToReadyList+0xdc>)
 800991c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009920:	601a      	str	r2, [r3, #0]
 8009922:	f3bf 8f4f 	dsb	sy
 8009926:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800992a:	bf00      	nop
 800992c:	3708      	adds	r7, #8
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
 8009932:	bf00      	nop
 8009934:	20000df8 	.word	0x20000df8
 8009938:	20000924 	.word	0x20000924
 800993c:	20000e04 	.word	0x20000e04
 8009940:	20000e14 	.word	0x20000e14
 8009944:	20000e00 	.word	0x20000e00
 8009948:	20000928 	.word	0x20000928
 800994c:	e000ed04 	.word	0xe000ed04

08009950 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009950:	b580      	push	{r7, lr}
 8009952:	b084      	sub	sp, #16
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009958:	2300      	movs	r3, #0
 800995a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d017      	beq.n	8009992 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009962:	4b13      	ldr	r3, [pc, #76]	; (80099b0 <vTaskDelay+0x60>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d00a      	beq.n	8009980 <vTaskDelay+0x30>
	__asm volatile
 800996a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800996e:	f383 8811 	msr	BASEPRI, r3
 8009972:	f3bf 8f6f 	isb	sy
 8009976:	f3bf 8f4f 	dsb	sy
 800997a:	60bb      	str	r3, [r7, #8]
}
 800997c:	bf00      	nop
 800997e:	e7fe      	b.n	800997e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009980:	f000 f880 	bl	8009a84 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009984:	2100      	movs	r1, #0
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 fcea 	bl	800a360 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800998c:	f000 f888 	bl	8009aa0 <xTaskResumeAll>
 8009990:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d107      	bne.n	80099a8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009998:	4b06      	ldr	r3, [pc, #24]	; (80099b4 <vTaskDelay+0x64>)
 800999a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800999e:	601a      	str	r2, [r3, #0]
 80099a0:	f3bf 8f4f 	dsb	sy
 80099a4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80099a8:	bf00      	nop
 80099aa:	3710      	adds	r7, #16
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}
 80099b0:	20000e20 	.word	0x20000e20
 80099b4:	e000ed04 	.word	0xe000ed04

080099b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b08a      	sub	sp, #40	; 0x28
 80099bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80099be:	2300      	movs	r3, #0
 80099c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80099c2:	2300      	movs	r3, #0
 80099c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80099c6:	463a      	mov	r2, r7
 80099c8:	1d39      	adds	r1, r7, #4
 80099ca:	f107 0308 	add.w	r3, r7, #8
 80099ce:	4618      	mov	r0, r3
 80099d0:	f7fe ff8e 	bl	80088f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80099d4:	6839      	ldr	r1, [r7, #0]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	68ba      	ldr	r2, [r7, #8]
 80099da:	9202      	str	r2, [sp, #8]
 80099dc:	9301      	str	r3, [sp, #4]
 80099de:	2300      	movs	r3, #0
 80099e0:	9300      	str	r3, [sp, #0]
 80099e2:	2300      	movs	r3, #0
 80099e4:	460a      	mov	r2, r1
 80099e6:	4921      	ldr	r1, [pc, #132]	; (8009a6c <vTaskStartScheduler+0xb4>)
 80099e8:	4821      	ldr	r0, [pc, #132]	; (8009a70 <vTaskStartScheduler+0xb8>)
 80099ea:	f7ff fe0f 	bl	800960c <xTaskCreateStatic>
 80099ee:	4603      	mov	r3, r0
 80099f0:	4a20      	ldr	r2, [pc, #128]	; (8009a74 <vTaskStartScheduler+0xbc>)
 80099f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80099f4:	4b1f      	ldr	r3, [pc, #124]	; (8009a74 <vTaskStartScheduler+0xbc>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d002      	beq.n	8009a02 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80099fc:	2301      	movs	r3, #1
 80099fe:	617b      	str	r3, [r7, #20]
 8009a00:	e001      	b.n	8009a06 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009a02:	2300      	movs	r3, #0
 8009a04:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	2b01      	cmp	r3, #1
 8009a0a:	d102      	bne.n	8009a12 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009a0c:	f000 fcfc 	bl	800a408 <xTimerCreateTimerTask>
 8009a10:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d116      	bne.n	8009a46 <vTaskStartScheduler+0x8e>
	__asm volatile
 8009a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a1c:	f383 8811 	msr	BASEPRI, r3
 8009a20:	f3bf 8f6f 	isb	sy
 8009a24:	f3bf 8f4f 	dsb	sy
 8009a28:	613b      	str	r3, [r7, #16]
}
 8009a2a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009a2c:	4b12      	ldr	r3, [pc, #72]	; (8009a78 <vTaskStartScheduler+0xc0>)
 8009a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8009a32:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009a34:	4b11      	ldr	r3, [pc, #68]	; (8009a7c <vTaskStartScheduler+0xc4>)
 8009a36:	2201      	movs	r2, #1
 8009a38:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009a3a:	4b11      	ldr	r3, [pc, #68]	; (8009a80 <vTaskStartScheduler+0xc8>)
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009a40:	f001 f976 	bl	800ad30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009a44:	e00e      	b.n	8009a64 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a4c:	d10a      	bne.n	8009a64 <vTaskStartScheduler+0xac>
	__asm volatile
 8009a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a52:	f383 8811 	msr	BASEPRI, r3
 8009a56:	f3bf 8f6f 	isb	sy
 8009a5a:	f3bf 8f4f 	dsb	sy
 8009a5e:	60fb      	str	r3, [r7, #12]
}
 8009a60:	bf00      	nop
 8009a62:	e7fe      	b.n	8009a62 <vTaskStartScheduler+0xaa>
}
 8009a64:	bf00      	nop
 8009a66:	3718      	adds	r7, #24
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}
 8009a6c:	0800bd84 	.word	0x0800bd84
 8009a70:	0800a09d 	.word	0x0800a09d
 8009a74:	20000e1c 	.word	0x20000e1c
 8009a78:	20000e18 	.word	0x20000e18
 8009a7c:	20000e04 	.word	0x20000e04
 8009a80:	20000dfc 	.word	0x20000dfc

08009a84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009a84:	b480      	push	{r7}
 8009a86:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009a88:	4b04      	ldr	r3, [pc, #16]	; (8009a9c <vTaskSuspendAll+0x18>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	3301      	adds	r3, #1
 8009a8e:	4a03      	ldr	r2, [pc, #12]	; (8009a9c <vTaskSuspendAll+0x18>)
 8009a90:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009a92:	bf00      	nop
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr
 8009a9c:	20000e20 	.word	0x20000e20

08009aa0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b084      	sub	sp, #16
 8009aa4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009aae:	4b42      	ldr	r3, [pc, #264]	; (8009bb8 <xTaskResumeAll+0x118>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d10a      	bne.n	8009acc <xTaskResumeAll+0x2c>
	__asm volatile
 8009ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aba:	f383 8811 	msr	BASEPRI, r3
 8009abe:	f3bf 8f6f 	isb	sy
 8009ac2:	f3bf 8f4f 	dsb	sy
 8009ac6:	603b      	str	r3, [r7, #0]
}
 8009ac8:	bf00      	nop
 8009aca:	e7fe      	b.n	8009aca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009acc:	f001 f9d2 	bl	800ae74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009ad0:	4b39      	ldr	r3, [pc, #228]	; (8009bb8 <xTaskResumeAll+0x118>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	3b01      	subs	r3, #1
 8009ad6:	4a38      	ldr	r2, [pc, #224]	; (8009bb8 <xTaskResumeAll+0x118>)
 8009ad8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ada:	4b37      	ldr	r3, [pc, #220]	; (8009bb8 <xTaskResumeAll+0x118>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d162      	bne.n	8009ba8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009ae2:	4b36      	ldr	r3, [pc, #216]	; (8009bbc <xTaskResumeAll+0x11c>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d05e      	beq.n	8009ba8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009aea:	e02f      	b.n	8009b4c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009aec:	4b34      	ldr	r3, [pc, #208]	; (8009bc0 <xTaskResumeAll+0x120>)
 8009aee:	68db      	ldr	r3, [r3, #12]
 8009af0:	68db      	ldr	r3, [r3, #12]
 8009af2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	3318      	adds	r3, #24
 8009af8:	4618      	mov	r0, r3
 8009afa:	f7fe ffb7 	bl	8008a6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	3304      	adds	r3, #4
 8009b02:	4618      	mov	r0, r3
 8009b04:	f7fe ffb2 	bl	8008a6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b0c:	4b2d      	ldr	r3, [pc, #180]	; (8009bc4 <xTaskResumeAll+0x124>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d903      	bls.n	8009b1c <xTaskResumeAll+0x7c>
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b18:	4a2a      	ldr	r2, [pc, #168]	; (8009bc4 <xTaskResumeAll+0x124>)
 8009b1a:	6013      	str	r3, [r2, #0]
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b20:	4613      	mov	r3, r2
 8009b22:	009b      	lsls	r3, r3, #2
 8009b24:	4413      	add	r3, r2
 8009b26:	009b      	lsls	r3, r3, #2
 8009b28:	4a27      	ldr	r2, [pc, #156]	; (8009bc8 <xTaskResumeAll+0x128>)
 8009b2a:	441a      	add	r2, r3
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	3304      	adds	r3, #4
 8009b30:	4619      	mov	r1, r3
 8009b32:	4610      	mov	r0, r2
 8009b34:	f7fe ff3d 	bl	80089b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b3c:	4b23      	ldr	r3, [pc, #140]	; (8009bcc <xTaskResumeAll+0x12c>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d302      	bcc.n	8009b4c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009b46:	4b22      	ldr	r3, [pc, #136]	; (8009bd0 <xTaskResumeAll+0x130>)
 8009b48:	2201      	movs	r2, #1
 8009b4a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009b4c:	4b1c      	ldr	r3, [pc, #112]	; (8009bc0 <xTaskResumeAll+0x120>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d1cb      	bne.n	8009aec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d001      	beq.n	8009b5e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009b5a:	f000 fb55 	bl	800a208 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009b5e:	4b1d      	ldr	r3, [pc, #116]	; (8009bd4 <xTaskResumeAll+0x134>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d010      	beq.n	8009b8c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009b6a:	f000 f847 	bl	8009bfc <xTaskIncrementTick>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d002      	beq.n	8009b7a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009b74:	4b16      	ldr	r3, [pc, #88]	; (8009bd0 <xTaskResumeAll+0x130>)
 8009b76:	2201      	movs	r2, #1
 8009b78:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	3b01      	subs	r3, #1
 8009b7e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d1f1      	bne.n	8009b6a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009b86:	4b13      	ldr	r3, [pc, #76]	; (8009bd4 <xTaskResumeAll+0x134>)
 8009b88:	2200      	movs	r2, #0
 8009b8a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009b8c:	4b10      	ldr	r3, [pc, #64]	; (8009bd0 <xTaskResumeAll+0x130>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d009      	beq.n	8009ba8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009b94:	2301      	movs	r3, #1
 8009b96:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009b98:	4b0f      	ldr	r3, [pc, #60]	; (8009bd8 <xTaskResumeAll+0x138>)
 8009b9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b9e:	601a      	str	r2, [r3, #0]
 8009ba0:	f3bf 8f4f 	dsb	sy
 8009ba4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009ba8:	f001 f994 	bl	800aed4 <vPortExitCritical>

	return xAlreadyYielded;
 8009bac:	68bb      	ldr	r3, [r7, #8]
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3710      	adds	r7, #16
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}
 8009bb6:	bf00      	nop
 8009bb8:	20000e20 	.word	0x20000e20
 8009bbc:	20000df8 	.word	0x20000df8
 8009bc0:	20000db8 	.word	0x20000db8
 8009bc4:	20000e00 	.word	0x20000e00
 8009bc8:	20000928 	.word	0x20000928
 8009bcc:	20000924 	.word	0x20000924
 8009bd0:	20000e0c 	.word	0x20000e0c
 8009bd4:	20000e08 	.word	0x20000e08
 8009bd8:	e000ed04 	.word	0xe000ed04

08009bdc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b083      	sub	sp, #12
 8009be0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009be2:	4b05      	ldr	r3, [pc, #20]	; (8009bf8 <xTaskGetTickCount+0x1c>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009be8:	687b      	ldr	r3, [r7, #4]
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	370c      	adds	r7, #12
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf4:	4770      	bx	lr
 8009bf6:	bf00      	nop
 8009bf8:	20000dfc 	.word	0x20000dfc

08009bfc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b086      	sub	sp, #24
 8009c00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009c02:	2300      	movs	r3, #0
 8009c04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c06:	4b4f      	ldr	r3, [pc, #316]	; (8009d44 <xTaskIncrementTick+0x148>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	f040 808f 	bne.w	8009d2e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009c10:	4b4d      	ldr	r3, [pc, #308]	; (8009d48 <xTaskIncrementTick+0x14c>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	3301      	adds	r3, #1
 8009c16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009c18:	4a4b      	ldr	r2, [pc, #300]	; (8009d48 <xTaskIncrementTick+0x14c>)
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d120      	bne.n	8009c66 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009c24:	4b49      	ldr	r3, [pc, #292]	; (8009d4c <xTaskIncrementTick+0x150>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d00a      	beq.n	8009c44 <xTaskIncrementTick+0x48>
	__asm volatile
 8009c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c32:	f383 8811 	msr	BASEPRI, r3
 8009c36:	f3bf 8f6f 	isb	sy
 8009c3a:	f3bf 8f4f 	dsb	sy
 8009c3e:	603b      	str	r3, [r7, #0]
}
 8009c40:	bf00      	nop
 8009c42:	e7fe      	b.n	8009c42 <xTaskIncrementTick+0x46>
 8009c44:	4b41      	ldr	r3, [pc, #260]	; (8009d4c <xTaskIncrementTick+0x150>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	60fb      	str	r3, [r7, #12]
 8009c4a:	4b41      	ldr	r3, [pc, #260]	; (8009d50 <xTaskIncrementTick+0x154>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	4a3f      	ldr	r2, [pc, #252]	; (8009d4c <xTaskIncrementTick+0x150>)
 8009c50:	6013      	str	r3, [r2, #0]
 8009c52:	4a3f      	ldr	r2, [pc, #252]	; (8009d50 <xTaskIncrementTick+0x154>)
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	6013      	str	r3, [r2, #0]
 8009c58:	4b3e      	ldr	r3, [pc, #248]	; (8009d54 <xTaskIncrementTick+0x158>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	3301      	adds	r3, #1
 8009c5e:	4a3d      	ldr	r2, [pc, #244]	; (8009d54 <xTaskIncrementTick+0x158>)
 8009c60:	6013      	str	r3, [r2, #0]
 8009c62:	f000 fad1 	bl	800a208 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009c66:	4b3c      	ldr	r3, [pc, #240]	; (8009d58 <xTaskIncrementTick+0x15c>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	693a      	ldr	r2, [r7, #16]
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	d349      	bcc.n	8009d04 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c70:	4b36      	ldr	r3, [pc, #216]	; (8009d4c <xTaskIncrementTick+0x150>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d104      	bne.n	8009c84 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c7a:	4b37      	ldr	r3, [pc, #220]	; (8009d58 <xTaskIncrementTick+0x15c>)
 8009c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8009c80:	601a      	str	r2, [r3, #0]
					break;
 8009c82:	e03f      	b.n	8009d04 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c84:	4b31      	ldr	r3, [pc, #196]	; (8009d4c <xTaskIncrementTick+0x150>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	68db      	ldr	r3, [r3, #12]
 8009c8a:	68db      	ldr	r3, [r3, #12]
 8009c8c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009c94:	693a      	ldr	r2, [r7, #16]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	429a      	cmp	r2, r3
 8009c9a:	d203      	bcs.n	8009ca4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009c9c:	4a2e      	ldr	r2, [pc, #184]	; (8009d58 <xTaskIncrementTick+0x15c>)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009ca2:	e02f      	b.n	8009d04 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	3304      	adds	r3, #4
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f7fe fedf 	bl	8008a6c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d004      	beq.n	8009cc0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	3318      	adds	r3, #24
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f7fe fed6 	bl	8008a6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cc4:	4b25      	ldr	r3, [pc, #148]	; (8009d5c <xTaskIncrementTick+0x160>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d903      	bls.n	8009cd4 <xTaskIncrementTick+0xd8>
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cd0:	4a22      	ldr	r2, [pc, #136]	; (8009d5c <xTaskIncrementTick+0x160>)
 8009cd2:	6013      	str	r3, [r2, #0]
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cd8:	4613      	mov	r3, r2
 8009cda:	009b      	lsls	r3, r3, #2
 8009cdc:	4413      	add	r3, r2
 8009cde:	009b      	lsls	r3, r3, #2
 8009ce0:	4a1f      	ldr	r2, [pc, #124]	; (8009d60 <xTaskIncrementTick+0x164>)
 8009ce2:	441a      	add	r2, r3
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	3304      	adds	r3, #4
 8009ce8:	4619      	mov	r1, r3
 8009cea:	4610      	mov	r0, r2
 8009cec:	f7fe fe61 	bl	80089b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cf4:	4b1b      	ldr	r3, [pc, #108]	; (8009d64 <xTaskIncrementTick+0x168>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d3b8      	bcc.n	8009c70 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009cfe:	2301      	movs	r3, #1
 8009d00:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d02:	e7b5      	b.n	8009c70 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009d04:	4b17      	ldr	r3, [pc, #92]	; (8009d64 <xTaskIncrementTick+0x168>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d0a:	4915      	ldr	r1, [pc, #84]	; (8009d60 <xTaskIncrementTick+0x164>)
 8009d0c:	4613      	mov	r3, r2
 8009d0e:	009b      	lsls	r3, r3, #2
 8009d10:	4413      	add	r3, r2
 8009d12:	009b      	lsls	r3, r3, #2
 8009d14:	440b      	add	r3, r1
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	2b01      	cmp	r3, #1
 8009d1a:	d901      	bls.n	8009d20 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009d20:	4b11      	ldr	r3, [pc, #68]	; (8009d68 <xTaskIncrementTick+0x16c>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d007      	beq.n	8009d38 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009d28:	2301      	movs	r3, #1
 8009d2a:	617b      	str	r3, [r7, #20]
 8009d2c:	e004      	b.n	8009d38 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009d2e:	4b0f      	ldr	r3, [pc, #60]	; (8009d6c <xTaskIncrementTick+0x170>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	3301      	adds	r3, #1
 8009d34:	4a0d      	ldr	r2, [pc, #52]	; (8009d6c <xTaskIncrementTick+0x170>)
 8009d36:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009d38:	697b      	ldr	r3, [r7, #20]
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3718      	adds	r7, #24
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}
 8009d42:	bf00      	nop
 8009d44:	20000e20 	.word	0x20000e20
 8009d48:	20000dfc 	.word	0x20000dfc
 8009d4c:	20000db0 	.word	0x20000db0
 8009d50:	20000db4 	.word	0x20000db4
 8009d54:	20000e10 	.word	0x20000e10
 8009d58:	20000e18 	.word	0x20000e18
 8009d5c:	20000e00 	.word	0x20000e00
 8009d60:	20000928 	.word	0x20000928
 8009d64:	20000924 	.word	0x20000924
 8009d68:	20000e0c 	.word	0x20000e0c
 8009d6c:	20000e08 	.word	0x20000e08

08009d70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009d70:	b480      	push	{r7}
 8009d72:	b085      	sub	sp, #20
 8009d74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009d76:	4b28      	ldr	r3, [pc, #160]	; (8009e18 <vTaskSwitchContext+0xa8>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d003      	beq.n	8009d86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009d7e:	4b27      	ldr	r3, [pc, #156]	; (8009e1c <vTaskSwitchContext+0xac>)
 8009d80:	2201      	movs	r2, #1
 8009d82:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009d84:	e041      	b.n	8009e0a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8009d86:	4b25      	ldr	r3, [pc, #148]	; (8009e1c <vTaskSwitchContext+0xac>)
 8009d88:	2200      	movs	r2, #0
 8009d8a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d8c:	4b24      	ldr	r3, [pc, #144]	; (8009e20 <vTaskSwitchContext+0xb0>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	60fb      	str	r3, [r7, #12]
 8009d92:	e010      	b.n	8009db6 <vTaskSwitchContext+0x46>
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d10a      	bne.n	8009db0 <vTaskSwitchContext+0x40>
	__asm volatile
 8009d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d9e:	f383 8811 	msr	BASEPRI, r3
 8009da2:	f3bf 8f6f 	isb	sy
 8009da6:	f3bf 8f4f 	dsb	sy
 8009daa:	607b      	str	r3, [r7, #4]
}
 8009dac:	bf00      	nop
 8009dae:	e7fe      	b.n	8009dae <vTaskSwitchContext+0x3e>
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	3b01      	subs	r3, #1
 8009db4:	60fb      	str	r3, [r7, #12]
 8009db6:	491b      	ldr	r1, [pc, #108]	; (8009e24 <vTaskSwitchContext+0xb4>)
 8009db8:	68fa      	ldr	r2, [r7, #12]
 8009dba:	4613      	mov	r3, r2
 8009dbc:	009b      	lsls	r3, r3, #2
 8009dbe:	4413      	add	r3, r2
 8009dc0:	009b      	lsls	r3, r3, #2
 8009dc2:	440b      	add	r3, r1
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d0e4      	beq.n	8009d94 <vTaskSwitchContext+0x24>
 8009dca:	68fa      	ldr	r2, [r7, #12]
 8009dcc:	4613      	mov	r3, r2
 8009dce:	009b      	lsls	r3, r3, #2
 8009dd0:	4413      	add	r3, r2
 8009dd2:	009b      	lsls	r3, r3, #2
 8009dd4:	4a13      	ldr	r2, [pc, #76]	; (8009e24 <vTaskSwitchContext+0xb4>)
 8009dd6:	4413      	add	r3, r2
 8009dd8:	60bb      	str	r3, [r7, #8]
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	685a      	ldr	r2, [r3, #4]
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	605a      	str	r2, [r3, #4]
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	685a      	ldr	r2, [r3, #4]
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	3308      	adds	r3, #8
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d104      	bne.n	8009dfa <vTaskSwitchContext+0x8a>
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	685a      	ldr	r2, [r3, #4]
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	605a      	str	r2, [r3, #4]
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	68db      	ldr	r3, [r3, #12]
 8009e00:	4a09      	ldr	r2, [pc, #36]	; (8009e28 <vTaskSwitchContext+0xb8>)
 8009e02:	6013      	str	r3, [r2, #0]
 8009e04:	4a06      	ldr	r2, [pc, #24]	; (8009e20 <vTaskSwitchContext+0xb0>)
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	6013      	str	r3, [r2, #0]
}
 8009e0a:	bf00      	nop
 8009e0c:	3714      	adds	r7, #20
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr
 8009e16:	bf00      	nop
 8009e18:	20000e20 	.word	0x20000e20
 8009e1c:	20000e0c 	.word	0x20000e0c
 8009e20:	20000e00 	.word	0x20000e00
 8009e24:	20000928 	.word	0x20000928
 8009e28:	20000924 	.word	0x20000924

08009e2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b084      	sub	sp, #16
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d10a      	bne.n	8009e52 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e40:	f383 8811 	msr	BASEPRI, r3
 8009e44:	f3bf 8f6f 	isb	sy
 8009e48:	f3bf 8f4f 	dsb	sy
 8009e4c:	60fb      	str	r3, [r7, #12]
}
 8009e4e:	bf00      	nop
 8009e50:	e7fe      	b.n	8009e50 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e52:	4b07      	ldr	r3, [pc, #28]	; (8009e70 <vTaskPlaceOnEventList+0x44>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	3318      	adds	r3, #24
 8009e58:	4619      	mov	r1, r3
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f7fe fdcd 	bl	80089fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009e60:	2101      	movs	r1, #1
 8009e62:	6838      	ldr	r0, [r7, #0]
 8009e64:	f000 fa7c 	bl	800a360 <prvAddCurrentTaskToDelayedList>
}
 8009e68:	bf00      	nop
 8009e6a:	3710      	adds	r7, #16
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}
 8009e70:	20000924 	.word	0x20000924

08009e74 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b086      	sub	sp, #24
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	60f8      	str	r0, [r7, #12]
 8009e7c:	60b9      	str	r1, [r7, #8]
 8009e7e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d10a      	bne.n	8009e9c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e8a:	f383 8811 	msr	BASEPRI, r3
 8009e8e:	f3bf 8f6f 	isb	sy
 8009e92:	f3bf 8f4f 	dsb	sy
 8009e96:	617b      	str	r3, [r7, #20]
}
 8009e98:	bf00      	nop
 8009e9a:	e7fe      	b.n	8009e9a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e9c:	4b0a      	ldr	r3, [pc, #40]	; (8009ec8 <vTaskPlaceOnEventListRestricted+0x54>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	3318      	adds	r3, #24
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	68f8      	ldr	r0, [r7, #12]
 8009ea6:	f7fe fd84 	bl	80089b2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d002      	beq.n	8009eb6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8009eb4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009eb6:	6879      	ldr	r1, [r7, #4]
 8009eb8:	68b8      	ldr	r0, [r7, #8]
 8009eba:	f000 fa51 	bl	800a360 <prvAddCurrentTaskToDelayedList>
	}
 8009ebe:	bf00      	nop
 8009ec0:	3718      	adds	r7, #24
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}
 8009ec6:	bf00      	nop
 8009ec8:	20000924 	.word	0x20000924

08009ecc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b086      	sub	sp, #24
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	68db      	ldr	r3, [r3, #12]
 8009ed8:	68db      	ldr	r3, [r3, #12]
 8009eda:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d10a      	bne.n	8009ef8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee6:	f383 8811 	msr	BASEPRI, r3
 8009eea:	f3bf 8f6f 	isb	sy
 8009eee:	f3bf 8f4f 	dsb	sy
 8009ef2:	60fb      	str	r3, [r7, #12]
}
 8009ef4:	bf00      	nop
 8009ef6:	e7fe      	b.n	8009ef6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	3318      	adds	r3, #24
 8009efc:	4618      	mov	r0, r3
 8009efe:	f7fe fdb5 	bl	8008a6c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f02:	4b1e      	ldr	r3, [pc, #120]	; (8009f7c <xTaskRemoveFromEventList+0xb0>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d11d      	bne.n	8009f46 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	3304      	adds	r3, #4
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f7fe fdac 	bl	8008a6c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f18:	4b19      	ldr	r3, [pc, #100]	; (8009f80 <xTaskRemoveFromEventList+0xb4>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	d903      	bls.n	8009f28 <xTaskRemoveFromEventList+0x5c>
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f24:	4a16      	ldr	r2, [pc, #88]	; (8009f80 <xTaskRemoveFromEventList+0xb4>)
 8009f26:	6013      	str	r3, [r2, #0]
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f2c:	4613      	mov	r3, r2
 8009f2e:	009b      	lsls	r3, r3, #2
 8009f30:	4413      	add	r3, r2
 8009f32:	009b      	lsls	r3, r3, #2
 8009f34:	4a13      	ldr	r2, [pc, #76]	; (8009f84 <xTaskRemoveFromEventList+0xb8>)
 8009f36:	441a      	add	r2, r3
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	3304      	adds	r3, #4
 8009f3c:	4619      	mov	r1, r3
 8009f3e:	4610      	mov	r0, r2
 8009f40:	f7fe fd37 	bl	80089b2 <vListInsertEnd>
 8009f44:	e005      	b.n	8009f52 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009f46:	693b      	ldr	r3, [r7, #16]
 8009f48:	3318      	adds	r3, #24
 8009f4a:	4619      	mov	r1, r3
 8009f4c:	480e      	ldr	r0, [pc, #56]	; (8009f88 <xTaskRemoveFromEventList+0xbc>)
 8009f4e:	f7fe fd30 	bl	80089b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f56:	4b0d      	ldr	r3, [pc, #52]	; (8009f8c <xTaskRemoveFromEventList+0xc0>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f5c:	429a      	cmp	r2, r3
 8009f5e:	d905      	bls.n	8009f6c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009f60:	2301      	movs	r3, #1
 8009f62:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009f64:	4b0a      	ldr	r3, [pc, #40]	; (8009f90 <xTaskRemoveFromEventList+0xc4>)
 8009f66:	2201      	movs	r2, #1
 8009f68:	601a      	str	r2, [r3, #0]
 8009f6a:	e001      	b.n	8009f70 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009f70:	697b      	ldr	r3, [r7, #20]
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3718      	adds	r7, #24
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}
 8009f7a:	bf00      	nop
 8009f7c:	20000e20 	.word	0x20000e20
 8009f80:	20000e00 	.word	0x20000e00
 8009f84:	20000928 	.word	0x20000928
 8009f88:	20000db8 	.word	0x20000db8
 8009f8c:	20000924 	.word	0x20000924
 8009f90:	20000e0c 	.word	0x20000e0c

08009f94 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009f94:	b480      	push	{r7}
 8009f96:	b083      	sub	sp, #12
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009f9c:	4b06      	ldr	r3, [pc, #24]	; (8009fb8 <vTaskInternalSetTimeOutState+0x24>)
 8009f9e:	681a      	ldr	r2, [r3, #0]
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009fa4:	4b05      	ldr	r3, [pc, #20]	; (8009fbc <vTaskInternalSetTimeOutState+0x28>)
 8009fa6:	681a      	ldr	r2, [r3, #0]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	605a      	str	r2, [r3, #4]
}
 8009fac:	bf00      	nop
 8009fae:	370c      	adds	r7, #12
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb6:	4770      	bx	lr
 8009fb8:	20000e10 	.word	0x20000e10
 8009fbc:	20000dfc 	.word	0x20000dfc

08009fc0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b088      	sub	sp, #32
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d10a      	bne.n	8009fe6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd4:	f383 8811 	msr	BASEPRI, r3
 8009fd8:	f3bf 8f6f 	isb	sy
 8009fdc:	f3bf 8f4f 	dsb	sy
 8009fe0:	613b      	str	r3, [r7, #16]
}
 8009fe2:	bf00      	nop
 8009fe4:	e7fe      	b.n	8009fe4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d10a      	bne.n	800a002 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff0:	f383 8811 	msr	BASEPRI, r3
 8009ff4:	f3bf 8f6f 	isb	sy
 8009ff8:	f3bf 8f4f 	dsb	sy
 8009ffc:	60fb      	str	r3, [r7, #12]
}
 8009ffe:	bf00      	nop
 800a000:	e7fe      	b.n	800a000 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a002:	f000 ff37 	bl	800ae74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a006:	4b1d      	ldr	r3, [pc, #116]	; (800a07c <xTaskCheckForTimeOut+0xbc>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	69ba      	ldr	r2, [r7, #24]
 800a012:	1ad3      	subs	r3, r2, r3
 800a014:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a01e:	d102      	bne.n	800a026 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a020:	2300      	movs	r3, #0
 800a022:	61fb      	str	r3, [r7, #28]
 800a024:	e023      	b.n	800a06e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681a      	ldr	r2, [r3, #0]
 800a02a:	4b15      	ldr	r3, [pc, #84]	; (800a080 <xTaskCheckForTimeOut+0xc0>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	429a      	cmp	r2, r3
 800a030:	d007      	beq.n	800a042 <xTaskCheckForTimeOut+0x82>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	69ba      	ldr	r2, [r7, #24]
 800a038:	429a      	cmp	r2, r3
 800a03a:	d302      	bcc.n	800a042 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a03c:	2301      	movs	r3, #1
 800a03e:	61fb      	str	r3, [r7, #28]
 800a040:	e015      	b.n	800a06e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	697a      	ldr	r2, [r7, #20]
 800a048:	429a      	cmp	r2, r3
 800a04a:	d20b      	bcs.n	800a064 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	681a      	ldr	r2, [r3, #0]
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	1ad2      	subs	r2, r2, r3
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f7ff ff9b 	bl	8009f94 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a05e:	2300      	movs	r3, #0
 800a060:	61fb      	str	r3, [r7, #28]
 800a062:	e004      	b.n	800a06e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	2200      	movs	r2, #0
 800a068:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a06a:	2301      	movs	r3, #1
 800a06c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a06e:	f000 ff31 	bl	800aed4 <vPortExitCritical>

	return xReturn;
 800a072:	69fb      	ldr	r3, [r7, #28]
}
 800a074:	4618      	mov	r0, r3
 800a076:	3720      	adds	r7, #32
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}
 800a07c:	20000dfc 	.word	0x20000dfc
 800a080:	20000e10 	.word	0x20000e10

0800a084 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a084:	b480      	push	{r7}
 800a086:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a088:	4b03      	ldr	r3, [pc, #12]	; (800a098 <vTaskMissedYield+0x14>)
 800a08a:	2201      	movs	r2, #1
 800a08c:	601a      	str	r2, [r3, #0]
}
 800a08e:	bf00      	nop
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr
 800a098:	20000e0c 	.word	0x20000e0c

0800a09c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b082      	sub	sp, #8
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a0a4:	f000 f852 	bl	800a14c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a0a8:	4b06      	ldr	r3, [pc, #24]	; (800a0c4 <prvIdleTask+0x28>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	d9f9      	bls.n	800a0a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a0b0:	4b05      	ldr	r3, [pc, #20]	; (800a0c8 <prvIdleTask+0x2c>)
 800a0b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0b6:	601a      	str	r2, [r3, #0]
 800a0b8:	f3bf 8f4f 	dsb	sy
 800a0bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a0c0:	e7f0      	b.n	800a0a4 <prvIdleTask+0x8>
 800a0c2:	bf00      	nop
 800a0c4:	20000928 	.word	0x20000928
 800a0c8:	e000ed04 	.word	0xe000ed04

0800a0cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b082      	sub	sp, #8
 800a0d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	607b      	str	r3, [r7, #4]
 800a0d6:	e00c      	b.n	800a0f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a0d8:	687a      	ldr	r2, [r7, #4]
 800a0da:	4613      	mov	r3, r2
 800a0dc:	009b      	lsls	r3, r3, #2
 800a0de:	4413      	add	r3, r2
 800a0e0:	009b      	lsls	r3, r3, #2
 800a0e2:	4a12      	ldr	r2, [pc, #72]	; (800a12c <prvInitialiseTaskLists+0x60>)
 800a0e4:	4413      	add	r3, r2
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f7fe fc36 	bl	8008958 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	607b      	str	r3, [r7, #4]
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2b37      	cmp	r3, #55	; 0x37
 800a0f6:	d9ef      	bls.n	800a0d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a0f8:	480d      	ldr	r0, [pc, #52]	; (800a130 <prvInitialiseTaskLists+0x64>)
 800a0fa:	f7fe fc2d 	bl	8008958 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a0fe:	480d      	ldr	r0, [pc, #52]	; (800a134 <prvInitialiseTaskLists+0x68>)
 800a100:	f7fe fc2a 	bl	8008958 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a104:	480c      	ldr	r0, [pc, #48]	; (800a138 <prvInitialiseTaskLists+0x6c>)
 800a106:	f7fe fc27 	bl	8008958 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a10a:	480c      	ldr	r0, [pc, #48]	; (800a13c <prvInitialiseTaskLists+0x70>)
 800a10c:	f7fe fc24 	bl	8008958 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a110:	480b      	ldr	r0, [pc, #44]	; (800a140 <prvInitialiseTaskLists+0x74>)
 800a112:	f7fe fc21 	bl	8008958 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a116:	4b0b      	ldr	r3, [pc, #44]	; (800a144 <prvInitialiseTaskLists+0x78>)
 800a118:	4a05      	ldr	r2, [pc, #20]	; (800a130 <prvInitialiseTaskLists+0x64>)
 800a11a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a11c:	4b0a      	ldr	r3, [pc, #40]	; (800a148 <prvInitialiseTaskLists+0x7c>)
 800a11e:	4a05      	ldr	r2, [pc, #20]	; (800a134 <prvInitialiseTaskLists+0x68>)
 800a120:	601a      	str	r2, [r3, #0]
}
 800a122:	bf00      	nop
 800a124:	3708      	adds	r7, #8
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}
 800a12a:	bf00      	nop
 800a12c:	20000928 	.word	0x20000928
 800a130:	20000d88 	.word	0x20000d88
 800a134:	20000d9c 	.word	0x20000d9c
 800a138:	20000db8 	.word	0x20000db8
 800a13c:	20000dcc 	.word	0x20000dcc
 800a140:	20000de4 	.word	0x20000de4
 800a144:	20000db0 	.word	0x20000db0
 800a148:	20000db4 	.word	0x20000db4

0800a14c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b082      	sub	sp, #8
 800a150:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a152:	e019      	b.n	800a188 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a154:	f000 fe8e 	bl	800ae74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a158:	4b10      	ldr	r3, [pc, #64]	; (800a19c <prvCheckTasksWaitingTermination+0x50>)
 800a15a:	68db      	ldr	r3, [r3, #12]
 800a15c:	68db      	ldr	r3, [r3, #12]
 800a15e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	3304      	adds	r3, #4
 800a164:	4618      	mov	r0, r3
 800a166:	f7fe fc81 	bl	8008a6c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a16a:	4b0d      	ldr	r3, [pc, #52]	; (800a1a0 <prvCheckTasksWaitingTermination+0x54>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	3b01      	subs	r3, #1
 800a170:	4a0b      	ldr	r2, [pc, #44]	; (800a1a0 <prvCheckTasksWaitingTermination+0x54>)
 800a172:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a174:	4b0b      	ldr	r3, [pc, #44]	; (800a1a4 <prvCheckTasksWaitingTermination+0x58>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	3b01      	subs	r3, #1
 800a17a:	4a0a      	ldr	r2, [pc, #40]	; (800a1a4 <prvCheckTasksWaitingTermination+0x58>)
 800a17c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a17e:	f000 fea9 	bl	800aed4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f000 f810 	bl	800a1a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a188:	4b06      	ldr	r3, [pc, #24]	; (800a1a4 <prvCheckTasksWaitingTermination+0x58>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d1e1      	bne.n	800a154 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a190:	bf00      	nop
 800a192:	bf00      	nop
 800a194:	3708      	adds	r7, #8
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}
 800a19a:	bf00      	nop
 800a19c:	20000dcc 	.word	0x20000dcc
 800a1a0:	20000df8 	.word	0x20000df8
 800a1a4:	20000de0 	.word	0x20000de0

0800a1a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b084      	sub	sp, #16
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d108      	bne.n	800a1cc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f001 f846 	bl	800b250 <vPortFree>
				vPortFree( pxTCB );
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f001 f843 	bl	800b250 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a1ca:	e018      	b.n	800a1fe <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a1d2:	2b01      	cmp	r3, #1
 800a1d4:	d103      	bne.n	800a1de <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f001 f83a 	bl	800b250 <vPortFree>
	}
 800a1dc:	e00f      	b.n	800a1fe <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a1e4:	2b02      	cmp	r3, #2
 800a1e6:	d00a      	beq.n	800a1fe <prvDeleteTCB+0x56>
	__asm volatile
 800a1e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ec:	f383 8811 	msr	BASEPRI, r3
 800a1f0:	f3bf 8f6f 	isb	sy
 800a1f4:	f3bf 8f4f 	dsb	sy
 800a1f8:	60fb      	str	r3, [r7, #12]
}
 800a1fa:	bf00      	nop
 800a1fc:	e7fe      	b.n	800a1fc <prvDeleteTCB+0x54>
	}
 800a1fe:	bf00      	nop
 800a200:	3710      	adds	r7, #16
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
	...

0800a208 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a208:	b480      	push	{r7}
 800a20a:	b083      	sub	sp, #12
 800a20c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a20e:	4b0c      	ldr	r3, [pc, #48]	; (800a240 <prvResetNextTaskUnblockTime+0x38>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d104      	bne.n	800a222 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a218:	4b0a      	ldr	r3, [pc, #40]	; (800a244 <prvResetNextTaskUnblockTime+0x3c>)
 800a21a:	f04f 32ff 	mov.w	r2, #4294967295
 800a21e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a220:	e008      	b.n	800a234 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a222:	4b07      	ldr	r3, [pc, #28]	; (800a240 <prvResetNextTaskUnblockTime+0x38>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	68db      	ldr	r3, [r3, #12]
 800a228:	68db      	ldr	r3, [r3, #12]
 800a22a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	685b      	ldr	r3, [r3, #4]
 800a230:	4a04      	ldr	r2, [pc, #16]	; (800a244 <prvResetNextTaskUnblockTime+0x3c>)
 800a232:	6013      	str	r3, [r2, #0]
}
 800a234:	bf00      	nop
 800a236:	370c      	adds	r7, #12
 800a238:	46bd      	mov	sp, r7
 800a23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23e:	4770      	bx	lr
 800a240:	20000db0 	.word	0x20000db0
 800a244:	20000e18 	.word	0x20000e18

0800a248 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a248:	b480      	push	{r7}
 800a24a:	b083      	sub	sp, #12
 800a24c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a24e:	4b0b      	ldr	r3, [pc, #44]	; (800a27c <xTaskGetSchedulerState+0x34>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d102      	bne.n	800a25c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a256:	2301      	movs	r3, #1
 800a258:	607b      	str	r3, [r7, #4]
 800a25a:	e008      	b.n	800a26e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a25c:	4b08      	ldr	r3, [pc, #32]	; (800a280 <xTaskGetSchedulerState+0x38>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d102      	bne.n	800a26a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a264:	2302      	movs	r3, #2
 800a266:	607b      	str	r3, [r7, #4]
 800a268:	e001      	b.n	800a26e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a26a:	2300      	movs	r3, #0
 800a26c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a26e:	687b      	ldr	r3, [r7, #4]
	}
 800a270:	4618      	mov	r0, r3
 800a272:	370c      	adds	r7, #12
 800a274:	46bd      	mov	sp, r7
 800a276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27a:	4770      	bx	lr
 800a27c:	20000e04 	.word	0x20000e04
 800a280:	20000e20 	.word	0x20000e20

0800a284 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a284:	b580      	push	{r7, lr}
 800a286:	b086      	sub	sp, #24
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a290:	2300      	movs	r3, #0
 800a292:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d056      	beq.n	800a348 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a29a:	4b2e      	ldr	r3, [pc, #184]	; (800a354 <xTaskPriorityDisinherit+0xd0>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	693a      	ldr	r2, [r7, #16]
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d00a      	beq.n	800a2ba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a2a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a8:	f383 8811 	msr	BASEPRI, r3
 800a2ac:	f3bf 8f6f 	isb	sy
 800a2b0:	f3bf 8f4f 	dsb	sy
 800a2b4:	60fb      	str	r3, [r7, #12]
}
 800a2b6:	bf00      	nop
 800a2b8:	e7fe      	b.n	800a2b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d10a      	bne.n	800a2d8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c6:	f383 8811 	msr	BASEPRI, r3
 800a2ca:	f3bf 8f6f 	isb	sy
 800a2ce:	f3bf 8f4f 	dsb	sy
 800a2d2:	60bb      	str	r3, [r7, #8]
}
 800a2d4:	bf00      	nop
 800a2d6:	e7fe      	b.n	800a2d6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2dc:	1e5a      	subs	r2, r3, #1
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2ea:	429a      	cmp	r2, r3
 800a2ec:	d02c      	beq.n	800a348 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d128      	bne.n	800a348 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	3304      	adds	r3, #4
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f7fe fbb6 	bl	8008a6c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a30c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a318:	4b0f      	ldr	r3, [pc, #60]	; (800a358 <xTaskPriorityDisinherit+0xd4>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	429a      	cmp	r2, r3
 800a31e:	d903      	bls.n	800a328 <xTaskPriorityDisinherit+0xa4>
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a324:	4a0c      	ldr	r2, [pc, #48]	; (800a358 <xTaskPriorityDisinherit+0xd4>)
 800a326:	6013      	str	r3, [r2, #0]
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a32c:	4613      	mov	r3, r2
 800a32e:	009b      	lsls	r3, r3, #2
 800a330:	4413      	add	r3, r2
 800a332:	009b      	lsls	r3, r3, #2
 800a334:	4a09      	ldr	r2, [pc, #36]	; (800a35c <xTaskPriorityDisinherit+0xd8>)
 800a336:	441a      	add	r2, r3
 800a338:	693b      	ldr	r3, [r7, #16]
 800a33a:	3304      	adds	r3, #4
 800a33c:	4619      	mov	r1, r3
 800a33e:	4610      	mov	r0, r2
 800a340:	f7fe fb37 	bl	80089b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a344:	2301      	movs	r3, #1
 800a346:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a348:	697b      	ldr	r3, [r7, #20]
	}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3718      	adds	r7, #24
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}
 800a352:	bf00      	nop
 800a354:	20000924 	.word	0x20000924
 800a358:	20000e00 	.word	0x20000e00
 800a35c:	20000928 	.word	0x20000928

0800a360 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b084      	sub	sp, #16
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a36a:	4b21      	ldr	r3, [pc, #132]	; (800a3f0 <prvAddCurrentTaskToDelayedList+0x90>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a370:	4b20      	ldr	r3, [pc, #128]	; (800a3f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	3304      	adds	r3, #4
 800a376:	4618      	mov	r0, r3
 800a378:	f7fe fb78 	bl	8008a6c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a382:	d10a      	bne.n	800a39a <prvAddCurrentTaskToDelayedList+0x3a>
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d007      	beq.n	800a39a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a38a:	4b1a      	ldr	r3, [pc, #104]	; (800a3f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	3304      	adds	r3, #4
 800a390:	4619      	mov	r1, r3
 800a392:	4819      	ldr	r0, [pc, #100]	; (800a3f8 <prvAddCurrentTaskToDelayedList+0x98>)
 800a394:	f7fe fb0d 	bl	80089b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a398:	e026      	b.n	800a3e8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a39a:	68fa      	ldr	r2, [r7, #12]
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	4413      	add	r3, r2
 800a3a0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a3a2:	4b14      	ldr	r3, [pc, #80]	; (800a3f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	68ba      	ldr	r2, [r7, #8]
 800a3a8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a3aa:	68ba      	ldr	r2, [r7, #8]
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	d209      	bcs.n	800a3c6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3b2:	4b12      	ldr	r3, [pc, #72]	; (800a3fc <prvAddCurrentTaskToDelayedList+0x9c>)
 800a3b4:	681a      	ldr	r2, [r3, #0]
 800a3b6:	4b0f      	ldr	r3, [pc, #60]	; (800a3f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	3304      	adds	r3, #4
 800a3bc:	4619      	mov	r1, r3
 800a3be:	4610      	mov	r0, r2
 800a3c0:	f7fe fb1b 	bl	80089fa <vListInsert>
}
 800a3c4:	e010      	b.n	800a3e8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3c6:	4b0e      	ldr	r3, [pc, #56]	; (800a400 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a3c8:	681a      	ldr	r2, [r3, #0]
 800a3ca:	4b0a      	ldr	r3, [pc, #40]	; (800a3f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	3304      	adds	r3, #4
 800a3d0:	4619      	mov	r1, r3
 800a3d2:	4610      	mov	r0, r2
 800a3d4:	f7fe fb11 	bl	80089fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a3d8:	4b0a      	ldr	r3, [pc, #40]	; (800a404 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	68ba      	ldr	r2, [r7, #8]
 800a3de:	429a      	cmp	r2, r3
 800a3e0:	d202      	bcs.n	800a3e8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a3e2:	4a08      	ldr	r2, [pc, #32]	; (800a404 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	6013      	str	r3, [r2, #0]
}
 800a3e8:	bf00      	nop
 800a3ea:	3710      	adds	r7, #16
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}
 800a3f0:	20000dfc 	.word	0x20000dfc
 800a3f4:	20000924 	.word	0x20000924
 800a3f8:	20000de4 	.word	0x20000de4
 800a3fc:	20000db4 	.word	0x20000db4
 800a400:	20000db0 	.word	0x20000db0
 800a404:	20000e18 	.word	0x20000e18

0800a408 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b08a      	sub	sp, #40	; 0x28
 800a40c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a40e:	2300      	movs	r3, #0
 800a410:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a412:	f000 fba1 	bl	800ab58 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a416:	4b1c      	ldr	r3, [pc, #112]	; (800a488 <xTimerCreateTimerTask+0x80>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d021      	beq.n	800a462 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a41e:	2300      	movs	r3, #0
 800a420:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a422:	2300      	movs	r3, #0
 800a424:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a426:	1d3a      	adds	r2, r7, #4
 800a428:	f107 0108 	add.w	r1, r7, #8
 800a42c:	f107 030c 	add.w	r3, r7, #12
 800a430:	4618      	mov	r0, r3
 800a432:	f7fe fa77 	bl	8008924 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a436:	6879      	ldr	r1, [r7, #4]
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	68fa      	ldr	r2, [r7, #12]
 800a43c:	9202      	str	r2, [sp, #8]
 800a43e:	9301      	str	r3, [sp, #4]
 800a440:	2302      	movs	r3, #2
 800a442:	9300      	str	r3, [sp, #0]
 800a444:	2300      	movs	r3, #0
 800a446:	460a      	mov	r2, r1
 800a448:	4910      	ldr	r1, [pc, #64]	; (800a48c <xTimerCreateTimerTask+0x84>)
 800a44a:	4811      	ldr	r0, [pc, #68]	; (800a490 <xTimerCreateTimerTask+0x88>)
 800a44c:	f7ff f8de 	bl	800960c <xTaskCreateStatic>
 800a450:	4603      	mov	r3, r0
 800a452:	4a10      	ldr	r2, [pc, #64]	; (800a494 <xTimerCreateTimerTask+0x8c>)
 800a454:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a456:	4b0f      	ldr	r3, [pc, #60]	; (800a494 <xTimerCreateTimerTask+0x8c>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d001      	beq.n	800a462 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a45e:	2301      	movs	r3, #1
 800a460:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a462:	697b      	ldr	r3, [r7, #20]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d10a      	bne.n	800a47e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a46c:	f383 8811 	msr	BASEPRI, r3
 800a470:	f3bf 8f6f 	isb	sy
 800a474:	f3bf 8f4f 	dsb	sy
 800a478:	613b      	str	r3, [r7, #16]
}
 800a47a:	bf00      	nop
 800a47c:	e7fe      	b.n	800a47c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a47e:	697b      	ldr	r3, [r7, #20]
}
 800a480:	4618      	mov	r0, r3
 800a482:	3718      	adds	r7, #24
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}
 800a488:	20000e54 	.word	0x20000e54
 800a48c:	0800bd8c 	.word	0x0800bd8c
 800a490:	0800a701 	.word	0x0800a701
 800a494:	20000e58 	.word	0x20000e58

0800a498 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b088      	sub	sp, #32
 800a49c:	af02      	add	r7, sp, #8
 800a49e:	60f8      	str	r0, [r7, #12]
 800a4a0:	60b9      	str	r1, [r7, #8]
 800a4a2:	607a      	str	r2, [r7, #4]
 800a4a4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800a4a6:	202c      	movs	r0, #44	; 0x2c
 800a4a8:	f000 fe06 	bl	800b0b8 <pvPortMalloc>
 800a4ac:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d00d      	beq.n	800a4d0 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	9301      	str	r3, [sp, #4]
 800a4c0:	6a3b      	ldr	r3, [r7, #32]
 800a4c2:	9300      	str	r3, [sp, #0]
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	687a      	ldr	r2, [r7, #4]
 800a4c8:	68b9      	ldr	r1, [r7, #8]
 800a4ca:	68f8      	ldr	r0, [r7, #12]
 800a4cc:	f000 f843 	bl	800a556 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800a4d0:	697b      	ldr	r3, [r7, #20]
	}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3718      	adds	r7, #24
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}

0800a4da <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800a4da:	b580      	push	{r7, lr}
 800a4dc:	b08a      	sub	sp, #40	; 0x28
 800a4de:	af02      	add	r7, sp, #8
 800a4e0:	60f8      	str	r0, [r7, #12]
 800a4e2:	60b9      	str	r1, [r7, #8]
 800a4e4:	607a      	str	r2, [r7, #4]
 800a4e6:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800a4e8:	232c      	movs	r3, #44	; 0x2c
 800a4ea:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800a4ec:	693b      	ldr	r3, [r7, #16]
 800a4ee:	2b2c      	cmp	r3, #44	; 0x2c
 800a4f0:	d00a      	beq.n	800a508 <xTimerCreateStatic+0x2e>
	__asm volatile
 800a4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f6:	f383 8811 	msr	BASEPRI, r3
 800a4fa:	f3bf 8f6f 	isb	sy
 800a4fe:	f3bf 8f4f 	dsb	sy
 800a502:	61bb      	str	r3, [r7, #24]
}
 800a504:	bf00      	nop
 800a506:	e7fe      	b.n	800a506 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a508:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800a50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d10a      	bne.n	800a526 <xTimerCreateStatic+0x4c>
	__asm volatile
 800a510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a514:	f383 8811 	msr	BASEPRI, r3
 800a518:	f3bf 8f6f 	isb	sy
 800a51c:	f3bf 8f4f 	dsb	sy
 800a520:	617b      	str	r3, [r7, #20]
}
 800a522:	bf00      	nop
 800a524:	e7fe      	b.n	800a524 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800a526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a528:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800a52a:	69fb      	ldr	r3, [r7, #28]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d00d      	beq.n	800a54c <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800a530:	69fb      	ldr	r3, [r7, #28]
 800a532:	2202      	movs	r2, #2
 800a534:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a538:	69fb      	ldr	r3, [r7, #28]
 800a53a:	9301      	str	r3, [sp, #4]
 800a53c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a53e:	9300      	str	r3, [sp, #0]
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	687a      	ldr	r2, [r7, #4]
 800a544:	68b9      	ldr	r1, [r7, #8]
 800a546:	68f8      	ldr	r0, [r7, #12]
 800a548:	f000 f805 	bl	800a556 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800a54c:	69fb      	ldr	r3, [r7, #28]
	}
 800a54e:	4618      	mov	r0, r3
 800a550:	3720      	adds	r7, #32
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}

0800a556 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800a556:	b580      	push	{r7, lr}
 800a558:	b086      	sub	sp, #24
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	60f8      	str	r0, [r7, #12]
 800a55e:	60b9      	str	r1, [r7, #8]
 800a560:	607a      	str	r2, [r7, #4]
 800a562:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d10a      	bne.n	800a580 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800a56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a56e:	f383 8811 	msr	BASEPRI, r3
 800a572:	f3bf 8f6f 	isb	sy
 800a576:	f3bf 8f4f 	dsb	sy
 800a57a:	617b      	str	r3, [r7, #20]
}
 800a57c:	bf00      	nop
 800a57e:	e7fe      	b.n	800a57e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800a580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a582:	2b00      	cmp	r3, #0
 800a584:	d01e      	beq.n	800a5c4 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800a586:	f000 fae7 	bl	800ab58 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800a58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a58c:	68fa      	ldr	r2, [r7, #12]
 800a58e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800a590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a592:	68ba      	ldr	r2, [r7, #8]
 800a594:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800a596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a598:	683a      	ldr	r2, [r7, #0]
 800a59a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800a59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a59e:	6a3a      	ldr	r2, [r7, #32]
 800a5a0:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800a5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a4:	3304      	adds	r3, #4
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f7fe f9f6 	bl	8008998 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d008      	beq.n	800a5c4 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800a5b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a5b8:	f043 0304 	orr.w	r3, r3, #4
 800a5bc:	b2da      	uxtb	r2, r3
 800a5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800a5c4:	bf00      	nop
 800a5c6:	3718      	adds	r7, #24
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	bd80      	pop	{r7, pc}

0800a5cc <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b08a      	sub	sp, #40	; 0x28
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	60f8      	str	r0, [r7, #12]
 800a5d4:	60b9      	str	r1, [r7, #8]
 800a5d6:	607a      	str	r2, [r7, #4]
 800a5d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d10a      	bne.n	800a5fa <xTimerGenericCommand+0x2e>
	__asm volatile
 800a5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e8:	f383 8811 	msr	BASEPRI, r3
 800a5ec:	f3bf 8f6f 	isb	sy
 800a5f0:	f3bf 8f4f 	dsb	sy
 800a5f4:	623b      	str	r3, [r7, #32]
}
 800a5f6:	bf00      	nop
 800a5f8:	e7fe      	b.n	800a5f8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a5fa:	4b1a      	ldr	r3, [pc, #104]	; (800a664 <xTimerGenericCommand+0x98>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d02a      	beq.n	800a658 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	2b05      	cmp	r3, #5
 800a612:	dc18      	bgt.n	800a646 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a614:	f7ff fe18 	bl	800a248 <xTaskGetSchedulerState>
 800a618:	4603      	mov	r3, r0
 800a61a:	2b02      	cmp	r3, #2
 800a61c:	d109      	bne.n	800a632 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a61e:	4b11      	ldr	r3, [pc, #68]	; (800a664 <xTimerGenericCommand+0x98>)
 800a620:	6818      	ldr	r0, [r3, #0]
 800a622:	f107 0110 	add.w	r1, r7, #16
 800a626:	2300      	movs	r3, #0
 800a628:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a62a:	f7fe fb87 	bl	8008d3c <xQueueGenericSend>
 800a62e:	6278      	str	r0, [r7, #36]	; 0x24
 800a630:	e012      	b.n	800a658 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a632:	4b0c      	ldr	r3, [pc, #48]	; (800a664 <xTimerGenericCommand+0x98>)
 800a634:	6818      	ldr	r0, [r3, #0]
 800a636:	f107 0110 	add.w	r1, r7, #16
 800a63a:	2300      	movs	r3, #0
 800a63c:	2200      	movs	r2, #0
 800a63e:	f7fe fb7d 	bl	8008d3c <xQueueGenericSend>
 800a642:	6278      	str	r0, [r7, #36]	; 0x24
 800a644:	e008      	b.n	800a658 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a646:	4b07      	ldr	r3, [pc, #28]	; (800a664 <xTimerGenericCommand+0x98>)
 800a648:	6818      	ldr	r0, [r3, #0]
 800a64a:	f107 0110 	add.w	r1, r7, #16
 800a64e:	2300      	movs	r3, #0
 800a650:	683a      	ldr	r2, [r7, #0]
 800a652:	f7fe fc71 	bl	8008f38 <xQueueGenericSendFromISR>
 800a656:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3728      	adds	r7, #40	; 0x28
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}
 800a662:	bf00      	nop
 800a664:	20000e54 	.word	0x20000e54

0800a668 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b088      	sub	sp, #32
 800a66c:	af02      	add	r7, sp, #8
 800a66e:	6078      	str	r0, [r7, #4]
 800a670:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a672:	4b22      	ldr	r3, [pc, #136]	; (800a6fc <prvProcessExpiredTimer+0x94>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	68db      	ldr	r3, [r3, #12]
 800a678:	68db      	ldr	r3, [r3, #12]
 800a67a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a67c:	697b      	ldr	r3, [r7, #20]
 800a67e:	3304      	adds	r3, #4
 800a680:	4618      	mov	r0, r3
 800a682:	f7fe f9f3 	bl	8008a6c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a68c:	f003 0304 	and.w	r3, r3, #4
 800a690:	2b00      	cmp	r3, #0
 800a692:	d022      	beq.n	800a6da <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	699a      	ldr	r2, [r3, #24]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	18d1      	adds	r1, r2, r3
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	683a      	ldr	r2, [r7, #0]
 800a6a0:	6978      	ldr	r0, [r7, #20]
 800a6a2:	f000 f8d1 	bl	800a848 <prvInsertTimerInActiveList>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d01f      	beq.n	800a6ec <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	9300      	str	r3, [sp, #0]
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	687a      	ldr	r2, [r7, #4]
 800a6b4:	2100      	movs	r1, #0
 800a6b6:	6978      	ldr	r0, [r7, #20]
 800a6b8:	f7ff ff88 	bl	800a5cc <xTimerGenericCommand>
 800a6bc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a6be:	693b      	ldr	r3, [r7, #16]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d113      	bne.n	800a6ec <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a6c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c8:	f383 8811 	msr	BASEPRI, r3
 800a6cc:	f3bf 8f6f 	isb	sy
 800a6d0:	f3bf 8f4f 	dsb	sy
 800a6d4:	60fb      	str	r3, [r7, #12]
}
 800a6d6:	bf00      	nop
 800a6d8:	e7fe      	b.n	800a6d8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a6da:	697b      	ldr	r3, [r7, #20]
 800a6dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6e0:	f023 0301 	bic.w	r3, r3, #1
 800a6e4:	b2da      	uxtb	r2, r3
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	6a1b      	ldr	r3, [r3, #32]
 800a6f0:	6978      	ldr	r0, [r7, #20]
 800a6f2:	4798      	blx	r3
}
 800a6f4:	bf00      	nop
 800a6f6:	3718      	adds	r7, #24
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}
 800a6fc:	20000e4c 	.word	0x20000e4c

0800a700 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b084      	sub	sp, #16
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a708:	f107 0308 	add.w	r3, r7, #8
 800a70c:	4618      	mov	r0, r3
 800a70e:	f000 f857 	bl	800a7c0 <prvGetNextExpireTime>
 800a712:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	4619      	mov	r1, r3
 800a718:	68f8      	ldr	r0, [r7, #12]
 800a71a:	f000 f803 	bl	800a724 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a71e:	f000 f8d5 	bl	800a8cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a722:	e7f1      	b.n	800a708 <prvTimerTask+0x8>

0800a724 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a72e:	f7ff f9a9 	bl	8009a84 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a732:	f107 0308 	add.w	r3, r7, #8
 800a736:	4618      	mov	r0, r3
 800a738:	f000 f866 	bl	800a808 <prvSampleTimeNow>
 800a73c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d130      	bne.n	800a7a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d10a      	bne.n	800a760 <prvProcessTimerOrBlockTask+0x3c>
 800a74a:	687a      	ldr	r2, [r7, #4]
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	429a      	cmp	r2, r3
 800a750:	d806      	bhi.n	800a760 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a752:	f7ff f9a5 	bl	8009aa0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a756:	68f9      	ldr	r1, [r7, #12]
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f7ff ff85 	bl	800a668 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a75e:	e024      	b.n	800a7aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d008      	beq.n	800a778 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a766:	4b13      	ldr	r3, [pc, #76]	; (800a7b4 <prvProcessTimerOrBlockTask+0x90>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d101      	bne.n	800a774 <prvProcessTimerOrBlockTask+0x50>
 800a770:	2301      	movs	r3, #1
 800a772:	e000      	b.n	800a776 <prvProcessTimerOrBlockTask+0x52>
 800a774:	2300      	movs	r3, #0
 800a776:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a778:	4b0f      	ldr	r3, [pc, #60]	; (800a7b8 <prvProcessTimerOrBlockTask+0x94>)
 800a77a:	6818      	ldr	r0, [r3, #0]
 800a77c:	687a      	ldr	r2, [r7, #4]
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	1ad3      	subs	r3, r2, r3
 800a782:	683a      	ldr	r2, [r7, #0]
 800a784:	4619      	mov	r1, r3
 800a786:	f7fe ff0d 	bl	80095a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a78a:	f7ff f989 	bl	8009aa0 <xTaskResumeAll>
 800a78e:	4603      	mov	r3, r0
 800a790:	2b00      	cmp	r3, #0
 800a792:	d10a      	bne.n	800a7aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a794:	4b09      	ldr	r3, [pc, #36]	; (800a7bc <prvProcessTimerOrBlockTask+0x98>)
 800a796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a79a:	601a      	str	r2, [r3, #0]
 800a79c:	f3bf 8f4f 	dsb	sy
 800a7a0:	f3bf 8f6f 	isb	sy
}
 800a7a4:	e001      	b.n	800a7aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a7a6:	f7ff f97b 	bl	8009aa0 <xTaskResumeAll>
}
 800a7aa:	bf00      	nop
 800a7ac:	3710      	adds	r7, #16
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}
 800a7b2:	bf00      	nop
 800a7b4:	20000e50 	.word	0x20000e50
 800a7b8:	20000e54 	.word	0x20000e54
 800a7bc:	e000ed04 	.word	0xe000ed04

0800a7c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b085      	sub	sp, #20
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a7c8:	4b0e      	ldr	r3, [pc, #56]	; (800a804 <prvGetNextExpireTime+0x44>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d101      	bne.n	800a7d6 <prvGetNextExpireTime+0x16>
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	e000      	b.n	800a7d8 <prvGetNextExpireTime+0x18>
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d105      	bne.n	800a7f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a7e4:	4b07      	ldr	r3, [pc, #28]	; (800a804 <prvGetNextExpireTime+0x44>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	68db      	ldr	r3, [r3, #12]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	60fb      	str	r3, [r7, #12]
 800a7ee:	e001      	b.n	800a7f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3714      	adds	r7, #20
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a800:	4770      	bx	lr
 800a802:	bf00      	nop
 800a804:	20000e4c 	.word	0x20000e4c

0800a808 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b084      	sub	sp, #16
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a810:	f7ff f9e4 	bl	8009bdc <xTaskGetTickCount>
 800a814:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a816:	4b0b      	ldr	r3, [pc, #44]	; (800a844 <prvSampleTimeNow+0x3c>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	68fa      	ldr	r2, [r7, #12]
 800a81c:	429a      	cmp	r2, r3
 800a81e:	d205      	bcs.n	800a82c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a820:	f000 f936 	bl	800aa90 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2201      	movs	r2, #1
 800a828:	601a      	str	r2, [r3, #0]
 800a82a:	e002      	b.n	800a832 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2200      	movs	r2, #0
 800a830:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a832:	4a04      	ldr	r2, [pc, #16]	; (800a844 <prvSampleTimeNow+0x3c>)
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a838:	68fb      	ldr	r3, [r7, #12]
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3710      	adds	r7, #16
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}
 800a842:	bf00      	nop
 800a844:	20000e5c 	.word	0x20000e5c

0800a848 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b086      	sub	sp, #24
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	60f8      	str	r0, [r7, #12]
 800a850:	60b9      	str	r1, [r7, #8]
 800a852:	607a      	str	r2, [r7, #4]
 800a854:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a856:	2300      	movs	r3, #0
 800a858:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	68ba      	ldr	r2, [r7, #8]
 800a85e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	68fa      	ldr	r2, [r7, #12]
 800a864:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a866:	68ba      	ldr	r2, [r7, #8]
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d812      	bhi.n	800a894 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a86e:	687a      	ldr	r2, [r7, #4]
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	1ad2      	subs	r2, r2, r3
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	699b      	ldr	r3, [r3, #24]
 800a878:	429a      	cmp	r2, r3
 800a87a:	d302      	bcc.n	800a882 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a87c:	2301      	movs	r3, #1
 800a87e:	617b      	str	r3, [r7, #20]
 800a880:	e01b      	b.n	800a8ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a882:	4b10      	ldr	r3, [pc, #64]	; (800a8c4 <prvInsertTimerInActiveList+0x7c>)
 800a884:	681a      	ldr	r2, [r3, #0]
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	3304      	adds	r3, #4
 800a88a:	4619      	mov	r1, r3
 800a88c:	4610      	mov	r0, r2
 800a88e:	f7fe f8b4 	bl	80089fa <vListInsert>
 800a892:	e012      	b.n	800a8ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a894:	687a      	ldr	r2, [r7, #4]
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	429a      	cmp	r2, r3
 800a89a:	d206      	bcs.n	800a8aa <prvInsertTimerInActiveList+0x62>
 800a89c:	68ba      	ldr	r2, [r7, #8]
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	429a      	cmp	r2, r3
 800a8a2:	d302      	bcc.n	800a8aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	617b      	str	r3, [r7, #20]
 800a8a8:	e007      	b.n	800a8ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a8aa:	4b07      	ldr	r3, [pc, #28]	; (800a8c8 <prvInsertTimerInActiveList+0x80>)
 800a8ac:	681a      	ldr	r2, [r3, #0]
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	3304      	adds	r3, #4
 800a8b2:	4619      	mov	r1, r3
 800a8b4:	4610      	mov	r0, r2
 800a8b6:	f7fe f8a0 	bl	80089fa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a8ba:	697b      	ldr	r3, [r7, #20]
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3718      	adds	r7, #24
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}
 800a8c4:	20000e50 	.word	0x20000e50
 800a8c8:	20000e4c 	.word	0x20000e4c

0800a8cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b08e      	sub	sp, #56	; 0x38
 800a8d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a8d2:	e0ca      	b.n	800aa6a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	da18      	bge.n	800a90c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a8da:	1d3b      	adds	r3, r7, #4
 800a8dc:	3304      	adds	r3, #4
 800a8de:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d10a      	bne.n	800a8fc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a8e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ea:	f383 8811 	msr	BASEPRI, r3
 800a8ee:	f3bf 8f6f 	isb	sy
 800a8f2:	f3bf 8f4f 	dsb	sy
 800a8f6:	61fb      	str	r3, [r7, #28]
}
 800a8f8:	bf00      	nop
 800a8fa:	e7fe      	b.n	800a8fa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a8fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a902:	6850      	ldr	r0, [r2, #4]
 800a904:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a906:	6892      	ldr	r2, [r2, #8]
 800a908:	4611      	mov	r1, r2
 800a90a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	f2c0 80aa 	blt.w	800aa68 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a91a:	695b      	ldr	r3, [r3, #20]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d004      	beq.n	800a92a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a922:	3304      	adds	r3, #4
 800a924:	4618      	mov	r0, r3
 800a926:	f7fe f8a1 	bl	8008a6c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a92a:	463b      	mov	r3, r7
 800a92c:	4618      	mov	r0, r3
 800a92e:	f7ff ff6b 	bl	800a808 <prvSampleTimeNow>
 800a932:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2b09      	cmp	r3, #9
 800a938:	f200 8097 	bhi.w	800aa6a <prvProcessReceivedCommands+0x19e>
 800a93c:	a201      	add	r2, pc, #4	; (adr r2, 800a944 <prvProcessReceivedCommands+0x78>)
 800a93e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a942:	bf00      	nop
 800a944:	0800a96d 	.word	0x0800a96d
 800a948:	0800a96d 	.word	0x0800a96d
 800a94c:	0800a96d 	.word	0x0800a96d
 800a950:	0800a9e1 	.word	0x0800a9e1
 800a954:	0800a9f5 	.word	0x0800a9f5
 800a958:	0800aa3f 	.word	0x0800aa3f
 800a95c:	0800a96d 	.word	0x0800a96d
 800a960:	0800a96d 	.word	0x0800a96d
 800a964:	0800a9e1 	.word	0x0800a9e1
 800a968:	0800a9f5 	.word	0x0800a9f5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a96e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a972:	f043 0301 	orr.w	r3, r3, #1
 800a976:	b2da      	uxtb	r2, r3
 800a978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a97a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a97e:	68ba      	ldr	r2, [r7, #8]
 800a980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a982:	699b      	ldr	r3, [r3, #24]
 800a984:	18d1      	adds	r1, r2, r3
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a98a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a98c:	f7ff ff5c 	bl	800a848 <prvInsertTimerInActiveList>
 800a990:	4603      	mov	r3, r0
 800a992:	2b00      	cmp	r3, #0
 800a994:	d069      	beq.n	800aa6a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a998:	6a1b      	ldr	r3, [r3, #32]
 800a99a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a99c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a99e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9a4:	f003 0304 	and.w	r3, r3, #4
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d05e      	beq.n	800aa6a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a9ac:	68ba      	ldr	r2, [r7, #8]
 800a9ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b0:	699b      	ldr	r3, [r3, #24]
 800a9b2:	441a      	add	r2, r3
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	9300      	str	r3, [sp, #0]
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	2100      	movs	r1, #0
 800a9bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9be:	f7ff fe05 	bl	800a5cc <xTimerGenericCommand>
 800a9c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a9c4:	6a3b      	ldr	r3, [r7, #32]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d14f      	bne.n	800aa6a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a9ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ce:	f383 8811 	msr	BASEPRI, r3
 800a9d2:	f3bf 8f6f 	isb	sy
 800a9d6:	f3bf 8f4f 	dsb	sy
 800a9da:	61bb      	str	r3, [r7, #24]
}
 800a9dc:	bf00      	nop
 800a9de:	e7fe      	b.n	800a9de <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9e6:	f023 0301 	bic.w	r3, r3, #1
 800a9ea:	b2da      	uxtb	r2, r3
 800a9ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a9f2:	e03a      	b.n	800aa6a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a9f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9fa:	f043 0301 	orr.w	r3, r3, #1
 800a9fe:	b2da      	uxtb	r2, r3
 800aa00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800aa06:	68ba      	ldr	r2, [r7, #8]
 800aa08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa0a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800aa0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa0e:	699b      	ldr	r3, [r3, #24]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d10a      	bne.n	800aa2a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800aa14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa18:	f383 8811 	msr	BASEPRI, r3
 800aa1c:	f3bf 8f6f 	isb	sy
 800aa20:	f3bf 8f4f 	dsb	sy
 800aa24:	617b      	str	r3, [r7, #20]
}
 800aa26:	bf00      	nop
 800aa28:	e7fe      	b.n	800aa28 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800aa2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa2c:	699a      	ldr	r2, [r3, #24]
 800aa2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa30:	18d1      	adds	r1, r2, r3
 800aa32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa38:	f7ff ff06 	bl	800a848 <prvInsertTimerInActiveList>
					break;
 800aa3c:	e015      	b.n	800aa6a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800aa3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa44:	f003 0302 	and.w	r3, r3, #2
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d103      	bne.n	800aa54 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800aa4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa4e:	f000 fbff 	bl	800b250 <vPortFree>
 800aa52:	e00a      	b.n	800aa6a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aa54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa5a:	f023 0301 	bic.w	r3, r3, #1
 800aa5e:	b2da      	uxtb	r2, r3
 800aa60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800aa66:	e000      	b.n	800aa6a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800aa68:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aa6a:	4b08      	ldr	r3, [pc, #32]	; (800aa8c <prvProcessReceivedCommands+0x1c0>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	1d39      	adds	r1, r7, #4
 800aa70:	2200      	movs	r2, #0
 800aa72:	4618      	mov	r0, r3
 800aa74:	f7fe fafc 	bl	8009070 <xQueueReceive>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	f47f af2a 	bne.w	800a8d4 <prvProcessReceivedCommands+0x8>
	}
}
 800aa80:	bf00      	nop
 800aa82:	bf00      	nop
 800aa84:	3730      	adds	r7, #48	; 0x30
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}
 800aa8a:	bf00      	nop
 800aa8c:	20000e54 	.word	0x20000e54

0800aa90 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b088      	sub	sp, #32
 800aa94:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aa96:	e048      	b.n	800ab2a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aa98:	4b2d      	ldr	r3, [pc, #180]	; (800ab50 <prvSwitchTimerLists+0xc0>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	68db      	ldr	r3, [r3, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aaa2:	4b2b      	ldr	r3, [pc, #172]	; (800ab50 <prvSwitchTimerLists+0xc0>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	68db      	ldr	r3, [r3, #12]
 800aaa8:	68db      	ldr	r3, [r3, #12]
 800aaaa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	3304      	adds	r3, #4
 800aab0:	4618      	mov	r0, r3
 800aab2:	f7fd ffdb 	bl	8008a6c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	6a1b      	ldr	r3, [r3, #32]
 800aaba:	68f8      	ldr	r0, [r7, #12]
 800aabc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aac4:	f003 0304 	and.w	r3, r3, #4
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d02e      	beq.n	800ab2a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	699b      	ldr	r3, [r3, #24]
 800aad0:	693a      	ldr	r2, [r7, #16]
 800aad2:	4413      	add	r3, r2
 800aad4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800aad6:	68ba      	ldr	r2, [r7, #8]
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	429a      	cmp	r2, r3
 800aadc:	d90e      	bls.n	800aafc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	68ba      	ldr	r2, [r7, #8]
 800aae2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	68fa      	ldr	r2, [r7, #12]
 800aae8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aaea:	4b19      	ldr	r3, [pc, #100]	; (800ab50 <prvSwitchTimerLists+0xc0>)
 800aaec:	681a      	ldr	r2, [r3, #0]
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	3304      	adds	r3, #4
 800aaf2:	4619      	mov	r1, r3
 800aaf4:	4610      	mov	r0, r2
 800aaf6:	f7fd ff80 	bl	80089fa <vListInsert>
 800aafa:	e016      	b.n	800ab2a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aafc:	2300      	movs	r3, #0
 800aafe:	9300      	str	r3, [sp, #0]
 800ab00:	2300      	movs	r3, #0
 800ab02:	693a      	ldr	r2, [r7, #16]
 800ab04:	2100      	movs	r1, #0
 800ab06:	68f8      	ldr	r0, [r7, #12]
 800ab08:	f7ff fd60 	bl	800a5cc <xTimerGenericCommand>
 800ab0c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d10a      	bne.n	800ab2a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ab14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab18:	f383 8811 	msr	BASEPRI, r3
 800ab1c:	f3bf 8f6f 	isb	sy
 800ab20:	f3bf 8f4f 	dsb	sy
 800ab24:	603b      	str	r3, [r7, #0]
}
 800ab26:	bf00      	nop
 800ab28:	e7fe      	b.n	800ab28 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ab2a:	4b09      	ldr	r3, [pc, #36]	; (800ab50 <prvSwitchTimerLists+0xc0>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d1b1      	bne.n	800aa98 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ab34:	4b06      	ldr	r3, [pc, #24]	; (800ab50 <prvSwitchTimerLists+0xc0>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ab3a:	4b06      	ldr	r3, [pc, #24]	; (800ab54 <prvSwitchTimerLists+0xc4>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	4a04      	ldr	r2, [pc, #16]	; (800ab50 <prvSwitchTimerLists+0xc0>)
 800ab40:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ab42:	4a04      	ldr	r2, [pc, #16]	; (800ab54 <prvSwitchTimerLists+0xc4>)
 800ab44:	697b      	ldr	r3, [r7, #20]
 800ab46:	6013      	str	r3, [r2, #0]
}
 800ab48:	bf00      	nop
 800ab4a:	3718      	adds	r7, #24
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}
 800ab50:	20000e4c 	.word	0x20000e4c
 800ab54:	20000e50 	.word	0x20000e50

0800ab58 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b082      	sub	sp, #8
 800ab5c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ab5e:	f000 f989 	bl	800ae74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ab62:	4b15      	ldr	r3, [pc, #84]	; (800abb8 <prvCheckForValidListAndQueue+0x60>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d120      	bne.n	800abac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ab6a:	4814      	ldr	r0, [pc, #80]	; (800abbc <prvCheckForValidListAndQueue+0x64>)
 800ab6c:	f7fd fef4 	bl	8008958 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ab70:	4813      	ldr	r0, [pc, #76]	; (800abc0 <prvCheckForValidListAndQueue+0x68>)
 800ab72:	f7fd fef1 	bl	8008958 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ab76:	4b13      	ldr	r3, [pc, #76]	; (800abc4 <prvCheckForValidListAndQueue+0x6c>)
 800ab78:	4a10      	ldr	r2, [pc, #64]	; (800abbc <prvCheckForValidListAndQueue+0x64>)
 800ab7a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ab7c:	4b12      	ldr	r3, [pc, #72]	; (800abc8 <prvCheckForValidListAndQueue+0x70>)
 800ab7e:	4a10      	ldr	r2, [pc, #64]	; (800abc0 <prvCheckForValidListAndQueue+0x68>)
 800ab80:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ab82:	2300      	movs	r3, #0
 800ab84:	9300      	str	r3, [sp, #0]
 800ab86:	4b11      	ldr	r3, [pc, #68]	; (800abcc <prvCheckForValidListAndQueue+0x74>)
 800ab88:	4a11      	ldr	r2, [pc, #68]	; (800abd0 <prvCheckForValidListAndQueue+0x78>)
 800ab8a:	2110      	movs	r1, #16
 800ab8c:	200a      	movs	r0, #10
 800ab8e:	f7fd ffff 	bl	8008b90 <xQueueGenericCreateStatic>
 800ab92:	4603      	mov	r3, r0
 800ab94:	4a08      	ldr	r2, [pc, #32]	; (800abb8 <prvCheckForValidListAndQueue+0x60>)
 800ab96:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ab98:	4b07      	ldr	r3, [pc, #28]	; (800abb8 <prvCheckForValidListAndQueue+0x60>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d005      	beq.n	800abac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800aba0:	4b05      	ldr	r3, [pc, #20]	; (800abb8 <prvCheckForValidListAndQueue+0x60>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	490b      	ldr	r1, [pc, #44]	; (800abd4 <prvCheckForValidListAndQueue+0x7c>)
 800aba6:	4618      	mov	r0, r3
 800aba8:	f7fe fcd2 	bl	8009550 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800abac:	f000 f992 	bl	800aed4 <vPortExitCritical>
}
 800abb0:	bf00      	nop
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}
 800abb6:	bf00      	nop
 800abb8:	20000e54 	.word	0x20000e54
 800abbc:	20000e24 	.word	0x20000e24
 800abc0:	20000e38 	.word	0x20000e38
 800abc4:	20000e4c 	.word	0x20000e4c
 800abc8:	20000e50 	.word	0x20000e50
 800abcc:	20000f00 	.word	0x20000f00
 800abd0:	20000e60 	.word	0x20000e60
 800abd4:	0800bd94 	.word	0x0800bd94

0800abd8 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b086      	sub	sp, #24
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d10a      	bne.n	800ac00 <pvTimerGetTimerID+0x28>
	__asm volatile
 800abea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abee:	f383 8811 	msr	BASEPRI, r3
 800abf2:	f3bf 8f6f 	isb	sy
 800abf6:	f3bf 8f4f 	dsb	sy
 800abfa:	60fb      	str	r3, [r7, #12]
}
 800abfc:	bf00      	nop
 800abfe:	e7fe      	b.n	800abfe <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800ac00:	f000 f938 	bl	800ae74 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	69db      	ldr	r3, [r3, #28]
 800ac08:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800ac0a:	f000 f963 	bl	800aed4 <vPortExitCritical>

	return pvReturn;
 800ac0e:	693b      	ldr	r3, [r7, #16]
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	3718      	adds	r7, #24
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}

0800ac18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b085      	sub	sp, #20
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	60f8      	str	r0, [r7, #12]
 800ac20:	60b9      	str	r1, [r7, #8]
 800ac22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	3b04      	subs	r3, #4
 800ac28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ac30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	3b04      	subs	r3, #4
 800ac36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	f023 0201 	bic.w	r2, r3, #1
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	3b04      	subs	r3, #4
 800ac46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ac48:	4a0c      	ldr	r2, [pc, #48]	; (800ac7c <pxPortInitialiseStack+0x64>)
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	3b14      	subs	r3, #20
 800ac52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ac54:	687a      	ldr	r2, [r7, #4]
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	3b04      	subs	r3, #4
 800ac5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	f06f 0202 	mvn.w	r2, #2
 800ac66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	3b20      	subs	r3, #32
 800ac6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3714      	adds	r7, #20
 800ac74:	46bd      	mov	sp, r7
 800ac76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7a:	4770      	bx	lr
 800ac7c:	0800ac81 	.word	0x0800ac81

0800ac80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ac80:	b480      	push	{r7}
 800ac82:	b085      	sub	sp, #20
 800ac84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ac86:	2300      	movs	r3, #0
 800ac88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ac8a:	4b12      	ldr	r3, [pc, #72]	; (800acd4 <prvTaskExitError+0x54>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac92:	d00a      	beq.n	800acaa <prvTaskExitError+0x2a>
	__asm volatile
 800ac94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac98:	f383 8811 	msr	BASEPRI, r3
 800ac9c:	f3bf 8f6f 	isb	sy
 800aca0:	f3bf 8f4f 	dsb	sy
 800aca4:	60fb      	str	r3, [r7, #12]
}
 800aca6:	bf00      	nop
 800aca8:	e7fe      	b.n	800aca8 <prvTaskExitError+0x28>
	__asm volatile
 800acaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acae:	f383 8811 	msr	BASEPRI, r3
 800acb2:	f3bf 8f6f 	isb	sy
 800acb6:	f3bf 8f4f 	dsb	sy
 800acba:	60bb      	str	r3, [r7, #8]
}
 800acbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800acbe:	bf00      	nop
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d0fc      	beq.n	800acc0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800acc6:	bf00      	nop
 800acc8:	bf00      	nop
 800acca:	3714      	adds	r7, #20
 800accc:	46bd      	mov	sp, r7
 800acce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd2:	4770      	bx	lr
 800acd4:	2000002c 	.word	0x2000002c
	...

0800ace0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ace0:	4b07      	ldr	r3, [pc, #28]	; (800ad00 <pxCurrentTCBConst2>)
 800ace2:	6819      	ldr	r1, [r3, #0]
 800ace4:	6808      	ldr	r0, [r1, #0]
 800ace6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acea:	f380 8809 	msr	PSP, r0
 800acee:	f3bf 8f6f 	isb	sy
 800acf2:	f04f 0000 	mov.w	r0, #0
 800acf6:	f380 8811 	msr	BASEPRI, r0
 800acfa:	4770      	bx	lr
 800acfc:	f3af 8000 	nop.w

0800ad00 <pxCurrentTCBConst2>:
 800ad00:	20000924 	.word	0x20000924
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ad04:	bf00      	nop
 800ad06:	bf00      	nop

0800ad08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ad08:	4808      	ldr	r0, [pc, #32]	; (800ad2c <prvPortStartFirstTask+0x24>)
 800ad0a:	6800      	ldr	r0, [r0, #0]
 800ad0c:	6800      	ldr	r0, [r0, #0]
 800ad0e:	f380 8808 	msr	MSP, r0
 800ad12:	f04f 0000 	mov.w	r0, #0
 800ad16:	f380 8814 	msr	CONTROL, r0
 800ad1a:	b662      	cpsie	i
 800ad1c:	b661      	cpsie	f
 800ad1e:	f3bf 8f4f 	dsb	sy
 800ad22:	f3bf 8f6f 	isb	sy
 800ad26:	df00      	svc	0
 800ad28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ad2a:	bf00      	nop
 800ad2c:	e000ed08 	.word	0xe000ed08

0800ad30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b086      	sub	sp, #24
 800ad34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ad36:	4b46      	ldr	r3, [pc, #280]	; (800ae50 <xPortStartScheduler+0x120>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	4a46      	ldr	r2, [pc, #280]	; (800ae54 <xPortStartScheduler+0x124>)
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	d10a      	bne.n	800ad56 <xPortStartScheduler+0x26>
	__asm volatile
 800ad40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad44:	f383 8811 	msr	BASEPRI, r3
 800ad48:	f3bf 8f6f 	isb	sy
 800ad4c:	f3bf 8f4f 	dsb	sy
 800ad50:	613b      	str	r3, [r7, #16]
}
 800ad52:	bf00      	nop
 800ad54:	e7fe      	b.n	800ad54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ad56:	4b3e      	ldr	r3, [pc, #248]	; (800ae50 <xPortStartScheduler+0x120>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4a3f      	ldr	r2, [pc, #252]	; (800ae58 <xPortStartScheduler+0x128>)
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	d10a      	bne.n	800ad76 <xPortStartScheduler+0x46>
	__asm volatile
 800ad60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad64:	f383 8811 	msr	BASEPRI, r3
 800ad68:	f3bf 8f6f 	isb	sy
 800ad6c:	f3bf 8f4f 	dsb	sy
 800ad70:	60fb      	str	r3, [r7, #12]
}
 800ad72:	bf00      	nop
 800ad74:	e7fe      	b.n	800ad74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ad76:	4b39      	ldr	r3, [pc, #228]	; (800ae5c <xPortStartScheduler+0x12c>)
 800ad78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	781b      	ldrb	r3, [r3, #0]
 800ad7e:	b2db      	uxtb	r3, r3
 800ad80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	22ff      	movs	r2, #255	; 0xff
 800ad86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	781b      	ldrb	r3, [r3, #0]
 800ad8c:	b2db      	uxtb	r3, r3
 800ad8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ad90:	78fb      	ldrb	r3, [r7, #3]
 800ad92:	b2db      	uxtb	r3, r3
 800ad94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ad98:	b2da      	uxtb	r2, r3
 800ad9a:	4b31      	ldr	r3, [pc, #196]	; (800ae60 <xPortStartScheduler+0x130>)
 800ad9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ad9e:	4b31      	ldr	r3, [pc, #196]	; (800ae64 <xPortStartScheduler+0x134>)
 800ada0:	2207      	movs	r2, #7
 800ada2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ada4:	e009      	b.n	800adba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ada6:	4b2f      	ldr	r3, [pc, #188]	; (800ae64 <xPortStartScheduler+0x134>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	3b01      	subs	r3, #1
 800adac:	4a2d      	ldr	r2, [pc, #180]	; (800ae64 <xPortStartScheduler+0x134>)
 800adae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800adb0:	78fb      	ldrb	r3, [r7, #3]
 800adb2:	b2db      	uxtb	r3, r3
 800adb4:	005b      	lsls	r3, r3, #1
 800adb6:	b2db      	uxtb	r3, r3
 800adb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800adba:	78fb      	ldrb	r3, [r7, #3]
 800adbc:	b2db      	uxtb	r3, r3
 800adbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adc2:	2b80      	cmp	r3, #128	; 0x80
 800adc4:	d0ef      	beq.n	800ada6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800adc6:	4b27      	ldr	r3, [pc, #156]	; (800ae64 <xPortStartScheduler+0x134>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f1c3 0307 	rsb	r3, r3, #7
 800adce:	2b04      	cmp	r3, #4
 800add0:	d00a      	beq.n	800ade8 <xPortStartScheduler+0xb8>
	__asm volatile
 800add2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add6:	f383 8811 	msr	BASEPRI, r3
 800adda:	f3bf 8f6f 	isb	sy
 800adde:	f3bf 8f4f 	dsb	sy
 800ade2:	60bb      	str	r3, [r7, #8]
}
 800ade4:	bf00      	nop
 800ade6:	e7fe      	b.n	800ade6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ade8:	4b1e      	ldr	r3, [pc, #120]	; (800ae64 <xPortStartScheduler+0x134>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	021b      	lsls	r3, r3, #8
 800adee:	4a1d      	ldr	r2, [pc, #116]	; (800ae64 <xPortStartScheduler+0x134>)
 800adf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800adf2:	4b1c      	ldr	r3, [pc, #112]	; (800ae64 <xPortStartScheduler+0x134>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800adfa:	4a1a      	ldr	r2, [pc, #104]	; (800ae64 <xPortStartScheduler+0x134>)
 800adfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	b2da      	uxtb	r2, r3
 800ae02:	697b      	ldr	r3, [r7, #20]
 800ae04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ae06:	4b18      	ldr	r3, [pc, #96]	; (800ae68 <xPortStartScheduler+0x138>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	4a17      	ldr	r2, [pc, #92]	; (800ae68 <xPortStartScheduler+0x138>)
 800ae0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ae10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ae12:	4b15      	ldr	r3, [pc, #84]	; (800ae68 <xPortStartScheduler+0x138>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	4a14      	ldr	r2, [pc, #80]	; (800ae68 <xPortStartScheduler+0x138>)
 800ae18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ae1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ae1e:	f000 f8dd 	bl	800afdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ae22:	4b12      	ldr	r3, [pc, #72]	; (800ae6c <xPortStartScheduler+0x13c>)
 800ae24:	2200      	movs	r2, #0
 800ae26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ae28:	f000 f8fc 	bl	800b024 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ae2c:	4b10      	ldr	r3, [pc, #64]	; (800ae70 <xPortStartScheduler+0x140>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	4a0f      	ldr	r2, [pc, #60]	; (800ae70 <xPortStartScheduler+0x140>)
 800ae32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ae36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ae38:	f7ff ff66 	bl	800ad08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ae3c:	f7fe ff98 	bl	8009d70 <vTaskSwitchContext>
	prvTaskExitError();
 800ae40:	f7ff ff1e 	bl	800ac80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ae44:	2300      	movs	r3, #0
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3718      	adds	r7, #24
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}
 800ae4e:	bf00      	nop
 800ae50:	e000ed00 	.word	0xe000ed00
 800ae54:	410fc271 	.word	0x410fc271
 800ae58:	410fc270 	.word	0x410fc270
 800ae5c:	e000e400 	.word	0xe000e400
 800ae60:	20000f50 	.word	0x20000f50
 800ae64:	20000f54 	.word	0x20000f54
 800ae68:	e000ed20 	.word	0xe000ed20
 800ae6c:	2000002c 	.word	0x2000002c
 800ae70:	e000ef34 	.word	0xe000ef34

0800ae74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ae74:	b480      	push	{r7}
 800ae76:	b083      	sub	sp, #12
 800ae78:	af00      	add	r7, sp, #0
	__asm volatile
 800ae7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae7e:	f383 8811 	msr	BASEPRI, r3
 800ae82:	f3bf 8f6f 	isb	sy
 800ae86:	f3bf 8f4f 	dsb	sy
 800ae8a:	607b      	str	r3, [r7, #4]
}
 800ae8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ae8e:	4b0f      	ldr	r3, [pc, #60]	; (800aecc <vPortEnterCritical+0x58>)
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	3301      	adds	r3, #1
 800ae94:	4a0d      	ldr	r2, [pc, #52]	; (800aecc <vPortEnterCritical+0x58>)
 800ae96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ae98:	4b0c      	ldr	r3, [pc, #48]	; (800aecc <vPortEnterCritical+0x58>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	2b01      	cmp	r3, #1
 800ae9e:	d10f      	bne.n	800aec0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aea0:	4b0b      	ldr	r3, [pc, #44]	; (800aed0 <vPortEnterCritical+0x5c>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	b2db      	uxtb	r3, r3
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d00a      	beq.n	800aec0 <vPortEnterCritical+0x4c>
	__asm volatile
 800aeaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeae:	f383 8811 	msr	BASEPRI, r3
 800aeb2:	f3bf 8f6f 	isb	sy
 800aeb6:	f3bf 8f4f 	dsb	sy
 800aeba:	603b      	str	r3, [r7, #0]
}
 800aebc:	bf00      	nop
 800aebe:	e7fe      	b.n	800aebe <vPortEnterCritical+0x4a>
	}
}
 800aec0:	bf00      	nop
 800aec2:	370c      	adds	r7, #12
 800aec4:	46bd      	mov	sp, r7
 800aec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeca:	4770      	bx	lr
 800aecc:	2000002c 	.word	0x2000002c
 800aed0:	e000ed04 	.word	0xe000ed04

0800aed4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aed4:	b480      	push	{r7}
 800aed6:	b083      	sub	sp, #12
 800aed8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aeda:	4b12      	ldr	r3, [pc, #72]	; (800af24 <vPortExitCritical+0x50>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d10a      	bne.n	800aef8 <vPortExitCritical+0x24>
	__asm volatile
 800aee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aee6:	f383 8811 	msr	BASEPRI, r3
 800aeea:	f3bf 8f6f 	isb	sy
 800aeee:	f3bf 8f4f 	dsb	sy
 800aef2:	607b      	str	r3, [r7, #4]
}
 800aef4:	bf00      	nop
 800aef6:	e7fe      	b.n	800aef6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800aef8:	4b0a      	ldr	r3, [pc, #40]	; (800af24 <vPortExitCritical+0x50>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	3b01      	subs	r3, #1
 800aefe:	4a09      	ldr	r2, [pc, #36]	; (800af24 <vPortExitCritical+0x50>)
 800af00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800af02:	4b08      	ldr	r3, [pc, #32]	; (800af24 <vPortExitCritical+0x50>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d105      	bne.n	800af16 <vPortExitCritical+0x42>
 800af0a:	2300      	movs	r3, #0
 800af0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	f383 8811 	msr	BASEPRI, r3
}
 800af14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800af16:	bf00      	nop
 800af18:	370c      	adds	r7, #12
 800af1a:	46bd      	mov	sp, r7
 800af1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af20:	4770      	bx	lr
 800af22:	bf00      	nop
 800af24:	2000002c 	.word	0x2000002c
	...

0800af30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800af30:	f3ef 8009 	mrs	r0, PSP
 800af34:	f3bf 8f6f 	isb	sy
 800af38:	4b15      	ldr	r3, [pc, #84]	; (800af90 <pxCurrentTCBConst>)
 800af3a:	681a      	ldr	r2, [r3, #0]
 800af3c:	f01e 0f10 	tst.w	lr, #16
 800af40:	bf08      	it	eq
 800af42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800af46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af4a:	6010      	str	r0, [r2, #0]
 800af4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800af50:	f04f 0050 	mov.w	r0, #80	; 0x50
 800af54:	f380 8811 	msr	BASEPRI, r0
 800af58:	f3bf 8f4f 	dsb	sy
 800af5c:	f3bf 8f6f 	isb	sy
 800af60:	f7fe ff06 	bl	8009d70 <vTaskSwitchContext>
 800af64:	f04f 0000 	mov.w	r0, #0
 800af68:	f380 8811 	msr	BASEPRI, r0
 800af6c:	bc09      	pop	{r0, r3}
 800af6e:	6819      	ldr	r1, [r3, #0]
 800af70:	6808      	ldr	r0, [r1, #0]
 800af72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af76:	f01e 0f10 	tst.w	lr, #16
 800af7a:	bf08      	it	eq
 800af7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800af80:	f380 8809 	msr	PSP, r0
 800af84:	f3bf 8f6f 	isb	sy
 800af88:	4770      	bx	lr
 800af8a:	bf00      	nop
 800af8c:	f3af 8000 	nop.w

0800af90 <pxCurrentTCBConst>:
 800af90:	20000924 	.word	0x20000924
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800af94:	bf00      	nop
 800af96:	bf00      	nop

0800af98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b082      	sub	sp, #8
 800af9c:	af00      	add	r7, sp, #0
	__asm volatile
 800af9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afa2:	f383 8811 	msr	BASEPRI, r3
 800afa6:	f3bf 8f6f 	isb	sy
 800afaa:	f3bf 8f4f 	dsb	sy
 800afae:	607b      	str	r3, [r7, #4]
}
 800afb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800afb2:	f7fe fe23 	bl	8009bfc <xTaskIncrementTick>
 800afb6:	4603      	mov	r3, r0
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d003      	beq.n	800afc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800afbc:	4b06      	ldr	r3, [pc, #24]	; (800afd8 <xPortSysTickHandler+0x40>)
 800afbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afc2:	601a      	str	r2, [r3, #0]
 800afc4:	2300      	movs	r3, #0
 800afc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	f383 8811 	msr	BASEPRI, r3
}
 800afce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800afd0:	bf00      	nop
 800afd2:	3708      	adds	r7, #8
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}
 800afd8:	e000ed04 	.word	0xe000ed04

0800afdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800afdc:	b480      	push	{r7}
 800afde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800afe0:	4b0b      	ldr	r3, [pc, #44]	; (800b010 <vPortSetupTimerInterrupt+0x34>)
 800afe2:	2200      	movs	r2, #0
 800afe4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800afe6:	4b0b      	ldr	r3, [pc, #44]	; (800b014 <vPortSetupTimerInterrupt+0x38>)
 800afe8:	2200      	movs	r2, #0
 800afea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800afec:	4b0a      	ldr	r3, [pc, #40]	; (800b018 <vPortSetupTimerInterrupt+0x3c>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	4a0a      	ldr	r2, [pc, #40]	; (800b01c <vPortSetupTimerInterrupt+0x40>)
 800aff2:	fba2 2303 	umull	r2, r3, r2, r3
 800aff6:	099b      	lsrs	r3, r3, #6
 800aff8:	4a09      	ldr	r2, [pc, #36]	; (800b020 <vPortSetupTimerInterrupt+0x44>)
 800affa:	3b01      	subs	r3, #1
 800affc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800affe:	4b04      	ldr	r3, [pc, #16]	; (800b010 <vPortSetupTimerInterrupt+0x34>)
 800b000:	2207      	movs	r2, #7
 800b002:	601a      	str	r2, [r3, #0]
}
 800b004:	bf00      	nop
 800b006:	46bd      	mov	sp, r7
 800b008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00c:	4770      	bx	lr
 800b00e:	bf00      	nop
 800b010:	e000e010 	.word	0xe000e010
 800b014:	e000e018 	.word	0xe000e018
 800b018:	20000000 	.word	0x20000000
 800b01c:	10624dd3 	.word	0x10624dd3
 800b020:	e000e014 	.word	0xe000e014

0800b024 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b024:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b034 <vPortEnableVFP+0x10>
 800b028:	6801      	ldr	r1, [r0, #0]
 800b02a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b02e:	6001      	str	r1, [r0, #0]
 800b030:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b032:	bf00      	nop
 800b034:	e000ed88 	.word	0xe000ed88

0800b038 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b038:	b480      	push	{r7}
 800b03a:	b085      	sub	sp, #20
 800b03c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b03e:	f3ef 8305 	mrs	r3, IPSR
 800b042:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	2b0f      	cmp	r3, #15
 800b048:	d914      	bls.n	800b074 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b04a:	4a17      	ldr	r2, [pc, #92]	; (800b0a8 <vPortValidateInterruptPriority+0x70>)
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	4413      	add	r3, r2
 800b050:	781b      	ldrb	r3, [r3, #0]
 800b052:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b054:	4b15      	ldr	r3, [pc, #84]	; (800b0ac <vPortValidateInterruptPriority+0x74>)
 800b056:	781b      	ldrb	r3, [r3, #0]
 800b058:	7afa      	ldrb	r2, [r7, #11]
 800b05a:	429a      	cmp	r2, r3
 800b05c:	d20a      	bcs.n	800b074 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b062:	f383 8811 	msr	BASEPRI, r3
 800b066:	f3bf 8f6f 	isb	sy
 800b06a:	f3bf 8f4f 	dsb	sy
 800b06e:	607b      	str	r3, [r7, #4]
}
 800b070:	bf00      	nop
 800b072:	e7fe      	b.n	800b072 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b074:	4b0e      	ldr	r3, [pc, #56]	; (800b0b0 <vPortValidateInterruptPriority+0x78>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b07c:	4b0d      	ldr	r3, [pc, #52]	; (800b0b4 <vPortValidateInterruptPriority+0x7c>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	429a      	cmp	r2, r3
 800b082:	d90a      	bls.n	800b09a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b084:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b088:	f383 8811 	msr	BASEPRI, r3
 800b08c:	f3bf 8f6f 	isb	sy
 800b090:	f3bf 8f4f 	dsb	sy
 800b094:	603b      	str	r3, [r7, #0]
}
 800b096:	bf00      	nop
 800b098:	e7fe      	b.n	800b098 <vPortValidateInterruptPriority+0x60>
	}
 800b09a:	bf00      	nop
 800b09c:	3714      	adds	r7, #20
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a4:	4770      	bx	lr
 800b0a6:	bf00      	nop
 800b0a8:	e000e3f0 	.word	0xe000e3f0
 800b0ac:	20000f50 	.word	0x20000f50
 800b0b0:	e000ed0c 	.word	0xe000ed0c
 800b0b4:	20000f54 	.word	0x20000f54

0800b0b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b08a      	sub	sp, #40	; 0x28
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b0c4:	f7fe fcde 	bl	8009a84 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b0c8:	4b5b      	ldr	r3, [pc, #364]	; (800b238 <pvPortMalloc+0x180>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d101      	bne.n	800b0d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b0d0:	f000 f920 	bl	800b314 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b0d4:	4b59      	ldr	r3, [pc, #356]	; (800b23c <pvPortMalloc+0x184>)
 800b0d6:	681a      	ldr	r2, [r3, #0]
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	4013      	ands	r3, r2
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	f040 8093 	bne.w	800b208 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d01d      	beq.n	800b124 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b0e8:	2208      	movs	r2, #8
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	4413      	add	r3, r2
 800b0ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f003 0307 	and.w	r3, r3, #7
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d014      	beq.n	800b124 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f023 0307 	bic.w	r3, r3, #7
 800b100:	3308      	adds	r3, #8
 800b102:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f003 0307 	and.w	r3, r3, #7
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d00a      	beq.n	800b124 <pvPortMalloc+0x6c>
	__asm volatile
 800b10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b112:	f383 8811 	msr	BASEPRI, r3
 800b116:	f3bf 8f6f 	isb	sy
 800b11a:	f3bf 8f4f 	dsb	sy
 800b11e:	617b      	str	r3, [r7, #20]
}
 800b120:	bf00      	nop
 800b122:	e7fe      	b.n	800b122 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d06e      	beq.n	800b208 <pvPortMalloc+0x150>
 800b12a:	4b45      	ldr	r3, [pc, #276]	; (800b240 <pvPortMalloc+0x188>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	687a      	ldr	r2, [r7, #4]
 800b130:	429a      	cmp	r2, r3
 800b132:	d869      	bhi.n	800b208 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b134:	4b43      	ldr	r3, [pc, #268]	; (800b244 <pvPortMalloc+0x18c>)
 800b136:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b138:	4b42      	ldr	r3, [pc, #264]	; (800b244 <pvPortMalloc+0x18c>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b13e:	e004      	b.n	800b14a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b142:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b14c:	685b      	ldr	r3, [r3, #4]
 800b14e:	687a      	ldr	r2, [r7, #4]
 800b150:	429a      	cmp	r2, r3
 800b152:	d903      	bls.n	800b15c <pvPortMalloc+0xa4>
 800b154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d1f1      	bne.n	800b140 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b15c:	4b36      	ldr	r3, [pc, #216]	; (800b238 <pvPortMalloc+0x180>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b162:	429a      	cmp	r2, r3
 800b164:	d050      	beq.n	800b208 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b166:	6a3b      	ldr	r3, [r7, #32]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	2208      	movs	r2, #8
 800b16c:	4413      	add	r3, r2
 800b16e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b172:	681a      	ldr	r2, [r3, #0]
 800b174:	6a3b      	ldr	r3, [r7, #32]
 800b176:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b17a:	685a      	ldr	r2, [r3, #4]
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	1ad2      	subs	r2, r2, r3
 800b180:	2308      	movs	r3, #8
 800b182:	005b      	lsls	r3, r3, #1
 800b184:	429a      	cmp	r2, r3
 800b186:	d91f      	bls.n	800b1c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	4413      	add	r3, r2
 800b18e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b190:	69bb      	ldr	r3, [r7, #24]
 800b192:	f003 0307 	and.w	r3, r3, #7
 800b196:	2b00      	cmp	r3, #0
 800b198:	d00a      	beq.n	800b1b0 <pvPortMalloc+0xf8>
	__asm volatile
 800b19a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b19e:	f383 8811 	msr	BASEPRI, r3
 800b1a2:	f3bf 8f6f 	isb	sy
 800b1a6:	f3bf 8f4f 	dsb	sy
 800b1aa:	613b      	str	r3, [r7, #16]
}
 800b1ac:	bf00      	nop
 800b1ae:	e7fe      	b.n	800b1ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b2:	685a      	ldr	r2, [r3, #4]
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	1ad2      	subs	r2, r2, r3
 800b1b8:	69bb      	ldr	r3, [r7, #24]
 800b1ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1be:	687a      	ldr	r2, [r7, #4]
 800b1c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b1c2:	69b8      	ldr	r0, [r7, #24]
 800b1c4:	f000 f908 	bl	800b3d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b1c8:	4b1d      	ldr	r3, [pc, #116]	; (800b240 <pvPortMalloc+0x188>)
 800b1ca:	681a      	ldr	r2, [r3, #0]
 800b1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ce:	685b      	ldr	r3, [r3, #4]
 800b1d0:	1ad3      	subs	r3, r2, r3
 800b1d2:	4a1b      	ldr	r2, [pc, #108]	; (800b240 <pvPortMalloc+0x188>)
 800b1d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b1d6:	4b1a      	ldr	r3, [pc, #104]	; (800b240 <pvPortMalloc+0x188>)
 800b1d8:	681a      	ldr	r2, [r3, #0]
 800b1da:	4b1b      	ldr	r3, [pc, #108]	; (800b248 <pvPortMalloc+0x190>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	429a      	cmp	r2, r3
 800b1e0:	d203      	bcs.n	800b1ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b1e2:	4b17      	ldr	r3, [pc, #92]	; (800b240 <pvPortMalloc+0x188>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	4a18      	ldr	r2, [pc, #96]	; (800b248 <pvPortMalloc+0x190>)
 800b1e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ec:	685a      	ldr	r2, [r3, #4]
 800b1ee:	4b13      	ldr	r3, [pc, #76]	; (800b23c <pvPortMalloc+0x184>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	431a      	orrs	r2, r3
 800b1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b1fe:	4b13      	ldr	r3, [pc, #76]	; (800b24c <pvPortMalloc+0x194>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	3301      	adds	r3, #1
 800b204:	4a11      	ldr	r2, [pc, #68]	; (800b24c <pvPortMalloc+0x194>)
 800b206:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b208:	f7fe fc4a 	bl	8009aa0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b20c:	69fb      	ldr	r3, [r7, #28]
 800b20e:	f003 0307 	and.w	r3, r3, #7
 800b212:	2b00      	cmp	r3, #0
 800b214:	d00a      	beq.n	800b22c <pvPortMalloc+0x174>
	__asm volatile
 800b216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b21a:	f383 8811 	msr	BASEPRI, r3
 800b21e:	f3bf 8f6f 	isb	sy
 800b222:	f3bf 8f4f 	dsb	sy
 800b226:	60fb      	str	r3, [r7, #12]
}
 800b228:	bf00      	nop
 800b22a:	e7fe      	b.n	800b22a <pvPortMalloc+0x172>
	return pvReturn;
 800b22c:	69fb      	ldr	r3, [r7, #28]
}
 800b22e:	4618      	mov	r0, r3
 800b230:	3728      	adds	r7, #40	; 0x28
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}
 800b236:	bf00      	nop
 800b238:	20004b60 	.word	0x20004b60
 800b23c:	20004b74 	.word	0x20004b74
 800b240:	20004b64 	.word	0x20004b64
 800b244:	20004b58 	.word	0x20004b58
 800b248:	20004b68 	.word	0x20004b68
 800b24c:	20004b6c 	.word	0x20004b6c

0800b250 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b086      	sub	sp, #24
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d04d      	beq.n	800b2fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b262:	2308      	movs	r3, #8
 800b264:	425b      	negs	r3, r3
 800b266:	697a      	ldr	r2, [r7, #20]
 800b268:	4413      	add	r3, r2
 800b26a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b26c:	697b      	ldr	r3, [r7, #20]
 800b26e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b270:	693b      	ldr	r3, [r7, #16]
 800b272:	685a      	ldr	r2, [r3, #4]
 800b274:	4b24      	ldr	r3, [pc, #144]	; (800b308 <vPortFree+0xb8>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	4013      	ands	r3, r2
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d10a      	bne.n	800b294 <vPortFree+0x44>
	__asm volatile
 800b27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b282:	f383 8811 	msr	BASEPRI, r3
 800b286:	f3bf 8f6f 	isb	sy
 800b28a:	f3bf 8f4f 	dsb	sy
 800b28e:	60fb      	str	r3, [r7, #12]
}
 800b290:	bf00      	nop
 800b292:	e7fe      	b.n	800b292 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b294:	693b      	ldr	r3, [r7, #16]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d00a      	beq.n	800b2b2 <vPortFree+0x62>
	__asm volatile
 800b29c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2a0:	f383 8811 	msr	BASEPRI, r3
 800b2a4:	f3bf 8f6f 	isb	sy
 800b2a8:	f3bf 8f4f 	dsb	sy
 800b2ac:	60bb      	str	r3, [r7, #8]
}
 800b2ae:	bf00      	nop
 800b2b0:	e7fe      	b.n	800b2b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	685a      	ldr	r2, [r3, #4]
 800b2b6:	4b14      	ldr	r3, [pc, #80]	; (800b308 <vPortFree+0xb8>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	4013      	ands	r3, r2
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d01e      	beq.n	800b2fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b2c0:	693b      	ldr	r3, [r7, #16]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d11a      	bne.n	800b2fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	685a      	ldr	r2, [r3, #4]
 800b2cc:	4b0e      	ldr	r3, [pc, #56]	; (800b308 <vPortFree+0xb8>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	43db      	mvns	r3, r3
 800b2d2:	401a      	ands	r2, r3
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b2d8:	f7fe fbd4 	bl	8009a84 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b2dc:	693b      	ldr	r3, [r7, #16]
 800b2de:	685a      	ldr	r2, [r3, #4]
 800b2e0:	4b0a      	ldr	r3, [pc, #40]	; (800b30c <vPortFree+0xbc>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	4413      	add	r3, r2
 800b2e6:	4a09      	ldr	r2, [pc, #36]	; (800b30c <vPortFree+0xbc>)
 800b2e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b2ea:	6938      	ldr	r0, [r7, #16]
 800b2ec:	f000 f874 	bl	800b3d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b2f0:	4b07      	ldr	r3, [pc, #28]	; (800b310 <vPortFree+0xc0>)
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	3301      	adds	r3, #1
 800b2f6:	4a06      	ldr	r2, [pc, #24]	; (800b310 <vPortFree+0xc0>)
 800b2f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b2fa:	f7fe fbd1 	bl	8009aa0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b2fe:	bf00      	nop
 800b300:	3718      	adds	r7, #24
 800b302:	46bd      	mov	sp, r7
 800b304:	bd80      	pop	{r7, pc}
 800b306:	bf00      	nop
 800b308:	20004b74 	.word	0x20004b74
 800b30c:	20004b64 	.word	0x20004b64
 800b310:	20004b70 	.word	0x20004b70

0800b314 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b314:	b480      	push	{r7}
 800b316:	b085      	sub	sp, #20
 800b318:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b31a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b31e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b320:	4b27      	ldr	r3, [pc, #156]	; (800b3c0 <prvHeapInit+0xac>)
 800b322:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	f003 0307 	and.w	r3, r3, #7
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d00c      	beq.n	800b348 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	3307      	adds	r3, #7
 800b332:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	f023 0307 	bic.w	r3, r3, #7
 800b33a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b33c:	68ba      	ldr	r2, [r7, #8]
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	1ad3      	subs	r3, r2, r3
 800b342:	4a1f      	ldr	r2, [pc, #124]	; (800b3c0 <prvHeapInit+0xac>)
 800b344:	4413      	add	r3, r2
 800b346:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b34c:	4a1d      	ldr	r2, [pc, #116]	; (800b3c4 <prvHeapInit+0xb0>)
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b352:	4b1c      	ldr	r3, [pc, #112]	; (800b3c4 <prvHeapInit+0xb0>)
 800b354:	2200      	movs	r2, #0
 800b356:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	68ba      	ldr	r2, [r7, #8]
 800b35c:	4413      	add	r3, r2
 800b35e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b360:	2208      	movs	r2, #8
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	1a9b      	subs	r3, r3, r2
 800b366:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	f023 0307 	bic.w	r3, r3, #7
 800b36e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	4a15      	ldr	r2, [pc, #84]	; (800b3c8 <prvHeapInit+0xb4>)
 800b374:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b376:	4b14      	ldr	r3, [pc, #80]	; (800b3c8 <prvHeapInit+0xb4>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	2200      	movs	r2, #0
 800b37c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b37e:	4b12      	ldr	r3, [pc, #72]	; (800b3c8 <prvHeapInit+0xb4>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	2200      	movs	r2, #0
 800b384:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	68fa      	ldr	r2, [r7, #12]
 800b38e:	1ad2      	subs	r2, r2, r3
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b394:	4b0c      	ldr	r3, [pc, #48]	; (800b3c8 <prvHeapInit+0xb4>)
 800b396:	681a      	ldr	r2, [r3, #0]
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	685b      	ldr	r3, [r3, #4]
 800b3a0:	4a0a      	ldr	r2, [pc, #40]	; (800b3cc <prvHeapInit+0xb8>)
 800b3a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	685b      	ldr	r3, [r3, #4]
 800b3a8:	4a09      	ldr	r2, [pc, #36]	; (800b3d0 <prvHeapInit+0xbc>)
 800b3aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b3ac:	4b09      	ldr	r3, [pc, #36]	; (800b3d4 <prvHeapInit+0xc0>)
 800b3ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b3b2:	601a      	str	r2, [r3, #0]
}
 800b3b4:	bf00      	nop
 800b3b6:	3714      	adds	r7, #20
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3be:	4770      	bx	lr
 800b3c0:	20000f58 	.word	0x20000f58
 800b3c4:	20004b58 	.word	0x20004b58
 800b3c8:	20004b60 	.word	0x20004b60
 800b3cc:	20004b68 	.word	0x20004b68
 800b3d0:	20004b64 	.word	0x20004b64
 800b3d4:	20004b74 	.word	0x20004b74

0800b3d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b085      	sub	sp, #20
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b3e0:	4b28      	ldr	r3, [pc, #160]	; (800b484 <prvInsertBlockIntoFreeList+0xac>)
 800b3e2:	60fb      	str	r3, [r7, #12]
 800b3e4:	e002      	b.n	800b3ec <prvInsertBlockIntoFreeList+0x14>
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	60fb      	str	r3, [r7, #12]
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	687a      	ldr	r2, [r7, #4]
 800b3f2:	429a      	cmp	r2, r3
 800b3f4:	d8f7      	bhi.n	800b3e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	685b      	ldr	r3, [r3, #4]
 800b3fe:	68ba      	ldr	r2, [r7, #8]
 800b400:	4413      	add	r3, r2
 800b402:	687a      	ldr	r2, [r7, #4]
 800b404:	429a      	cmp	r2, r3
 800b406:	d108      	bne.n	800b41a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	685a      	ldr	r2, [r3, #4]
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	685b      	ldr	r3, [r3, #4]
 800b410:	441a      	add	r2, r3
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	685b      	ldr	r3, [r3, #4]
 800b422:	68ba      	ldr	r2, [r7, #8]
 800b424:	441a      	add	r2, r3
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	429a      	cmp	r2, r3
 800b42c:	d118      	bne.n	800b460 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	681a      	ldr	r2, [r3, #0]
 800b432:	4b15      	ldr	r3, [pc, #84]	; (800b488 <prvInsertBlockIntoFreeList+0xb0>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	429a      	cmp	r2, r3
 800b438:	d00d      	beq.n	800b456 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	685a      	ldr	r2, [r3, #4]
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	685b      	ldr	r3, [r3, #4]
 800b444:	441a      	add	r2, r3
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	681a      	ldr	r2, [r3, #0]
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	601a      	str	r2, [r3, #0]
 800b454:	e008      	b.n	800b468 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b456:	4b0c      	ldr	r3, [pc, #48]	; (800b488 <prvInsertBlockIntoFreeList+0xb0>)
 800b458:	681a      	ldr	r2, [r3, #0]
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	601a      	str	r2, [r3, #0]
 800b45e:	e003      	b.n	800b468 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	681a      	ldr	r2, [r3, #0]
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b468:	68fa      	ldr	r2, [r7, #12]
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	429a      	cmp	r2, r3
 800b46e:	d002      	beq.n	800b476 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	687a      	ldr	r2, [r7, #4]
 800b474:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b476:	bf00      	nop
 800b478:	3714      	adds	r7, #20
 800b47a:	46bd      	mov	sp, r7
 800b47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b480:	4770      	bx	lr
 800b482:	bf00      	nop
 800b484:	20004b58 	.word	0x20004b58
 800b488:	20004b60 	.word	0x20004b60

0800b48c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b490:	2201      	movs	r2, #1
 800b492:	490e      	ldr	r1, [pc, #56]	; (800b4cc <MX_USB_HOST_Init+0x40>)
 800b494:	480e      	ldr	r0, [pc, #56]	; (800b4d0 <MX_USB_HOST_Init+0x44>)
 800b496:	f7fb f88f 	bl	80065b8 <USBH_Init>
 800b49a:	4603      	mov	r3, r0
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d001      	beq.n	800b4a4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b4a0:	f7f5 fda4 	bl	8000fec <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b4a4:	490b      	ldr	r1, [pc, #44]	; (800b4d4 <MX_USB_HOST_Init+0x48>)
 800b4a6:	480a      	ldr	r0, [pc, #40]	; (800b4d0 <MX_USB_HOST_Init+0x44>)
 800b4a8:	f7fb f936 	bl	8006718 <USBH_RegisterClass>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d001      	beq.n	800b4b6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b4b2:	f7f5 fd9b 	bl	8000fec <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b4b6:	4806      	ldr	r0, [pc, #24]	; (800b4d0 <MX_USB_HOST_Init+0x44>)
 800b4b8:	f7fb f9ba 	bl	8006830 <USBH_Start>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d001      	beq.n	800b4c6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b4c2:	f7f5 fd93 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b4c6:	bf00      	nop
 800b4c8:	bd80      	pop	{r7, pc}
 800b4ca:	bf00      	nop
 800b4cc:	0800b4d9 	.word	0x0800b4d9
 800b4d0:	20004b78 	.word	0x20004b78
 800b4d4:	2000000c 	.word	0x2000000c

0800b4d8 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b4d8:	b480      	push	{r7}
 800b4da:	b083      	sub	sp, #12
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
 800b4e0:	460b      	mov	r3, r1
 800b4e2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b4e4:	78fb      	ldrb	r3, [r7, #3]
 800b4e6:	3b01      	subs	r3, #1
 800b4e8:	2b04      	cmp	r3, #4
 800b4ea:	d819      	bhi.n	800b520 <USBH_UserProcess+0x48>
 800b4ec:	a201      	add	r2, pc, #4	; (adr r2, 800b4f4 <USBH_UserProcess+0x1c>)
 800b4ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4f2:	bf00      	nop
 800b4f4:	0800b521 	.word	0x0800b521
 800b4f8:	0800b511 	.word	0x0800b511
 800b4fc:	0800b521 	.word	0x0800b521
 800b500:	0800b519 	.word	0x0800b519
 800b504:	0800b509 	.word	0x0800b509
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b508:	4b09      	ldr	r3, [pc, #36]	; (800b530 <USBH_UserProcess+0x58>)
 800b50a:	2203      	movs	r2, #3
 800b50c:	701a      	strb	r2, [r3, #0]
  break;
 800b50e:	e008      	b.n	800b522 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b510:	4b07      	ldr	r3, [pc, #28]	; (800b530 <USBH_UserProcess+0x58>)
 800b512:	2202      	movs	r2, #2
 800b514:	701a      	strb	r2, [r3, #0]
  break;
 800b516:	e004      	b.n	800b522 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b518:	4b05      	ldr	r3, [pc, #20]	; (800b530 <USBH_UserProcess+0x58>)
 800b51a:	2201      	movs	r2, #1
 800b51c:	701a      	strb	r2, [r3, #0]
  break;
 800b51e:	e000      	b.n	800b522 <USBH_UserProcess+0x4a>

  default:
  break;
 800b520:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b522:	bf00      	nop
 800b524:	370c      	adds	r7, #12
 800b526:	46bd      	mov	sp, r7
 800b528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52c:	4770      	bx	lr
 800b52e:	bf00      	nop
 800b530:	20004f5c 	.word	0x20004f5c

0800b534 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b08a      	sub	sp, #40	; 0x28
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b53c:	f107 0314 	add.w	r3, r7, #20
 800b540:	2200      	movs	r2, #0
 800b542:	601a      	str	r2, [r3, #0]
 800b544:	605a      	str	r2, [r3, #4]
 800b546:	609a      	str	r2, [r3, #8]
 800b548:	60da      	str	r2, [r3, #12]
 800b54a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b554:	d147      	bne.n	800b5e6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b556:	2300      	movs	r3, #0
 800b558:	613b      	str	r3, [r7, #16]
 800b55a:	4b25      	ldr	r3, [pc, #148]	; (800b5f0 <HAL_HCD_MspInit+0xbc>)
 800b55c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b55e:	4a24      	ldr	r2, [pc, #144]	; (800b5f0 <HAL_HCD_MspInit+0xbc>)
 800b560:	f043 0301 	orr.w	r3, r3, #1
 800b564:	6313      	str	r3, [r2, #48]	; 0x30
 800b566:	4b22      	ldr	r3, [pc, #136]	; (800b5f0 <HAL_HCD_MspInit+0xbc>)
 800b568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b56a:	f003 0301 	and.w	r3, r3, #1
 800b56e:	613b      	str	r3, [r7, #16]
 800b570:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b572:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b578:	2300      	movs	r3, #0
 800b57a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b57c:	2300      	movs	r3, #0
 800b57e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b580:	f107 0314 	add.w	r3, r7, #20
 800b584:	4619      	mov	r1, r3
 800b586:	481b      	ldr	r0, [pc, #108]	; (800b5f4 <HAL_HCD_MspInit+0xc0>)
 800b588:	f7f6 f8dc 	bl	8001744 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b58c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800b590:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b592:	2302      	movs	r3, #2
 800b594:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b596:	2300      	movs	r3, #0
 800b598:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b59a:	2300      	movs	r3, #0
 800b59c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b59e:	230a      	movs	r3, #10
 800b5a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b5a2:	f107 0314 	add.w	r3, r7, #20
 800b5a6:	4619      	mov	r1, r3
 800b5a8:	4812      	ldr	r0, [pc, #72]	; (800b5f4 <HAL_HCD_MspInit+0xc0>)
 800b5aa:	f7f6 f8cb 	bl	8001744 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b5ae:	4b10      	ldr	r3, [pc, #64]	; (800b5f0 <HAL_HCD_MspInit+0xbc>)
 800b5b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5b2:	4a0f      	ldr	r2, [pc, #60]	; (800b5f0 <HAL_HCD_MspInit+0xbc>)
 800b5b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5b8:	6353      	str	r3, [r2, #52]	; 0x34
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	60fb      	str	r3, [r7, #12]
 800b5be:	4b0c      	ldr	r3, [pc, #48]	; (800b5f0 <HAL_HCD_MspInit+0xbc>)
 800b5c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5c2:	4a0b      	ldr	r2, [pc, #44]	; (800b5f0 <HAL_HCD_MspInit+0xbc>)
 800b5c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b5c8:	6453      	str	r3, [r2, #68]	; 0x44
 800b5ca:	4b09      	ldr	r3, [pc, #36]	; (800b5f0 <HAL_HCD_MspInit+0xbc>)
 800b5cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b5d2:	60fb      	str	r3, [r7, #12]
 800b5d4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	2105      	movs	r1, #5
 800b5da:	2043      	movs	r0, #67	; 0x43
 800b5dc:	f7f6 f87b 	bl	80016d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b5e0:	2043      	movs	r0, #67	; 0x43
 800b5e2:	f7f6 f894 	bl	800170e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b5e6:	bf00      	nop
 800b5e8:	3728      	adds	r7, #40	; 0x28
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}
 800b5ee:	bf00      	nop
 800b5f0:	40023800 	.word	0x40023800
 800b5f4:	40020000 	.word	0x40020000

0800b5f8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b082      	sub	sp, #8
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b606:	4618      	mov	r0, r3
 800b608:	f7fb fdc9 	bl	800719e <USBH_LL_IncTimer>
}
 800b60c:	bf00      	nop
 800b60e:	3708      	adds	r7, #8
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}

0800b614 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b082      	sub	sp, #8
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b622:	4618      	mov	r0, r3
 800b624:	f7fb fe0d 	bl	8007242 <USBH_LL_Connect>
}
 800b628:	bf00      	nop
 800b62a:	3708      	adds	r7, #8
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd80      	pop	{r7, pc}

0800b630 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b082      	sub	sp, #8
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b63e:	4618      	mov	r0, r3
 800b640:	f7fb fe22 	bl	8007288 <USBH_LL_Disconnect>
}
 800b644:	bf00      	nop
 800b646:	3708      	adds	r7, #8
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}

0800b64c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b082      	sub	sp, #8
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
 800b654:	460b      	mov	r3, r1
 800b656:	70fb      	strb	r3, [r7, #3]
 800b658:	4613      	mov	r3, r2
 800b65a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b662:	4618      	mov	r0, r3
 800b664:	f7fb fe59 	bl	800731a <USBH_LL_NotifyURBChange>
#endif
}
 800b668:	bf00      	nop
 800b66a:	3708      	adds	r7, #8
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}

0800b670 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b082      	sub	sp, #8
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b67e:	4618      	mov	r0, r3
 800b680:	f7fb fdb7 	bl	80071f2 <USBH_LL_PortEnabled>
}
 800b684:	bf00      	nop
 800b686:	3708      	adds	r7, #8
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}

0800b68c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b082      	sub	sp, #8
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b69a:	4618      	mov	r0, r3
 800b69c:	f7fb fdc3 	bl	8007226 <USBH_LL_PortDisabled>
}
 800b6a0:	bf00      	nop
 800b6a2:	3708      	adds	r7, #8
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}

0800b6a8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b082      	sub	sp, #8
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b6b6:	2b01      	cmp	r3, #1
 800b6b8:	d12a      	bne.n	800b710 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b6ba:	4a18      	ldr	r2, [pc, #96]	; (800b71c <USBH_LL_Init+0x74>)
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	4a15      	ldr	r2, [pc, #84]	; (800b71c <USBH_LL_Init+0x74>)
 800b6c6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b6ca:	4b14      	ldr	r3, [pc, #80]	; (800b71c <USBH_LL_Init+0x74>)
 800b6cc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b6d0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b6d2:	4b12      	ldr	r3, [pc, #72]	; (800b71c <USBH_LL_Init+0x74>)
 800b6d4:	2208      	movs	r2, #8
 800b6d6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b6d8:	4b10      	ldr	r3, [pc, #64]	; (800b71c <USBH_LL_Init+0x74>)
 800b6da:	2201      	movs	r2, #1
 800b6dc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b6de:	4b0f      	ldr	r3, [pc, #60]	; (800b71c <USBH_LL_Init+0x74>)
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b6e4:	4b0d      	ldr	r3, [pc, #52]	; (800b71c <USBH_LL_Init+0x74>)
 800b6e6:	2202      	movs	r2, #2
 800b6e8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b6ea:	4b0c      	ldr	r3, [pc, #48]	; (800b71c <USBH_LL_Init+0x74>)
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b6f0:	480a      	ldr	r0, [pc, #40]	; (800b71c <USBH_LL_Init+0x74>)
 800b6f2:	f7f6 fa0e 	bl	8001b12 <HAL_HCD_Init>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d001      	beq.n	800b700 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b6fc:	f7f5 fc76 	bl	8000fec <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b700:	4806      	ldr	r0, [pc, #24]	; (800b71c <USBH_LL_Init+0x74>)
 800b702:	f7f6 fdf2 	bl	80022ea <HAL_HCD_GetCurrentFrame>
 800b706:	4603      	mov	r3, r0
 800b708:	4619      	mov	r1, r3
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f7fb fd38 	bl	8007180 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b710:	2300      	movs	r3, #0
}
 800b712:	4618      	mov	r0, r3
 800b714:	3708      	adds	r7, #8
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}
 800b71a:	bf00      	nop
 800b71c:	20004f60 	.word	0x20004f60

0800b720 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b084      	sub	sp, #16
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b728:	2300      	movs	r3, #0
 800b72a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b72c:	2300      	movs	r3, #0
 800b72e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b736:	4618      	mov	r0, r3
 800b738:	f7f6 fd61 	bl	80021fe <HAL_HCD_Start>
 800b73c:	4603      	mov	r3, r0
 800b73e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b740:	7bfb      	ldrb	r3, [r7, #15]
 800b742:	4618      	mov	r0, r3
 800b744:	f000 f95c 	bl	800ba00 <USBH_Get_USB_Status>
 800b748:	4603      	mov	r3, r0
 800b74a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b74c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b74e:	4618      	mov	r0, r3
 800b750:	3710      	adds	r7, #16
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}

0800b756 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b756:	b580      	push	{r7, lr}
 800b758:	b084      	sub	sp, #16
 800b75a:	af00      	add	r7, sp, #0
 800b75c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b75e:	2300      	movs	r3, #0
 800b760:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b762:	2300      	movs	r3, #0
 800b764:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b76c:	4618      	mov	r0, r3
 800b76e:	f7f6 fd69 	bl	8002244 <HAL_HCD_Stop>
 800b772:	4603      	mov	r3, r0
 800b774:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b776:	7bfb      	ldrb	r3, [r7, #15]
 800b778:	4618      	mov	r0, r3
 800b77a:	f000 f941 	bl	800ba00 <USBH_Get_USB_Status>
 800b77e:	4603      	mov	r3, r0
 800b780:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b782:	7bbb      	ldrb	r3, [r7, #14]
}
 800b784:	4618      	mov	r0, r3
 800b786:	3710      	adds	r7, #16
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}

0800b78c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b084      	sub	sp, #16
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b794:	2301      	movs	r3, #1
 800b796:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f7f6 fdb1 	bl	8002306 <HAL_HCD_GetCurrentSpeed>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	2b02      	cmp	r3, #2
 800b7a8:	d00c      	beq.n	800b7c4 <USBH_LL_GetSpeed+0x38>
 800b7aa:	2b02      	cmp	r3, #2
 800b7ac:	d80d      	bhi.n	800b7ca <USBH_LL_GetSpeed+0x3e>
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d002      	beq.n	800b7b8 <USBH_LL_GetSpeed+0x2c>
 800b7b2:	2b01      	cmp	r3, #1
 800b7b4:	d003      	beq.n	800b7be <USBH_LL_GetSpeed+0x32>
 800b7b6:	e008      	b.n	800b7ca <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	73fb      	strb	r3, [r7, #15]
    break;
 800b7bc:	e008      	b.n	800b7d0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b7be:	2301      	movs	r3, #1
 800b7c0:	73fb      	strb	r3, [r7, #15]
    break;
 800b7c2:	e005      	b.n	800b7d0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b7c4:	2302      	movs	r3, #2
 800b7c6:	73fb      	strb	r3, [r7, #15]
    break;
 800b7c8:	e002      	b.n	800b7d0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	73fb      	strb	r3, [r7, #15]
    break;
 800b7ce:	bf00      	nop
  }
  return  speed;
 800b7d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	3710      	adds	r7, #16
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	bd80      	pop	{r7, pc}

0800b7da <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b7da:	b580      	push	{r7, lr}
 800b7dc:	b084      	sub	sp, #16
 800b7de:	af00      	add	r7, sp, #0
 800b7e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	f7f6 fd44 	bl	800227e <HAL_HCD_ResetPort>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b7fa:	7bfb      	ldrb	r3, [r7, #15]
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f000 f8ff 	bl	800ba00 <USBH_Get_USB_Status>
 800b802:	4603      	mov	r3, r0
 800b804:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b806:	7bbb      	ldrb	r3, [r7, #14]
}
 800b808:	4618      	mov	r0, r3
 800b80a:	3710      	adds	r7, #16
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}

0800b810 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b082      	sub	sp, #8
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
 800b818:	460b      	mov	r3, r1
 800b81a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b822:	78fa      	ldrb	r2, [r7, #3]
 800b824:	4611      	mov	r1, r2
 800b826:	4618      	mov	r0, r3
 800b828:	f7f6 fd4b 	bl	80022c2 <HAL_HCD_HC_GetXferCount>
 800b82c:	4603      	mov	r3, r0
}
 800b82e:	4618      	mov	r0, r3
 800b830:	3708      	adds	r7, #8
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}

0800b836 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b836:	b590      	push	{r4, r7, lr}
 800b838:	b089      	sub	sp, #36	; 0x24
 800b83a:	af04      	add	r7, sp, #16
 800b83c:	6078      	str	r0, [r7, #4]
 800b83e:	4608      	mov	r0, r1
 800b840:	4611      	mov	r1, r2
 800b842:	461a      	mov	r2, r3
 800b844:	4603      	mov	r3, r0
 800b846:	70fb      	strb	r3, [r7, #3]
 800b848:	460b      	mov	r3, r1
 800b84a:	70bb      	strb	r3, [r7, #2]
 800b84c:	4613      	mov	r3, r2
 800b84e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b850:	2300      	movs	r3, #0
 800b852:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b854:	2300      	movs	r3, #0
 800b856:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b85e:	787c      	ldrb	r4, [r7, #1]
 800b860:	78ba      	ldrb	r2, [r7, #2]
 800b862:	78f9      	ldrb	r1, [r7, #3]
 800b864:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b866:	9302      	str	r3, [sp, #8]
 800b868:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b86c:	9301      	str	r3, [sp, #4]
 800b86e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b872:	9300      	str	r3, [sp, #0]
 800b874:	4623      	mov	r3, r4
 800b876:	f7f6 f9ae 	bl	8001bd6 <HAL_HCD_HC_Init>
 800b87a:	4603      	mov	r3, r0
 800b87c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b87e:	7bfb      	ldrb	r3, [r7, #15]
 800b880:	4618      	mov	r0, r3
 800b882:	f000 f8bd 	bl	800ba00 <USBH_Get_USB_Status>
 800b886:	4603      	mov	r3, r0
 800b888:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b88a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	3714      	adds	r7, #20
 800b890:	46bd      	mov	sp, r7
 800b892:	bd90      	pop	{r4, r7, pc}

0800b894 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b084      	sub	sp, #16
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
 800b89c:	460b      	mov	r3, r1
 800b89e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b8ae:	78fa      	ldrb	r2, [r7, #3]
 800b8b0:	4611      	mov	r1, r2
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f7f6 fa1e 	bl	8001cf4 <HAL_HCD_HC_Halt>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b8bc:	7bfb      	ldrb	r3, [r7, #15]
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f000 f89e 	bl	800ba00 <USBH_Get_USB_Status>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	3710      	adds	r7, #16
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}

0800b8d2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b8d2:	b590      	push	{r4, r7, lr}
 800b8d4:	b089      	sub	sp, #36	; 0x24
 800b8d6:	af04      	add	r7, sp, #16
 800b8d8:	6078      	str	r0, [r7, #4]
 800b8da:	4608      	mov	r0, r1
 800b8dc:	4611      	mov	r1, r2
 800b8de:	461a      	mov	r2, r3
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	70fb      	strb	r3, [r7, #3]
 800b8e4:	460b      	mov	r3, r1
 800b8e6:	70bb      	strb	r3, [r7, #2]
 800b8e8:	4613      	mov	r3, r2
 800b8ea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b8fa:	787c      	ldrb	r4, [r7, #1]
 800b8fc:	78ba      	ldrb	r2, [r7, #2]
 800b8fe:	78f9      	ldrb	r1, [r7, #3]
 800b900:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b904:	9303      	str	r3, [sp, #12]
 800b906:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b908:	9302      	str	r3, [sp, #8]
 800b90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b90c:	9301      	str	r3, [sp, #4]
 800b90e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b912:	9300      	str	r3, [sp, #0]
 800b914:	4623      	mov	r3, r4
 800b916:	f7f6 fa11 	bl	8001d3c <HAL_HCD_HC_SubmitRequest>
 800b91a:	4603      	mov	r3, r0
 800b91c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b91e:	7bfb      	ldrb	r3, [r7, #15]
 800b920:	4618      	mov	r0, r3
 800b922:	f000 f86d 	bl	800ba00 <USBH_Get_USB_Status>
 800b926:	4603      	mov	r3, r0
 800b928:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b92a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	3714      	adds	r7, #20
 800b930:	46bd      	mov	sp, r7
 800b932:	bd90      	pop	{r4, r7, pc}

0800b934 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b082      	sub	sp, #8
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
 800b93c:	460b      	mov	r3, r1
 800b93e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b946:	78fa      	ldrb	r2, [r7, #3]
 800b948:	4611      	mov	r1, r2
 800b94a:	4618      	mov	r0, r3
 800b94c:	f7f6 fca5 	bl	800229a <HAL_HCD_HC_GetURBState>
 800b950:	4603      	mov	r3, r0
}
 800b952:	4618      	mov	r0, r3
 800b954:	3708      	adds	r7, #8
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}

0800b95a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b95a:	b580      	push	{r7, lr}
 800b95c:	b082      	sub	sp, #8
 800b95e:	af00      	add	r7, sp, #0
 800b960:	6078      	str	r0, [r7, #4]
 800b962:	460b      	mov	r3, r1
 800b964:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b96c:	2b01      	cmp	r3, #1
 800b96e:	d103      	bne.n	800b978 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b970:	78fb      	ldrb	r3, [r7, #3]
 800b972:	4618      	mov	r0, r3
 800b974:	f000 f870 	bl	800ba58 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b978:	20c8      	movs	r0, #200	; 0xc8
 800b97a:	f7f5 fdad 	bl	80014d8 <HAL_Delay>
  return USBH_OK;
 800b97e:	2300      	movs	r3, #0
}
 800b980:	4618      	mov	r0, r3
 800b982:	3708      	adds	r7, #8
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}

0800b988 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b988:	b480      	push	{r7}
 800b98a:	b085      	sub	sp, #20
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	460b      	mov	r3, r1
 800b992:	70fb      	strb	r3, [r7, #3]
 800b994:	4613      	mov	r3, r2
 800b996:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b99e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b9a0:	78fb      	ldrb	r3, [r7, #3]
 800b9a2:	68fa      	ldr	r2, [r7, #12]
 800b9a4:	212c      	movs	r1, #44	; 0x2c
 800b9a6:	fb01 f303 	mul.w	r3, r1, r3
 800b9aa:	4413      	add	r3, r2
 800b9ac:	333b      	adds	r3, #59	; 0x3b
 800b9ae:	781b      	ldrb	r3, [r3, #0]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d009      	beq.n	800b9c8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b9b4:	78fb      	ldrb	r3, [r7, #3]
 800b9b6:	68fa      	ldr	r2, [r7, #12]
 800b9b8:	212c      	movs	r1, #44	; 0x2c
 800b9ba:	fb01 f303 	mul.w	r3, r1, r3
 800b9be:	4413      	add	r3, r2
 800b9c0:	3354      	adds	r3, #84	; 0x54
 800b9c2:	78ba      	ldrb	r2, [r7, #2]
 800b9c4:	701a      	strb	r2, [r3, #0]
 800b9c6:	e008      	b.n	800b9da <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b9c8:	78fb      	ldrb	r3, [r7, #3]
 800b9ca:	68fa      	ldr	r2, [r7, #12]
 800b9cc:	212c      	movs	r1, #44	; 0x2c
 800b9ce:	fb01 f303 	mul.w	r3, r1, r3
 800b9d2:	4413      	add	r3, r2
 800b9d4:	3355      	adds	r3, #85	; 0x55
 800b9d6:	78ba      	ldrb	r2, [r7, #2]
 800b9d8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b9da:	2300      	movs	r3, #0
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3714      	adds	r7, #20
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e6:	4770      	bx	lr

0800b9e8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b082      	sub	sp, #8
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f7f5 fd71 	bl	80014d8 <HAL_Delay>
}
 800b9f6:	bf00      	nop
 800b9f8:	3708      	adds	r7, #8
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}
	...

0800ba00 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ba00:	b480      	push	{r7}
 800ba02:	b085      	sub	sp, #20
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	4603      	mov	r3, r0
 800ba08:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ba0e:	79fb      	ldrb	r3, [r7, #7]
 800ba10:	2b03      	cmp	r3, #3
 800ba12:	d817      	bhi.n	800ba44 <USBH_Get_USB_Status+0x44>
 800ba14:	a201      	add	r2, pc, #4	; (adr r2, 800ba1c <USBH_Get_USB_Status+0x1c>)
 800ba16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba1a:	bf00      	nop
 800ba1c:	0800ba2d 	.word	0x0800ba2d
 800ba20:	0800ba33 	.word	0x0800ba33
 800ba24:	0800ba39 	.word	0x0800ba39
 800ba28:	0800ba3f 	.word	0x0800ba3f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	73fb      	strb	r3, [r7, #15]
    break;
 800ba30:	e00b      	b.n	800ba4a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ba32:	2302      	movs	r3, #2
 800ba34:	73fb      	strb	r3, [r7, #15]
    break;
 800ba36:	e008      	b.n	800ba4a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ba38:	2301      	movs	r3, #1
 800ba3a:	73fb      	strb	r3, [r7, #15]
    break;
 800ba3c:	e005      	b.n	800ba4a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ba3e:	2302      	movs	r3, #2
 800ba40:	73fb      	strb	r3, [r7, #15]
    break;
 800ba42:	e002      	b.n	800ba4a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ba44:	2302      	movs	r3, #2
 800ba46:	73fb      	strb	r3, [r7, #15]
    break;
 800ba48:	bf00      	nop
  }
  return usb_status;
 800ba4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3714      	adds	r7, #20
 800ba50:	46bd      	mov	sp, r7
 800ba52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba56:	4770      	bx	lr

0800ba58 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b084      	sub	sp, #16
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	4603      	mov	r3, r0
 800ba60:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800ba62:	79fb      	ldrb	r3, [r7, #7]
 800ba64:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800ba66:	79fb      	ldrb	r3, [r7, #7]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d102      	bne.n	800ba72 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	73fb      	strb	r3, [r7, #15]
 800ba70:	e001      	b.n	800ba76 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800ba72:	2301      	movs	r3, #1
 800ba74:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800ba76:	7bfb      	ldrb	r3, [r7, #15]
 800ba78:	461a      	mov	r2, r3
 800ba7a:	2101      	movs	r1, #1
 800ba7c:	4803      	ldr	r0, [pc, #12]	; (800ba8c <MX_DriverVbusFS+0x34>)
 800ba7e:	f7f6 f815 	bl	8001aac <HAL_GPIO_WritePin>
}
 800ba82:	bf00      	nop
 800ba84:	3710      	adds	r7, #16
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}
 800ba8a:	bf00      	nop
 800ba8c:	40020800 	.word	0x40020800

0800ba90 <__errno>:
 800ba90:	4b01      	ldr	r3, [pc, #4]	; (800ba98 <__errno+0x8>)
 800ba92:	6818      	ldr	r0, [r3, #0]
 800ba94:	4770      	bx	lr
 800ba96:	bf00      	nop
 800ba98:	20000030 	.word	0x20000030

0800ba9c <__libc_init_array>:
 800ba9c:	b570      	push	{r4, r5, r6, lr}
 800ba9e:	4d0d      	ldr	r5, [pc, #52]	; (800bad4 <__libc_init_array+0x38>)
 800baa0:	4c0d      	ldr	r4, [pc, #52]	; (800bad8 <__libc_init_array+0x3c>)
 800baa2:	1b64      	subs	r4, r4, r5
 800baa4:	10a4      	asrs	r4, r4, #2
 800baa6:	2600      	movs	r6, #0
 800baa8:	42a6      	cmp	r6, r4
 800baaa:	d109      	bne.n	800bac0 <__libc_init_array+0x24>
 800baac:	4d0b      	ldr	r5, [pc, #44]	; (800badc <__libc_init_array+0x40>)
 800baae:	4c0c      	ldr	r4, [pc, #48]	; (800bae0 <__libc_init_array+0x44>)
 800bab0:	f000 f93c 	bl	800bd2c <_init>
 800bab4:	1b64      	subs	r4, r4, r5
 800bab6:	10a4      	asrs	r4, r4, #2
 800bab8:	2600      	movs	r6, #0
 800baba:	42a6      	cmp	r6, r4
 800babc:	d105      	bne.n	800baca <__libc_init_array+0x2e>
 800babe:	bd70      	pop	{r4, r5, r6, pc}
 800bac0:	f855 3b04 	ldr.w	r3, [r5], #4
 800bac4:	4798      	blx	r3
 800bac6:	3601      	adds	r6, #1
 800bac8:	e7ee      	b.n	800baa8 <__libc_init_array+0xc>
 800baca:	f855 3b04 	ldr.w	r3, [r5], #4
 800bace:	4798      	blx	r3
 800bad0:	3601      	adds	r6, #1
 800bad2:	e7f2      	b.n	800baba <__libc_init_array+0x1e>
 800bad4:	0800de38 	.word	0x0800de38
 800bad8:	0800de38 	.word	0x0800de38
 800badc:	0800de38 	.word	0x0800de38
 800bae0:	0800de3c 	.word	0x0800de3c

0800bae4 <malloc>:
 800bae4:	4b02      	ldr	r3, [pc, #8]	; (800baf0 <malloc+0xc>)
 800bae6:	4601      	mov	r1, r0
 800bae8:	6818      	ldr	r0, [r3, #0]
 800baea:	f000 b88d 	b.w	800bc08 <_malloc_r>
 800baee:	bf00      	nop
 800baf0:	20000030 	.word	0x20000030

0800baf4 <free>:
 800baf4:	4b02      	ldr	r3, [pc, #8]	; (800bb00 <free+0xc>)
 800baf6:	4601      	mov	r1, r0
 800baf8:	6818      	ldr	r0, [r3, #0]
 800bafa:	f000 b819 	b.w	800bb30 <_free_r>
 800bafe:	bf00      	nop
 800bb00:	20000030 	.word	0x20000030

0800bb04 <memcpy>:
 800bb04:	440a      	add	r2, r1
 800bb06:	4291      	cmp	r1, r2
 800bb08:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb0c:	d100      	bne.n	800bb10 <memcpy+0xc>
 800bb0e:	4770      	bx	lr
 800bb10:	b510      	push	{r4, lr}
 800bb12:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb16:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb1a:	4291      	cmp	r1, r2
 800bb1c:	d1f9      	bne.n	800bb12 <memcpy+0xe>
 800bb1e:	bd10      	pop	{r4, pc}

0800bb20 <memset>:
 800bb20:	4402      	add	r2, r0
 800bb22:	4603      	mov	r3, r0
 800bb24:	4293      	cmp	r3, r2
 800bb26:	d100      	bne.n	800bb2a <memset+0xa>
 800bb28:	4770      	bx	lr
 800bb2a:	f803 1b01 	strb.w	r1, [r3], #1
 800bb2e:	e7f9      	b.n	800bb24 <memset+0x4>

0800bb30 <_free_r>:
 800bb30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bb32:	2900      	cmp	r1, #0
 800bb34:	d044      	beq.n	800bbc0 <_free_r+0x90>
 800bb36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb3a:	9001      	str	r0, [sp, #4]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	f1a1 0404 	sub.w	r4, r1, #4
 800bb42:	bfb8      	it	lt
 800bb44:	18e4      	addlt	r4, r4, r3
 800bb46:	f000 f8e3 	bl	800bd10 <__malloc_lock>
 800bb4a:	4a1e      	ldr	r2, [pc, #120]	; (800bbc4 <_free_r+0x94>)
 800bb4c:	9801      	ldr	r0, [sp, #4]
 800bb4e:	6813      	ldr	r3, [r2, #0]
 800bb50:	b933      	cbnz	r3, 800bb60 <_free_r+0x30>
 800bb52:	6063      	str	r3, [r4, #4]
 800bb54:	6014      	str	r4, [r2, #0]
 800bb56:	b003      	add	sp, #12
 800bb58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb5c:	f000 b8de 	b.w	800bd1c <__malloc_unlock>
 800bb60:	42a3      	cmp	r3, r4
 800bb62:	d908      	bls.n	800bb76 <_free_r+0x46>
 800bb64:	6825      	ldr	r5, [r4, #0]
 800bb66:	1961      	adds	r1, r4, r5
 800bb68:	428b      	cmp	r3, r1
 800bb6a:	bf01      	itttt	eq
 800bb6c:	6819      	ldreq	r1, [r3, #0]
 800bb6e:	685b      	ldreq	r3, [r3, #4]
 800bb70:	1949      	addeq	r1, r1, r5
 800bb72:	6021      	streq	r1, [r4, #0]
 800bb74:	e7ed      	b.n	800bb52 <_free_r+0x22>
 800bb76:	461a      	mov	r2, r3
 800bb78:	685b      	ldr	r3, [r3, #4]
 800bb7a:	b10b      	cbz	r3, 800bb80 <_free_r+0x50>
 800bb7c:	42a3      	cmp	r3, r4
 800bb7e:	d9fa      	bls.n	800bb76 <_free_r+0x46>
 800bb80:	6811      	ldr	r1, [r2, #0]
 800bb82:	1855      	adds	r5, r2, r1
 800bb84:	42a5      	cmp	r5, r4
 800bb86:	d10b      	bne.n	800bba0 <_free_r+0x70>
 800bb88:	6824      	ldr	r4, [r4, #0]
 800bb8a:	4421      	add	r1, r4
 800bb8c:	1854      	adds	r4, r2, r1
 800bb8e:	42a3      	cmp	r3, r4
 800bb90:	6011      	str	r1, [r2, #0]
 800bb92:	d1e0      	bne.n	800bb56 <_free_r+0x26>
 800bb94:	681c      	ldr	r4, [r3, #0]
 800bb96:	685b      	ldr	r3, [r3, #4]
 800bb98:	6053      	str	r3, [r2, #4]
 800bb9a:	4421      	add	r1, r4
 800bb9c:	6011      	str	r1, [r2, #0]
 800bb9e:	e7da      	b.n	800bb56 <_free_r+0x26>
 800bba0:	d902      	bls.n	800bba8 <_free_r+0x78>
 800bba2:	230c      	movs	r3, #12
 800bba4:	6003      	str	r3, [r0, #0]
 800bba6:	e7d6      	b.n	800bb56 <_free_r+0x26>
 800bba8:	6825      	ldr	r5, [r4, #0]
 800bbaa:	1961      	adds	r1, r4, r5
 800bbac:	428b      	cmp	r3, r1
 800bbae:	bf04      	itt	eq
 800bbb0:	6819      	ldreq	r1, [r3, #0]
 800bbb2:	685b      	ldreq	r3, [r3, #4]
 800bbb4:	6063      	str	r3, [r4, #4]
 800bbb6:	bf04      	itt	eq
 800bbb8:	1949      	addeq	r1, r1, r5
 800bbba:	6021      	streq	r1, [r4, #0]
 800bbbc:	6054      	str	r4, [r2, #4]
 800bbbe:	e7ca      	b.n	800bb56 <_free_r+0x26>
 800bbc0:	b003      	add	sp, #12
 800bbc2:	bd30      	pop	{r4, r5, pc}
 800bbc4:	20005264 	.word	0x20005264

0800bbc8 <sbrk_aligned>:
 800bbc8:	b570      	push	{r4, r5, r6, lr}
 800bbca:	4e0e      	ldr	r6, [pc, #56]	; (800bc04 <sbrk_aligned+0x3c>)
 800bbcc:	460c      	mov	r4, r1
 800bbce:	6831      	ldr	r1, [r6, #0]
 800bbd0:	4605      	mov	r5, r0
 800bbd2:	b911      	cbnz	r1, 800bbda <sbrk_aligned+0x12>
 800bbd4:	f000 f88c 	bl	800bcf0 <_sbrk_r>
 800bbd8:	6030      	str	r0, [r6, #0]
 800bbda:	4621      	mov	r1, r4
 800bbdc:	4628      	mov	r0, r5
 800bbde:	f000 f887 	bl	800bcf0 <_sbrk_r>
 800bbe2:	1c43      	adds	r3, r0, #1
 800bbe4:	d00a      	beq.n	800bbfc <sbrk_aligned+0x34>
 800bbe6:	1cc4      	adds	r4, r0, #3
 800bbe8:	f024 0403 	bic.w	r4, r4, #3
 800bbec:	42a0      	cmp	r0, r4
 800bbee:	d007      	beq.n	800bc00 <sbrk_aligned+0x38>
 800bbf0:	1a21      	subs	r1, r4, r0
 800bbf2:	4628      	mov	r0, r5
 800bbf4:	f000 f87c 	bl	800bcf0 <_sbrk_r>
 800bbf8:	3001      	adds	r0, #1
 800bbfa:	d101      	bne.n	800bc00 <sbrk_aligned+0x38>
 800bbfc:	f04f 34ff 	mov.w	r4, #4294967295
 800bc00:	4620      	mov	r0, r4
 800bc02:	bd70      	pop	{r4, r5, r6, pc}
 800bc04:	20005268 	.word	0x20005268

0800bc08 <_malloc_r>:
 800bc08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc0c:	1ccd      	adds	r5, r1, #3
 800bc0e:	f025 0503 	bic.w	r5, r5, #3
 800bc12:	3508      	adds	r5, #8
 800bc14:	2d0c      	cmp	r5, #12
 800bc16:	bf38      	it	cc
 800bc18:	250c      	movcc	r5, #12
 800bc1a:	2d00      	cmp	r5, #0
 800bc1c:	4607      	mov	r7, r0
 800bc1e:	db01      	blt.n	800bc24 <_malloc_r+0x1c>
 800bc20:	42a9      	cmp	r1, r5
 800bc22:	d905      	bls.n	800bc30 <_malloc_r+0x28>
 800bc24:	230c      	movs	r3, #12
 800bc26:	603b      	str	r3, [r7, #0]
 800bc28:	2600      	movs	r6, #0
 800bc2a:	4630      	mov	r0, r6
 800bc2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc30:	4e2e      	ldr	r6, [pc, #184]	; (800bcec <_malloc_r+0xe4>)
 800bc32:	f000 f86d 	bl	800bd10 <__malloc_lock>
 800bc36:	6833      	ldr	r3, [r6, #0]
 800bc38:	461c      	mov	r4, r3
 800bc3a:	bb34      	cbnz	r4, 800bc8a <_malloc_r+0x82>
 800bc3c:	4629      	mov	r1, r5
 800bc3e:	4638      	mov	r0, r7
 800bc40:	f7ff ffc2 	bl	800bbc8 <sbrk_aligned>
 800bc44:	1c43      	adds	r3, r0, #1
 800bc46:	4604      	mov	r4, r0
 800bc48:	d14d      	bne.n	800bce6 <_malloc_r+0xde>
 800bc4a:	6834      	ldr	r4, [r6, #0]
 800bc4c:	4626      	mov	r6, r4
 800bc4e:	2e00      	cmp	r6, #0
 800bc50:	d140      	bne.n	800bcd4 <_malloc_r+0xcc>
 800bc52:	6823      	ldr	r3, [r4, #0]
 800bc54:	4631      	mov	r1, r6
 800bc56:	4638      	mov	r0, r7
 800bc58:	eb04 0803 	add.w	r8, r4, r3
 800bc5c:	f000 f848 	bl	800bcf0 <_sbrk_r>
 800bc60:	4580      	cmp	r8, r0
 800bc62:	d13a      	bne.n	800bcda <_malloc_r+0xd2>
 800bc64:	6821      	ldr	r1, [r4, #0]
 800bc66:	3503      	adds	r5, #3
 800bc68:	1a6d      	subs	r5, r5, r1
 800bc6a:	f025 0503 	bic.w	r5, r5, #3
 800bc6e:	3508      	adds	r5, #8
 800bc70:	2d0c      	cmp	r5, #12
 800bc72:	bf38      	it	cc
 800bc74:	250c      	movcc	r5, #12
 800bc76:	4629      	mov	r1, r5
 800bc78:	4638      	mov	r0, r7
 800bc7a:	f7ff ffa5 	bl	800bbc8 <sbrk_aligned>
 800bc7e:	3001      	adds	r0, #1
 800bc80:	d02b      	beq.n	800bcda <_malloc_r+0xd2>
 800bc82:	6823      	ldr	r3, [r4, #0]
 800bc84:	442b      	add	r3, r5
 800bc86:	6023      	str	r3, [r4, #0]
 800bc88:	e00e      	b.n	800bca8 <_malloc_r+0xa0>
 800bc8a:	6822      	ldr	r2, [r4, #0]
 800bc8c:	1b52      	subs	r2, r2, r5
 800bc8e:	d41e      	bmi.n	800bcce <_malloc_r+0xc6>
 800bc90:	2a0b      	cmp	r2, #11
 800bc92:	d916      	bls.n	800bcc2 <_malloc_r+0xba>
 800bc94:	1961      	adds	r1, r4, r5
 800bc96:	42a3      	cmp	r3, r4
 800bc98:	6025      	str	r5, [r4, #0]
 800bc9a:	bf18      	it	ne
 800bc9c:	6059      	strne	r1, [r3, #4]
 800bc9e:	6863      	ldr	r3, [r4, #4]
 800bca0:	bf08      	it	eq
 800bca2:	6031      	streq	r1, [r6, #0]
 800bca4:	5162      	str	r2, [r4, r5]
 800bca6:	604b      	str	r3, [r1, #4]
 800bca8:	4638      	mov	r0, r7
 800bcaa:	f104 060b 	add.w	r6, r4, #11
 800bcae:	f000 f835 	bl	800bd1c <__malloc_unlock>
 800bcb2:	f026 0607 	bic.w	r6, r6, #7
 800bcb6:	1d23      	adds	r3, r4, #4
 800bcb8:	1af2      	subs	r2, r6, r3
 800bcba:	d0b6      	beq.n	800bc2a <_malloc_r+0x22>
 800bcbc:	1b9b      	subs	r3, r3, r6
 800bcbe:	50a3      	str	r3, [r4, r2]
 800bcc0:	e7b3      	b.n	800bc2a <_malloc_r+0x22>
 800bcc2:	6862      	ldr	r2, [r4, #4]
 800bcc4:	42a3      	cmp	r3, r4
 800bcc6:	bf0c      	ite	eq
 800bcc8:	6032      	streq	r2, [r6, #0]
 800bcca:	605a      	strne	r2, [r3, #4]
 800bccc:	e7ec      	b.n	800bca8 <_malloc_r+0xa0>
 800bcce:	4623      	mov	r3, r4
 800bcd0:	6864      	ldr	r4, [r4, #4]
 800bcd2:	e7b2      	b.n	800bc3a <_malloc_r+0x32>
 800bcd4:	4634      	mov	r4, r6
 800bcd6:	6876      	ldr	r6, [r6, #4]
 800bcd8:	e7b9      	b.n	800bc4e <_malloc_r+0x46>
 800bcda:	230c      	movs	r3, #12
 800bcdc:	603b      	str	r3, [r7, #0]
 800bcde:	4638      	mov	r0, r7
 800bce0:	f000 f81c 	bl	800bd1c <__malloc_unlock>
 800bce4:	e7a1      	b.n	800bc2a <_malloc_r+0x22>
 800bce6:	6025      	str	r5, [r4, #0]
 800bce8:	e7de      	b.n	800bca8 <_malloc_r+0xa0>
 800bcea:	bf00      	nop
 800bcec:	20005264 	.word	0x20005264

0800bcf0 <_sbrk_r>:
 800bcf0:	b538      	push	{r3, r4, r5, lr}
 800bcf2:	4d06      	ldr	r5, [pc, #24]	; (800bd0c <_sbrk_r+0x1c>)
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	4604      	mov	r4, r0
 800bcf8:	4608      	mov	r0, r1
 800bcfa:	602b      	str	r3, [r5, #0]
 800bcfc:	f7f5 fb08 	bl	8001310 <_sbrk>
 800bd00:	1c43      	adds	r3, r0, #1
 800bd02:	d102      	bne.n	800bd0a <_sbrk_r+0x1a>
 800bd04:	682b      	ldr	r3, [r5, #0]
 800bd06:	b103      	cbz	r3, 800bd0a <_sbrk_r+0x1a>
 800bd08:	6023      	str	r3, [r4, #0]
 800bd0a:	bd38      	pop	{r3, r4, r5, pc}
 800bd0c:	2000526c 	.word	0x2000526c

0800bd10 <__malloc_lock>:
 800bd10:	4801      	ldr	r0, [pc, #4]	; (800bd18 <__malloc_lock+0x8>)
 800bd12:	f000 b809 	b.w	800bd28 <__retarget_lock_acquire_recursive>
 800bd16:	bf00      	nop
 800bd18:	20005270 	.word	0x20005270

0800bd1c <__malloc_unlock>:
 800bd1c:	4801      	ldr	r0, [pc, #4]	; (800bd24 <__malloc_unlock+0x8>)
 800bd1e:	f000 b804 	b.w	800bd2a <__retarget_lock_release_recursive>
 800bd22:	bf00      	nop
 800bd24:	20005270 	.word	0x20005270

0800bd28 <__retarget_lock_acquire_recursive>:
 800bd28:	4770      	bx	lr

0800bd2a <__retarget_lock_release_recursive>:
 800bd2a:	4770      	bx	lr

0800bd2c <_init>:
 800bd2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd2e:	bf00      	nop
 800bd30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd32:	bc08      	pop	{r3}
 800bd34:	469e      	mov	lr, r3
 800bd36:	4770      	bx	lr

0800bd38 <_fini>:
 800bd38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd3a:	bf00      	nop
 800bd3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd3e:	bc08      	pop	{r3}
 800bd40:	469e      	mov	lr, r3
 800bd42:	4770      	bx	lr
