
Erster_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c438  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000021c0  0800c5c8  0800c5c8  0001c5c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e788  0800e788  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800e788  0800e788  0001e788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e790  0800e790  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e790  0800e790  0001e790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e794  0800e794  0001e794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800e798  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          000051ec  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005280  20005280  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025579  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005371  00000000  00000000  0004563d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f08  00000000  00000000  0004a9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001cf8  00000000  00000000  0004c8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027c46  00000000  00000000  0004e5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000261bf  00000000  00000000  000761f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df585  00000000  00000000  0009c3b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017b93a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000087bc  00000000  00000000  0017b98c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c5b0 	.word	0x0800c5b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800c5b0 	.word	0x0800c5b0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <LCD_SetCursor>:
#include "fonts.h"
#include "display.h"
#include "cmsis_os.h"
#include "usb_host.h"

void LCD_SetCursor(uint16_t x, uint16_t y){
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	460a      	mov	r2, r1
 800057e:	80fb      	strh	r3, [r7, #6]
 8000580:	4613      	mov	r3, r2
 8000582:	80bb      	strh	r3, [r7, #4]
	LCD_WriteReg(0x004E, x); // Set x-pos
 8000584:	88fb      	ldrh	r3, [r7, #6]
 8000586:	4619      	mov	r1, r3
 8000588:	204e      	movs	r0, #78	; 0x4e
 800058a:	f000 f96f 	bl	800086c <LCD_WriteReg>
	LCD_WriteReg(0x004F, y); // Set y-pos
 800058e:	88bb      	ldrh	r3, [r7, #4]
 8000590:	4619      	mov	r1, r3
 8000592:	204f      	movs	r0, #79	; 0x4f
 8000594:	f000 f96a 	bl	800086c <LCD_WriteReg>
}
 8000598:	bf00      	nop
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}

080005a0 <LCD_DrawPixel>:

void LCD_DrawPixel(uint16_t color){
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	80fb      	strh	r3, [r7, #6]
	LCD_WriteReg(0x0022,color);
 80005aa:	88fb      	ldrh	r3, [r7, #6]
 80005ac:	4619      	mov	r1, r3
 80005ae:	2022      	movs	r0, #34	; 0x22
 80005b0:	f000 f95c 	bl	800086c <LCD_WriteReg>
}
 80005b4:	bf00      	nop
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <LCD_WriteLetter>:

void LCD_WriteLetter(uint16_t x, uint16_t y, uint16_t colorfg, uint16_t colorbg, char letter){
 80005bc:	b590      	push	{r4, r7, lr}
 80005be:	b087      	sub	sp, #28
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4604      	mov	r4, r0
 80005c4:	4608      	mov	r0, r1
 80005c6:	4611      	mov	r1, r2
 80005c8:	461a      	mov	r2, r3
 80005ca:	4623      	mov	r3, r4
 80005cc:	80fb      	strh	r3, [r7, #6]
 80005ce:	4603      	mov	r3, r0
 80005d0:	80bb      	strh	r3, [r7, #4]
 80005d2:	460b      	mov	r3, r1
 80005d4:	807b      	strh	r3, [r7, #2]
 80005d6:	4613      	mov	r3, r2
 80005d8:	803b      	strh	r3, [r7, #0]
	int offset = letter*16*2;
 80005da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80005de:	015b      	lsls	r3, r3, #5
 80005e0:	613b      	str	r3, [r7, #16]
	int i = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	617b      	str	r3, [r7, #20]
	uint16_t line = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	81fb      	strh	r3, [r7, #14]
	LCD_SetCursor(x,y);
 80005ea:	88ba      	ldrh	r2, [r7, #4]
 80005ec:	88fb      	ldrh	r3, [r7, #6]
 80005ee:	4611      	mov	r1, r2
 80005f0:	4618      	mov	r0, r3
 80005f2:	f7ff ffbf 	bl	8000574 <LCD_SetCursor>
	//printf("Ascii Code for %c: %d , %d\n",letter,letter,offset);
	for(i=offset; i<offset+16*2; i++){
 80005f6:	693b      	ldr	r3, [r7, #16]
 80005f8:	617b      	str	r3, [r7, #20]
 80005fa:	e024      	b.n	8000646 <LCD_WriteLetter+0x8a>
		LCD_SetCursor(x,y);
 80005fc:	88ba      	ldrh	r2, [r7, #4]
 80005fe:	88fb      	ldrh	r3, [r7, #6]
 8000600:	4611      	mov	r1, r2
 8000602:	4618      	mov	r0, r3
 8000604:	f7ff ffb6 	bl	8000574 <LCD_SetCursor>
		line = console_font_12x16[i] << 4 | console_font_12x16[i+1] >> 4;
 8000608:	4a14      	ldr	r2, [pc, #80]	; (800065c <LCD_WriteLetter+0xa0>)
 800060a:	697b      	ldr	r3, [r7, #20]
 800060c:	4413      	add	r3, r2
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	011b      	lsls	r3, r3, #4
 8000612:	b21a      	sxth	r2, r3
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	3301      	adds	r3, #1
 8000618:	4910      	ldr	r1, [pc, #64]	; (800065c <LCD_WriteLetter+0xa0>)
 800061a:	5ccb      	ldrb	r3, [r1, r3]
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	b2db      	uxtb	r3, r3
 8000620:	b21b      	sxth	r3, r3
 8000622:	4313      	orrs	r3, r2
 8000624:	b21b      	sxth	r3, r3
 8000626:	81fb      	strh	r3, [r7, #14]
		Bits2Pixel(line, colorfg, colorbg);
 8000628:	883a      	ldrh	r2, [r7, #0]
 800062a:	8879      	ldrh	r1, [r7, #2]
 800062c:	89fb      	ldrh	r3, [r7, #14]
 800062e:	4618      	mov	r0, r3
 8000630:	f000 f845 	bl	80006be <Bits2Pixel>
		y++;
 8000634:	88bb      	ldrh	r3, [r7, #4]
 8000636:	3301      	adds	r3, #1
 8000638:	80bb      	strh	r3, [r7, #4]
		i++;
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	3301      	adds	r3, #1
 800063e:	617b      	str	r3, [r7, #20]
	for(i=offset; i<offset+16*2; i++){
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	3301      	adds	r3, #1
 8000644:	617b      	str	r3, [r7, #20]
 8000646:	693b      	ldr	r3, [r7, #16]
 8000648:	331f      	adds	r3, #31
 800064a:	697a      	ldr	r2, [r7, #20]
 800064c:	429a      	cmp	r2, r3
 800064e:	ddd5      	ble.n	80005fc <LCD_WriteLetter+0x40>
	}
}
 8000650:	bf00      	nop
 8000652:	bf00      	nop
 8000654:	371c      	adds	r7, #28
 8000656:	46bd      	mov	sp, r7
 8000658:	bd90      	pop	{r4, r7, pc}
 800065a:	bf00      	nop
 800065c:	0800c660 	.word	0x0800c660

08000660 <LCD_WriteString>:

void LCD_WriteString(uint16_t x, uint16_t y, uint16_t colorfg, uint16_t colorbg, char* letStr){
 8000660:	b590      	push	{r4, r7, lr}
 8000662:	b087      	sub	sp, #28
 8000664:	af02      	add	r7, sp, #8
 8000666:	4604      	mov	r4, r0
 8000668:	4608      	mov	r0, r1
 800066a:	4611      	mov	r1, r2
 800066c:	461a      	mov	r2, r3
 800066e:	4623      	mov	r3, r4
 8000670:	80fb      	strh	r3, [r7, #6]
 8000672:	4603      	mov	r3, r0
 8000674:	80bb      	strh	r3, [r7, #4]
 8000676:	460b      	mov	r3, r1
 8000678:	807b      	strh	r3, [r7, #2]
 800067a:	4613      	mov	r3, r2
 800067c:	803b      	strh	r3, [r7, #0]
	int n = 0;
 800067e:	2300      	movs	r3, #0
 8000680:	60fb      	str	r3, [r7, #12]
	while(letStr[n] != 0){
 8000682:	e011      	b.n	80006a8 <LCD_WriteString+0x48>
		LCD_WriteLetter(x,y,colorfg,colorbg,letStr[n]);
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	6a3a      	ldr	r2, [r7, #32]
 8000688:	4413      	add	r3, r2
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	883c      	ldrh	r4, [r7, #0]
 800068e:	887a      	ldrh	r2, [r7, #2]
 8000690:	88b9      	ldrh	r1, [r7, #4]
 8000692:	88f8      	ldrh	r0, [r7, #6]
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	4623      	mov	r3, r4
 8000698:	f7ff ff90 	bl	80005bc <LCD_WriteLetter>
		x+=12;
 800069c:	88fb      	ldrh	r3, [r7, #6]
 800069e:	330c      	adds	r3, #12
 80006a0:	80fb      	strh	r3, [r7, #6]
		n++;
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	3301      	adds	r3, #1
 80006a6:	60fb      	str	r3, [r7, #12]
	while(letStr[n] != 0){
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	6a3a      	ldr	r2, [r7, #32]
 80006ac:	4413      	add	r3, r2
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d1e7      	bne.n	8000684 <LCD_WriteString+0x24>
	}
}
 80006b4:	bf00      	nop
 80006b6:	bf00      	nop
 80006b8:	3714      	adds	r7, #20
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd90      	pop	{r4, r7, pc}

080006be <Bits2Pixel>:

void Bits2Pixel(uint16_t line, uint16_t colorfg, uint16_t colorbg){
 80006be:	b580      	push	{r7, lr}
 80006c0:	b090      	sub	sp, #64	; 0x40
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	4603      	mov	r3, r0
 80006c6:	80fb      	strh	r3, [r7, #6]
 80006c8:	460b      	mov	r3, r1
 80006ca:	80bb      	strh	r3, [r7, #4]
 80006cc:	4613      	mov	r3, r2
 80006ce:	807b      	strh	r3, [r7, #2]
	int str[13];
	int n = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	63fb      	str	r3, [r7, #60]	; 0x3c
	while(n<12){
 80006d4:	e009      	b.n	80006ea <Bits2Pixel+0x2c>
		str[n] = 0;
 80006d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006d8:	009b      	lsls	r3, r3, #2
 80006da:	3340      	adds	r3, #64	; 0x40
 80006dc:	443b      	add	r3, r7
 80006de:	2200      	movs	r2, #0
 80006e0:	f843 2c38 	str.w	r2, [r3, #-56]
		n++;
 80006e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006e6:	3301      	adds	r3, #1
 80006e8:	63fb      	str	r3, [r7, #60]	; 0x3c
	while(n<12){
 80006ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006ec:	2b0b      	cmp	r3, #11
 80006ee:	ddf2      	ble.n	80006d6 <Bits2Pixel+0x18>
	}
	n = 11;
 80006f0:	230b      	movs	r3, #11
 80006f2:	63fb      	str	r3, [r7, #60]	; 0x3c
	while(line){
 80006f4:	e019      	b.n	800072a <Bits2Pixel+0x6c>
		if(line&1)
 80006f6:	88fb      	ldrh	r3, [r7, #6]
 80006f8:	f003 0301 	and.w	r3, r3, #1
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d007      	beq.n	8000710 <Bits2Pixel+0x52>
			str[n] = 1;
 8000700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000702:	009b      	lsls	r3, r3, #2
 8000704:	3340      	adds	r3, #64	; 0x40
 8000706:	443b      	add	r3, r7
 8000708:	2201      	movs	r2, #1
 800070a:	f843 2c38 	str.w	r2, [r3, #-56]
 800070e:	e006      	b.n	800071e <Bits2Pixel+0x60>
		else
			str[n] = 0;
 8000710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000712:	009b      	lsls	r3, r3, #2
 8000714:	3340      	adds	r3, #64	; 0x40
 8000716:	443b      	add	r3, r7
 8000718:	2200      	movs	r2, #0
 800071a:	f843 2c38 	str.w	r2, [r3, #-56]
		line >>=1;
 800071e:	88fb      	ldrh	r3, [r7, #6]
 8000720:	085b      	lsrs	r3, r3, #1
 8000722:	80fb      	strh	r3, [r7, #6]
		n--;
 8000724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000726:	3b01      	subs	r3, #1
 8000728:	63fb      	str	r3, [r7, #60]	; 0x3c
	while(line){
 800072a:	88fb      	ldrh	r3, [r7, #6]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d1e2      	bne.n	80006f6 <Bits2Pixel+0x38>
	}
	str[12]=0;
 8000730:	2300      	movs	r3, #0
 8000732:	63bb      	str	r3, [r7, #56]	; 0x38

	n = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	63fb      	str	r3, [r7, #60]	; 0x3c
	while(n<12){
 8000738:	e013      	b.n	8000762 <Bits2Pixel+0xa4>
		if(str[n]==0)
 800073a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	3340      	adds	r3, #64	; 0x40
 8000740:	443b      	add	r3, r7
 8000742:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d104      	bne.n	8000754 <Bits2Pixel+0x96>
			LCD_DrawPixel(colorfg);
 800074a:	88bb      	ldrh	r3, [r7, #4]
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff ff27 	bl	80005a0 <LCD_DrawPixel>
 8000752:	e003      	b.n	800075c <Bits2Pixel+0x9e>
		else
			LCD_DrawPixel(colorbg);
 8000754:	887b      	ldrh	r3, [r7, #2]
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff ff22 	bl	80005a0 <LCD_DrawPixel>
		n++;
 800075c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800075e:	3301      	adds	r3, #1
 8000760:	63fb      	str	r3, [r7, #60]	; 0x3c
	while(n<12){
 8000762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000764:	2b0b      	cmp	r3, #11
 8000766:	dde8      	ble.n	800073a <Bits2Pixel+0x7c>
//		if(line&1){
//			LCD_DrawPixel(0xFFFF);
//		}else {
//			LCD_DrawPixel(0xFFFF);
//		}
}
 8000768:	bf00      	nop
 800076a:	bf00      	nop
 800076c:	3740      	adds	r7, #64	; 0x40
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}

08000772 <LCD_ClearDisplay>:

void LCD_ClearDisplay(uint16_t color){
 8000772:	b580      	push	{r7, lr}
 8000774:	b084      	sub	sp, #16
 8000776:	af00      	add	r7, sp, #0
 8000778:	4603      	mov	r3, r0
 800077a:	80fb      	strh	r3, [r7, #6]
	int i = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	60fb      	str	r3, [r7, #12]
	LCD_SetCursor(0,0);
 8000780:	2100      	movs	r1, #0
 8000782:	2000      	movs	r0, #0
 8000784:	f7ff fef6 	bl	8000574 <LCD_SetCursor>

	while(i<76800){
 8000788:	e006      	b.n	8000798 <LCD_ClearDisplay+0x26>
		LCD_DrawPixel(color);
 800078a:	88fb      	ldrh	r3, [r7, #6]
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff ff07 	bl	80005a0 <LCD_DrawPixel>
		i++;
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	3301      	adds	r3, #1
 8000796:	60fb      	str	r3, [r7, #12]
	while(i<76800){
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 800079e:	dbf4      	blt.n	800078a <LCD_ClearDisplay+0x18>
	}
}
 80007a0:	bf00      	nop
 80007a2:	bf00      	nop
 80007a4:	3710      	adds	r7, #16
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
	...

080007ac <LCD_Output16BitWord>:

void  LCD_Output16BitWord(uint16_t data)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	80fb      	strh	r3, [r7, #6]
	GPIOD->ODR |= (data << 14); // 1er setzen
 80007b6:	4b2b      	ldr	r3, [pc, #172]	; (8000864 <LCD_Output16BitWord+0xb8>)
 80007b8:	695b      	ldr	r3, [r3, #20]
 80007ba:	88fa      	ldrh	r2, [r7, #6]
 80007bc:	0392      	lsls	r2, r2, #14
 80007be:	4611      	mov	r1, r2
 80007c0:	4a28      	ldr	r2, [pc, #160]	; (8000864 <LCD_Output16BitWord+0xb8>)
 80007c2:	430b      	orrs	r3, r1
 80007c4:	6153      	str	r3, [r2, #20]
    GPIOD->ODR &= (data << 14) | 0x3FFF; //0er setzen
 80007c6:	4b27      	ldr	r3, [pc, #156]	; (8000864 <LCD_Output16BitWord+0xb8>)
 80007c8:	695a      	ldr	r2, [r3, #20]
 80007ca:	88fb      	ldrh	r3, [r7, #6]
 80007cc:	039b      	lsls	r3, r3, #14
 80007ce:	ea6f 3393 	mvn.w	r3, r3, lsr #14
 80007d2:	ea6f 3383 	mvn.w	r3, r3, lsl #14
 80007d6:	4923      	ldr	r1, [pc, #140]	; (8000864 <LCD_Output16BitWord+0xb8>)
 80007d8:	4013      	ands	r3, r2
 80007da:	614b      	str	r3, [r1, #20]
    GPIOD->ODR |= ((data >> 5) & 0x0700);
 80007dc:	4b21      	ldr	r3, [pc, #132]	; (8000864 <LCD_Output16BitWord+0xb8>)
 80007de:	695a      	ldr	r2, [r3, #20]
 80007e0:	88fb      	ldrh	r3, [r7, #6]
 80007e2:	095b      	lsrs	r3, r3, #5
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80007ea:	491e      	ldr	r1, [pc, #120]	; (8000864 <LCD_Output16BitWord+0xb8>)
 80007ec:	4313      	orrs	r3, r2
 80007ee:	614b      	str	r3, [r1, #20]
    GPIOD->ODR &= ((data >> 5) & 0x0700) | ~(0x0700);
 80007f0:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <LCD_Output16BitWord+0xb8>)
 80007f2:	695b      	ldr	r3, [r3, #20]
 80007f4:	88fa      	ldrh	r2, [r7, #6]
 80007f6:	0952      	lsrs	r2, r2, #5
 80007f8:	b292      	uxth	r2, r2
 80007fa:	f462 62e0 	orn	r2, r2, #1792	; 0x700
 80007fe:	4611      	mov	r1, r2
 8000800:	4a18      	ldr	r2, [pc, #96]	; (8000864 <LCD_Output16BitWord+0xb8>)
 8000802:	400b      	ands	r3, r1
 8000804:	6153      	str	r3, [r2, #20]
    GPIOD->ODR |= (data >> 2) & 0x3;
 8000806:	4b17      	ldr	r3, [pc, #92]	; (8000864 <LCD_Output16BitWord+0xb8>)
 8000808:	695a      	ldr	r2, [r3, #20]
 800080a:	88fb      	ldrh	r3, [r7, #6]
 800080c:	089b      	lsrs	r3, r3, #2
 800080e:	b29b      	uxth	r3, r3
 8000810:	f003 0303 	and.w	r3, r3, #3
 8000814:	4913      	ldr	r1, [pc, #76]	; (8000864 <LCD_Output16BitWord+0xb8>)
 8000816:	4313      	orrs	r3, r2
 8000818:	614b      	str	r3, [r1, #20]
    GPIOD->ODR &= ((data >> 2) & 0x3) | ~(0x3);
 800081a:	4b12      	ldr	r3, [pc, #72]	; (8000864 <LCD_Output16BitWord+0xb8>)
 800081c:	695b      	ldr	r3, [r3, #20]
 800081e:	88fa      	ldrh	r2, [r7, #6]
 8000820:	0892      	lsrs	r2, r2, #2
 8000822:	b292      	uxth	r2, r2
 8000824:	f062 0203 	orn	r2, r2, #3
 8000828:	4611      	mov	r1, r2
 800082a:	4a0e      	ldr	r2, [pc, #56]	; (8000864 <LCD_Output16BitWord+0xb8>)
 800082c:	400b      	ands	r3, r1
 800082e:	6153      	str	r3, [r2, #20]

    GPIOE->ODR |= (data << 3) & ~(0x007F);
 8000830:	4b0d      	ldr	r3, [pc, #52]	; (8000868 <LCD_Output16BitWord+0xbc>)
 8000832:	695a      	ldr	r2, [r3, #20]
 8000834:	88fb      	ldrh	r3, [r7, #6]
 8000836:	00db      	lsls	r3, r3, #3
 8000838:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800083c:	490a      	ldr	r1, [pc, #40]	; (8000868 <LCD_Output16BitWord+0xbc>)
 800083e:	4313      	orrs	r3, r2
 8000840:	614b      	str	r3, [r1, #20]
    GPIOE->ODR &= ((data << 3) & ~(0x007F)) | 0x007F;
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <LCD_Output16BitWord+0xbc>)
 8000844:	695b      	ldr	r3, [r3, #20]
 8000846:	88fa      	ldrh	r2, [r7, #6]
 8000848:	00d2      	lsls	r2, r2, #3
 800084a:	f042 027f 	orr.w	r2, r2, #127	; 0x7f
 800084e:	4611      	mov	r1, r2
 8000850:	4a05      	ldr	r2, [pc, #20]	; (8000868 <LCD_Output16BitWord+0xbc>)
 8000852:	400b      	ands	r3, r1
 8000854:	6153      	str	r3, [r2, #20]
}
 8000856:	bf00      	nop
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	40020c00 	.word	0x40020c00
 8000868:	40021000 	.word	0x40021000

0800086c <LCD_WriteReg>:

void LCD_WriteReg(uint16_t command, uint16_t data){
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	460a      	mov	r2, r1
 8000876:	80fb      	strh	r3, [r7, #6]
 8000878:	4613      	mov	r3, r2
 800087a:	80bb      	strh	r3, [r7, #4]
	LCD_WriteCommand(command);
 800087c:	88fb      	ldrh	r3, [r7, #6]
 800087e:	4618      	mov	r0, r3
 8000880:	f000 f838 	bl	80008f4 <LCD_WriteCommand>
	LCD_WriteData(data);
 8000884:	88bb      	ldrh	r3, [r7, #4]
 8000886:	4618      	mov	r0, r3
 8000888:	f000 f804 	bl	8000894 <LCD_WriteData>
}
 800088c:	bf00      	nop
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <LCD_WriteData>:

void LCD_WriteData(uint16_t data){
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	80fb      	strh	r3, [r7, #6]
	GPIOD->ODR &= ~(0x80); // set PD7 ~CS to 0
 800089e:	4b13      	ldr	r3, [pc, #76]	; (80008ec <LCD_WriteData+0x58>)
 80008a0:	695b      	ldr	r3, [r3, #20]
 80008a2:	4a12      	ldr	r2, [pc, #72]	; (80008ec <LCD_WriteData+0x58>)
 80008a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80008a8:	6153      	str	r3, [r2, #20]
	GPIOE->ODR |= 0x8; // set PE3 (D/~C) to 1 (Data)
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <LCD_WriteData+0x5c>)
 80008ac:	695b      	ldr	r3, [r3, #20]
 80008ae:	4a10      	ldr	r2, [pc, #64]	; (80008f0 <LCD_WriteData+0x5c>)
 80008b0:	f043 0308 	orr.w	r3, r3, #8
 80008b4:	6153      	str	r3, [r2, #20]
	GPIOD->ODR &= ~(0x20); // Pushimpuls WR = 0
 80008b6:	4b0d      	ldr	r3, [pc, #52]	; (80008ec <LCD_WriteData+0x58>)
 80008b8:	695b      	ldr	r3, [r3, #20]
 80008ba:	4a0c      	ldr	r2, [pc, #48]	; (80008ec <LCD_WriteData+0x58>)
 80008bc:	f023 0320 	bic.w	r3, r3, #32
 80008c0:	6153      	str	r3, [r2, #20]
	LCD_Output16BitWord(data);
 80008c2:	88fb      	ldrh	r3, [r7, #6]
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff ff71 	bl	80007ac <LCD_Output16BitWord>
	GPIOD->ODR |= 0x20; // WR = 1
 80008ca:	4b08      	ldr	r3, [pc, #32]	; (80008ec <LCD_WriteData+0x58>)
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	4a07      	ldr	r2, [pc, #28]	; (80008ec <LCD_WriteData+0x58>)
 80008d0:	f043 0320 	orr.w	r3, r3, #32
 80008d4:	6153      	str	r3, [r2, #20]
	GPIOD->ODR |= 0x80; // Chipselect = 1
 80008d6:	4b05      	ldr	r3, [pc, #20]	; (80008ec <LCD_WriteData+0x58>)
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	4a04      	ldr	r2, [pc, #16]	; (80008ec <LCD_WriteData+0x58>)
 80008dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e0:	6153      	str	r3, [r2, #20]
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40020c00 	.word	0x40020c00
 80008f0:	40021000 	.word	0x40021000

080008f4 <LCD_WriteCommand>:

void LCD_WriteCommand(uint16_t data){
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	80fb      	strh	r3, [r7, #6]
	GPIOD->ODR &= ~(0x80); // set PD7 ~CS to 0
 80008fe:	4b13      	ldr	r3, [pc, #76]	; (800094c <LCD_WriteCommand+0x58>)
 8000900:	695b      	ldr	r3, [r3, #20]
 8000902:	4a12      	ldr	r2, [pc, #72]	; (800094c <LCD_WriteCommand+0x58>)
 8000904:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000908:	6153      	str	r3, [r2, #20]
	GPIOE->ODR &= ~(0x8); // set PE3 (D/~C) to 0 (Command)
 800090a:	4b11      	ldr	r3, [pc, #68]	; (8000950 <LCD_WriteCommand+0x5c>)
 800090c:	695b      	ldr	r3, [r3, #20]
 800090e:	4a10      	ldr	r2, [pc, #64]	; (8000950 <LCD_WriteCommand+0x5c>)
 8000910:	f023 0308 	bic.w	r3, r3, #8
 8000914:	6153      	str	r3, [r2, #20]
	GPIOD->ODR &= ~(0x20); // set WR PD5 = 0
 8000916:	4b0d      	ldr	r3, [pc, #52]	; (800094c <LCD_WriteCommand+0x58>)
 8000918:	695b      	ldr	r3, [r3, #20]
 800091a:	4a0c      	ldr	r2, [pc, #48]	; (800094c <LCD_WriteCommand+0x58>)
 800091c:	f023 0320 	bic.w	r3, r3, #32
 8000920:	6153      	str	r3, [r2, #20]
	LCD_Output16BitWord(data);
 8000922:	88fb      	ldrh	r3, [r7, #6]
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff ff41 	bl	80007ac <LCD_Output16BitWord>
	GPIOD->ODR |= 0x20; // set WR PD5 = 1
 800092a:	4b08      	ldr	r3, [pc, #32]	; (800094c <LCD_WriteCommand+0x58>)
 800092c:	695b      	ldr	r3, [r3, #20]
 800092e:	4a07      	ldr	r2, [pc, #28]	; (800094c <LCD_WriteCommand+0x58>)
 8000930:	f043 0320 	orr.w	r3, r3, #32
 8000934:	6153      	str	r3, [r2, #20]
	GPIOD->ODR |= 0x80; // set ~CS PD7 = 1
 8000936:	4b05      	ldr	r3, [pc, #20]	; (800094c <LCD_WriteCommand+0x58>)
 8000938:	695b      	ldr	r3, [r3, #20]
 800093a:	4a04      	ldr	r2, [pc, #16]	; (800094c <LCD_WriteCommand+0x58>)
 800093c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000940:	6153      	str	r3, [r2, #20]
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40020c00 	.word	0x40020c00
 8000950:	40021000 	.word	0x40021000

08000954 <LCD_Init>:

void LCD_Init (void){
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
	// Display-Reset
	GPIOD->ODR &= ~(0x8);
 8000958:	4b35      	ldr	r3, [pc, #212]	; (8000a30 <LCD_Init+0xdc>)
 800095a:	695b      	ldr	r3, [r3, #20]
 800095c:	4a34      	ldr	r2, [pc, #208]	; (8000a30 <LCD_Init+0xdc>)
 800095e:	f023 0308 	bic.w	r3, r3, #8
 8000962:	6153      	str	r3, [r2, #20]
	osDelay(pdMS_TO_TICKS(1));
 8000964:	2001      	movs	r0, #1
 8000966:	f007 fe97 	bl	8008698 <osDelay>
	GPIOD->ODR |= 0x8;
 800096a:	4b31      	ldr	r3, [pc, #196]	; (8000a30 <LCD_Init+0xdc>)
 800096c:	695b      	ldr	r3, [r3, #20]
 800096e:	4a30      	ldr	r2, [pc, #192]	; (8000a30 <LCD_Init+0xdc>)
 8000970:	f043 0308 	orr.w	r3, r3, #8
 8000974:	6153      	str	r3, [r2, #20]
	osDelay(pdMS_TO_TICKS(1));
 8000976:	2001      	movs	r0, #1
 8000978:	f007 fe8e 	bl	8008698 <osDelay>


	LCD_WriteReg(0x0010, 0x0001); /* Enter sleep mode */
 800097c:	2101      	movs	r1, #1
 800097e:	2010      	movs	r0, #16
 8000980:	f7ff ff74 	bl	800086c <LCD_WriteReg>
	LCD_WriteReg(0x001E, 0x00B2); /* Set initial power parameters. */
 8000984:	21b2      	movs	r1, #178	; 0xb2
 8000986:	201e      	movs	r0, #30
 8000988:	f7ff ff70 	bl	800086c <LCD_WriteReg>
	LCD_WriteReg(0x0028, 0x0006); /* Set initial power parameters. */
 800098c:	2106      	movs	r1, #6
 800098e:	2028      	movs	r0, #40	; 0x28
 8000990:	f7ff ff6c 	bl	800086c <LCD_WriteReg>
	LCD_WriteReg(0x0000, 0x0001); /* Start the oscillator.*/
 8000994:	2101      	movs	r1, #1
 8000996:	2000      	movs	r0, #0
 8000998:	f7ff ff68 	bl	800086c <LCD_WriteReg>
	LCD_WriteReg(0x0001, 0x72EF); /* Set pixel format and basic display orientation */
 800099c:	f247 21ef 	movw	r1, #29423	; 0x72ef
 80009a0:	2001      	movs	r0, #1
 80009a2:	f7ff ff63 	bl	800086c <LCD_WriteReg>
	LCD_WriteReg(0x0002, 0x0600);
 80009a6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80009aa:	2002      	movs	r0, #2
 80009ac:	f7ff ff5e 	bl	800086c <LCD_WriteReg>
	LCD_WriteReg(0x0010, 0x0000); /* Exit sleep mode.*/
 80009b0:	2100      	movs	r1, #0
 80009b2:	2010      	movs	r0, #16
 80009b4:	f7ff ff5a 	bl	800086c <LCD_WriteReg>
	//30ms warten weniger geht meist auch
	osDelay(pdMS_TO_TICKS(30));;
 80009b8:	201e      	movs	r0, #30
 80009ba:	f007 fe6d 	bl	8008698 <osDelay>

	LCD_WriteReg(0x0011, 0x6870); /* Configure pixel color format and MCU interface parameters.*/
 80009be:	f646 0170 	movw	r1, #26736	; 0x6870
 80009c2:	2011      	movs	r0, #17
 80009c4:	f7ff ff52 	bl	800086c <LCD_WriteReg>
	LCD_WriteReg(0x0012, 0x0999); /* Set analog parameters */
 80009c8:	f640 1199 	movw	r1, #2457	; 0x999
 80009cc:	2012      	movs	r0, #18
 80009ce:	f7ff ff4d 	bl	800086c <LCD_WriteReg>
	LCD_WriteReg(0x0026, 0x3800);
 80009d2:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 80009d6:	2026      	movs	r0, #38	; 0x26
 80009d8:	f7ff ff48 	bl	800086c <LCD_WriteReg>
	LCD_WriteReg(0x0007, 0x0033); /* Enable the display */
 80009dc:	2133      	movs	r1, #51	; 0x33
 80009de:	2007      	movs	r0, #7
 80009e0:	f7ff ff44 	bl	800086c <LCD_WriteReg>
	LCD_WriteReg(0x000C, 0x0005); /* Set VCIX2 voltage to 6.1V.*/
 80009e4:	2105      	movs	r1, #5
 80009e6:	200c      	movs	r0, #12
 80009e8:	f7ff ff40 	bl	800086c <LCD_WriteReg>
	LCD_WriteReg(0x000D, 0x000A); /* Configure Vlcd63 and VCOMl */
 80009ec:	210a      	movs	r1, #10
 80009ee:	200d      	movs	r0, #13
 80009f0:	f7ff ff3c 	bl	800086c <LCD_WriteReg>
	LCD_WriteReg(0x000E, 0x2E00);
 80009f4:	f44f 5138 	mov.w	r1, #11776	; 0x2e00
 80009f8:	200e      	movs	r0, #14
 80009fa:	f7ff ff37 	bl	800086c <LCD_WriteReg>
	LCD_WriteReg(0x0044, (240-1) << 8); /* Set the display size and ensure that the GRAM window
 80009fe:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 8000a02:	2044      	movs	r0, #68	; 0x44
 8000a04:	f7ff ff32 	bl	800086c <LCD_WriteReg>
	is set to allow access to the full display buffer.*/
	LCD_WriteReg(0x0045, 0x0000);
 8000a08:	2100      	movs	r1, #0
 8000a0a:	2045      	movs	r0, #69	; 0x45
 8000a0c:	f7ff ff2e 	bl	800086c <LCD_WriteReg>
	LCD_WriteReg(0x0046, 320-1);
 8000a10:	f240 113f 	movw	r1, #319	; 0x13f
 8000a14:	2046      	movs	r0, #70	; 0x46
 8000a16:	f7ff ff29 	bl	800086c <LCD_WriteReg>
	LCD_WriteReg(0x004E, 0x0000); /*Set cursor to 0,0 */
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	204e      	movs	r0, #78	; 0x4e
 8000a1e:	f7ff ff25 	bl	800086c <LCD_WriteReg>
	LCD_WriteReg(0x004F, 0x0000);
 8000a22:	2100      	movs	r1, #0
 8000a24:	204f      	movs	r0, #79	; 0x4f
 8000a26:	f7ff ff21 	bl	800086c <LCD_WriteReg>


	//GPIOD->ODR |= 0x2000; // PD13 = 1 Backlight anschalten
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40020c00 	.word	0x40020c00

08000a34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a38:	f000 fdbc 	bl	80015b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a3c:	f000 f8c2 	bl	8000bc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a40:	f000 f9f4 	bl	8000e2c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a44:	f000 f928 	bl	8000c98 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000a48:	f000 f954 	bl	8000cf4 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000a4c:	f000 f982 	bl	8000d54 <MX_SPI1_Init>
  MX_TIM7_Init();
 8000a50:	f000 f9b6 	bl	8000dc0 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

	// Peripheral GPIOD einschalten
	RCC->AHB1ENR |= 1<<3|1;
 8000a54:	4b42      	ldr	r3, [pc, #264]	; (8000b60 <main+0x12c>)
 8000a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a58:	4a41      	ldr	r2, [pc, #260]	; (8000b60 <main+0x12c>)
 8000a5a:	f043 0309 	orr.w	r3, r3, #9
 8000a5e:	6313      	str	r3, [r2, #48]	; 0x30
	// Peripheral GPIOE einschalten
	RCC->AHB1ENR |= 1<<4|1;
 8000a60:	4b3f      	ldr	r3, [pc, #252]	; (8000b60 <main+0x12c>)
 8000a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a64:	4a3e      	ldr	r2, [pc, #248]	; (8000b60 <main+0x12c>)
 8000a66:	f043 0311 	orr.w	r3, r3, #17
 8000a6a:	6313      	str	r3, [r2, #48]	; 0x30

	// GPIO einrichten für Output
	GPIOD->MODER |= 0x55154545;
 8000a6c:	4b3d      	ldr	r3, [pc, #244]	; (8000b64 <main+0x130>)
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	493c      	ldr	r1, [pc, #240]	; (8000b64 <main+0x130>)
 8000a72:	4b3d      	ldr	r3, [pc, #244]	; (8000b68 <main+0x134>)
 8000a74:	4313      	orrs	r3, r2
 8000a76:	600b      	str	r3, [r1, #0]
	GPIOE->MODER |= 0x55554040;
 8000a78:	4b3c      	ldr	r3, [pc, #240]	; (8000b6c <main+0x138>)
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	493b      	ldr	r1, [pc, #236]	; (8000b6c <main+0x138>)
 8000a7e:	4b3c      	ldr	r3, [pc, #240]	; (8000b70 <main+0x13c>)
 8000a80:	4313      	orrs	r3, r2
 8000a82:	600b      	str	r3, [r1, #0]

	// Orange LED konfigurieren
	GPIOD->MODER |= 1<<24;
 8000a84:	4b37      	ldr	r3, [pc, #220]	; (8000b64 <main+0x130>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a36      	ldr	r2, [pc, #216]	; (8000b64 <main+0x130>)
 8000a8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a8e:	6013      	str	r3, [r2, #0]

	// Gruene LED (Port D12) ausschalten
	GPIOD->ODR &= ~(1<<12);
 8000a90:	4b34      	ldr	r3, [pc, #208]	; (8000b64 <main+0x130>)
 8000a92:	695b      	ldr	r3, [r3, #20]
 8000a94:	4a33      	ldr	r2, [pc, #204]	; (8000b64 <main+0x130>)
 8000a96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000a9a:	6153      	str	r3, [r2, #20]

	//Read auf 1
	GPIOD->MODER 	|= 1<<8;
 8000a9c:	4b31      	ldr	r3, [pc, #196]	; (8000b64 <main+0x130>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a30      	ldr	r2, [pc, #192]	; (8000b64 <main+0x130>)
 8000aa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aa6:	6013      	str	r3, [r2, #0]
	GPIOD->ODR		|= 1<<4;
 8000aa8:	4b2e      	ldr	r3, [pc, #184]	; (8000b64 <main+0x130>)
 8000aaa:	695b      	ldr	r3, [r3, #20]
 8000aac:	4a2d      	ldr	r2, [pc, #180]	; (8000b64 <main+0x130>)
 8000aae:	f043 0310 	orr.w	r3, r3, #16
 8000ab2:	6153      	str	r3, [r2, #20]

	// Hintergrundbeleuchtung
	GPIOD->MODER |= 1<<26;
 8000ab4:	4b2b      	ldr	r3, [pc, #172]	; (8000b64 <main+0x130>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a2a      	ldr	r2, [pc, #168]	; (8000b64 <main+0x130>)
 8000aba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000abe:	6013      	str	r3, [r2, #0]
	GPIOD->ODR |= 1<<13;
 8000ac0:	4b28      	ldr	r3, [pc, #160]	; (8000b64 <main+0x130>)
 8000ac2:	695b      	ldr	r3, [r3, #20]
 8000ac4:	4a27      	ldr	r2, [pc, #156]	; (8000b64 <main+0x130>)
 8000ac6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000aca:	6153      	str	r3, [r2, #20]

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000acc:	f007 fd08 	bl	80084e0 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of oneMs */
  oneMsHandle = osTimerNew(oneMsFunc, osTimerPeriodic, NULL, &oneMs_attributes);
 8000ad0:	4b28      	ldr	r3, [pc, #160]	; (8000b74 <main+0x140>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	4828      	ldr	r0, [pc, #160]	; (8000b78 <main+0x144>)
 8000ad8:	f007 fe0e 	bl	80086f8 <osTimerNew>
 8000adc:	4603      	mov	r3, r0
 8000ade:	4a27      	ldr	r2, [pc, #156]	; (8000b7c <main+0x148>)
 8000ae0:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of logQueue */
  logQueueHandle = osMessageQueueNew (16, 40, &logQueue_attributes);
 8000ae2:	4a27      	ldr	r2, [pc, #156]	; (8000b80 <main+0x14c>)
 8000ae4:	2128      	movs	r1, #40	; 0x28
 8000ae6:	2010      	movs	r0, #16
 8000ae8:	f007 feb0 	bl	800884c <osMessageQueueNew>
 8000aec:	4603      	mov	r3, r0
 8000aee:	4a25      	ldr	r2, [pc, #148]	; (8000b84 <main+0x150>)
 8000af0:	6013      	str	r3, [r2, #0]
  //Handle = xQueueCreate(16,sizeof(uint32_t));
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000af2:	4a25      	ldr	r2, [pc, #148]	; (8000b88 <main+0x154>)
 8000af4:	2100      	movs	r1, #0
 8000af6:	4825      	ldr	r0, [pc, #148]	; (8000b8c <main+0x158>)
 8000af8:	f007 fd3c 	bl	8008574 <osThreadNew>
 8000afc:	4603      	mov	r3, r0
 8000afe:	4a24      	ldr	r2, [pc, #144]	; (8000b90 <main+0x15c>)
 8000b00:	6013      	str	r3, [r2, #0]

  /* creation of task1ms */
  task1msHandle = osThreadNew(StartTask02, NULL, &task1ms_attributes);
 8000b02:	4a24      	ldr	r2, [pc, #144]	; (8000b94 <main+0x160>)
 8000b04:	2100      	movs	r1, #0
 8000b06:	4824      	ldr	r0, [pc, #144]	; (8000b98 <main+0x164>)
 8000b08:	f007 fd34 	bl	8008574 <osThreadNew>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	4a23      	ldr	r2, [pc, #140]	; (8000b9c <main+0x168>)
 8000b10:	6013      	str	r3, [r2, #0]

  /* creation of task10ms */
  task10msHandle = osThreadNew(StartTask03, NULL, &task10ms_attributes);
 8000b12:	4a23      	ldr	r2, [pc, #140]	; (8000ba0 <main+0x16c>)
 8000b14:	2100      	movs	r1, #0
 8000b16:	4823      	ldr	r0, [pc, #140]	; (8000ba4 <main+0x170>)
 8000b18:	f007 fd2c 	bl	8008574 <osThreadNew>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	4a22      	ldr	r2, [pc, #136]	; (8000ba8 <main+0x174>)
 8000b20:	6013      	str	r3, [r2, #0]

  /* creation of producer01 */
  producer01Handle = osThreadNew(producer01task, NULL, &producer01_attributes);
 8000b22:	4a22      	ldr	r2, [pc, #136]	; (8000bac <main+0x178>)
 8000b24:	2100      	movs	r1, #0
 8000b26:	4822      	ldr	r0, [pc, #136]	; (8000bb0 <main+0x17c>)
 8000b28:	f007 fd24 	bl	8008574 <osThreadNew>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	4a21      	ldr	r2, [pc, #132]	; (8000bb4 <main+0x180>)
 8000b30:	6013      	str	r3, [r2, #0]

  /* creation of consumer01 */
  consumer01Handle = osThreadNew(consumer01task, NULL, &consumer01_attributes);
 8000b32:	4a21      	ldr	r2, [pc, #132]	; (8000bb8 <main+0x184>)
 8000b34:	2100      	movs	r1, #0
 8000b36:	4821      	ldr	r0, [pc, #132]	; (8000bbc <main+0x188>)
 8000b38:	f007 fd1c 	bl	8008574 <osThreadNew>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	4a20      	ldr	r2, [pc, #128]	; (8000bc0 <main+0x18c>)
 8000b40:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  osTimerStart(oneMsHandle,pdMS_TO_TICKS(125));
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <main+0x148>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	217d      	movs	r1, #125	; 0x7d
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f007 fe51 	bl	80087f0 <osTimerStart>
  LCD_Init();
 8000b4e:	f7ff ff01 	bl	8000954 <LCD_Init>
  LCD_ClearDisplay(0xFFFF);
 8000b52:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000b56:	f7ff fe0c 	bl	8000772 <LCD_ClearDisplay>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000b5a:	f007 fce5 	bl	8008528 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //xTimerCreate("oneMsTimer", pdMS_TO_TICKS(1), pdTRUE, 0, prvOneMsTimer); /////////////////////////


  while (1)
 8000b5e:	e7fe      	b.n	8000b5e <main+0x12a>
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40020c00 	.word	0x40020c00
 8000b68:	55154545 	.word	0x55154545
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	55554040 	.word	0x55554040
 8000b74:	0800e72c 	.word	0x0800e72c
 8000b78:	0800118d 	.word	0x0800118d
 8000b7c:	20000204 	.word	0x20000204
 8000b80:	0800e714 	.word	0x0800e714
 8000b84:	20000200 	.word	0x20000200
 8000b88:	0800e660 	.word	0x0800e660
 8000b8c:	08001029 	.word	0x08001029
 8000b90:	200001ec 	.word	0x200001ec
 8000b94:	0800e684 	.word	0x0800e684
 8000b98:	08001085 	.word	0x08001085
 8000b9c:	200001f0 	.word	0x200001f0
 8000ba0:	0800e6a8 	.word	0x0800e6a8
 8000ba4:	08001095 	.word	0x08001095
 8000ba8:	200001f4 	.word	0x200001f4
 8000bac:	0800e6cc 	.word	0x0800e6cc
 8000bb0:	080010a5 	.word	0x080010a5
 8000bb4:	200001f8 	.word	0x200001f8
 8000bb8:	0800e6f0 	.word	0x0800e6f0
 8000bbc:	080010f9 	.word	0x080010f9
 8000bc0:	200001fc 	.word	0x200001fc

08000bc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b094      	sub	sp, #80	; 0x50
 8000bc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bca:	f107 0320 	add.w	r3, r7, #32
 8000bce:	2230      	movs	r2, #48	; 0x30
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f00b f884 	bl	800bce0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd8:	f107 030c 	add.w	r3, r7, #12
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be8:	2300      	movs	r3, #0
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	4b28      	ldr	r3, [pc, #160]	; (8000c90 <SystemClock_Config+0xcc>)
 8000bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf0:	4a27      	ldr	r2, [pc, #156]	; (8000c90 <SystemClock_Config+0xcc>)
 8000bf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf8:	4b25      	ldr	r3, [pc, #148]	; (8000c90 <SystemClock_Config+0xcc>)
 8000bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c00:	60bb      	str	r3, [r7, #8]
 8000c02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c04:	2300      	movs	r3, #0
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	4b22      	ldr	r3, [pc, #136]	; (8000c94 <SystemClock_Config+0xd0>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a21      	ldr	r2, [pc, #132]	; (8000c94 <SystemClock_Config+0xd0>)
 8000c0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c12:	6013      	str	r3, [r2, #0]
 8000c14:	4b1f      	ldr	r3, [pc, #124]	; (8000c94 <SystemClock_Config+0xd0>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c1c:	607b      	str	r3, [r7, #4]
 8000c1e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c20:	2301      	movs	r3, #1
 8000c22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c34:	2308      	movs	r3, #8
 8000c36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c38:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000c3c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c42:	2307      	movs	r3, #7
 8000c44:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c46:	f107 0320 	add.w	r3, r7, #32
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f003 fa30 	bl	80040b0 <HAL_RCC_OscConfig>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000c56:	f000 faa9 	bl	80011ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c5a:	230f      	movs	r3, #15
 8000c5c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c66:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c6a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c70:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c72:	f107 030c 	add.w	r3, r7, #12
 8000c76:	2105      	movs	r1, #5
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f003 fc91 	bl	80045a0 <HAL_RCC_ClockConfig>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000c84:	f000 fa92 	bl	80011ac <Error_Handler>
  }
}
 8000c88:	bf00      	nop
 8000c8a:	3750      	adds	r7, #80	; 0x50
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40007000 	.word	0x40007000

08000c98 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c9c:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <MX_I2C1_Init+0x50>)
 8000c9e:	4a13      	ldr	r2, [pc, #76]	; (8000cec <MX_I2C1_Init+0x54>)
 8000ca0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ca2:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <MX_I2C1_Init+0x50>)
 8000ca4:	4a12      	ldr	r2, [pc, #72]	; (8000cf0 <MX_I2C1_Init+0x58>)
 8000ca6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <MX_I2C1_Init+0x50>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <MX_I2C1_Init+0x50>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <MX_I2C1_Init+0x50>)
 8000cb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cbc:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <MX_I2C1_Init+0x50>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000cc2:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <MX_I2C1_Init+0x50>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cc8:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <MX_I2C1_Init+0x50>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cce:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <MX_I2C1_Init+0x50>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cd4:	4804      	ldr	r0, [pc, #16]	; (8000ce8 <MX_I2C1_Init+0x50>)
 8000cd6:	f002 fc07 	bl	80034e8 <HAL_I2C_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ce0:	f000 fa64 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	200000b0 	.word	0x200000b0
 8000cec:	40005400 	.word	0x40005400
 8000cf0:	000186a0 	.word	0x000186a0

08000cf4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000cf8:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <MX_I2S3_Init+0x54>)
 8000cfa:	4a14      	ldr	r2, [pc, #80]	; (8000d4c <MX_I2S3_Init+0x58>)
 8000cfc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000cfe:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <MX_I2S3_Init+0x54>)
 8000d00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d04:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000d06:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <MX_I2S3_Init+0x54>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000d0c:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <MX_I2S3_Init+0x54>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000d12:	4b0d      	ldr	r3, [pc, #52]	; (8000d48 <MX_I2S3_Init+0x54>)
 8000d14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d18:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <MX_I2S3_Init+0x54>)
 8000d1c:	4a0c      	ldr	r2, [pc, #48]	; (8000d50 <MX_I2S3_Init+0x5c>)
 8000d1e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000d20:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <MX_I2S3_Init+0x54>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000d26:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <MX_I2S3_Init+0x54>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <MX_I2S3_Init+0x54>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000d32:	4805      	ldr	r0, [pc, #20]	; (8000d48 <MX_I2S3_Init+0x54>)
 8000d34:	f002 fd1c 	bl	8003770 <HAL_I2S_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000d3e:	f000 fa35 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000104 	.word	0x20000104
 8000d4c:	40003c00 	.word	0x40003c00
 8000d50:	00017700 	.word	0x00017700

08000d54 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d58:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <MX_SPI1_Init+0x64>)
 8000d5a:	4a18      	ldr	r2, [pc, #96]	; (8000dbc <MX_SPI1_Init+0x68>)
 8000d5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d5e:	4b16      	ldr	r3, [pc, #88]	; (8000db8 <MX_SPI1_Init+0x64>)
 8000d60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d66:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <MX_SPI1_Init+0x64>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d6c:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <MX_SPI1_Init+0x64>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d72:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <MX_SPI1_Init+0x64>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d78:	4b0f      	ldr	r3, [pc, #60]	; (8000db8 <MX_SPI1_Init+0x64>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d7e:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <MX_SPI1_Init+0x64>)
 8000d80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d84:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d86:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <MX_SPI1_Init+0x64>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d8c:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <MX_SPI1_Init+0x64>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d92:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <MX_SPI1_Init+0x64>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d98:	4b07      	ldr	r3, [pc, #28]	; (8000db8 <MX_SPI1_Init+0x64>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d9e:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <MX_SPI1_Init+0x64>)
 8000da0:	220a      	movs	r2, #10
 8000da2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000da4:	4804      	ldr	r0, [pc, #16]	; (8000db8 <MX_SPI1_Init+0x64>)
 8000da6:	f003 ff47 	bl	8004c38 <HAL_SPI_Init>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000db0:	f000 f9fc 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	2000014c 	.word	0x2000014c
 8000dbc:	40013000 	.word	0x40013000

08000dc0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc6:	463b      	mov	r3, r7
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000dce:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <MX_TIM7_Init+0x64>)
 8000dd0:	4a15      	ldr	r2, [pc, #84]	; (8000e28 <MX_TIM7_Init+0x68>)
 8000dd2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 84;
 8000dd4:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <MX_TIM7_Init+0x64>)
 8000dd6:	2254      	movs	r2, #84	; 0x54
 8000dd8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dda:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <MX_TIM7_Init+0x64>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8000de0:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <MX_TIM7_Init+0x64>)
 8000de2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000de6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de8:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <MX_TIM7_Init+0x64>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000dee:	480d      	ldr	r0, [pc, #52]	; (8000e24 <MX_TIM7_Init+0x64>)
 8000df0:	f003 ffab 	bl	8004d4a <HAL_TIM_Base_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000dfa:	f000 f9d7 	bl	80011ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e02:	2300      	movs	r3, #0
 8000e04:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000e06:	463b      	mov	r3, r7
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4806      	ldr	r0, [pc, #24]	; (8000e24 <MX_TIM7_Init+0x64>)
 8000e0c:	f004 f88c 	bl	8004f28 <HAL_TIMEx_MasterConfigSynchronization>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000e16:	f000 f9c9 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	200001a4 	.word	0x200001a4
 8000e28:	40001400 	.word	0x40001400

08000e2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08c      	sub	sp, #48	; 0x30
 8000e30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e32:	f107 031c 	add.w	r3, r7, #28
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	605a      	str	r2, [r3, #4]
 8000e3c:	609a      	str	r2, [r3, #8]
 8000e3e:	60da      	str	r2, [r3, #12]
 8000e40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	61bb      	str	r3, [r7, #24]
 8000e46:	4b72      	ldr	r3, [pc, #456]	; (8001010 <MX_GPIO_Init+0x1e4>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a71      	ldr	r2, [pc, #452]	; (8001010 <MX_GPIO_Init+0x1e4>)
 8000e4c:	f043 0310 	orr.w	r3, r3, #16
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b6f      	ldr	r3, [pc, #444]	; (8001010 <MX_GPIO_Init+0x1e4>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f003 0310 	and.w	r3, r3, #16
 8000e5a:	61bb      	str	r3, [r7, #24]
 8000e5c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
 8000e62:	4b6b      	ldr	r3, [pc, #428]	; (8001010 <MX_GPIO_Init+0x1e4>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a6a      	ldr	r2, [pc, #424]	; (8001010 <MX_GPIO_Init+0x1e4>)
 8000e68:	f043 0304 	orr.w	r3, r3, #4
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b68      	ldr	r3, [pc, #416]	; (8001010 <MX_GPIO_Init+0x1e4>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0304 	and.w	r3, r3, #4
 8000e76:	617b      	str	r3, [r7, #20]
 8000e78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	613b      	str	r3, [r7, #16]
 8000e7e:	4b64      	ldr	r3, [pc, #400]	; (8001010 <MX_GPIO_Init+0x1e4>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	4a63      	ldr	r2, [pc, #396]	; (8001010 <MX_GPIO_Init+0x1e4>)
 8000e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e88:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8a:	4b61      	ldr	r3, [pc, #388]	; (8001010 <MX_GPIO_Init+0x1e4>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	4b5d      	ldr	r3, [pc, #372]	; (8001010 <MX_GPIO_Init+0x1e4>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a5c      	ldr	r2, [pc, #368]	; (8001010 <MX_GPIO_Init+0x1e4>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4b5a      	ldr	r3, [pc, #360]	; (8001010 <MX_GPIO_Init+0x1e4>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	4b56      	ldr	r3, [pc, #344]	; (8001010 <MX_GPIO_Init+0x1e4>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	4a55      	ldr	r2, [pc, #340]	; (8001010 <MX_GPIO_Init+0x1e4>)
 8000ebc:	f043 0302 	orr.w	r3, r3, #2
 8000ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec2:	4b53      	ldr	r3, [pc, #332]	; (8001010 <MX_GPIO_Init+0x1e4>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	f003 0302 	and.w	r3, r3, #2
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	607b      	str	r3, [r7, #4]
 8000ed2:	4b4f      	ldr	r3, [pc, #316]	; (8001010 <MX_GPIO_Init+0x1e4>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	4a4e      	ldr	r2, [pc, #312]	; (8001010 <MX_GPIO_Init+0x1e4>)
 8000ed8:	f043 0308 	orr.w	r3, r3, #8
 8000edc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ede:	4b4c      	ldr	r3, [pc, #304]	; (8001010 <MX_GPIO_Init+0x1e4>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	f003 0308 	and.w	r3, r3, #8
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2108      	movs	r1, #8
 8000eee:	4849      	ldr	r0, [pc, #292]	; (8001014 <MX_GPIO_Init+0x1e8>)
 8000ef0:	f000 febc 	bl	8001c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	4847      	ldr	r0, [pc, #284]	; (8001018 <MX_GPIO_Init+0x1ec>)
 8000efa:	f000 feb7 	bl	8001c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, green_led_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000efe:	2200      	movs	r2, #0
 8000f00:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000f04:	4845      	ldr	r0, [pc, #276]	; (800101c <MX_GPIO_Init+0x1f0>)
 8000f06:	f000 feb1 	bl	8001c6c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000f0a:	2308      	movs	r3, #8
 8000f0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f16:	2300      	movs	r3, #0
 8000f18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000f1a:	f107 031c 	add.w	r3, r7, #28
 8000f1e:	4619      	mov	r1, r3
 8000f20:	483c      	ldr	r0, [pc, #240]	; (8001014 <MX_GPIO_Init+0x1e8>)
 8000f22:	f000 fcef 	bl	8001904 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000f26:	2301      	movs	r3, #1
 8000f28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	2300      	movs	r3, #0
 8000f34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f36:	f107 031c 	add.w	r3, r7, #28
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4836      	ldr	r0, [pc, #216]	; (8001018 <MX_GPIO_Init+0x1ec>)
 8000f3e:	f000 fce1 	bl	8001904 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000f42:	2308      	movs	r3, #8
 8000f44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f52:	2305      	movs	r3, #5
 8000f54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000f56:	f107 031c 	add.w	r3, r7, #28
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	482e      	ldr	r0, [pc, #184]	; (8001018 <MX_GPIO_Init+0x1ec>)
 8000f5e:	f000 fcd1 	bl	8001904 <HAL_GPIO_Init>

  /*Configure GPIO pin : blue_button_Pin */
  GPIO_InitStruct.Pin = blue_button_Pin;
 8000f62:	2301      	movs	r3, #1
 8000f64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f66:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000f6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(blue_button_GPIO_Port, &GPIO_InitStruct);
 8000f70:	f107 031c 	add.w	r3, r7, #28
 8000f74:	4619      	mov	r1, r3
 8000f76:	482a      	ldr	r0, [pc, #168]	; (8001020 <MX_GPIO_Init+0x1f4>)
 8000f78:	f000 fcc4 	bl	8001904 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000f7c:	2304      	movs	r3, #4
 8000f7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f80:	2300      	movs	r3, #0
 8000f82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000f88:	f107 031c 	add.w	r3, r7, #28
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4825      	ldr	r0, [pc, #148]	; (8001024 <MX_GPIO_Init+0x1f8>)
 8000f90:	f000 fcb8 	bl	8001904 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000f94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fa6:	2305      	movs	r3, #5
 8000fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000faa:	f107 031c 	add.w	r3, r7, #28
 8000fae:	4619      	mov	r1, r3
 8000fb0:	481c      	ldr	r0, [pc, #112]	; (8001024 <MX_GPIO_Init+0x1f8>)
 8000fb2:	f000 fca7 	bl	8001904 <HAL_GPIO_Init>

  /*Configure GPIO pins : green_led_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = green_led_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000fb6:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000fba:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fc8:	f107 031c 	add.w	r3, r7, #28
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4813      	ldr	r0, [pc, #76]	; (800101c <MX_GPIO_Init+0x1f0>)
 8000fd0:	f000 fc98 	bl	8001904 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000fd4:	2320      	movs	r3, #32
 8000fd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000fe0:	f107 031c 	add.w	r3, r7, #28
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	480d      	ldr	r0, [pc, #52]	; (800101c <MX_GPIO_Init+0x1f0>)
 8000fe8:	f000 fc8c 	bl	8001904 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000fec:	2302      	movs	r3, #2
 8000fee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ff0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ff4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000ffa:	f107 031c 	add.w	r3, r7, #28
 8000ffe:	4619      	mov	r1, r3
 8001000:	4804      	ldr	r0, [pc, #16]	; (8001014 <MX_GPIO_Init+0x1e8>)
 8001002:	f000 fc7f 	bl	8001904 <HAL_GPIO_Init>

}
 8001006:	bf00      	nop
 8001008:	3730      	adds	r7, #48	; 0x30
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40023800 	.word	0x40023800
 8001014:	40021000 	.word	0x40021000
 8001018:	40020800 	.word	0x40020800
 800101c:	40020c00 	.word	0x40020c00
 8001020:	40020000 	.word	0x40020000
 8001024:	40020400 	.word	0x40020400

08001028 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001030:	f00a fb0c 	bl	800b64c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
	if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)){
 8001034:	2101      	movs	r1, #1
 8001036:	4811      	ldr	r0, [pc, #68]	; (800107c <StartDefaultTask+0x54>)
 8001038:	f000 fe00 	bl	8001c3c <HAL_GPIO_ReadPin>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d012      	beq.n	8001068 <StartDefaultTask+0x40>
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,GPIO_PIN_SET);
 8001042:	2201      	movs	r2, #1
 8001044:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001048:	480d      	ldr	r0, [pc, #52]	; (8001080 <StartDefaultTask+0x58>)
 800104a:	f000 fe0f 	bl	8001c6c <HAL_GPIO_WritePin>
		osDelay(500);
 800104e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001052:	f007 fb21 	bl	8008698 <osDelay>
		HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);
 8001056:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800105a:	4809      	ldr	r0, [pc, #36]	; (8001080 <StartDefaultTask+0x58>)
 800105c:	f000 fe1f 	bl	8001c9e <HAL_GPIO_TogglePin>
		osDelay(500);
 8001060:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001064:	f007 fb18 	bl	8008698 <osDelay>
	}
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,GPIO_PIN_RESET);
 8001068:	2200      	movs	r2, #0
 800106a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800106e:	4804      	ldr	r0, [pc, #16]	; (8001080 <StartDefaultTask+0x58>)
 8001070:	f000 fdfc 	bl	8001c6c <HAL_GPIO_WritePin>

    osDelay(1);
 8001074:	2001      	movs	r0, #1
 8001076:	f007 fb0f 	bl	8008698 <osDelay>
	if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)){
 800107a:	e7db      	b.n	8001034 <StartDefaultTask+0xc>
 800107c:	40020000 	.word	0x40020000
 8001080:	40020c00 	.word	0x40020c00

08001084 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800108c:	2001      	movs	r0, #1
 800108e:	f007 fb03 	bl	8008698 <osDelay>
 8001092:	e7fb      	b.n	800108c <StartTask02+0x8>

08001094 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800109c:	2001      	movs	r0, #1
 800109e:	f007 fafb 	bl	8008698 <osDelay>
 80010a2:	e7fb      	b.n	800109c <StartTask03+0x8>

080010a4 <producer01task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_producer01task */
void producer01task(void *argument)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08e      	sub	sp, #56	; 0x38
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN producer01task */
  int nr = 1;
 80010ac:	2301      	movs	r3, #1
 80010ae:	637b      	str	r3, [r7, #52]	; 0x34
  /* Infinite loop */
  for(;;)
  {
	  char message[40] = "";
 80010b0:	2300      	movs	r3, #0
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	f107 0310 	add.w	r3, r7, #16
 80010b8:	2224      	movs	r2, #36	; 0x24
 80010ba:	2100      	movs	r1, #0
 80010bc:	4618      	mov	r0, r3
 80010be:	f00a fe0f 	bl	800bce0 <memset>
	  sprintf(message,"Uptime %ds",nr);
 80010c2:	f107 030c 	add.w	r3, r7, #12
 80010c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80010c8:	4909      	ldr	r1, [pc, #36]	; (80010f0 <producer01task+0x4c>)
 80010ca:	4618      	mov	r0, r3
 80010cc:	f00a ff00 	bl	800bed0 <siprintf>
	  nr++;
 80010d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010d2:	3301      	adds	r3, #1
 80010d4:	637b      	str	r3, [r7, #52]	; 0x34
	  //xQueueSendToFront(logQueueHandle,&message);
	  //osMessagePut(logQueueHandle,(uint32_t)message,osWaitForever);
	  osMessageQueuePut(logQueueHandle, &message, 0U, 0U);
 80010d6:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <producer01task+0x50>)
 80010d8:	6818      	ldr	r0, [r3, #0]
 80010da:	f107 010c 	add.w	r1, r7, #12
 80010de:	2300      	movs	r3, #0
 80010e0:	2200      	movs	r2, #0
 80010e2:	f007 fc27 	bl	8008934 <osMessageQueuePut>
	  osDelay(1000);
 80010e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010ea:	f007 fad5 	bl	8008698 <osDelay>
  {
 80010ee:	e7df      	b.n	80010b0 <producer01task+0xc>
 80010f0:	0800c614 	.word	0x0800c614
 80010f4:	20000200 	.word	0x20000200

080010f8 <consumer01task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_consumer01task */
void consumer01task(void *argument)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b090      	sub	sp, #64	; 0x40
 80010fc:	af02      	add	r7, sp, #8
 80010fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN consumer01task */
  uint16_t currentLine = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	86fb      	strh	r3, [r7, #54]	; 0x36
	LCD_WriteString(0, 5, 0, 0xFFFF, "Check Queue every 1.5s");
 8001104:	4b1f      	ldr	r3, [pc, #124]	; (8001184 <consumer01task+0x8c>)
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800110c:	2200      	movs	r2, #0
 800110e:	2105      	movs	r1, #5
 8001110:	2000      	movs	r0, #0
 8001112:	f7ff faa5 	bl	8000660 <LCD_WriteString>
	char message[40] = "";
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	f107 0310 	add.w	r3, r7, #16
 800111e:	2224      	movs	r2, #36	; 0x24
 8001120:	2100      	movs	r1, #0
 8001122:	4618      	mov	r0, r3
 8001124:	f00a fddc 	bl	800bce0 <memset>
  /* Infinite loop */
  for(;;)
  {
	  osMessageQueueGet(logQueueHandle, &message, NULL, osWaitForever);
 8001128:	4b17      	ldr	r3, [pc, #92]	; (8001188 <consumer01task+0x90>)
 800112a:	6818      	ldr	r0, [r3, #0]
 800112c:	f107 010c 	add.w	r1, r7, #12
 8001130:	f04f 33ff 	mov.w	r3, #4294967295
 8001134:	2200      	movs	r2, #0
 8001136:	f007 fc5d 	bl	80089f4 <osMessageQueueGet>
    if(currentLine>=13){LCD_ClearDisplay(0xFFFF); currentLine = 0;LCD_WriteString(0, 5, 0, 0xFFFF, "Check Queue every 1.5s");}
 800113a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800113c:	2b0c      	cmp	r3, #12
 800113e:	d90e      	bls.n	800115e <consumer01task+0x66>
 8001140:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001144:	f7ff fb15 	bl	8000772 <LCD_ClearDisplay>
 8001148:	2300      	movs	r3, #0
 800114a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800114c:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <consumer01task+0x8c>)
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001154:	2200      	movs	r2, #0
 8001156:	2105      	movs	r1, #5
 8001158:	2000      	movs	r0, #0
 800115a:	f7ff fa81 	bl	8000660 <LCD_WriteString>
	  LCD_WriteString(5,21+currentLine*16, 0, 0xFFFF, message);
 800115e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001160:	011b      	lsls	r3, r3, #4
 8001162:	b29b      	uxth	r3, r3
 8001164:	3315      	adds	r3, #21
 8001166:	b299      	uxth	r1, r3
 8001168:	f107 030c 	add.w	r3, r7, #12
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001172:	2200      	movs	r2, #0
 8001174:	2005      	movs	r0, #5
 8001176:	f7ff fa73 	bl	8000660 <LCD_WriteString>
	  currentLine++;
 800117a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800117c:	3301      	adds	r3, #1
 800117e:	86fb      	strh	r3, [r7, #54]	; 0x36
	  osMessageQueueGet(logQueueHandle, &message, NULL, osWaitForever);
 8001180:	e7d2      	b.n	8001128 <consumer01task+0x30>
 8001182:	bf00      	nop
 8001184:	0800c620 	.word	0x0800c620
 8001188:	20000200 	.word	0x20000200

0800118c <oneMsFunc>:
  /* USER CODE END consumer01task */
}

/* oneMsFunc function */
void oneMsFunc(void *argument)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
//		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13,GPIO_PIN_RESET);
//	}else if(counter >= 250){
//		counter = 0;
//	}

	HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_15);
 8001194:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001198:	4803      	ldr	r0, [pc, #12]	; (80011a8 <oneMsFunc+0x1c>)
 800119a:	f000 fd80 	bl	8001c9e <HAL_GPIO_TogglePin>


  /* USER CODE END oneMsFunc */
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40020c00 	.word	0x40020c00

080011ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b0:	b672      	cpsid	i
}
 80011b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <Error_Handler+0x8>
	...

080011b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	4b12      	ldr	r3, [pc, #72]	; (800120c <HAL_MspInit+0x54>)
 80011c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c6:	4a11      	ldr	r2, [pc, #68]	; (800120c <HAL_MspInit+0x54>)
 80011c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011cc:	6453      	str	r3, [r2, #68]	; 0x44
 80011ce:	4b0f      	ldr	r3, [pc, #60]	; (800120c <HAL_MspInit+0x54>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	603b      	str	r3, [r7, #0]
 80011de:	4b0b      	ldr	r3, [pc, #44]	; (800120c <HAL_MspInit+0x54>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	4a0a      	ldr	r2, [pc, #40]	; (800120c <HAL_MspInit+0x54>)
 80011e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ea:	4b08      	ldr	r3, [pc, #32]	; (800120c <HAL_MspInit+0x54>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f2:	603b      	str	r3, [r7, #0]
 80011f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011f6:	2200      	movs	r2, #0
 80011f8:	210f      	movs	r1, #15
 80011fa:	f06f 0001 	mvn.w	r0, #1
 80011fe:	f000 fb4a 	bl	8001896 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40023800 	.word	0x40023800

08001210 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08a      	sub	sp, #40	; 0x28
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a19      	ldr	r2, [pc, #100]	; (8001294 <HAL_I2C_MspInit+0x84>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d12c      	bne.n	800128c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
 8001236:	4b18      	ldr	r3, [pc, #96]	; (8001298 <HAL_I2C_MspInit+0x88>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a17      	ldr	r2, [pc, #92]	; (8001298 <HAL_I2C_MspInit+0x88>)
 800123c:	f043 0302 	orr.w	r3, r3, #2
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <HAL_I2C_MspInit+0x88>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800124e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001252:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001254:	2312      	movs	r3, #18
 8001256:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001258:	2301      	movs	r3, #1
 800125a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125c:	2300      	movs	r3, #0
 800125e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001260:	2304      	movs	r3, #4
 8001262:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	4619      	mov	r1, r3
 800126a:	480c      	ldr	r0, [pc, #48]	; (800129c <HAL_I2C_MspInit+0x8c>)
 800126c:	f000 fb4a 	bl	8001904 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001270:	2300      	movs	r3, #0
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <HAL_I2C_MspInit+0x88>)
 8001276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001278:	4a07      	ldr	r2, [pc, #28]	; (8001298 <HAL_I2C_MspInit+0x88>)
 800127a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800127e:	6413      	str	r3, [r2, #64]	; 0x40
 8001280:	4b05      	ldr	r3, [pc, #20]	; (8001298 <HAL_I2C_MspInit+0x88>)
 8001282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001284:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800128c:	bf00      	nop
 800128e:	3728      	adds	r7, #40	; 0x28
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40005400 	.word	0x40005400
 8001298:	40023800 	.word	0x40023800
 800129c:	40020400 	.word	0x40020400

080012a0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08e      	sub	sp, #56	; 0x38
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a31      	ldr	r2, [pc, #196]	; (8001390 <HAL_I2S_MspInit+0xf0>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d15a      	bne.n	8001386 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80012d0:	2301      	movs	r3, #1
 80012d2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80012d4:	23c0      	movs	r3, #192	; 0xc0
 80012d6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80012d8:	2302      	movs	r3, #2
 80012da:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	4618      	mov	r0, r3
 80012e2:	f003 fb69 	bl	80049b8 <HAL_RCCEx_PeriphCLKConfig>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80012ec:	f7ff ff5e 	bl	80011ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80012f0:	2300      	movs	r3, #0
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	4b27      	ldr	r3, [pc, #156]	; (8001394 <HAL_I2S_MspInit+0xf4>)
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	4a26      	ldr	r2, [pc, #152]	; (8001394 <HAL_I2S_MspInit+0xf4>)
 80012fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001300:	4b24      	ldr	r3, [pc, #144]	; (8001394 <HAL_I2S_MspInit+0xf4>)
 8001302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001304:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001308:	613b      	str	r3, [r7, #16]
 800130a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130c:	2300      	movs	r3, #0
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	4b20      	ldr	r3, [pc, #128]	; (8001394 <HAL_I2S_MspInit+0xf4>)
 8001312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001314:	4a1f      	ldr	r2, [pc, #124]	; (8001394 <HAL_I2S_MspInit+0xf4>)
 8001316:	f043 0301 	orr.w	r3, r3, #1
 800131a:	6313      	str	r3, [r2, #48]	; 0x30
 800131c:	4b1d      	ldr	r3, [pc, #116]	; (8001394 <HAL_I2S_MspInit+0xf4>)
 800131e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001328:	2300      	movs	r3, #0
 800132a:	60bb      	str	r3, [r7, #8]
 800132c:	4b19      	ldr	r3, [pc, #100]	; (8001394 <HAL_I2S_MspInit+0xf4>)
 800132e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001330:	4a18      	ldr	r2, [pc, #96]	; (8001394 <HAL_I2S_MspInit+0xf4>)
 8001332:	f043 0304 	orr.w	r3, r3, #4
 8001336:	6313      	str	r3, [r2, #48]	; 0x30
 8001338:	4b16      	ldr	r3, [pc, #88]	; (8001394 <HAL_I2S_MspInit+0xf4>)
 800133a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133c:	f003 0304 	and.w	r3, r3, #4
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001344:	2310      	movs	r3, #16
 8001346:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001348:	2302      	movs	r3, #2
 800134a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001350:	2300      	movs	r3, #0
 8001352:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001354:	2306      	movs	r3, #6
 8001356:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001358:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135c:	4619      	mov	r1, r3
 800135e:	480e      	ldr	r0, [pc, #56]	; (8001398 <HAL_I2S_MspInit+0xf8>)
 8001360:	f000 fad0 	bl	8001904 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001364:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	2302      	movs	r3, #2
 800136c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001372:	2300      	movs	r3, #0
 8001374:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001376:	2306      	movs	r3, #6
 8001378:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800137a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800137e:	4619      	mov	r1, r3
 8001380:	4806      	ldr	r0, [pc, #24]	; (800139c <HAL_I2S_MspInit+0xfc>)
 8001382:	f000 fabf 	bl	8001904 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001386:	bf00      	nop
 8001388:	3738      	adds	r7, #56	; 0x38
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40003c00 	.word	0x40003c00
 8001394:	40023800 	.word	0x40023800
 8001398:	40020000 	.word	0x40020000
 800139c:	40020800 	.word	0x40020800

080013a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08a      	sub	sp, #40	; 0x28
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a19      	ldr	r2, [pc, #100]	; (8001424 <HAL_SPI_MspInit+0x84>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d12b      	bne.n	800141a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	4b18      	ldr	r3, [pc, #96]	; (8001428 <HAL_SPI_MspInit+0x88>)
 80013c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ca:	4a17      	ldr	r2, [pc, #92]	; (8001428 <HAL_SPI_MspInit+0x88>)
 80013cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013d0:	6453      	str	r3, [r2, #68]	; 0x44
 80013d2:	4b15      	ldr	r3, [pc, #84]	; (8001428 <HAL_SPI_MspInit+0x88>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013da:	613b      	str	r3, [r7, #16]
 80013dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	4b11      	ldr	r3, [pc, #68]	; (8001428 <HAL_SPI_MspInit+0x88>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	4a10      	ldr	r2, [pc, #64]	; (8001428 <HAL_SPI_MspInit+0x88>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	6313      	str	r3, [r2, #48]	; 0x30
 80013ee:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <HAL_SPI_MspInit+0x88>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80013fa:	23e0      	movs	r3, #224	; 0xe0
 80013fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fe:	2302      	movs	r3, #2
 8001400:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001406:	2300      	movs	r3, #0
 8001408:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800140a:	2305      	movs	r3, #5
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140e:	f107 0314 	add.w	r3, r7, #20
 8001412:	4619      	mov	r1, r3
 8001414:	4805      	ldr	r0, [pc, #20]	; (800142c <HAL_SPI_MspInit+0x8c>)
 8001416:	f000 fa75 	bl	8001904 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800141a:	bf00      	nop
 800141c:	3728      	adds	r7, #40	; 0x28
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40013000 	.word	0x40013000
 8001428:	40023800 	.word	0x40023800
 800142c:	40020000 	.word	0x40020000

08001430 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a0b      	ldr	r2, [pc, #44]	; (800146c <HAL_TIM_Base_MspInit+0x3c>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d10d      	bne.n	800145e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <HAL_TIM_Base_MspInit+0x40>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	4a09      	ldr	r2, [pc, #36]	; (8001470 <HAL_TIM_Base_MspInit+0x40>)
 800144c:	f043 0320 	orr.w	r3, r3, #32
 8001450:	6413      	str	r3, [r2, #64]	; 0x40
 8001452:	4b07      	ldr	r3, [pc, #28]	; (8001470 <HAL_TIM_Base_MspInit+0x40>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	f003 0320 	and.w	r3, r3, #32
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800145e:	bf00      	nop
 8001460:	3714      	adds	r7, #20
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	40001400 	.word	0x40001400
 8001470:	40023800 	.word	0x40023800

08001474 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001478:	e7fe      	b.n	8001478 <NMI_Handler+0x4>

0800147a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800147e:	e7fe      	b.n	800147e <HardFault_Handler+0x4>

08001480 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001484:	e7fe      	b.n	8001484 <MemManage_Handler+0x4>

08001486 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800148a:	e7fe      	b.n	800148a <BusFault_Handler+0x4>

0800148c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <UsageFault_Handler+0x4>

08001492 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014a4:	f000 f8d8 	bl	8001658 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80014a8:	f008 ffae 	bl	800a408 <xTaskGetSchedulerState>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d001      	beq.n	80014b6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80014b2:	f009 fe51 	bl	800b158 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80014c0:	4802      	ldr	r0, [pc, #8]	; (80014cc <OTG_FS_IRQHandler+0x10>)
 80014c2:	f000 fe71 	bl	80021a8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20004f6c 	.word	0x20004f6c

080014d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014d8:	4a14      	ldr	r2, [pc, #80]	; (800152c <_sbrk+0x5c>)
 80014da:	4b15      	ldr	r3, [pc, #84]	; (8001530 <_sbrk+0x60>)
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014e4:	4b13      	ldr	r3, [pc, #76]	; (8001534 <_sbrk+0x64>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d102      	bne.n	80014f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014ec:	4b11      	ldr	r3, [pc, #68]	; (8001534 <_sbrk+0x64>)
 80014ee:	4a12      	ldr	r2, [pc, #72]	; (8001538 <_sbrk+0x68>)
 80014f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014f2:	4b10      	ldr	r3, [pc, #64]	; (8001534 <_sbrk+0x64>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4413      	add	r3, r2
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d207      	bcs.n	8001510 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001500:	f00a fba6 	bl	800bc50 <__errno>
 8001504:	4603      	mov	r3, r0
 8001506:	220c      	movs	r2, #12
 8001508:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800150a:	f04f 33ff 	mov.w	r3, #4294967295
 800150e:	e009      	b.n	8001524 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001510:	4b08      	ldr	r3, [pc, #32]	; (8001534 <_sbrk+0x64>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001516:	4b07      	ldr	r3, [pc, #28]	; (8001534 <_sbrk+0x64>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4413      	add	r3, r2
 800151e:	4a05      	ldr	r2, [pc, #20]	; (8001534 <_sbrk+0x64>)
 8001520:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001522:	68fb      	ldr	r3, [r7, #12]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3718      	adds	r7, #24
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20020000 	.word	0x20020000
 8001530:	00000400 	.word	0x00000400
 8001534:	20000208 	.word	0x20000208
 8001538:	20005280 	.word	0x20005280

0800153c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <SystemInit+0x20>)
 8001542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001546:	4a05      	ldr	r2, [pc, #20]	; (800155c <SystemInit+0x20>)
 8001548:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800154c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001560:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001598 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001564:	480d      	ldr	r0, [pc, #52]	; (800159c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001566:	490e      	ldr	r1, [pc, #56]	; (80015a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001568:	4a0e      	ldr	r2, [pc, #56]	; (80015a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800156a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800156c:	e002      	b.n	8001574 <LoopCopyDataInit>

0800156e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800156e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001570:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001572:	3304      	adds	r3, #4

08001574 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001574:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001576:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001578:	d3f9      	bcc.n	800156e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800157a:	4a0b      	ldr	r2, [pc, #44]	; (80015a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800157c:	4c0b      	ldr	r4, [pc, #44]	; (80015ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800157e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001580:	e001      	b.n	8001586 <LoopFillZerobss>

08001582 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001582:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001584:	3204      	adds	r2, #4

08001586 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001586:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001588:	d3fb      	bcc.n	8001582 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800158a:	f7ff ffd7 	bl	800153c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800158e:	f00a fb65 	bl	800bc5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001592:	f7ff fa4f 	bl	8000a34 <main>
  bx  lr    
 8001596:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001598:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800159c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015a0:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80015a4:	0800e798 	.word	0x0800e798
  ldr r2, =_sbss
 80015a8:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80015ac:	20005280 	.word	0x20005280

080015b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015b0:	e7fe      	b.n	80015b0 <ADC_IRQHandler>
	...

080015b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015b8:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <HAL_Init+0x40>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a0d      	ldr	r2, [pc, #52]	; (80015f4 <HAL_Init+0x40>)
 80015be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015c4:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <HAL_Init+0x40>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a0a      	ldr	r2, [pc, #40]	; (80015f4 <HAL_Init+0x40>)
 80015ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015d0:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <HAL_Init+0x40>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a07      	ldr	r2, [pc, #28]	; (80015f4 <HAL_Init+0x40>)
 80015d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015dc:	2003      	movs	r0, #3
 80015de:	f000 f94f 	bl	8001880 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015e2:	200f      	movs	r0, #15
 80015e4:	f000 f808 	bl	80015f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015e8:	f7ff fde6 	bl	80011b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40023c00 	.word	0x40023c00

080015f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001600:	4b12      	ldr	r3, [pc, #72]	; (800164c <HAL_InitTick+0x54>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <HAL_InitTick+0x58>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	4619      	mov	r1, r3
 800160a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800160e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001612:	fbb2 f3f3 	udiv	r3, r2, r3
 8001616:	4618      	mov	r0, r3
 8001618:	f000 f967 	bl	80018ea <HAL_SYSTICK_Config>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e00e      	b.n	8001644 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2b0f      	cmp	r3, #15
 800162a:	d80a      	bhi.n	8001642 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800162c:	2200      	movs	r2, #0
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	f04f 30ff 	mov.w	r0, #4294967295
 8001634:	f000 f92f 	bl	8001896 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001638:	4a06      	ldr	r2, [pc, #24]	; (8001654 <HAL_InitTick+0x5c>)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800163e:	2300      	movs	r3, #0
 8001640:	e000      	b.n	8001644 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
}
 8001644:	4618      	mov	r0, r3
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000000 	.word	0x20000000
 8001650:	20000008 	.word	0x20000008
 8001654:	20000004 	.word	0x20000004

08001658 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800165c:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_IncTick+0x20>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	461a      	mov	r2, r3
 8001662:	4b06      	ldr	r3, [pc, #24]	; (800167c <HAL_IncTick+0x24>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4413      	add	r3, r2
 8001668:	4a04      	ldr	r2, [pc, #16]	; (800167c <HAL_IncTick+0x24>)
 800166a:	6013      	str	r3, [r2, #0]
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	20000008 	.word	0x20000008
 800167c:	2000020c 	.word	0x2000020c

08001680 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  return uwTick;
 8001684:	4b03      	ldr	r3, [pc, #12]	; (8001694 <HAL_GetTick+0x14>)
 8001686:	681b      	ldr	r3, [r3, #0]
}
 8001688:	4618      	mov	r0, r3
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	2000020c 	.word	0x2000020c

08001698 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016a0:	f7ff ffee 	bl	8001680 <HAL_GetTick>
 80016a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016b0:	d005      	beq.n	80016be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016b2:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <HAL_Delay+0x44>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	461a      	mov	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	4413      	add	r3, r2
 80016bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016be:	bf00      	nop
 80016c0:	f7ff ffde 	bl	8001680 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d8f7      	bhi.n	80016c0 <HAL_Delay+0x28>
  {
  }
}
 80016d0:	bf00      	nop
 80016d2:	bf00      	nop
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000008 	.word	0x20000008

080016e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f0:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <__NVIC_SetPriorityGrouping+0x44>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016f6:	68ba      	ldr	r2, [r7, #8]
 80016f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016fc:	4013      	ands	r3, r2
 80016fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001708:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800170c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001712:	4a04      	ldr	r2, [pc, #16]	; (8001724 <__NVIC_SetPriorityGrouping+0x44>)
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	60d3      	str	r3, [r2, #12]
}
 8001718:	bf00      	nop
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800172c:	4b04      	ldr	r3, [pc, #16]	; (8001740 <__NVIC_GetPriorityGrouping+0x18>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	0a1b      	lsrs	r3, r3, #8
 8001732:	f003 0307 	and.w	r3, r3, #7
}
 8001736:	4618      	mov	r0, r3
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001752:	2b00      	cmp	r3, #0
 8001754:	db0b      	blt.n	800176e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	f003 021f 	and.w	r2, r3, #31
 800175c:	4907      	ldr	r1, [pc, #28]	; (800177c <__NVIC_EnableIRQ+0x38>)
 800175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001762:	095b      	lsrs	r3, r3, #5
 8001764:	2001      	movs	r0, #1
 8001766:	fa00 f202 	lsl.w	r2, r0, r2
 800176a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	e000e100 	.word	0xe000e100

08001780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	6039      	str	r1, [r7, #0]
 800178a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800178c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001790:	2b00      	cmp	r3, #0
 8001792:	db0a      	blt.n	80017aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	b2da      	uxtb	r2, r3
 8001798:	490c      	ldr	r1, [pc, #48]	; (80017cc <__NVIC_SetPriority+0x4c>)
 800179a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179e:	0112      	lsls	r2, r2, #4
 80017a0:	b2d2      	uxtb	r2, r2
 80017a2:	440b      	add	r3, r1
 80017a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a8:	e00a      	b.n	80017c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	4908      	ldr	r1, [pc, #32]	; (80017d0 <__NVIC_SetPriority+0x50>)
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	f003 030f 	and.w	r3, r3, #15
 80017b6:	3b04      	subs	r3, #4
 80017b8:	0112      	lsls	r2, r2, #4
 80017ba:	b2d2      	uxtb	r2, r2
 80017bc:	440b      	add	r3, r1
 80017be:	761a      	strb	r2, [r3, #24]
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	e000e100 	.word	0xe000e100
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b089      	sub	sp, #36	; 0x24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	f1c3 0307 	rsb	r3, r3, #7
 80017ee:	2b04      	cmp	r3, #4
 80017f0:	bf28      	it	cs
 80017f2:	2304      	movcs	r3, #4
 80017f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	3304      	adds	r3, #4
 80017fa:	2b06      	cmp	r3, #6
 80017fc:	d902      	bls.n	8001804 <NVIC_EncodePriority+0x30>
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	3b03      	subs	r3, #3
 8001802:	e000      	b.n	8001806 <NVIC_EncodePriority+0x32>
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001808:	f04f 32ff 	mov.w	r2, #4294967295
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43da      	mvns	r2, r3
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	401a      	ands	r2, r3
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800181c:	f04f 31ff 	mov.w	r1, #4294967295
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	fa01 f303 	lsl.w	r3, r1, r3
 8001826:	43d9      	mvns	r1, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800182c:	4313      	orrs	r3, r2
         );
}
 800182e:	4618      	mov	r0, r3
 8001830:	3724      	adds	r7, #36	; 0x24
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
	...

0800183c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3b01      	subs	r3, #1
 8001848:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800184c:	d301      	bcc.n	8001852 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800184e:	2301      	movs	r3, #1
 8001850:	e00f      	b.n	8001872 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001852:	4a0a      	ldr	r2, [pc, #40]	; (800187c <SysTick_Config+0x40>)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3b01      	subs	r3, #1
 8001858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800185a:	210f      	movs	r1, #15
 800185c:	f04f 30ff 	mov.w	r0, #4294967295
 8001860:	f7ff ff8e 	bl	8001780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001864:	4b05      	ldr	r3, [pc, #20]	; (800187c <SysTick_Config+0x40>)
 8001866:	2200      	movs	r2, #0
 8001868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800186a:	4b04      	ldr	r3, [pc, #16]	; (800187c <SysTick_Config+0x40>)
 800186c:	2207      	movs	r2, #7
 800186e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	e000e010 	.word	0xe000e010

08001880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff ff29 	bl	80016e0 <__NVIC_SetPriorityGrouping>
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001896:	b580      	push	{r7, lr}
 8001898:	b086      	sub	sp, #24
 800189a:	af00      	add	r7, sp, #0
 800189c:	4603      	mov	r3, r0
 800189e:	60b9      	str	r1, [r7, #8]
 80018a0:	607a      	str	r2, [r7, #4]
 80018a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018a8:	f7ff ff3e 	bl	8001728 <__NVIC_GetPriorityGrouping>
 80018ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	68b9      	ldr	r1, [r7, #8]
 80018b2:	6978      	ldr	r0, [r7, #20]
 80018b4:	f7ff ff8e 	bl	80017d4 <NVIC_EncodePriority>
 80018b8:	4602      	mov	r2, r0
 80018ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018be:	4611      	mov	r1, r2
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff ff5d 	bl	8001780 <__NVIC_SetPriority>
}
 80018c6:	bf00      	nop
 80018c8:	3718      	adds	r7, #24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b082      	sub	sp, #8
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	4603      	mov	r3, r0
 80018d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff ff31 	bl	8001744 <__NVIC_EnableIRQ>
}
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b082      	sub	sp, #8
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7ff ffa2 	bl	800183c <SysTick_Config>
 80018f8:	4603      	mov	r3, r0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
	...

08001904 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001904:	b480      	push	{r7}
 8001906:	b089      	sub	sp, #36	; 0x24
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001912:	2300      	movs	r3, #0
 8001914:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001916:	2300      	movs	r3, #0
 8001918:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800191a:	2300      	movs	r3, #0
 800191c:	61fb      	str	r3, [r7, #28]
 800191e:	e16b      	b.n	8001bf8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001920:	2201      	movs	r2, #1
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	697a      	ldr	r2, [r7, #20]
 8001930:	4013      	ands	r3, r2
 8001932:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	429a      	cmp	r2, r3
 800193a:	f040 815a 	bne.w	8001bf2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f003 0303 	and.w	r3, r3, #3
 8001946:	2b01      	cmp	r3, #1
 8001948:	d005      	beq.n	8001956 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001952:	2b02      	cmp	r3, #2
 8001954:	d130      	bne.n	80019b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	2203      	movs	r2, #3
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43db      	mvns	r3, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4013      	ands	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	68da      	ldr	r2, [r3, #12]
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4313      	orrs	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800198c:	2201      	movs	r2, #1
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4013      	ands	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	091b      	lsrs	r3, r3, #4
 80019a2:	f003 0201 	and.w	r2, r3, #1
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 0303 	and.w	r3, r3, #3
 80019c0:	2b03      	cmp	r3, #3
 80019c2:	d017      	beq.n	80019f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	2203      	movs	r2, #3
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 0303 	and.w	r3, r3, #3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d123      	bne.n	8001a48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	08da      	lsrs	r2, r3, #3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3208      	adds	r2, #8
 8001a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	220f      	movs	r2, #15
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	691a      	ldr	r2, [r3, #16]
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	08da      	lsrs	r2, r3, #3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	3208      	adds	r2, #8
 8001a42:	69b9      	ldr	r1, [r7, #24]
 8001a44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	2203      	movs	r2, #3
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 0203 	and.w	r2, r3, #3
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f000 80b4 	beq.w	8001bf2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	4b60      	ldr	r3, [pc, #384]	; (8001c10 <HAL_GPIO_Init+0x30c>)
 8001a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a92:	4a5f      	ldr	r2, [pc, #380]	; (8001c10 <HAL_GPIO_Init+0x30c>)
 8001a94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a98:	6453      	str	r3, [r2, #68]	; 0x44
 8001a9a:	4b5d      	ldr	r3, [pc, #372]	; (8001c10 <HAL_GPIO_Init+0x30c>)
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aa6:	4a5b      	ldr	r2, [pc, #364]	; (8001c14 <HAL_GPIO_Init+0x310>)
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	089b      	lsrs	r3, r3, #2
 8001aac:	3302      	adds	r3, #2
 8001aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	f003 0303 	and.w	r3, r3, #3
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	220f      	movs	r2, #15
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a52      	ldr	r2, [pc, #328]	; (8001c18 <HAL_GPIO_Init+0x314>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d02b      	beq.n	8001b2a <HAL_GPIO_Init+0x226>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a51      	ldr	r2, [pc, #324]	; (8001c1c <HAL_GPIO_Init+0x318>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d025      	beq.n	8001b26 <HAL_GPIO_Init+0x222>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a50      	ldr	r2, [pc, #320]	; (8001c20 <HAL_GPIO_Init+0x31c>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d01f      	beq.n	8001b22 <HAL_GPIO_Init+0x21e>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a4f      	ldr	r2, [pc, #316]	; (8001c24 <HAL_GPIO_Init+0x320>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d019      	beq.n	8001b1e <HAL_GPIO_Init+0x21a>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a4e      	ldr	r2, [pc, #312]	; (8001c28 <HAL_GPIO_Init+0x324>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d013      	beq.n	8001b1a <HAL_GPIO_Init+0x216>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a4d      	ldr	r2, [pc, #308]	; (8001c2c <HAL_GPIO_Init+0x328>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d00d      	beq.n	8001b16 <HAL_GPIO_Init+0x212>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a4c      	ldr	r2, [pc, #304]	; (8001c30 <HAL_GPIO_Init+0x32c>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d007      	beq.n	8001b12 <HAL_GPIO_Init+0x20e>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a4b      	ldr	r2, [pc, #300]	; (8001c34 <HAL_GPIO_Init+0x330>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d101      	bne.n	8001b0e <HAL_GPIO_Init+0x20a>
 8001b0a:	2307      	movs	r3, #7
 8001b0c:	e00e      	b.n	8001b2c <HAL_GPIO_Init+0x228>
 8001b0e:	2308      	movs	r3, #8
 8001b10:	e00c      	b.n	8001b2c <HAL_GPIO_Init+0x228>
 8001b12:	2306      	movs	r3, #6
 8001b14:	e00a      	b.n	8001b2c <HAL_GPIO_Init+0x228>
 8001b16:	2305      	movs	r3, #5
 8001b18:	e008      	b.n	8001b2c <HAL_GPIO_Init+0x228>
 8001b1a:	2304      	movs	r3, #4
 8001b1c:	e006      	b.n	8001b2c <HAL_GPIO_Init+0x228>
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e004      	b.n	8001b2c <HAL_GPIO_Init+0x228>
 8001b22:	2302      	movs	r3, #2
 8001b24:	e002      	b.n	8001b2c <HAL_GPIO_Init+0x228>
 8001b26:	2301      	movs	r3, #1
 8001b28:	e000      	b.n	8001b2c <HAL_GPIO_Init+0x228>
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	69fa      	ldr	r2, [r7, #28]
 8001b2e:	f002 0203 	and.w	r2, r2, #3
 8001b32:	0092      	lsls	r2, r2, #2
 8001b34:	4093      	lsls	r3, r2
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b3c:	4935      	ldr	r1, [pc, #212]	; (8001c14 <HAL_GPIO_Init+0x310>)
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	089b      	lsrs	r3, r3, #2
 8001b42:	3302      	adds	r3, #2
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b4a:	4b3b      	ldr	r3, [pc, #236]	; (8001c38 <HAL_GPIO_Init+0x334>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	43db      	mvns	r3, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4013      	ands	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b6e:	4a32      	ldr	r2, [pc, #200]	; (8001c38 <HAL_GPIO_Init+0x334>)
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b74:	4b30      	ldr	r3, [pc, #192]	; (8001c38 <HAL_GPIO_Init+0x334>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b98:	4a27      	ldr	r2, [pc, #156]	; (8001c38 <HAL_GPIO_Init+0x334>)
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b9e:	4b26      	ldr	r3, [pc, #152]	; (8001c38 <HAL_GPIO_Init+0x334>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4013      	ands	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bc2:	4a1d      	ldr	r2, [pc, #116]	; (8001c38 <HAL_GPIO_Init+0x334>)
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bc8:	4b1b      	ldr	r3, [pc, #108]	; (8001c38 <HAL_GPIO_Init+0x334>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d003      	beq.n	8001bec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bec:	4a12      	ldr	r2, [pc, #72]	; (8001c38 <HAL_GPIO_Init+0x334>)
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	61fb      	str	r3, [r7, #28]
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	2b0f      	cmp	r3, #15
 8001bfc:	f67f ae90 	bls.w	8001920 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c00:	bf00      	nop
 8001c02:	bf00      	nop
 8001c04:	3724      	adds	r7, #36	; 0x24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40013800 	.word	0x40013800
 8001c18:	40020000 	.word	0x40020000
 8001c1c:	40020400 	.word	0x40020400
 8001c20:	40020800 	.word	0x40020800
 8001c24:	40020c00 	.word	0x40020c00
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	40021400 	.word	0x40021400
 8001c30:	40021800 	.word	0x40021800
 8001c34:	40021c00 	.word	0x40021c00
 8001c38:	40013c00 	.word	0x40013c00

08001c3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	460b      	mov	r3, r1
 8001c46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	691a      	ldr	r2, [r3, #16]
 8001c4c:	887b      	ldrh	r3, [r7, #2]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d002      	beq.n	8001c5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c54:	2301      	movs	r3, #1
 8001c56:	73fb      	strb	r3, [r7, #15]
 8001c58:	e001      	b.n	8001c5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	807b      	strh	r3, [r7, #2]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c7c:	787b      	ldrb	r3, [r7, #1]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c82:	887a      	ldrh	r2, [r7, #2]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c88:	e003      	b.n	8001c92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c8a:	887b      	ldrh	r3, [r7, #2]
 8001c8c:	041a      	lsls	r2, r3, #16
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	619a      	str	r2, [r3, #24]
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b085      	sub	sp, #20
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cb0:	887a      	ldrh	r2, [r7, #2]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	041a      	lsls	r2, r3, #16
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	43d9      	mvns	r1, r3
 8001cbc:	887b      	ldrh	r3, [r7, #2]
 8001cbe:	400b      	ands	r3, r1
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	619a      	str	r2, [r3, #24]
}
 8001cc6:	bf00      	nop
 8001cc8:	3714      	adds	r7, #20
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001cd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cd4:	b08f      	sub	sp, #60	; 0x3c
 8001cd6:	af0a      	add	r7, sp, #40	; 0x28
 8001cd8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e054      	b.n	8001d8e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d106      	bne.n	8001d04 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f009 fcf8 	bl	800b6f4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2203      	movs	r2, #3
 8001d08:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d102      	bne.n	8001d1e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f003 f9ee 	bl	8005104 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	603b      	str	r3, [r7, #0]
 8001d2e:	687e      	ldr	r6, [r7, #4]
 8001d30:	466d      	mov	r5, sp
 8001d32:	f106 0410 	add.w	r4, r6, #16
 8001d36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d3e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d42:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d46:	1d33      	adds	r3, r6, #4
 8001d48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d4a:	6838      	ldr	r0, [r7, #0]
 8001d4c:	f003 f968 	bl	8005020 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2101      	movs	r1, #1
 8001d56:	4618      	mov	r0, r3
 8001d58:	f003 f9e5 	bl	8005126 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	603b      	str	r3, [r7, #0]
 8001d62:	687e      	ldr	r6, [r7, #4]
 8001d64:	466d      	mov	r5, sp
 8001d66:	f106 0410 	add.w	r4, r6, #16
 8001d6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d72:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d76:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d7a:	1d33      	adds	r3, r6, #4
 8001d7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d7e:	6838      	ldr	r0, [r7, #0]
 8001d80:	f003 fb6e 	bl	8005460 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3714      	adds	r7, #20
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d96 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001d96:	b590      	push	{r4, r7, lr}
 8001d98:	b089      	sub	sp, #36	; 0x24
 8001d9a:	af04      	add	r7, sp, #16
 8001d9c:	6078      	str	r0, [r7, #4]
 8001d9e:	4608      	mov	r0, r1
 8001da0:	4611      	mov	r1, r2
 8001da2:	461a      	mov	r2, r3
 8001da4:	4603      	mov	r3, r0
 8001da6:	70fb      	strb	r3, [r7, #3]
 8001da8:	460b      	mov	r3, r1
 8001daa:	70bb      	strb	r3, [r7, #2]
 8001dac:	4613      	mov	r3, r2
 8001dae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d101      	bne.n	8001dbe <HAL_HCD_HC_Init+0x28>
 8001dba:	2302      	movs	r3, #2
 8001dbc:	e076      	b.n	8001eac <HAL_HCD_HC_Init+0x116>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001dc6:	78fb      	ldrb	r3, [r7, #3]
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	212c      	movs	r1, #44	; 0x2c
 8001dcc:	fb01 f303 	mul.w	r3, r1, r3
 8001dd0:	4413      	add	r3, r2
 8001dd2:	333d      	adds	r3, #61	; 0x3d
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001dd8:	78fb      	ldrb	r3, [r7, #3]
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	212c      	movs	r1, #44	; 0x2c
 8001dde:	fb01 f303 	mul.w	r3, r1, r3
 8001de2:	4413      	add	r3, r2
 8001de4:	3338      	adds	r3, #56	; 0x38
 8001de6:	787a      	ldrb	r2, [r7, #1]
 8001de8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001dea:	78fb      	ldrb	r3, [r7, #3]
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	212c      	movs	r1, #44	; 0x2c
 8001df0:	fb01 f303 	mul.w	r3, r1, r3
 8001df4:	4413      	add	r3, r2
 8001df6:	3340      	adds	r3, #64	; 0x40
 8001df8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001dfa:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001dfc:	78fb      	ldrb	r3, [r7, #3]
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	212c      	movs	r1, #44	; 0x2c
 8001e02:	fb01 f303 	mul.w	r3, r1, r3
 8001e06:	4413      	add	r3, r2
 8001e08:	3339      	adds	r3, #57	; 0x39
 8001e0a:	78fa      	ldrb	r2, [r7, #3]
 8001e0c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001e0e:	78fb      	ldrb	r3, [r7, #3]
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	212c      	movs	r1, #44	; 0x2c
 8001e14:	fb01 f303 	mul.w	r3, r1, r3
 8001e18:	4413      	add	r3, r2
 8001e1a:	333f      	adds	r3, #63	; 0x3f
 8001e1c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001e20:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001e22:	78fb      	ldrb	r3, [r7, #3]
 8001e24:	78ba      	ldrb	r2, [r7, #2]
 8001e26:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e2a:	b2d0      	uxtb	r0, r2
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	212c      	movs	r1, #44	; 0x2c
 8001e30:	fb01 f303 	mul.w	r3, r1, r3
 8001e34:	4413      	add	r3, r2
 8001e36:	333a      	adds	r3, #58	; 0x3a
 8001e38:	4602      	mov	r2, r0
 8001e3a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001e3c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	da09      	bge.n	8001e58 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001e44:	78fb      	ldrb	r3, [r7, #3]
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	212c      	movs	r1, #44	; 0x2c
 8001e4a:	fb01 f303 	mul.w	r3, r1, r3
 8001e4e:	4413      	add	r3, r2
 8001e50:	333b      	adds	r3, #59	; 0x3b
 8001e52:	2201      	movs	r2, #1
 8001e54:	701a      	strb	r2, [r3, #0]
 8001e56:	e008      	b.n	8001e6a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001e58:	78fb      	ldrb	r3, [r7, #3]
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	212c      	movs	r1, #44	; 0x2c
 8001e5e:	fb01 f303 	mul.w	r3, r1, r3
 8001e62:	4413      	add	r3, r2
 8001e64:	333b      	adds	r3, #59	; 0x3b
 8001e66:	2200      	movs	r2, #0
 8001e68:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001e6a:	78fb      	ldrb	r3, [r7, #3]
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	212c      	movs	r1, #44	; 0x2c
 8001e70:	fb01 f303 	mul.w	r3, r1, r3
 8001e74:	4413      	add	r3, r2
 8001e76:	333c      	adds	r3, #60	; 0x3c
 8001e78:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001e7c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6818      	ldr	r0, [r3, #0]
 8001e82:	787c      	ldrb	r4, [r7, #1]
 8001e84:	78ba      	ldrb	r2, [r7, #2]
 8001e86:	78f9      	ldrb	r1, [r7, #3]
 8001e88:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e8a:	9302      	str	r3, [sp, #8]
 8001e8c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001e90:	9301      	str	r3, [sp, #4]
 8001e92:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e96:	9300      	str	r3, [sp, #0]
 8001e98:	4623      	mov	r3, r4
 8001e9a:	f003 fc67 	bl	800576c <USB_HC_Init>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd90      	pop	{r4, r7, pc}

08001eb4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d101      	bne.n	8001ed2 <HAL_HCD_HC_Halt+0x1e>
 8001ece:	2302      	movs	r3, #2
 8001ed0:	e00f      	b.n	8001ef2 <HAL_HCD_HC_Halt+0x3e>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	78fa      	ldrb	r2, [r7, #3]
 8001ee0:	4611      	mov	r1, r2
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f003 feb7 	bl	8005c56 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
	...

08001efc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	4608      	mov	r0, r1
 8001f06:	4611      	mov	r1, r2
 8001f08:	461a      	mov	r2, r3
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	70fb      	strb	r3, [r7, #3]
 8001f0e:	460b      	mov	r3, r1
 8001f10:	70bb      	strb	r3, [r7, #2]
 8001f12:	4613      	mov	r3, r2
 8001f14:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001f16:	78fb      	ldrb	r3, [r7, #3]
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	212c      	movs	r1, #44	; 0x2c
 8001f1c:	fb01 f303 	mul.w	r3, r1, r3
 8001f20:	4413      	add	r3, r2
 8001f22:	333b      	adds	r3, #59	; 0x3b
 8001f24:	78ba      	ldrb	r2, [r7, #2]
 8001f26:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001f28:	78fb      	ldrb	r3, [r7, #3]
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	212c      	movs	r1, #44	; 0x2c
 8001f2e:	fb01 f303 	mul.w	r3, r1, r3
 8001f32:	4413      	add	r3, r2
 8001f34:	333f      	adds	r3, #63	; 0x3f
 8001f36:	787a      	ldrb	r2, [r7, #1]
 8001f38:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001f3a:	7c3b      	ldrb	r3, [r7, #16]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d112      	bne.n	8001f66 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001f40:	78fb      	ldrb	r3, [r7, #3]
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	212c      	movs	r1, #44	; 0x2c
 8001f46:	fb01 f303 	mul.w	r3, r1, r3
 8001f4a:	4413      	add	r3, r2
 8001f4c:	3342      	adds	r3, #66	; 0x42
 8001f4e:	2203      	movs	r2, #3
 8001f50:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001f52:	78fb      	ldrb	r3, [r7, #3]
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	212c      	movs	r1, #44	; 0x2c
 8001f58:	fb01 f303 	mul.w	r3, r1, r3
 8001f5c:	4413      	add	r3, r2
 8001f5e:	333d      	adds	r3, #61	; 0x3d
 8001f60:	7f3a      	ldrb	r2, [r7, #28]
 8001f62:	701a      	strb	r2, [r3, #0]
 8001f64:	e008      	b.n	8001f78 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f66:	78fb      	ldrb	r3, [r7, #3]
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	212c      	movs	r1, #44	; 0x2c
 8001f6c:	fb01 f303 	mul.w	r3, r1, r3
 8001f70:	4413      	add	r3, r2
 8001f72:	3342      	adds	r3, #66	; 0x42
 8001f74:	2202      	movs	r2, #2
 8001f76:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001f78:	787b      	ldrb	r3, [r7, #1]
 8001f7a:	2b03      	cmp	r3, #3
 8001f7c:	f200 80c6 	bhi.w	800210c <HAL_HCD_HC_SubmitRequest+0x210>
 8001f80:	a201      	add	r2, pc, #4	; (adr r2, 8001f88 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f86:	bf00      	nop
 8001f88:	08001f99 	.word	0x08001f99
 8001f8c:	080020f9 	.word	0x080020f9
 8001f90:	08001ffd 	.word	0x08001ffd
 8001f94:	0800207b 	.word	0x0800207b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001f98:	7c3b      	ldrb	r3, [r7, #16]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	f040 80b8 	bne.w	8002110 <HAL_HCD_HC_SubmitRequest+0x214>
 8001fa0:	78bb      	ldrb	r3, [r7, #2]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f040 80b4 	bne.w	8002110 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001fa8:	8b3b      	ldrh	r3, [r7, #24]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d108      	bne.n	8001fc0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001fae:	78fb      	ldrb	r3, [r7, #3]
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	212c      	movs	r1, #44	; 0x2c
 8001fb4:	fb01 f303 	mul.w	r3, r1, r3
 8001fb8:	4413      	add	r3, r2
 8001fba:	3355      	adds	r3, #85	; 0x55
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001fc0:	78fb      	ldrb	r3, [r7, #3]
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	212c      	movs	r1, #44	; 0x2c
 8001fc6:	fb01 f303 	mul.w	r3, r1, r3
 8001fca:	4413      	add	r3, r2
 8001fcc:	3355      	adds	r3, #85	; 0x55
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d109      	bne.n	8001fe8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001fd4:	78fb      	ldrb	r3, [r7, #3]
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	212c      	movs	r1, #44	; 0x2c
 8001fda:	fb01 f303 	mul.w	r3, r1, r3
 8001fde:	4413      	add	r3, r2
 8001fe0:	3342      	adds	r3, #66	; 0x42
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001fe6:	e093      	b.n	8002110 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001fe8:	78fb      	ldrb	r3, [r7, #3]
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	212c      	movs	r1, #44	; 0x2c
 8001fee:	fb01 f303 	mul.w	r3, r1, r3
 8001ff2:	4413      	add	r3, r2
 8001ff4:	3342      	adds	r3, #66	; 0x42
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	701a      	strb	r2, [r3, #0]
      break;
 8001ffa:	e089      	b.n	8002110 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001ffc:	78bb      	ldrb	r3, [r7, #2]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d11d      	bne.n	800203e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002002:	78fb      	ldrb	r3, [r7, #3]
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	212c      	movs	r1, #44	; 0x2c
 8002008:	fb01 f303 	mul.w	r3, r1, r3
 800200c:	4413      	add	r3, r2
 800200e:	3355      	adds	r3, #85	; 0x55
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d109      	bne.n	800202a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002016:	78fb      	ldrb	r3, [r7, #3]
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	212c      	movs	r1, #44	; 0x2c
 800201c:	fb01 f303 	mul.w	r3, r1, r3
 8002020:	4413      	add	r3, r2
 8002022:	3342      	adds	r3, #66	; 0x42
 8002024:	2200      	movs	r2, #0
 8002026:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002028:	e073      	b.n	8002112 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800202a:	78fb      	ldrb	r3, [r7, #3]
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	212c      	movs	r1, #44	; 0x2c
 8002030:	fb01 f303 	mul.w	r3, r1, r3
 8002034:	4413      	add	r3, r2
 8002036:	3342      	adds	r3, #66	; 0x42
 8002038:	2202      	movs	r2, #2
 800203a:	701a      	strb	r2, [r3, #0]
      break;
 800203c:	e069      	b.n	8002112 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800203e:	78fb      	ldrb	r3, [r7, #3]
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	212c      	movs	r1, #44	; 0x2c
 8002044:	fb01 f303 	mul.w	r3, r1, r3
 8002048:	4413      	add	r3, r2
 800204a:	3354      	adds	r3, #84	; 0x54
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d109      	bne.n	8002066 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002052:	78fb      	ldrb	r3, [r7, #3]
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	212c      	movs	r1, #44	; 0x2c
 8002058:	fb01 f303 	mul.w	r3, r1, r3
 800205c:	4413      	add	r3, r2
 800205e:	3342      	adds	r3, #66	; 0x42
 8002060:	2200      	movs	r2, #0
 8002062:	701a      	strb	r2, [r3, #0]
      break;
 8002064:	e055      	b.n	8002112 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002066:	78fb      	ldrb	r3, [r7, #3]
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	212c      	movs	r1, #44	; 0x2c
 800206c:	fb01 f303 	mul.w	r3, r1, r3
 8002070:	4413      	add	r3, r2
 8002072:	3342      	adds	r3, #66	; 0x42
 8002074:	2202      	movs	r2, #2
 8002076:	701a      	strb	r2, [r3, #0]
      break;
 8002078:	e04b      	b.n	8002112 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800207a:	78bb      	ldrb	r3, [r7, #2]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d11d      	bne.n	80020bc <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002080:	78fb      	ldrb	r3, [r7, #3]
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	212c      	movs	r1, #44	; 0x2c
 8002086:	fb01 f303 	mul.w	r3, r1, r3
 800208a:	4413      	add	r3, r2
 800208c:	3355      	adds	r3, #85	; 0x55
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d109      	bne.n	80020a8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002094:	78fb      	ldrb	r3, [r7, #3]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	212c      	movs	r1, #44	; 0x2c
 800209a:	fb01 f303 	mul.w	r3, r1, r3
 800209e:	4413      	add	r3, r2
 80020a0:	3342      	adds	r3, #66	; 0x42
 80020a2:	2200      	movs	r2, #0
 80020a4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80020a6:	e034      	b.n	8002112 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020a8:	78fb      	ldrb	r3, [r7, #3]
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	212c      	movs	r1, #44	; 0x2c
 80020ae:	fb01 f303 	mul.w	r3, r1, r3
 80020b2:	4413      	add	r3, r2
 80020b4:	3342      	adds	r3, #66	; 0x42
 80020b6:	2202      	movs	r2, #2
 80020b8:	701a      	strb	r2, [r3, #0]
      break;
 80020ba:	e02a      	b.n	8002112 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80020bc:	78fb      	ldrb	r3, [r7, #3]
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	212c      	movs	r1, #44	; 0x2c
 80020c2:	fb01 f303 	mul.w	r3, r1, r3
 80020c6:	4413      	add	r3, r2
 80020c8:	3354      	adds	r3, #84	; 0x54
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d109      	bne.n	80020e4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020d0:	78fb      	ldrb	r3, [r7, #3]
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	212c      	movs	r1, #44	; 0x2c
 80020d6:	fb01 f303 	mul.w	r3, r1, r3
 80020da:	4413      	add	r3, r2
 80020dc:	3342      	adds	r3, #66	; 0x42
 80020de:	2200      	movs	r2, #0
 80020e0:	701a      	strb	r2, [r3, #0]
      break;
 80020e2:	e016      	b.n	8002112 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020e4:	78fb      	ldrb	r3, [r7, #3]
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	212c      	movs	r1, #44	; 0x2c
 80020ea:	fb01 f303 	mul.w	r3, r1, r3
 80020ee:	4413      	add	r3, r2
 80020f0:	3342      	adds	r3, #66	; 0x42
 80020f2:	2202      	movs	r2, #2
 80020f4:	701a      	strb	r2, [r3, #0]
      break;
 80020f6:	e00c      	b.n	8002112 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020f8:	78fb      	ldrb	r3, [r7, #3]
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	212c      	movs	r1, #44	; 0x2c
 80020fe:	fb01 f303 	mul.w	r3, r1, r3
 8002102:	4413      	add	r3, r2
 8002104:	3342      	adds	r3, #66	; 0x42
 8002106:	2200      	movs	r2, #0
 8002108:	701a      	strb	r2, [r3, #0]
      break;
 800210a:	e002      	b.n	8002112 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800210c:	bf00      	nop
 800210e:	e000      	b.n	8002112 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002110:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002112:	78fb      	ldrb	r3, [r7, #3]
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	212c      	movs	r1, #44	; 0x2c
 8002118:	fb01 f303 	mul.w	r3, r1, r3
 800211c:	4413      	add	r3, r2
 800211e:	3344      	adds	r3, #68	; 0x44
 8002120:	697a      	ldr	r2, [r7, #20]
 8002122:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002124:	78fb      	ldrb	r3, [r7, #3]
 8002126:	8b3a      	ldrh	r2, [r7, #24]
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	202c      	movs	r0, #44	; 0x2c
 800212c:	fb00 f303 	mul.w	r3, r0, r3
 8002130:	440b      	add	r3, r1
 8002132:	334c      	adds	r3, #76	; 0x4c
 8002134:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002136:	78fb      	ldrb	r3, [r7, #3]
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	212c      	movs	r1, #44	; 0x2c
 800213c:	fb01 f303 	mul.w	r3, r1, r3
 8002140:	4413      	add	r3, r2
 8002142:	3360      	adds	r3, #96	; 0x60
 8002144:	2200      	movs	r2, #0
 8002146:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002148:	78fb      	ldrb	r3, [r7, #3]
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	212c      	movs	r1, #44	; 0x2c
 800214e:	fb01 f303 	mul.w	r3, r1, r3
 8002152:	4413      	add	r3, r2
 8002154:	3350      	adds	r3, #80	; 0x50
 8002156:	2200      	movs	r2, #0
 8002158:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800215a:	78fb      	ldrb	r3, [r7, #3]
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	212c      	movs	r1, #44	; 0x2c
 8002160:	fb01 f303 	mul.w	r3, r1, r3
 8002164:	4413      	add	r3, r2
 8002166:	3339      	adds	r3, #57	; 0x39
 8002168:	78fa      	ldrb	r2, [r7, #3]
 800216a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800216c:	78fb      	ldrb	r3, [r7, #3]
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	212c      	movs	r1, #44	; 0x2c
 8002172:	fb01 f303 	mul.w	r3, r1, r3
 8002176:	4413      	add	r3, r2
 8002178:	3361      	adds	r3, #97	; 0x61
 800217a:	2200      	movs	r2, #0
 800217c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6818      	ldr	r0, [r3, #0]
 8002182:	78fb      	ldrb	r3, [r7, #3]
 8002184:	222c      	movs	r2, #44	; 0x2c
 8002186:	fb02 f303 	mul.w	r3, r2, r3
 800218a:	3338      	adds	r3, #56	; 0x38
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	18d1      	adds	r1, r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	b2db      	uxtb	r3, r3
 8002196:	461a      	mov	r2, r3
 8002198:	f003 fc0a 	bl	80059b0 <USB_HC_StartXfer>
 800219c:	4603      	mov	r3, r0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop

080021a8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f003 f90b 	bl	80053da <USB_GetMode>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	f040 80f6 	bne.w	80023b8 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f003 f8ef 	bl	80053b4 <USB_ReadInterrupts>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f000 80ec 	beq.w	80023b6 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f003 f8e6 	bl	80053b4 <USB_ReadInterrupts>
 80021e8:	4603      	mov	r3, r0
 80021ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021f2:	d104      	bne.n	80021fe <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80021fc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4618      	mov	r0, r3
 8002204:	f003 f8d6 	bl	80053b4 <USB_ReadInterrupts>
 8002208:	4603      	mov	r3, r0
 800220a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800220e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002212:	d104      	bne.n	800221e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800221c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f003 f8c6 	bl	80053b4 <USB_ReadInterrupts>
 8002228:	4603      	mov	r3, r0
 800222a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800222e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002232:	d104      	bne.n	800223e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800223c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f003 f8b6 	bl	80053b4 <USB_ReadInterrupts>
 8002248:	4603      	mov	r3, r0
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b02      	cmp	r3, #2
 8002250:	d103      	bne.n	800225a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2202      	movs	r2, #2
 8002258:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4618      	mov	r0, r3
 8002260:	f003 f8a8 	bl	80053b4 <USB_ReadInterrupts>
 8002264:	4603      	mov	r3, r0
 8002266:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800226a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800226e:	d11c      	bne.n	80022aa <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002278:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	d10f      	bne.n	80022aa <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800228a:	2110      	movs	r1, #16
 800228c:	6938      	ldr	r0, [r7, #16]
 800228e:	f002 ff97 	bl	80051c0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002292:	6938      	ldr	r0, [r7, #16]
 8002294:	f002 ffc8 	bl	8005228 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2101      	movs	r1, #1
 800229e:	4618      	mov	r0, r3
 80022a0:	f003 f99e 	bl	80055e0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f009 faa3 	bl	800b7f0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f003 f880 	bl	80053b4 <USB_ReadInterrupts>
 80022b4:	4603      	mov	r3, r0
 80022b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022be:	d102      	bne.n	80022c6 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f001 f89e 	bl	8003402 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f003 f872 	bl	80053b4 <USB_ReadInterrupts>
 80022d0:	4603      	mov	r3, r0
 80022d2:	f003 0308 	and.w	r3, r3, #8
 80022d6:	2b08      	cmp	r3, #8
 80022d8:	d106      	bne.n	80022e8 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f009 fa6c 	bl	800b7b8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2208      	movs	r2, #8
 80022e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f003 f861 	bl	80053b4 <USB_ReadInterrupts>
 80022f2:	4603      	mov	r3, r0
 80022f4:	f003 0310 	and.w	r3, r3, #16
 80022f8:	2b10      	cmp	r3, #16
 80022fa:	d101      	bne.n	8002300 <HAL_HCD_IRQHandler+0x158>
 80022fc:	2301      	movs	r3, #1
 80022fe:	e000      	b.n	8002302 <HAL_HCD_IRQHandler+0x15a>
 8002300:	2300      	movs	r3, #0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d012      	beq.n	800232c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	699a      	ldr	r2, [r3, #24]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f022 0210 	bic.w	r2, r2, #16
 8002314:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 ffa1 	bl	800325e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	699a      	ldr	r2, [r3, #24]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f042 0210 	orr.w	r2, r2, #16
 800232a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4618      	mov	r0, r3
 8002332:	f003 f83f 	bl	80053b4 <USB_ReadInterrupts>
 8002336:	4603      	mov	r3, r0
 8002338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800233c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002340:	d13a      	bne.n	80023b8 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f003 fc74 	bl	8005c34 <USB_HC_ReadInterrupt>
 800234c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800234e:	2300      	movs	r3, #0
 8002350:	617b      	str	r3, [r7, #20]
 8002352:	e025      	b.n	80023a0 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	68ba      	ldr	r2, [r7, #8]
 800235c:	fa22 f303 	lsr.w	r3, r2, r3
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	2b00      	cmp	r3, #0
 8002366:	d018      	beq.n	800239a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	015a      	lsls	r2, r3, #5
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	4413      	add	r3, r2
 8002370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800237a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800237e:	d106      	bne.n	800238e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	b2db      	uxtb	r3, r3
 8002384:	4619      	mov	r1, r3
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 f8ab 	bl	80024e2 <HCD_HC_IN_IRQHandler>
 800238c:	e005      	b.n	800239a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	b2db      	uxtb	r3, r3
 8002392:	4619      	mov	r1, r3
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f000 fbf9 	bl	8002b8c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	3301      	adds	r3, #1
 800239e:	617b      	str	r3, [r7, #20]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	697a      	ldr	r2, [r7, #20]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d3d4      	bcc.n	8002354 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023b2:	615a      	str	r2, [r3, #20]
 80023b4:	e000      	b.n	80023b8 <HAL_HCD_IRQHandler+0x210>
      return;
 80023b6:	bf00      	nop
    }
  }
}
 80023b8:	3718      	adds	r7, #24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b082      	sub	sp, #8
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d101      	bne.n	80023d4 <HAL_HCD_Start+0x16>
 80023d0:	2302      	movs	r3, #2
 80023d2:	e013      	b.n	80023fc <HAL_HCD_Start+0x3e>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2101      	movs	r1, #1
 80023e2:	4618      	mov	r0, r3
 80023e4:	f003 f960 	bl	80056a8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f002 fe78 	bl	80050e2 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002412:	2b01      	cmp	r3, #1
 8002414:	d101      	bne.n	800241a <HAL_HCD_Stop+0x16>
 8002416:	2302      	movs	r3, #2
 8002418:	e00d      	b.n	8002436 <HAL_HCD_Stop+0x32>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2201      	movs	r2, #1
 800241e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f003 fd4e 	bl	8005ec8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b082      	sub	sp, #8
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f003 f902 	bl	8005654 <USB_ResetPort>
 8002450:	4603      	mov	r3, r0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
 8002462:	460b      	mov	r3, r1
 8002464:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002466:	78fb      	ldrb	r3, [r7, #3]
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	212c      	movs	r1, #44	; 0x2c
 800246c:	fb01 f303 	mul.w	r3, r1, r3
 8002470:	4413      	add	r3, r2
 8002472:	3360      	adds	r3, #96	; 0x60
 8002474:	781b      	ldrb	r3, [r3, #0]
}
 8002476:	4618      	mov	r0, r3
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002482:	b480      	push	{r7}
 8002484:	b083      	sub	sp, #12
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
 800248a:	460b      	mov	r3, r1
 800248c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800248e:	78fb      	ldrb	r3, [r7, #3]
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	212c      	movs	r1, #44	; 0x2c
 8002494:	fb01 f303 	mul.w	r3, r1, r3
 8002498:	4413      	add	r3, r2
 800249a:	3350      	adds	r3, #80	; 0x50
 800249c:	681b      	ldr	r3, [r3, #0]
}
 800249e:	4618      	mov	r0, r3
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f003 f946 	bl	8005748 <USB_GetCurrentFrame>
 80024bc:	4603      	mov	r3, r0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b082      	sub	sp, #8
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f003 f921 	bl	800571a <USB_GetHostSpeed>
 80024d8:	4603      	mov	r3, r0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b086      	sub	sp, #24
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
 80024ea:	460b      	mov	r3, r1
 80024ec:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80024f8:	78fb      	ldrb	r3, [r7, #3]
 80024fa:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	015a      	lsls	r2, r3, #5
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	4413      	add	r3, r2
 8002504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 0304 	and.w	r3, r3, #4
 800250e:	2b04      	cmp	r3, #4
 8002510:	d11a      	bne.n	8002548 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	015a      	lsls	r2, r3, #5
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	4413      	add	r3, r2
 800251a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800251e:	461a      	mov	r2, r3
 8002520:	2304      	movs	r3, #4
 8002522:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	212c      	movs	r1, #44	; 0x2c
 800252a:	fb01 f303 	mul.w	r3, r1, r3
 800252e:	4413      	add	r3, r2
 8002530:	3361      	adds	r3, #97	; 0x61
 8002532:	2206      	movs	r2, #6
 8002534:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	b2d2      	uxtb	r2, r2
 800253e:	4611      	mov	r1, r2
 8002540:	4618      	mov	r0, r3
 8002542:	f003 fb88 	bl	8005c56 <USB_HC_Halt>
 8002546:	e0af      	b.n	80026a8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	015a      	lsls	r2, r3, #5
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	4413      	add	r3, r2
 8002550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800255a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800255e:	d11b      	bne.n	8002598 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	015a      	lsls	r2, r3, #5
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	4413      	add	r3, r2
 8002568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800256c:	461a      	mov	r2, r3
 800256e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002572:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	212c      	movs	r1, #44	; 0x2c
 800257a:	fb01 f303 	mul.w	r3, r1, r3
 800257e:	4413      	add	r3, r2
 8002580:	3361      	adds	r3, #97	; 0x61
 8002582:	2207      	movs	r2, #7
 8002584:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	b2d2      	uxtb	r2, r2
 800258e:	4611      	mov	r1, r2
 8002590:	4618      	mov	r0, r3
 8002592:	f003 fb60 	bl	8005c56 <USB_HC_Halt>
 8002596:	e087      	b.n	80026a8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	015a      	lsls	r2, r3, #5
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	4413      	add	r3, r2
 80025a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 0320 	and.w	r3, r3, #32
 80025aa:	2b20      	cmp	r3, #32
 80025ac:	d109      	bne.n	80025c2 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	015a      	lsls	r2, r3, #5
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	4413      	add	r3, r2
 80025b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ba:	461a      	mov	r2, r3
 80025bc:	2320      	movs	r3, #32
 80025be:	6093      	str	r3, [r2, #8]
 80025c0:	e072      	b.n	80026a8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	015a      	lsls	r2, r3, #5
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	4413      	add	r3, r2
 80025ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f003 0308 	and.w	r3, r3, #8
 80025d4:	2b08      	cmp	r3, #8
 80025d6:	d11a      	bne.n	800260e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	015a      	lsls	r2, r3, #5
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	4413      	add	r3, r2
 80025e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e4:	461a      	mov	r2, r3
 80025e6:	2308      	movs	r3, #8
 80025e8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	212c      	movs	r1, #44	; 0x2c
 80025f0:	fb01 f303 	mul.w	r3, r1, r3
 80025f4:	4413      	add	r3, r2
 80025f6:	3361      	adds	r3, #97	; 0x61
 80025f8:	2205      	movs	r2, #5
 80025fa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	4611      	mov	r1, r2
 8002606:	4618      	mov	r0, r3
 8002608:	f003 fb25 	bl	8005c56 <USB_HC_Halt>
 800260c:	e04c      	b.n	80026a8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	015a      	lsls	r2, r3, #5
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	4413      	add	r3, r2
 8002616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002620:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002624:	d11b      	bne.n	800265e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	015a      	lsls	r2, r3, #5
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	4413      	add	r3, r2
 800262e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002632:	461a      	mov	r2, r3
 8002634:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002638:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	212c      	movs	r1, #44	; 0x2c
 8002640:	fb01 f303 	mul.w	r3, r1, r3
 8002644:	4413      	add	r3, r2
 8002646:	3361      	adds	r3, #97	; 0x61
 8002648:	2208      	movs	r2, #8
 800264a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	4611      	mov	r1, r2
 8002656:	4618      	mov	r0, r3
 8002658:	f003 fafd 	bl	8005c56 <USB_HC_Halt>
 800265c:	e024      	b.n	80026a8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	015a      	lsls	r2, r3, #5
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	4413      	add	r3, r2
 8002666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002670:	2b80      	cmp	r3, #128	; 0x80
 8002672:	d119      	bne.n	80026a8 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	015a      	lsls	r2, r3, #5
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	4413      	add	r3, r2
 800267c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002680:	461a      	mov	r2, r3
 8002682:	2380      	movs	r3, #128	; 0x80
 8002684:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	212c      	movs	r1, #44	; 0x2c
 800268c:	fb01 f303 	mul.w	r3, r1, r3
 8002690:	4413      	add	r3, r2
 8002692:	3361      	adds	r3, #97	; 0x61
 8002694:	2206      	movs	r2, #6
 8002696:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	b2d2      	uxtb	r2, r2
 80026a0:	4611      	mov	r1, r2
 80026a2:	4618      	mov	r0, r3
 80026a4:	f003 fad7 	bl	8005c56 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	015a      	lsls	r2, r3, #5
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	4413      	add	r3, r2
 80026b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026be:	d112      	bne.n	80026e6 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	4611      	mov	r1, r2
 80026ca:	4618      	mov	r0, r3
 80026cc:	f003 fac3 	bl	8005c56 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	015a      	lsls	r2, r3, #5
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	4413      	add	r3, r2
 80026d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026dc:	461a      	mov	r2, r3
 80026de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026e2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80026e4:	e24e      	b.n	8002b84 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	015a      	lsls	r2, r3, #5
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	4413      	add	r3, r2
 80026ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	f040 80df 	bne.w	80028bc <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d019      	beq.n	800273a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	212c      	movs	r1, #44	; 0x2c
 800270c:	fb01 f303 	mul.w	r3, r1, r3
 8002710:	4413      	add	r3, r2
 8002712:	3348      	adds	r3, #72	; 0x48
 8002714:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	0159      	lsls	r1, r3, #5
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	440b      	add	r3, r1
 800271e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002728:	1ad2      	subs	r2, r2, r3
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	202c      	movs	r0, #44	; 0x2c
 8002730:	fb00 f303 	mul.w	r3, r0, r3
 8002734:	440b      	add	r3, r1
 8002736:	3350      	adds	r3, #80	; 0x50
 8002738:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	212c      	movs	r1, #44	; 0x2c
 8002740:	fb01 f303 	mul.w	r3, r1, r3
 8002744:	4413      	add	r3, r2
 8002746:	3361      	adds	r3, #97	; 0x61
 8002748:	2201      	movs	r2, #1
 800274a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	212c      	movs	r1, #44	; 0x2c
 8002752:	fb01 f303 	mul.w	r3, r1, r3
 8002756:	4413      	add	r3, r2
 8002758:	335c      	adds	r3, #92	; 0x5c
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	015a      	lsls	r2, r3, #5
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	4413      	add	r3, r2
 8002766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276a:	461a      	mov	r2, r3
 800276c:	2301      	movs	r3, #1
 800276e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	212c      	movs	r1, #44	; 0x2c
 8002776:	fb01 f303 	mul.w	r3, r1, r3
 800277a:	4413      	add	r3, r2
 800277c:	333f      	adds	r3, #63	; 0x3f
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d009      	beq.n	8002798 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	212c      	movs	r1, #44	; 0x2c
 800278a:	fb01 f303 	mul.w	r3, r1, r3
 800278e:	4413      	add	r3, r2
 8002790:	333f      	adds	r3, #63	; 0x3f
 8002792:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002794:	2b02      	cmp	r3, #2
 8002796:	d111      	bne.n	80027bc <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	b2d2      	uxtb	r2, r2
 80027a0:	4611      	mov	r1, r2
 80027a2:	4618      	mov	r0, r3
 80027a4:	f003 fa57 	bl	8005c56 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	015a      	lsls	r2, r3, #5
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	4413      	add	r3, r2
 80027b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b4:	461a      	mov	r2, r3
 80027b6:	2310      	movs	r3, #16
 80027b8:	6093      	str	r3, [r2, #8]
 80027ba:	e03a      	b.n	8002832 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	212c      	movs	r1, #44	; 0x2c
 80027c2:	fb01 f303 	mul.w	r3, r1, r3
 80027c6:	4413      	add	r3, r2
 80027c8:	333f      	adds	r3, #63	; 0x3f
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	2b03      	cmp	r3, #3
 80027ce:	d009      	beq.n	80027e4 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	212c      	movs	r1, #44	; 0x2c
 80027d6:	fb01 f303 	mul.w	r3, r1, r3
 80027da:	4413      	add	r3, r2
 80027dc:	333f      	adds	r3, #63	; 0x3f
 80027de:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d126      	bne.n	8002832 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	015a      	lsls	r2, r3, #5
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	4413      	add	r3, r2
 80027ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	0151      	lsls	r1, r2, #5
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	440a      	add	r2, r1
 80027fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002802:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	212c      	movs	r1, #44	; 0x2c
 800280a:	fb01 f303 	mul.w	r3, r1, r3
 800280e:	4413      	add	r3, r2
 8002810:	3360      	adds	r3, #96	; 0x60
 8002812:	2201      	movs	r2, #1
 8002814:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	b2d9      	uxtb	r1, r3
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	202c      	movs	r0, #44	; 0x2c
 8002820:	fb00 f303 	mul.w	r3, r0, r3
 8002824:	4413      	add	r3, r2
 8002826:	3360      	adds	r3, #96	; 0x60
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	461a      	mov	r2, r3
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f008 ffed 	bl	800b80c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d12b      	bne.n	8002892 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	212c      	movs	r1, #44	; 0x2c
 8002840:	fb01 f303 	mul.w	r3, r1, r3
 8002844:	4413      	add	r3, r2
 8002846:	3348      	adds	r3, #72	; 0x48
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	202c      	movs	r0, #44	; 0x2c
 8002850:	fb00 f202 	mul.w	r2, r0, r2
 8002854:	440a      	add	r2, r1
 8002856:	3240      	adds	r2, #64	; 0x40
 8002858:	8812      	ldrh	r2, [r2, #0]
 800285a:	fbb3 f3f2 	udiv	r3, r3, r2
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 818e 	beq.w	8002b84 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	212c      	movs	r1, #44	; 0x2c
 800286e:	fb01 f303 	mul.w	r3, r1, r3
 8002872:	4413      	add	r3, r2
 8002874:	3354      	adds	r3, #84	; 0x54
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	f083 0301 	eor.w	r3, r3, #1
 800287c:	b2d8      	uxtb	r0, r3
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	212c      	movs	r1, #44	; 0x2c
 8002884:	fb01 f303 	mul.w	r3, r1, r3
 8002888:	4413      	add	r3, r2
 800288a:	3354      	adds	r3, #84	; 0x54
 800288c:	4602      	mov	r2, r0
 800288e:	701a      	strb	r2, [r3, #0]
}
 8002890:	e178      	b.n	8002b84 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	212c      	movs	r1, #44	; 0x2c
 8002898:	fb01 f303 	mul.w	r3, r1, r3
 800289c:	4413      	add	r3, r2
 800289e:	3354      	adds	r3, #84	; 0x54
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	f083 0301 	eor.w	r3, r3, #1
 80028a6:	b2d8      	uxtb	r0, r3
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	212c      	movs	r1, #44	; 0x2c
 80028ae:	fb01 f303 	mul.w	r3, r1, r3
 80028b2:	4413      	add	r3, r2
 80028b4:	3354      	adds	r3, #84	; 0x54
 80028b6:	4602      	mov	r2, r0
 80028b8:	701a      	strb	r2, [r3, #0]
}
 80028ba:	e163      	b.n	8002b84 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	015a      	lsls	r2, r3, #5
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	4413      	add	r3, r2
 80028c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	f040 80f6 	bne.w	8002ac0 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	212c      	movs	r1, #44	; 0x2c
 80028da:	fb01 f303 	mul.w	r3, r1, r3
 80028de:	4413      	add	r3, r2
 80028e0:	3361      	adds	r3, #97	; 0x61
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d109      	bne.n	80028fc <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	212c      	movs	r1, #44	; 0x2c
 80028ee:	fb01 f303 	mul.w	r3, r1, r3
 80028f2:	4413      	add	r3, r2
 80028f4:	3360      	adds	r3, #96	; 0x60
 80028f6:	2201      	movs	r2, #1
 80028f8:	701a      	strb	r2, [r3, #0]
 80028fa:	e0c9      	b.n	8002a90 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	212c      	movs	r1, #44	; 0x2c
 8002902:	fb01 f303 	mul.w	r3, r1, r3
 8002906:	4413      	add	r3, r2
 8002908:	3361      	adds	r3, #97	; 0x61
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b05      	cmp	r3, #5
 800290e:	d109      	bne.n	8002924 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	212c      	movs	r1, #44	; 0x2c
 8002916:	fb01 f303 	mul.w	r3, r1, r3
 800291a:	4413      	add	r3, r2
 800291c:	3360      	adds	r3, #96	; 0x60
 800291e:	2205      	movs	r2, #5
 8002920:	701a      	strb	r2, [r3, #0]
 8002922:	e0b5      	b.n	8002a90 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	212c      	movs	r1, #44	; 0x2c
 800292a:	fb01 f303 	mul.w	r3, r1, r3
 800292e:	4413      	add	r3, r2
 8002930:	3361      	adds	r3, #97	; 0x61
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b06      	cmp	r3, #6
 8002936:	d009      	beq.n	800294c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	212c      	movs	r1, #44	; 0x2c
 800293e:	fb01 f303 	mul.w	r3, r1, r3
 8002942:	4413      	add	r3, r2
 8002944:	3361      	adds	r3, #97	; 0x61
 8002946:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002948:	2b08      	cmp	r3, #8
 800294a:	d150      	bne.n	80029ee <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	212c      	movs	r1, #44	; 0x2c
 8002952:	fb01 f303 	mul.w	r3, r1, r3
 8002956:	4413      	add	r3, r2
 8002958:	335c      	adds	r3, #92	; 0x5c
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	1c5a      	adds	r2, r3, #1
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	202c      	movs	r0, #44	; 0x2c
 8002964:	fb00 f303 	mul.w	r3, r0, r3
 8002968:	440b      	add	r3, r1
 800296a:	335c      	adds	r3, #92	; 0x5c
 800296c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	212c      	movs	r1, #44	; 0x2c
 8002974:	fb01 f303 	mul.w	r3, r1, r3
 8002978:	4413      	add	r3, r2
 800297a:	335c      	adds	r3, #92	; 0x5c
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2b02      	cmp	r3, #2
 8002980:	d912      	bls.n	80029a8 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	212c      	movs	r1, #44	; 0x2c
 8002988:	fb01 f303 	mul.w	r3, r1, r3
 800298c:	4413      	add	r3, r2
 800298e:	335c      	adds	r3, #92	; 0x5c
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	212c      	movs	r1, #44	; 0x2c
 800299a:	fb01 f303 	mul.w	r3, r1, r3
 800299e:	4413      	add	r3, r2
 80029a0:	3360      	adds	r3, #96	; 0x60
 80029a2:	2204      	movs	r2, #4
 80029a4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80029a6:	e073      	b.n	8002a90 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	212c      	movs	r1, #44	; 0x2c
 80029ae:	fb01 f303 	mul.w	r3, r1, r3
 80029b2:	4413      	add	r3, r2
 80029b4:	3360      	adds	r3, #96	; 0x60
 80029b6:	2202      	movs	r2, #2
 80029b8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	015a      	lsls	r2, r3, #5
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	4413      	add	r3, r2
 80029c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80029d0:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80029d8:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	015a      	lsls	r2, r3, #5
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	4413      	add	r3, r2
 80029e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e6:	461a      	mov	r2, r3
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80029ec:	e050      	b.n	8002a90 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	212c      	movs	r1, #44	; 0x2c
 80029f4:	fb01 f303 	mul.w	r3, r1, r3
 80029f8:	4413      	add	r3, r2
 80029fa:	3361      	adds	r3, #97	; 0x61
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	2b03      	cmp	r3, #3
 8002a00:	d122      	bne.n	8002a48 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	212c      	movs	r1, #44	; 0x2c
 8002a08:	fb01 f303 	mul.w	r3, r1, r3
 8002a0c:	4413      	add	r3, r2
 8002a0e:	3360      	adds	r3, #96	; 0x60
 8002a10:	2202      	movs	r2, #2
 8002a12:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	015a      	lsls	r2, r3, #5
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a2a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a32:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	015a      	lsls	r2, r3, #5
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a40:	461a      	mov	r2, r3
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	6013      	str	r3, [r2, #0]
 8002a46:	e023      	b.n	8002a90 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	212c      	movs	r1, #44	; 0x2c
 8002a4e:	fb01 f303 	mul.w	r3, r1, r3
 8002a52:	4413      	add	r3, r2
 8002a54:	3361      	adds	r3, #97	; 0x61
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	2b07      	cmp	r3, #7
 8002a5a:	d119      	bne.n	8002a90 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	212c      	movs	r1, #44	; 0x2c
 8002a62:	fb01 f303 	mul.w	r3, r1, r3
 8002a66:	4413      	add	r3, r2
 8002a68:	335c      	adds	r3, #92	; 0x5c
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	1c5a      	adds	r2, r3, #1
 8002a6e:	6879      	ldr	r1, [r7, #4]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	202c      	movs	r0, #44	; 0x2c
 8002a74:	fb00 f303 	mul.w	r3, r0, r3
 8002a78:	440b      	add	r3, r1
 8002a7a:	335c      	adds	r3, #92	; 0x5c
 8002a7c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	212c      	movs	r1, #44	; 0x2c
 8002a84:	fb01 f303 	mul.w	r3, r1, r3
 8002a88:	4413      	add	r3, r2
 8002a8a:	3360      	adds	r3, #96	; 0x60
 8002a8c:	2204      	movs	r2, #4
 8002a8e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	015a      	lsls	r2, r3, #5
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	4413      	add	r3, r2
 8002a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	b2d9      	uxtb	r1, r3
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	202c      	movs	r0, #44	; 0x2c
 8002aac:	fb00 f303 	mul.w	r3, r0, r3
 8002ab0:	4413      	add	r3, r2
 8002ab2:	3360      	adds	r3, #96	; 0x60
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f008 fea7 	bl	800b80c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002abe:	e061      	b.n	8002b84 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	015a      	lsls	r2, r3, #5
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 0310 	and.w	r3, r3, #16
 8002ad2:	2b10      	cmp	r3, #16
 8002ad4:	d156      	bne.n	8002b84 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	212c      	movs	r1, #44	; 0x2c
 8002adc:	fb01 f303 	mul.w	r3, r1, r3
 8002ae0:	4413      	add	r3, r2
 8002ae2:	333f      	adds	r3, #63	; 0x3f
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	2b03      	cmp	r3, #3
 8002ae8:	d111      	bne.n	8002b0e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	212c      	movs	r1, #44	; 0x2c
 8002af0:	fb01 f303 	mul.w	r3, r1, r3
 8002af4:	4413      	add	r3, r2
 8002af6:	335c      	adds	r3, #92	; 0x5c
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	4611      	mov	r1, r2
 8002b06:	4618      	mov	r0, r3
 8002b08:	f003 f8a5 	bl	8005c56 <USB_HC_Halt>
 8002b0c:	e031      	b.n	8002b72 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	212c      	movs	r1, #44	; 0x2c
 8002b14:	fb01 f303 	mul.w	r3, r1, r3
 8002b18:	4413      	add	r3, r2
 8002b1a:	333f      	adds	r3, #63	; 0x3f
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d009      	beq.n	8002b36 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	212c      	movs	r1, #44	; 0x2c
 8002b28:	fb01 f303 	mul.w	r3, r1, r3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	333f      	adds	r3, #63	; 0x3f
 8002b30:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d11d      	bne.n	8002b72 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	212c      	movs	r1, #44	; 0x2c
 8002b3c:	fb01 f303 	mul.w	r3, r1, r3
 8002b40:	4413      	add	r3, r2
 8002b42:	335c      	adds	r3, #92	; 0x5c
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d110      	bne.n	8002b72 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	212c      	movs	r1, #44	; 0x2c
 8002b56:	fb01 f303 	mul.w	r3, r1, r3
 8002b5a:	4413      	add	r3, r2
 8002b5c:	3361      	adds	r3, #97	; 0x61
 8002b5e:	2203      	movs	r2, #3
 8002b60:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	b2d2      	uxtb	r2, r2
 8002b6a:	4611      	mov	r1, r2
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f003 f872 	bl	8005c56 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	015a      	lsls	r2, r3, #5
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	4413      	add	r3, r2
 8002b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b7e:	461a      	mov	r2, r3
 8002b80:	2310      	movs	r3, #16
 8002b82:	6093      	str	r3, [r2, #8]
}
 8002b84:	bf00      	nop
 8002b86:	3718      	adds	r7, #24
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b088      	sub	sp, #32
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	460b      	mov	r3, r1
 8002b96:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002ba2:	78fb      	ldrb	r3, [r7, #3]
 8002ba4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	015a      	lsls	r2, r3, #5
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	4413      	add	r3, r2
 8002bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b04      	cmp	r3, #4
 8002bba:	d11a      	bne.n	8002bf2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	015a      	lsls	r2, r3, #5
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc8:	461a      	mov	r2, r3
 8002bca:	2304      	movs	r3, #4
 8002bcc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	212c      	movs	r1, #44	; 0x2c
 8002bd4:	fb01 f303 	mul.w	r3, r1, r3
 8002bd8:	4413      	add	r3, r2
 8002bda:	3361      	adds	r3, #97	; 0x61
 8002bdc:	2206      	movs	r2, #6
 8002bde:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	697a      	ldr	r2, [r7, #20]
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	4611      	mov	r1, r2
 8002bea:	4618      	mov	r0, r3
 8002bec:	f003 f833 	bl	8005c56 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002bf0:	e331      	b.n	8003256 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	015a      	lsls	r2, r3, #5
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f003 0320 	and.w	r3, r3, #32
 8002c04:	2b20      	cmp	r3, #32
 8002c06:	d12e      	bne.n	8002c66 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	015a      	lsls	r2, r3, #5
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	4413      	add	r3, r2
 8002c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c14:	461a      	mov	r2, r3
 8002c16:	2320      	movs	r3, #32
 8002c18:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	212c      	movs	r1, #44	; 0x2c
 8002c20:	fb01 f303 	mul.w	r3, r1, r3
 8002c24:	4413      	add	r3, r2
 8002c26:	333d      	adds	r3, #61	; 0x3d
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	f040 8313 	bne.w	8003256 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	212c      	movs	r1, #44	; 0x2c
 8002c36:	fb01 f303 	mul.w	r3, r1, r3
 8002c3a:	4413      	add	r3, r2
 8002c3c:	333d      	adds	r3, #61	; 0x3d
 8002c3e:	2200      	movs	r2, #0
 8002c40:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	212c      	movs	r1, #44	; 0x2c
 8002c48:	fb01 f303 	mul.w	r3, r1, r3
 8002c4c:	4413      	add	r3, r2
 8002c4e:	3360      	adds	r3, #96	; 0x60
 8002c50:	2202      	movs	r2, #2
 8002c52:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	b2d2      	uxtb	r2, r2
 8002c5c:	4611      	mov	r1, r2
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f002 fff9 	bl	8005c56 <USB_HC_Halt>
}
 8002c64:	e2f7      	b.n	8003256 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	015a      	lsls	r2, r3, #5
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c7c:	d112      	bne.n	8002ca4 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	015a      	lsls	r2, r3, #5
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	4413      	add	r3, r2
 8002c86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c90:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	b2d2      	uxtb	r2, r2
 8002c9a:	4611      	mov	r1, r2
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f002 ffda 	bl	8005c56 <USB_HC_Halt>
}
 8002ca2:	e2d8      	b.n	8003256 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	015a      	lsls	r2, r3, #5
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	4413      	add	r3, r2
 8002cac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d140      	bne.n	8002d3c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	212c      	movs	r1, #44	; 0x2c
 8002cc0:	fb01 f303 	mul.w	r3, r1, r3
 8002cc4:	4413      	add	r3, r2
 8002cc6:	335c      	adds	r3, #92	; 0x5c
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	015a      	lsls	r2, r3, #5
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cde:	2b40      	cmp	r3, #64	; 0x40
 8002ce0:	d111      	bne.n	8002d06 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	212c      	movs	r1, #44	; 0x2c
 8002ce8:	fb01 f303 	mul.w	r3, r1, r3
 8002cec:	4413      	add	r3, r2
 8002cee:	333d      	adds	r3, #61	; 0x3d
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	015a      	lsls	r2, r3, #5
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d00:	461a      	mov	r2, r3
 8002d02:	2340      	movs	r3, #64	; 0x40
 8002d04:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	015a      	lsls	r2, r3, #5
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d12:	461a      	mov	r2, r3
 8002d14:	2301      	movs	r3, #1
 8002d16:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	212c      	movs	r1, #44	; 0x2c
 8002d1e:	fb01 f303 	mul.w	r3, r1, r3
 8002d22:	4413      	add	r3, r2
 8002d24:	3361      	adds	r3, #97	; 0x61
 8002d26:	2201      	movs	r2, #1
 8002d28:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	b2d2      	uxtb	r2, r2
 8002d32:	4611      	mov	r1, r2
 8002d34:	4618      	mov	r0, r3
 8002d36:	f002 ff8e 	bl	8005c56 <USB_HC_Halt>
}
 8002d3a:	e28c      	b.n	8003256 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	015a      	lsls	r2, r3, #5
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	4413      	add	r3, r2
 8002d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d4e:	2b40      	cmp	r3, #64	; 0x40
 8002d50:	d12c      	bne.n	8002dac <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	212c      	movs	r1, #44	; 0x2c
 8002d58:	fb01 f303 	mul.w	r3, r1, r3
 8002d5c:	4413      	add	r3, r2
 8002d5e:	3361      	adds	r3, #97	; 0x61
 8002d60:	2204      	movs	r2, #4
 8002d62:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	212c      	movs	r1, #44	; 0x2c
 8002d6a:	fb01 f303 	mul.w	r3, r1, r3
 8002d6e:	4413      	add	r3, r2
 8002d70:	333d      	adds	r3, #61	; 0x3d
 8002d72:	2201      	movs	r2, #1
 8002d74:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	212c      	movs	r1, #44	; 0x2c
 8002d7c:	fb01 f303 	mul.w	r3, r1, r3
 8002d80:	4413      	add	r3, r2
 8002d82:	335c      	adds	r3, #92	; 0x5c
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	b2d2      	uxtb	r2, r2
 8002d90:	4611      	mov	r1, r2
 8002d92:	4618      	mov	r0, r3
 8002d94:	f002 ff5f 	bl	8005c56 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	015a      	lsls	r2, r3, #5
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	4413      	add	r3, r2
 8002da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da4:	461a      	mov	r2, r3
 8002da6:	2340      	movs	r3, #64	; 0x40
 8002da8:	6093      	str	r3, [r2, #8]
}
 8002daa:	e254      	b.n	8003256 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	015a      	lsls	r2, r3, #5
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	4413      	add	r3, r2
 8002db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 0308 	and.w	r3, r3, #8
 8002dbe:	2b08      	cmp	r3, #8
 8002dc0:	d11a      	bne.n	8002df8 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	015a      	lsls	r2, r3, #5
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	4413      	add	r3, r2
 8002dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dce:	461a      	mov	r2, r3
 8002dd0:	2308      	movs	r3, #8
 8002dd2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	212c      	movs	r1, #44	; 0x2c
 8002dda:	fb01 f303 	mul.w	r3, r1, r3
 8002dde:	4413      	add	r3, r2
 8002de0:	3361      	adds	r3, #97	; 0x61
 8002de2:	2205      	movs	r2, #5
 8002de4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	b2d2      	uxtb	r2, r2
 8002dee:	4611      	mov	r1, r2
 8002df0:	4618      	mov	r0, r3
 8002df2:	f002 ff30 	bl	8005c56 <USB_HC_Halt>
}
 8002df6:	e22e      	b.n	8003256 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	015a      	lsls	r2, r3, #5
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	4413      	add	r3, r2
 8002e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f003 0310 	and.w	r3, r3, #16
 8002e0a:	2b10      	cmp	r3, #16
 8002e0c:	d140      	bne.n	8002e90 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	212c      	movs	r1, #44	; 0x2c
 8002e14:	fb01 f303 	mul.w	r3, r1, r3
 8002e18:	4413      	add	r3, r2
 8002e1a:	335c      	adds	r3, #92	; 0x5c
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	212c      	movs	r1, #44	; 0x2c
 8002e26:	fb01 f303 	mul.w	r3, r1, r3
 8002e2a:	4413      	add	r3, r2
 8002e2c:	3361      	adds	r3, #97	; 0x61
 8002e2e:	2203      	movs	r2, #3
 8002e30:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	212c      	movs	r1, #44	; 0x2c
 8002e38:	fb01 f303 	mul.w	r3, r1, r3
 8002e3c:	4413      	add	r3, r2
 8002e3e:	333d      	adds	r3, #61	; 0x3d
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d112      	bne.n	8002e6c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	212c      	movs	r1, #44	; 0x2c
 8002e4c:	fb01 f303 	mul.w	r3, r1, r3
 8002e50:	4413      	add	r3, r2
 8002e52:	333c      	adds	r3, #60	; 0x3c
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d108      	bne.n	8002e6c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	212c      	movs	r1, #44	; 0x2c
 8002e60:	fb01 f303 	mul.w	r3, r1, r3
 8002e64:	4413      	add	r3, r2
 8002e66:	333d      	adds	r3, #61	; 0x3d
 8002e68:	2201      	movs	r2, #1
 8002e6a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	b2d2      	uxtb	r2, r2
 8002e74:	4611      	mov	r1, r2
 8002e76:	4618      	mov	r0, r3
 8002e78:	f002 feed 	bl	8005c56 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	015a      	lsls	r2, r3, #5
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	4413      	add	r3, r2
 8002e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e88:	461a      	mov	r2, r3
 8002e8a:	2310      	movs	r3, #16
 8002e8c:	6093      	str	r3, [r2, #8]
}
 8002e8e:	e1e2      	b.n	8003256 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	015a      	lsls	r2, r3, #5
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	4413      	add	r3, r2
 8002e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea2:	2b80      	cmp	r3, #128	; 0x80
 8002ea4:	d164      	bne.n	8002f70 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d111      	bne.n	8002ed2 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	212c      	movs	r1, #44	; 0x2c
 8002eb4:	fb01 f303 	mul.w	r3, r1, r3
 8002eb8:	4413      	add	r3, r2
 8002eba:	3361      	adds	r3, #97	; 0x61
 8002ebc:	2206      	movs	r2, #6
 8002ebe:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	b2d2      	uxtb	r2, r2
 8002ec8:	4611      	mov	r1, r2
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f002 fec3 	bl	8005c56 <USB_HC_Halt>
 8002ed0:	e044      	b.n	8002f5c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	212c      	movs	r1, #44	; 0x2c
 8002ed8:	fb01 f303 	mul.w	r3, r1, r3
 8002edc:	4413      	add	r3, r2
 8002ede:	335c      	adds	r3, #92	; 0x5c
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	1c5a      	adds	r2, r3, #1
 8002ee4:	6879      	ldr	r1, [r7, #4]
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	202c      	movs	r0, #44	; 0x2c
 8002eea:	fb00 f303 	mul.w	r3, r0, r3
 8002eee:	440b      	add	r3, r1
 8002ef0:	335c      	adds	r3, #92	; 0x5c
 8002ef2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	212c      	movs	r1, #44	; 0x2c
 8002efa:	fb01 f303 	mul.w	r3, r1, r3
 8002efe:	4413      	add	r3, r2
 8002f00:	335c      	adds	r3, #92	; 0x5c
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d920      	bls.n	8002f4a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	212c      	movs	r1, #44	; 0x2c
 8002f0e:	fb01 f303 	mul.w	r3, r1, r3
 8002f12:	4413      	add	r3, r2
 8002f14:	335c      	adds	r3, #92	; 0x5c
 8002f16:	2200      	movs	r2, #0
 8002f18:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	212c      	movs	r1, #44	; 0x2c
 8002f20:	fb01 f303 	mul.w	r3, r1, r3
 8002f24:	4413      	add	r3, r2
 8002f26:	3360      	adds	r3, #96	; 0x60
 8002f28:	2204      	movs	r2, #4
 8002f2a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	b2d9      	uxtb	r1, r3
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	202c      	movs	r0, #44	; 0x2c
 8002f36:	fb00 f303 	mul.w	r3, r0, r3
 8002f3a:	4413      	add	r3, r2
 8002f3c:	3360      	adds	r3, #96	; 0x60
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	461a      	mov	r2, r3
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f008 fc62 	bl	800b80c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002f48:	e008      	b.n	8002f5c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	212c      	movs	r1, #44	; 0x2c
 8002f50:	fb01 f303 	mul.w	r3, r1, r3
 8002f54:	4413      	add	r3, r2
 8002f56:	3360      	adds	r3, #96	; 0x60
 8002f58:	2202      	movs	r2, #2
 8002f5a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	015a      	lsls	r2, r3, #5
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	4413      	add	r3, r2
 8002f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f68:	461a      	mov	r2, r3
 8002f6a:	2380      	movs	r3, #128	; 0x80
 8002f6c:	6093      	str	r3, [r2, #8]
}
 8002f6e:	e172      	b.n	8003256 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	015a      	lsls	r2, r3, #5
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	4413      	add	r3, r2
 8002f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f86:	d11b      	bne.n	8002fc0 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	212c      	movs	r1, #44	; 0x2c
 8002f8e:	fb01 f303 	mul.w	r3, r1, r3
 8002f92:	4413      	add	r3, r2
 8002f94:	3361      	adds	r3, #97	; 0x61
 8002f96:	2208      	movs	r2, #8
 8002f98:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	b2d2      	uxtb	r2, r2
 8002fa2:	4611      	mov	r1, r2
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f002 fe56 	bl	8005c56 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	015a      	lsls	r2, r3, #5
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fbc:	6093      	str	r3, [r2, #8]
}
 8002fbe:	e14a      	b.n	8003256 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	015a      	lsls	r2, r3, #5
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	f040 813f 	bne.w	8003256 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	212c      	movs	r1, #44	; 0x2c
 8002fde:	fb01 f303 	mul.w	r3, r1, r3
 8002fe2:	4413      	add	r3, r2
 8002fe4:	3361      	adds	r3, #97	; 0x61
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d17d      	bne.n	80030e8 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	212c      	movs	r1, #44	; 0x2c
 8002ff2:	fb01 f303 	mul.w	r3, r1, r3
 8002ff6:	4413      	add	r3, r2
 8002ff8:	3360      	adds	r3, #96	; 0x60
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	212c      	movs	r1, #44	; 0x2c
 8003004:	fb01 f303 	mul.w	r3, r1, r3
 8003008:	4413      	add	r3, r2
 800300a:	333f      	adds	r3, #63	; 0x3f
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	2b02      	cmp	r3, #2
 8003010:	d00a      	beq.n	8003028 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	212c      	movs	r1, #44	; 0x2c
 8003018:	fb01 f303 	mul.w	r3, r1, r3
 800301c:	4413      	add	r3, r2
 800301e:	333f      	adds	r3, #63	; 0x3f
 8003020:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003022:	2b03      	cmp	r3, #3
 8003024:	f040 8100 	bne.w	8003228 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d113      	bne.n	8003058 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	212c      	movs	r1, #44	; 0x2c
 8003036:	fb01 f303 	mul.w	r3, r1, r3
 800303a:	4413      	add	r3, r2
 800303c:	3355      	adds	r3, #85	; 0x55
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	f083 0301 	eor.w	r3, r3, #1
 8003044:	b2d8      	uxtb	r0, r3
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	212c      	movs	r1, #44	; 0x2c
 800304c:	fb01 f303 	mul.w	r3, r1, r3
 8003050:	4413      	add	r3, r2
 8003052:	3355      	adds	r3, #85	; 0x55
 8003054:	4602      	mov	r2, r0
 8003056:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	2b01      	cmp	r3, #1
 800305e:	f040 80e3 	bne.w	8003228 <HCD_HC_OUT_IRQHandler+0x69c>
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	212c      	movs	r1, #44	; 0x2c
 8003068:	fb01 f303 	mul.w	r3, r1, r3
 800306c:	4413      	add	r3, r2
 800306e:	334c      	adds	r3, #76	; 0x4c
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2b00      	cmp	r3, #0
 8003074:	f000 80d8 	beq.w	8003228 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	212c      	movs	r1, #44	; 0x2c
 800307e:	fb01 f303 	mul.w	r3, r1, r3
 8003082:	4413      	add	r3, r2
 8003084:	334c      	adds	r3, #76	; 0x4c
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	202c      	movs	r0, #44	; 0x2c
 800308e:	fb00 f202 	mul.w	r2, r0, r2
 8003092:	440a      	add	r2, r1
 8003094:	3240      	adds	r2, #64	; 0x40
 8003096:	8812      	ldrh	r2, [r2, #0]
 8003098:	4413      	add	r3, r2
 800309a:	3b01      	subs	r3, #1
 800309c:	6879      	ldr	r1, [r7, #4]
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	202c      	movs	r0, #44	; 0x2c
 80030a2:	fb00 f202 	mul.w	r2, r0, r2
 80030a6:	440a      	add	r2, r1
 80030a8:	3240      	adds	r2, #64	; 0x40
 80030aa:	8812      	ldrh	r2, [r2, #0]
 80030ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80030b0:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	f000 80b5 	beq.w	8003228 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	212c      	movs	r1, #44	; 0x2c
 80030c4:	fb01 f303 	mul.w	r3, r1, r3
 80030c8:	4413      	add	r3, r2
 80030ca:	3355      	adds	r3, #85	; 0x55
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	f083 0301 	eor.w	r3, r3, #1
 80030d2:	b2d8      	uxtb	r0, r3
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	212c      	movs	r1, #44	; 0x2c
 80030da:	fb01 f303 	mul.w	r3, r1, r3
 80030de:	4413      	add	r3, r2
 80030e0:	3355      	adds	r3, #85	; 0x55
 80030e2:	4602      	mov	r2, r0
 80030e4:	701a      	strb	r2, [r3, #0]
 80030e6:	e09f      	b.n	8003228 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	212c      	movs	r1, #44	; 0x2c
 80030ee:	fb01 f303 	mul.w	r3, r1, r3
 80030f2:	4413      	add	r3, r2
 80030f4:	3361      	adds	r3, #97	; 0x61
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	2b03      	cmp	r3, #3
 80030fa:	d109      	bne.n	8003110 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	212c      	movs	r1, #44	; 0x2c
 8003102:	fb01 f303 	mul.w	r3, r1, r3
 8003106:	4413      	add	r3, r2
 8003108:	3360      	adds	r3, #96	; 0x60
 800310a:	2202      	movs	r2, #2
 800310c:	701a      	strb	r2, [r3, #0]
 800310e:	e08b      	b.n	8003228 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	212c      	movs	r1, #44	; 0x2c
 8003116:	fb01 f303 	mul.w	r3, r1, r3
 800311a:	4413      	add	r3, r2
 800311c:	3361      	adds	r3, #97	; 0x61
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	2b04      	cmp	r3, #4
 8003122:	d109      	bne.n	8003138 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	212c      	movs	r1, #44	; 0x2c
 800312a:	fb01 f303 	mul.w	r3, r1, r3
 800312e:	4413      	add	r3, r2
 8003130:	3360      	adds	r3, #96	; 0x60
 8003132:	2202      	movs	r2, #2
 8003134:	701a      	strb	r2, [r3, #0]
 8003136:	e077      	b.n	8003228 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	212c      	movs	r1, #44	; 0x2c
 800313e:	fb01 f303 	mul.w	r3, r1, r3
 8003142:	4413      	add	r3, r2
 8003144:	3361      	adds	r3, #97	; 0x61
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	2b05      	cmp	r3, #5
 800314a:	d109      	bne.n	8003160 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	212c      	movs	r1, #44	; 0x2c
 8003152:	fb01 f303 	mul.w	r3, r1, r3
 8003156:	4413      	add	r3, r2
 8003158:	3360      	adds	r3, #96	; 0x60
 800315a:	2205      	movs	r2, #5
 800315c:	701a      	strb	r2, [r3, #0]
 800315e:	e063      	b.n	8003228 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	212c      	movs	r1, #44	; 0x2c
 8003166:	fb01 f303 	mul.w	r3, r1, r3
 800316a:	4413      	add	r3, r2
 800316c:	3361      	adds	r3, #97	; 0x61
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	2b06      	cmp	r3, #6
 8003172:	d009      	beq.n	8003188 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	212c      	movs	r1, #44	; 0x2c
 800317a:	fb01 f303 	mul.w	r3, r1, r3
 800317e:	4413      	add	r3, r2
 8003180:	3361      	adds	r3, #97	; 0x61
 8003182:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003184:	2b08      	cmp	r3, #8
 8003186:	d14f      	bne.n	8003228 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	212c      	movs	r1, #44	; 0x2c
 800318e:	fb01 f303 	mul.w	r3, r1, r3
 8003192:	4413      	add	r3, r2
 8003194:	335c      	adds	r3, #92	; 0x5c
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	1c5a      	adds	r2, r3, #1
 800319a:	6879      	ldr	r1, [r7, #4]
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	202c      	movs	r0, #44	; 0x2c
 80031a0:	fb00 f303 	mul.w	r3, r0, r3
 80031a4:	440b      	add	r3, r1
 80031a6:	335c      	adds	r3, #92	; 0x5c
 80031a8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	212c      	movs	r1, #44	; 0x2c
 80031b0:	fb01 f303 	mul.w	r3, r1, r3
 80031b4:	4413      	add	r3, r2
 80031b6:	335c      	adds	r3, #92	; 0x5c
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d912      	bls.n	80031e4 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	212c      	movs	r1, #44	; 0x2c
 80031c4:	fb01 f303 	mul.w	r3, r1, r3
 80031c8:	4413      	add	r3, r2
 80031ca:	335c      	adds	r3, #92	; 0x5c
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	212c      	movs	r1, #44	; 0x2c
 80031d6:	fb01 f303 	mul.w	r3, r1, r3
 80031da:	4413      	add	r3, r2
 80031dc:	3360      	adds	r3, #96	; 0x60
 80031de:	2204      	movs	r2, #4
 80031e0:	701a      	strb	r2, [r3, #0]
 80031e2:	e021      	b.n	8003228 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	212c      	movs	r1, #44	; 0x2c
 80031ea:	fb01 f303 	mul.w	r3, r1, r3
 80031ee:	4413      	add	r3, r2
 80031f0:	3360      	adds	r3, #96	; 0x60
 80031f2:	2202      	movs	r2, #2
 80031f4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	015a      	lsls	r2, r3, #5
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	4413      	add	r3, r2
 80031fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800320c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003214:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	015a      	lsls	r2, r3, #5
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	4413      	add	r3, r2
 800321e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003222:	461a      	mov	r2, r3
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	015a      	lsls	r2, r3, #5
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	4413      	add	r3, r2
 8003230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003234:	461a      	mov	r2, r3
 8003236:	2302      	movs	r3, #2
 8003238:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	b2d9      	uxtb	r1, r3
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	202c      	movs	r0, #44	; 0x2c
 8003244:	fb00 f303 	mul.w	r3, r0, r3
 8003248:	4413      	add	r3, r2
 800324a:	3360      	adds	r3, #96	; 0x60
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	461a      	mov	r2, r3
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f008 fadb 	bl	800b80c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003256:	bf00      	nop
 8003258:	3720      	adds	r7, #32
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b08a      	sub	sp, #40	; 0x28
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800326c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	f003 030f 	and.w	r3, r3, #15
 800327e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	0c5b      	lsrs	r3, r3, #17
 8003284:	f003 030f 	and.w	r3, r3, #15
 8003288:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	091b      	lsrs	r3, r3, #4
 800328e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003292:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	2b02      	cmp	r3, #2
 8003298:	d004      	beq.n	80032a4 <HCD_RXQLVL_IRQHandler+0x46>
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	2b05      	cmp	r3, #5
 800329e:	f000 80a9 	beq.w	80033f4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80032a2:	e0aa      	b.n	80033fa <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f000 80a6 	beq.w	80033f8 <HCD_RXQLVL_IRQHandler+0x19a>
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	212c      	movs	r1, #44	; 0x2c
 80032b2:	fb01 f303 	mul.w	r3, r1, r3
 80032b6:	4413      	add	r3, r2
 80032b8:	3344      	adds	r3, #68	; 0x44
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f000 809b 	beq.w	80033f8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	212c      	movs	r1, #44	; 0x2c
 80032c8:	fb01 f303 	mul.w	r3, r1, r3
 80032cc:	4413      	add	r3, r2
 80032ce:	3350      	adds	r3, #80	; 0x50
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	441a      	add	r2, r3
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	202c      	movs	r0, #44	; 0x2c
 80032dc:	fb00 f303 	mul.w	r3, r0, r3
 80032e0:	440b      	add	r3, r1
 80032e2:	334c      	adds	r3, #76	; 0x4c
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d87a      	bhi.n	80033e0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6818      	ldr	r0, [r3, #0]
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	212c      	movs	r1, #44	; 0x2c
 80032f4:	fb01 f303 	mul.w	r3, r1, r3
 80032f8:	4413      	add	r3, r2
 80032fa:	3344      	adds	r3, #68	; 0x44
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	b292      	uxth	r2, r2
 8003302:	4619      	mov	r1, r3
 8003304:	f001 fffe 	bl	8005304 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	212c      	movs	r1, #44	; 0x2c
 800330e:	fb01 f303 	mul.w	r3, r1, r3
 8003312:	4413      	add	r3, r2
 8003314:	3344      	adds	r3, #68	; 0x44
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	441a      	add	r2, r3
 800331c:	6879      	ldr	r1, [r7, #4]
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	202c      	movs	r0, #44	; 0x2c
 8003322:	fb00 f303 	mul.w	r3, r0, r3
 8003326:	440b      	add	r3, r1
 8003328:	3344      	adds	r3, #68	; 0x44
 800332a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	212c      	movs	r1, #44	; 0x2c
 8003332:	fb01 f303 	mul.w	r3, r1, r3
 8003336:	4413      	add	r3, r2
 8003338:	3350      	adds	r3, #80	; 0x50
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	441a      	add	r2, r3
 8003340:	6879      	ldr	r1, [r7, #4]
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	202c      	movs	r0, #44	; 0x2c
 8003346:	fb00 f303 	mul.w	r3, r0, r3
 800334a:	440b      	add	r3, r1
 800334c:	3350      	adds	r3, #80	; 0x50
 800334e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	015a      	lsls	r2, r3, #5
 8003354:	6a3b      	ldr	r3, [r7, #32]
 8003356:	4413      	add	r3, r2
 8003358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	0cdb      	lsrs	r3, r3, #19
 8003360:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003364:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	212c      	movs	r1, #44	; 0x2c
 800336c:	fb01 f303 	mul.w	r3, r1, r3
 8003370:	4413      	add	r3, r2
 8003372:	3340      	adds	r3, #64	; 0x40
 8003374:	881b      	ldrh	r3, [r3, #0]
 8003376:	461a      	mov	r2, r3
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	4293      	cmp	r3, r2
 800337c:	d13c      	bne.n	80033f8 <HCD_RXQLVL_IRQHandler+0x19a>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d039      	beq.n	80033f8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	015a      	lsls	r2, r3, #5
 8003388:	6a3b      	ldr	r3, [r7, #32]
 800338a:	4413      	add	r3, r2
 800338c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800339a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80033a2:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	015a      	lsls	r2, r3, #5
 80033a8:	6a3b      	ldr	r3, [r7, #32]
 80033aa:	4413      	add	r3, r2
 80033ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033b0:	461a      	mov	r2, r3
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	212c      	movs	r1, #44	; 0x2c
 80033bc:	fb01 f303 	mul.w	r3, r1, r3
 80033c0:	4413      	add	r3, r2
 80033c2:	3354      	adds	r3, #84	; 0x54
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	f083 0301 	eor.w	r3, r3, #1
 80033ca:	b2d8      	uxtb	r0, r3
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	212c      	movs	r1, #44	; 0x2c
 80033d2:	fb01 f303 	mul.w	r3, r1, r3
 80033d6:	4413      	add	r3, r2
 80033d8:	3354      	adds	r3, #84	; 0x54
 80033da:	4602      	mov	r2, r0
 80033dc:	701a      	strb	r2, [r3, #0]
      break;
 80033de:	e00b      	b.n	80033f8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	212c      	movs	r1, #44	; 0x2c
 80033e6:	fb01 f303 	mul.w	r3, r1, r3
 80033ea:	4413      	add	r3, r2
 80033ec:	3360      	adds	r3, #96	; 0x60
 80033ee:	2204      	movs	r2, #4
 80033f0:	701a      	strb	r2, [r3, #0]
      break;
 80033f2:	e001      	b.n	80033f8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80033f4:	bf00      	nop
 80033f6:	e000      	b.n	80033fa <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80033f8:	bf00      	nop
  }
}
 80033fa:	bf00      	nop
 80033fc:	3728      	adds	r7, #40	; 0x28
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b086      	sub	sp, #24
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800342e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b02      	cmp	r3, #2
 8003438:	d10b      	bne.n	8003452 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f003 0301 	and.w	r3, r3, #1
 8003440:	2b01      	cmp	r3, #1
 8003442:	d102      	bne.n	800344a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f008 f9c5 	bl	800b7d4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	f043 0302 	orr.w	r3, r3, #2
 8003450:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f003 0308 	and.w	r3, r3, #8
 8003458:	2b08      	cmp	r3, #8
 800345a:	d132      	bne.n	80034c2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	f043 0308 	orr.w	r3, r3, #8
 8003462:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f003 0304 	and.w	r3, r3, #4
 800346a:	2b04      	cmp	r3, #4
 800346c:	d126      	bne.n	80034bc <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	2b02      	cmp	r3, #2
 8003474:	d113      	bne.n	800349e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800347c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003480:	d106      	bne.n	8003490 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2102      	movs	r1, #2
 8003488:	4618      	mov	r0, r3
 800348a:	f002 f8a9 	bl	80055e0 <USB_InitFSLSPClkSel>
 800348e:	e011      	b.n	80034b4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2101      	movs	r1, #1
 8003496:	4618      	mov	r0, r3
 8003498:	f002 f8a2 	bl	80055e0 <USB_InitFSLSPClkSel>
 800349c:	e00a      	b.n	80034b4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d106      	bne.n	80034b4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034ac:	461a      	mov	r2, r3
 80034ae:	f64e 2360 	movw	r3, #60000	; 0xea60
 80034b2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f008 f9bb 	bl	800b830 <HAL_HCD_PortEnabled_Callback>
 80034ba:	e002      	b.n	80034c2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f008 f9c5 	bl	800b84c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f003 0320 	and.w	r3, r3, #32
 80034c8:	2b20      	cmp	r3, #32
 80034ca:	d103      	bne.n	80034d4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	f043 0320 	orr.w	r3, r3, #32
 80034d2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80034da:	461a      	mov	r2, r3
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	6013      	str	r3, [r2, #0]
}
 80034e0:	bf00      	nop
 80034e2:	3718      	adds	r7, #24
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e12b      	b.n	8003752 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d106      	bne.n	8003514 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7fd fe7e 	bl	8001210 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2224      	movs	r2, #36	; 0x24
 8003518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 0201 	bic.w	r2, r2, #1
 800352a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800353a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800354a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800354c:	f001 fa20 	bl	8004990 <HAL_RCC_GetPCLK1Freq>
 8003550:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	4a81      	ldr	r2, [pc, #516]	; (800375c <HAL_I2C_Init+0x274>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d807      	bhi.n	800356c <HAL_I2C_Init+0x84>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	4a80      	ldr	r2, [pc, #512]	; (8003760 <HAL_I2C_Init+0x278>)
 8003560:	4293      	cmp	r3, r2
 8003562:	bf94      	ite	ls
 8003564:	2301      	movls	r3, #1
 8003566:	2300      	movhi	r3, #0
 8003568:	b2db      	uxtb	r3, r3
 800356a:	e006      	b.n	800357a <HAL_I2C_Init+0x92>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	4a7d      	ldr	r2, [pc, #500]	; (8003764 <HAL_I2C_Init+0x27c>)
 8003570:	4293      	cmp	r3, r2
 8003572:	bf94      	ite	ls
 8003574:	2301      	movls	r3, #1
 8003576:	2300      	movhi	r3, #0
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e0e7      	b.n	8003752 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	4a78      	ldr	r2, [pc, #480]	; (8003768 <HAL_I2C_Init+0x280>)
 8003586:	fba2 2303 	umull	r2, r3, r2, r3
 800358a:	0c9b      	lsrs	r3, r3, #18
 800358c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68ba      	ldr	r2, [r7, #8]
 800359e:	430a      	orrs	r2, r1
 80035a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	4a6a      	ldr	r2, [pc, #424]	; (800375c <HAL_I2C_Init+0x274>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d802      	bhi.n	80035bc <HAL_I2C_Init+0xd4>
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	3301      	adds	r3, #1
 80035ba:	e009      	b.n	80035d0 <HAL_I2C_Init+0xe8>
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80035c2:	fb02 f303 	mul.w	r3, r2, r3
 80035c6:	4a69      	ldr	r2, [pc, #420]	; (800376c <HAL_I2C_Init+0x284>)
 80035c8:	fba2 2303 	umull	r2, r3, r2, r3
 80035cc:	099b      	lsrs	r3, r3, #6
 80035ce:	3301      	adds	r3, #1
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	6812      	ldr	r2, [r2, #0]
 80035d4:	430b      	orrs	r3, r1
 80035d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80035e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	495c      	ldr	r1, [pc, #368]	; (800375c <HAL_I2C_Init+0x274>)
 80035ec:	428b      	cmp	r3, r1
 80035ee:	d819      	bhi.n	8003624 <HAL_I2C_Init+0x13c>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	1e59      	subs	r1, r3, #1
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80035fe:	1c59      	adds	r1, r3, #1
 8003600:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003604:	400b      	ands	r3, r1
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00a      	beq.n	8003620 <HAL_I2C_Init+0x138>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	1e59      	subs	r1, r3, #1
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	005b      	lsls	r3, r3, #1
 8003614:	fbb1 f3f3 	udiv	r3, r1, r3
 8003618:	3301      	adds	r3, #1
 800361a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800361e:	e051      	b.n	80036c4 <HAL_I2C_Init+0x1dc>
 8003620:	2304      	movs	r3, #4
 8003622:	e04f      	b.n	80036c4 <HAL_I2C_Init+0x1dc>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d111      	bne.n	8003650 <HAL_I2C_Init+0x168>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	1e58      	subs	r0, r3, #1
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6859      	ldr	r1, [r3, #4]
 8003634:	460b      	mov	r3, r1
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	440b      	add	r3, r1
 800363a:	fbb0 f3f3 	udiv	r3, r0, r3
 800363e:	3301      	adds	r3, #1
 8003640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003644:	2b00      	cmp	r3, #0
 8003646:	bf0c      	ite	eq
 8003648:	2301      	moveq	r3, #1
 800364a:	2300      	movne	r3, #0
 800364c:	b2db      	uxtb	r3, r3
 800364e:	e012      	b.n	8003676 <HAL_I2C_Init+0x18e>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	1e58      	subs	r0, r3, #1
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6859      	ldr	r1, [r3, #4]
 8003658:	460b      	mov	r3, r1
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	440b      	add	r3, r1
 800365e:	0099      	lsls	r1, r3, #2
 8003660:	440b      	add	r3, r1
 8003662:	fbb0 f3f3 	udiv	r3, r0, r3
 8003666:	3301      	adds	r3, #1
 8003668:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800366c:	2b00      	cmp	r3, #0
 800366e:	bf0c      	ite	eq
 8003670:	2301      	moveq	r3, #1
 8003672:	2300      	movne	r3, #0
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <HAL_I2C_Init+0x196>
 800367a:	2301      	movs	r3, #1
 800367c:	e022      	b.n	80036c4 <HAL_I2C_Init+0x1dc>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10e      	bne.n	80036a4 <HAL_I2C_Init+0x1bc>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	1e58      	subs	r0, r3, #1
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6859      	ldr	r1, [r3, #4]
 800368e:	460b      	mov	r3, r1
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	440b      	add	r3, r1
 8003694:	fbb0 f3f3 	udiv	r3, r0, r3
 8003698:	3301      	adds	r3, #1
 800369a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800369e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036a2:	e00f      	b.n	80036c4 <HAL_I2C_Init+0x1dc>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	1e58      	subs	r0, r3, #1
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6859      	ldr	r1, [r3, #4]
 80036ac:	460b      	mov	r3, r1
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	440b      	add	r3, r1
 80036b2:	0099      	lsls	r1, r3, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ba:	3301      	adds	r3, #1
 80036bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036c4:	6879      	ldr	r1, [r7, #4]
 80036c6:	6809      	ldr	r1, [r1, #0]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	69da      	ldr	r2, [r3, #28]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	431a      	orrs	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	430a      	orrs	r2, r1
 80036e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80036f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	6911      	ldr	r1, [r2, #16]
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	68d2      	ldr	r2, [r2, #12]
 80036fe:	4311      	orrs	r1, r2
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	6812      	ldr	r2, [r2, #0]
 8003704:	430b      	orrs	r3, r1
 8003706:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	695a      	ldr	r2, [r3, #20]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	431a      	orrs	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	430a      	orrs	r2, r1
 8003722:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f042 0201 	orr.w	r2, r2, #1
 8003732:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2220      	movs	r2, #32
 800373e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	000186a0 	.word	0x000186a0
 8003760:	001e847f 	.word	0x001e847f
 8003764:	003d08ff 	.word	0x003d08ff
 8003768:	431bde83 	.word	0x431bde83
 800376c:	10624dd3 	.word	0x10624dd3

08003770 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b088      	sub	sp, #32
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e128      	b.n	80039d4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d109      	bne.n	80037a2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a90      	ldr	r2, [pc, #576]	; (80039dc <HAL_I2S_Init+0x26c>)
 800379a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f7fd fd7f 	bl	80012a0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2202      	movs	r2, #2
 80037a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	69db      	ldr	r3, [r3, #28]
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	6812      	ldr	r2, [r2, #0]
 80037b4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80037b8:	f023 030f 	bic.w	r3, r3, #15
 80037bc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2202      	movs	r2, #2
 80037c4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d060      	beq.n	8003890 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d102      	bne.n	80037dc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80037d6:	2310      	movs	r3, #16
 80037d8:	617b      	str	r3, [r7, #20]
 80037da:	e001      	b.n	80037e0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80037dc:	2320      	movs	r3, #32
 80037de:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	2b20      	cmp	r3, #32
 80037e6:	d802      	bhi.n	80037ee <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80037ee:	2001      	movs	r0, #1
 80037f0:	f001 f9c4 	bl	8004b7c <HAL_RCCEx_GetPeriphCLKFreq>
 80037f4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037fe:	d125      	bne.n	800384c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d010      	beq.n	800382a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003812:	4613      	mov	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	4413      	add	r3, r2
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	461a      	mov	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	fbb2 f3f3 	udiv	r3, r2, r3
 8003824:	3305      	adds	r3, #5
 8003826:	613b      	str	r3, [r7, #16]
 8003828:	e01f      	b.n	800386a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	fbb2 f2f3 	udiv	r2, r2, r3
 8003834:	4613      	mov	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	461a      	mov	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	fbb2 f3f3 	udiv	r3, r2, r3
 8003846:	3305      	adds	r3, #5
 8003848:	613b      	str	r3, [r7, #16]
 800384a:	e00e      	b.n	800386a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	fbb2 f2f3 	udiv	r2, r2, r3
 8003854:	4613      	mov	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	4413      	add	r3, r2
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	461a      	mov	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	fbb2 f3f3 	udiv	r3, r2, r3
 8003866:	3305      	adds	r3, #5
 8003868:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	4a5c      	ldr	r2, [pc, #368]	; (80039e0 <HAL_I2S_Init+0x270>)
 800386e:	fba2 2303 	umull	r2, r3, r2, r3
 8003872:	08db      	lsrs	r3, r3, #3
 8003874:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	f003 0301 	and.w	r3, r3, #1
 800387c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	085b      	lsrs	r3, r3, #1
 8003886:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	021b      	lsls	r3, r3, #8
 800388c:	61bb      	str	r3, [r7, #24]
 800388e:	e003      	b.n	8003898 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003890:	2302      	movs	r3, #2
 8003892:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003894:	2300      	movs	r3, #0
 8003896:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d902      	bls.n	80038a4 <HAL_I2S_Init+0x134>
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	2bff      	cmp	r3, #255	; 0xff
 80038a2:	d907      	bls.n	80038b4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a8:	f043 0210 	orr.w	r2, r3, #16
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e08f      	b.n	80039d4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	691a      	ldr	r2, [r3, #16]
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	ea42 0103 	orr.w	r1, r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	69fa      	ldr	r2, [r7, #28]
 80038c4:	430a      	orrs	r2, r1
 80038c6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80038d2:	f023 030f 	bic.w	r3, r3, #15
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	6851      	ldr	r1, [r2, #4]
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	6892      	ldr	r2, [r2, #8]
 80038de:	4311      	orrs	r1, r2
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	68d2      	ldr	r2, [r2, #12]
 80038e4:	4311      	orrs	r1, r2
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	6992      	ldr	r2, [r2, #24]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	431a      	orrs	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038f6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d161      	bne.n	80039c4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a38      	ldr	r2, [pc, #224]	; (80039e4 <HAL_I2S_Init+0x274>)
 8003904:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a37      	ldr	r2, [pc, #220]	; (80039e8 <HAL_I2S_Init+0x278>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d101      	bne.n	8003914 <HAL_I2S_Init+0x1a4>
 8003910:	4b36      	ldr	r3, [pc, #216]	; (80039ec <HAL_I2S_Init+0x27c>)
 8003912:	e001      	b.n	8003918 <HAL_I2S_Init+0x1a8>
 8003914:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003918:	69db      	ldr	r3, [r3, #28]
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	6812      	ldr	r2, [r2, #0]
 800391e:	4932      	ldr	r1, [pc, #200]	; (80039e8 <HAL_I2S_Init+0x278>)
 8003920:	428a      	cmp	r2, r1
 8003922:	d101      	bne.n	8003928 <HAL_I2S_Init+0x1b8>
 8003924:	4a31      	ldr	r2, [pc, #196]	; (80039ec <HAL_I2S_Init+0x27c>)
 8003926:	e001      	b.n	800392c <HAL_I2S_Init+0x1bc>
 8003928:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800392c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003930:	f023 030f 	bic.w	r3, r3, #15
 8003934:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a2b      	ldr	r2, [pc, #172]	; (80039e8 <HAL_I2S_Init+0x278>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d101      	bne.n	8003944 <HAL_I2S_Init+0x1d4>
 8003940:	4b2a      	ldr	r3, [pc, #168]	; (80039ec <HAL_I2S_Init+0x27c>)
 8003942:	e001      	b.n	8003948 <HAL_I2S_Init+0x1d8>
 8003944:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003948:	2202      	movs	r2, #2
 800394a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a25      	ldr	r2, [pc, #148]	; (80039e8 <HAL_I2S_Init+0x278>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d101      	bne.n	800395a <HAL_I2S_Init+0x1ea>
 8003956:	4b25      	ldr	r3, [pc, #148]	; (80039ec <HAL_I2S_Init+0x27c>)
 8003958:	e001      	b.n	800395e <HAL_I2S_Init+0x1ee>
 800395a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800395e:	69db      	ldr	r3, [r3, #28]
 8003960:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800396a:	d003      	beq.n	8003974 <HAL_I2S_Init+0x204>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d103      	bne.n	800397c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003974:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003978:	613b      	str	r3, [r7, #16]
 800397a:	e001      	b.n	8003980 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800397c:	2300      	movs	r3, #0
 800397e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800398a:	4313      	orrs	r3, r2
 800398c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003994:	4313      	orrs	r3, r2
 8003996:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800399e:	4313      	orrs	r3, r2
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	897b      	ldrh	r3, [r7, #10]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80039ac:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a0d      	ldr	r2, [pc, #52]	; (80039e8 <HAL_I2S_Init+0x278>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d101      	bne.n	80039bc <HAL_I2S_Init+0x24c>
 80039b8:	4b0c      	ldr	r3, [pc, #48]	; (80039ec <HAL_I2S_Init+0x27c>)
 80039ba:	e001      	b.n	80039c0 <HAL_I2S_Init+0x250>
 80039bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039c0:	897a      	ldrh	r2, [r7, #10]
 80039c2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2201      	movs	r2, #1
 80039ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3720      	adds	r7, #32
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	08003ae7 	.word	0x08003ae7
 80039e0:	cccccccd 	.word	0xcccccccd
 80039e4:	08003bfd 	.word	0x08003bfd
 80039e8:	40003800 	.word	0x40003800
 80039ec:	40003400 	.word	0x40003400

080039f0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	881a      	ldrh	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	1c9a      	adds	r2, r3, #2
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	3b01      	subs	r3, #1
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10e      	bne.n	8003a80 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a70:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7ff ffb8 	bl	80039f0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003a80:	bf00      	nop
 8003a82:	3708      	adds	r7, #8
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68da      	ldr	r2, [r3, #12]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9a:	b292      	uxth	r2, r2
 8003a9c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa2:	1c9a      	adds	r2, r3, #2
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	b29a      	uxth	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d10e      	bne.n	8003ade <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	685a      	ldr	r2, [r3, #4]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ace:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f7ff ff93 	bl	8003a04 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003ade:	bf00      	nop
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b086      	sub	sp, #24
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b04      	cmp	r3, #4
 8003b00:	d13a      	bne.n	8003b78 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d109      	bne.n	8003b20 <I2S_IRQHandler+0x3a>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b16:	2b40      	cmp	r3, #64	; 0x40
 8003b18:	d102      	bne.n	8003b20 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7ff ffb4 	bl	8003a88 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b26:	2b40      	cmp	r3, #64	; 0x40
 8003b28:	d126      	bne.n	8003b78 <I2S_IRQHandler+0x92>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f003 0320 	and.w	r3, r3, #32
 8003b34:	2b20      	cmp	r3, #32
 8003b36:	d11f      	bne.n	8003b78 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b46:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003b48:	2300      	movs	r3, #0
 8003b4a:	613b      	str	r3, [r7, #16]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	613b      	str	r3, [r7, #16]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	613b      	str	r3, [r7, #16]
 8003b5c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6a:	f043 0202 	orr.w	r2, r3, #2
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7ff ff50 	bl	8003a18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b03      	cmp	r3, #3
 8003b82:	d136      	bne.n	8003bf2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d109      	bne.n	8003ba2 <I2S_IRQHandler+0xbc>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b98:	2b80      	cmp	r3, #128	; 0x80
 8003b9a:	d102      	bne.n	8003ba2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f7ff ff45 	bl	8003a2c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	f003 0308 	and.w	r3, r3, #8
 8003ba8:	2b08      	cmp	r3, #8
 8003baa:	d122      	bne.n	8003bf2 <I2S_IRQHandler+0x10c>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f003 0320 	and.w	r3, r3, #32
 8003bb6:	2b20      	cmp	r3, #32
 8003bb8:	d11b      	bne.n	8003bf2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003bc8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003bca:	2300      	movs	r3, #0
 8003bcc:	60fb      	str	r3, [r7, #12]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	60fb      	str	r3, [r7, #12]
 8003bd6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be4:	f043 0204 	orr.w	r2, r3, #4
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f7ff ff13 	bl	8003a18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bf2:	bf00      	nop
 8003bf4:	3718      	adds	r7, #24
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
	...

08003bfc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b088      	sub	sp, #32
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a92      	ldr	r2, [pc, #584]	; (8003e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d101      	bne.n	8003c1a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003c16:	4b92      	ldr	r3, [pc, #584]	; (8003e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c18:	e001      	b.n	8003c1e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003c1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a8b      	ldr	r2, [pc, #556]	; (8003e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d101      	bne.n	8003c38 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003c34:	4b8a      	ldr	r3, [pc, #552]	; (8003e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c36:	e001      	b.n	8003c3c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003c38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c48:	d004      	beq.n	8003c54 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f040 8099 	bne.w	8003d86 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d107      	bne.n	8003c6e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d002      	beq.n	8003c6e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 f925 	bl	8003eb8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d107      	bne.n	8003c88 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d002      	beq.n	8003c88 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f9c8 	bl	8004018 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c8e:	2b40      	cmp	r3, #64	; 0x40
 8003c90:	d13a      	bne.n	8003d08 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	f003 0320 	and.w	r3, r3, #32
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d035      	beq.n	8003d08 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a6e      	ldr	r2, [pc, #440]	; (8003e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d101      	bne.n	8003caa <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003ca6:	4b6e      	ldr	r3, [pc, #440]	; (8003e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ca8:	e001      	b.n	8003cae <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003caa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cae:	685a      	ldr	r2, [r3, #4]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4969      	ldr	r1, [pc, #420]	; (8003e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003cb6:	428b      	cmp	r3, r1
 8003cb8:	d101      	bne.n	8003cbe <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003cba:	4b69      	ldr	r3, [pc, #420]	; (8003e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003cbc:	e001      	b.n	8003cc2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003cbe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cc2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003cc6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	685a      	ldr	r2, [r3, #4]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003cd6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003cd8:	2300      	movs	r3, #0
 8003cda:	60fb      	str	r3, [r7, #12]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	60fb      	str	r3, [r7, #12]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfa:	f043 0202 	orr.w	r2, r3, #2
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f7ff fe88 	bl	8003a18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	f003 0308 	and.w	r3, r3, #8
 8003d0e:	2b08      	cmp	r3, #8
 8003d10:	f040 80c3 	bne.w	8003e9a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	f003 0320 	and.w	r3, r3, #32
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f000 80bd 	beq.w	8003e9a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	685a      	ldr	r2, [r3, #4]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d2e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a49      	ldr	r2, [pc, #292]	; (8003e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d101      	bne.n	8003d3e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003d3a:	4b49      	ldr	r3, [pc, #292]	; (8003e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d3c:	e001      	b.n	8003d42 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003d3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d42:	685a      	ldr	r2, [r3, #4]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4944      	ldr	r1, [pc, #272]	; (8003e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d4a:	428b      	cmp	r3, r1
 8003d4c:	d101      	bne.n	8003d52 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003d4e:	4b44      	ldr	r3, [pc, #272]	; (8003e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d50:	e001      	b.n	8003d56 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003d52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d56:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d5a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	60bb      	str	r3, [r7, #8]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	60bb      	str	r3, [r7, #8]
 8003d68:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d76:	f043 0204 	orr.w	r2, r3, #4
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f7ff fe4a 	bl	8003a18 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d84:	e089      	b.n	8003e9a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d107      	bne.n	8003da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d002      	beq.n	8003da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 f8be 	bl	8003f1c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d107      	bne.n	8003dba <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d002      	beq.n	8003dba <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 f8fd 	bl	8003fb4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc0:	2b40      	cmp	r3, #64	; 0x40
 8003dc2:	d12f      	bne.n	8003e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	f003 0320 	and.w	r3, r3, #32
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d02a      	beq.n	8003e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ddc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a1e      	ldr	r2, [pc, #120]	; (8003e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d101      	bne.n	8003dec <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003de8:	4b1d      	ldr	r3, [pc, #116]	; (8003e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003dea:	e001      	b.n	8003df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003dec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003df0:	685a      	ldr	r2, [r3, #4]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4919      	ldr	r1, [pc, #100]	; (8003e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003df8:	428b      	cmp	r3, r1
 8003dfa:	d101      	bne.n	8003e00 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003dfc:	4b18      	ldr	r3, [pc, #96]	; (8003e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003dfe:	e001      	b.n	8003e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003e00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e04:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e08:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e16:	f043 0202 	orr.w	r2, r3, #2
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7ff fdfa 	bl	8003a18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	f003 0308 	and.w	r3, r3, #8
 8003e2a:	2b08      	cmp	r3, #8
 8003e2c:	d136      	bne.n	8003e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	f003 0320 	and.w	r3, r3, #32
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d031      	beq.n	8003e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a07      	ldr	r2, [pc, #28]	; (8003e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d101      	bne.n	8003e46 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003e42:	4b07      	ldr	r3, [pc, #28]	; (8003e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e44:	e001      	b.n	8003e4a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003e46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e4a:	685a      	ldr	r2, [r3, #4]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4902      	ldr	r1, [pc, #8]	; (8003e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e52:	428b      	cmp	r3, r1
 8003e54:	d106      	bne.n	8003e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003e56:	4b02      	ldr	r3, [pc, #8]	; (8003e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e58:	e006      	b.n	8003e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003e5a:	bf00      	nop
 8003e5c:	40003800 	.word	0x40003800
 8003e60:	40003400 	.word	0x40003400
 8003e64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e68:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e6c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	685a      	ldr	r2, [r3, #4]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e7c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8a:	f043 0204 	orr.w	r2, r3, #4
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7ff fdc0 	bl	8003a18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e98:	e000      	b.n	8003e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e9a:	bf00      	nop
}
 8003e9c:	bf00      	nop
 8003e9e:	3720      	adds	r7, #32
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec4:	1c99      	adds	r1, r3, #2
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	6251      	str	r1, [r2, #36]	; 0x24
 8003eca:	881a      	ldrh	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d113      	bne.n	8003f12 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ef8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d106      	bne.n	8003f12 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f7ff ffc9 	bl	8003ea4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f12:	bf00      	nop
 8003f14:	3708      	adds	r7, #8
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
	...

08003f1c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f28:	1c99      	adds	r1, r3, #2
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	6251      	str	r1, [r2, #36]	; 0x24
 8003f2e:	8819      	ldrh	r1, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a1d      	ldr	r2, [pc, #116]	; (8003fac <I2SEx_TxISR_I2SExt+0x90>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d101      	bne.n	8003f3e <I2SEx_TxISR_I2SExt+0x22>
 8003f3a:	4b1d      	ldr	r3, [pc, #116]	; (8003fb0 <I2SEx_TxISR_I2SExt+0x94>)
 8003f3c:	e001      	b.n	8003f42 <I2SEx_TxISR_I2SExt+0x26>
 8003f3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f42:	460a      	mov	r2, r1
 8003f44:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d121      	bne.n	8003fa2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a12      	ldr	r2, [pc, #72]	; (8003fac <I2SEx_TxISR_I2SExt+0x90>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d101      	bne.n	8003f6c <I2SEx_TxISR_I2SExt+0x50>
 8003f68:	4b11      	ldr	r3, [pc, #68]	; (8003fb0 <I2SEx_TxISR_I2SExt+0x94>)
 8003f6a:	e001      	b.n	8003f70 <I2SEx_TxISR_I2SExt+0x54>
 8003f6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	490d      	ldr	r1, [pc, #52]	; (8003fac <I2SEx_TxISR_I2SExt+0x90>)
 8003f78:	428b      	cmp	r3, r1
 8003f7a:	d101      	bne.n	8003f80 <I2SEx_TxISR_I2SExt+0x64>
 8003f7c:	4b0c      	ldr	r3, [pc, #48]	; (8003fb0 <I2SEx_TxISR_I2SExt+0x94>)
 8003f7e:	e001      	b.n	8003f84 <I2SEx_TxISR_I2SExt+0x68>
 8003f80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f84:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f88:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d106      	bne.n	8003fa2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f7ff ff81 	bl	8003ea4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003fa2:	bf00      	nop
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	40003800 	.word	0x40003800
 8003fb0:	40003400 	.word	0x40003400

08003fb4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68d8      	ldr	r0, [r3, #12]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc6:	1c99      	adds	r1, r3, #2
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003fcc:	b282      	uxth	r2, r0
 8003fce:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d113      	bne.n	8004010 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	685a      	ldr	r2, [r3, #4]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ff6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d106      	bne.n	8004010 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7ff ff4a 	bl	8003ea4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004010:	bf00      	nop
 8004012:	3708      	adds	r7, #8
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a20      	ldr	r2, [pc, #128]	; (80040a8 <I2SEx_RxISR_I2SExt+0x90>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d101      	bne.n	800402e <I2SEx_RxISR_I2SExt+0x16>
 800402a:	4b20      	ldr	r3, [pc, #128]	; (80040ac <I2SEx_RxISR_I2SExt+0x94>)
 800402c:	e001      	b.n	8004032 <I2SEx_RxISR_I2SExt+0x1a>
 800402e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004032:	68d8      	ldr	r0, [r3, #12]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004038:	1c99      	adds	r1, r3, #2
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800403e:	b282      	uxth	r2, r0
 8004040:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004046:	b29b      	uxth	r3, r3
 8004048:	3b01      	subs	r3, #1
 800404a:	b29a      	uxth	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004054:	b29b      	uxth	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d121      	bne.n	800409e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a12      	ldr	r2, [pc, #72]	; (80040a8 <I2SEx_RxISR_I2SExt+0x90>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d101      	bne.n	8004068 <I2SEx_RxISR_I2SExt+0x50>
 8004064:	4b11      	ldr	r3, [pc, #68]	; (80040ac <I2SEx_RxISR_I2SExt+0x94>)
 8004066:	e001      	b.n	800406c <I2SEx_RxISR_I2SExt+0x54>
 8004068:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800406c:	685a      	ldr	r2, [r3, #4]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	490d      	ldr	r1, [pc, #52]	; (80040a8 <I2SEx_RxISR_I2SExt+0x90>)
 8004074:	428b      	cmp	r3, r1
 8004076:	d101      	bne.n	800407c <I2SEx_RxISR_I2SExt+0x64>
 8004078:	4b0c      	ldr	r3, [pc, #48]	; (80040ac <I2SEx_RxISR_I2SExt+0x94>)
 800407a:	e001      	b.n	8004080 <I2SEx_RxISR_I2SExt+0x68>
 800407c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004080:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004084:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800408a:	b29b      	uxth	r3, r3
 800408c:	2b00      	cmp	r3, #0
 800408e:	d106      	bne.n	800409e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f7ff ff03 	bl	8003ea4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800409e:	bf00      	nop
 80040a0:	3708      	adds	r7, #8
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	40003800 	.word	0x40003800
 80040ac:	40003400 	.word	0x40003400

080040b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e267      	b.n	8004592 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d075      	beq.n	80041ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040ce:	4b88      	ldr	r3, [pc, #544]	; (80042f0 <HAL_RCC_OscConfig+0x240>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f003 030c 	and.w	r3, r3, #12
 80040d6:	2b04      	cmp	r3, #4
 80040d8:	d00c      	beq.n	80040f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040da:	4b85      	ldr	r3, [pc, #532]	; (80042f0 <HAL_RCC_OscConfig+0x240>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040e2:	2b08      	cmp	r3, #8
 80040e4:	d112      	bne.n	800410c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040e6:	4b82      	ldr	r3, [pc, #520]	; (80042f0 <HAL_RCC_OscConfig+0x240>)
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040f2:	d10b      	bne.n	800410c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040f4:	4b7e      	ldr	r3, [pc, #504]	; (80042f0 <HAL_RCC_OscConfig+0x240>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d05b      	beq.n	80041b8 <HAL_RCC_OscConfig+0x108>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d157      	bne.n	80041b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e242      	b.n	8004592 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004114:	d106      	bne.n	8004124 <HAL_RCC_OscConfig+0x74>
 8004116:	4b76      	ldr	r3, [pc, #472]	; (80042f0 <HAL_RCC_OscConfig+0x240>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a75      	ldr	r2, [pc, #468]	; (80042f0 <HAL_RCC_OscConfig+0x240>)
 800411c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004120:	6013      	str	r3, [r2, #0]
 8004122:	e01d      	b.n	8004160 <HAL_RCC_OscConfig+0xb0>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800412c:	d10c      	bne.n	8004148 <HAL_RCC_OscConfig+0x98>
 800412e:	4b70      	ldr	r3, [pc, #448]	; (80042f0 <HAL_RCC_OscConfig+0x240>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a6f      	ldr	r2, [pc, #444]	; (80042f0 <HAL_RCC_OscConfig+0x240>)
 8004134:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004138:	6013      	str	r3, [r2, #0]
 800413a:	4b6d      	ldr	r3, [pc, #436]	; (80042f0 <HAL_RCC_OscConfig+0x240>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a6c      	ldr	r2, [pc, #432]	; (80042f0 <HAL_RCC_OscConfig+0x240>)
 8004140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004144:	6013      	str	r3, [r2, #0]
 8004146:	e00b      	b.n	8004160 <HAL_RCC_OscConfig+0xb0>
 8004148:	4b69      	ldr	r3, [pc, #420]	; (80042f0 <HAL_RCC_OscConfig+0x240>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a68      	ldr	r2, [pc, #416]	; (80042f0 <HAL_RCC_OscConfig+0x240>)
 800414e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004152:	6013      	str	r3, [r2, #0]
 8004154:	4b66      	ldr	r3, [pc, #408]	; (80042f0 <HAL_RCC_OscConfig+0x240>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a65      	ldr	r2, [pc, #404]	; (80042f0 <HAL_RCC_OscConfig+0x240>)
 800415a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800415e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d013      	beq.n	8004190 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004168:	f7fd fa8a 	bl	8001680 <HAL_GetTick>
 800416c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800416e:	e008      	b.n	8004182 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004170:	f7fd fa86 	bl	8001680 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b64      	cmp	r3, #100	; 0x64
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e207      	b.n	8004592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004182:	4b5b      	ldr	r3, [pc, #364]	; (80042f0 <HAL_RCC_OscConfig+0x240>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d0f0      	beq.n	8004170 <HAL_RCC_OscConfig+0xc0>
 800418e:	e014      	b.n	80041ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004190:	f7fd fa76 	bl	8001680 <HAL_GetTick>
 8004194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004196:	e008      	b.n	80041aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004198:	f7fd fa72 	bl	8001680 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b64      	cmp	r3, #100	; 0x64
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e1f3      	b.n	8004592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041aa:	4b51      	ldr	r3, [pc, #324]	; (80042f0 <HAL_RCC_OscConfig+0x240>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1f0      	bne.n	8004198 <HAL_RCC_OscConfig+0xe8>
 80041b6:	e000      	b.n	80041ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d063      	beq.n	800428e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041c6:	4b4a      	ldr	r3, [pc, #296]	; (80042f0 <HAL_RCC_OscConfig+0x240>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f003 030c 	and.w	r3, r3, #12
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00b      	beq.n	80041ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041d2:	4b47      	ldr	r3, [pc, #284]	; (80042f0 <HAL_RCC_OscConfig+0x240>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041da:	2b08      	cmp	r3, #8
 80041dc:	d11c      	bne.n	8004218 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041de:	4b44      	ldr	r3, [pc, #272]	; (80042f0 <HAL_RCC_OscConfig+0x240>)
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d116      	bne.n	8004218 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ea:	4b41      	ldr	r3, [pc, #260]	; (80042f0 <HAL_RCC_OscConfig+0x240>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d005      	beq.n	8004202 <HAL_RCC_OscConfig+0x152>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d001      	beq.n	8004202 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e1c7      	b.n	8004592 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004202:	4b3b      	ldr	r3, [pc, #236]	; (80042f0 <HAL_RCC_OscConfig+0x240>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	4937      	ldr	r1, [pc, #220]	; (80042f0 <HAL_RCC_OscConfig+0x240>)
 8004212:	4313      	orrs	r3, r2
 8004214:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004216:	e03a      	b.n	800428e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d020      	beq.n	8004262 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004220:	4b34      	ldr	r3, [pc, #208]	; (80042f4 <HAL_RCC_OscConfig+0x244>)
 8004222:	2201      	movs	r2, #1
 8004224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004226:	f7fd fa2b 	bl	8001680 <HAL_GetTick>
 800422a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800422c:	e008      	b.n	8004240 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800422e:	f7fd fa27 	bl	8001680 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	2b02      	cmp	r3, #2
 800423a:	d901      	bls.n	8004240 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e1a8      	b.n	8004592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004240:	4b2b      	ldr	r3, [pc, #172]	; (80042f0 <HAL_RCC_OscConfig+0x240>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d0f0      	beq.n	800422e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800424c:	4b28      	ldr	r3, [pc, #160]	; (80042f0 <HAL_RCC_OscConfig+0x240>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	00db      	lsls	r3, r3, #3
 800425a:	4925      	ldr	r1, [pc, #148]	; (80042f0 <HAL_RCC_OscConfig+0x240>)
 800425c:	4313      	orrs	r3, r2
 800425e:	600b      	str	r3, [r1, #0]
 8004260:	e015      	b.n	800428e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004262:	4b24      	ldr	r3, [pc, #144]	; (80042f4 <HAL_RCC_OscConfig+0x244>)
 8004264:	2200      	movs	r2, #0
 8004266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004268:	f7fd fa0a 	bl	8001680 <HAL_GetTick>
 800426c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004270:	f7fd fa06 	bl	8001680 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e187      	b.n	8004592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004282:	4b1b      	ldr	r3, [pc, #108]	; (80042f0 <HAL_RCC_OscConfig+0x240>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1f0      	bne.n	8004270 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0308 	and.w	r3, r3, #8
 8004296:	2b00      	cmp	r3, #0
 8004298:	d036      	beq.n	8004308 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d016      	beq.n	80042d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042a2:	4b15      	ldr	r3, [pc, #84]	; (80042f8 <HAL_RCC_OscConfig+0x248>)
 80042a4:	2201      	movs	r2, #1
 80042a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a8:	f7fd f9ea 	bl	8001680 <HAL_GetTick>
 80042ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042ae:	e008      	b.n	80042c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042b0:	f7fd f9e6 	bl	8001680 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e167      	b.n	8004592 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042c2:	4b0b      	ldr	r3, [pc, #44]	; (80042f0 <HAL_RCC_OscConfig+0x240>)
 80042c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d0f0      	beq.n	80042b0 <HAL_RCC_OscConfig+0x200>
 80042ce:	e01b      	b.n	8004308 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042d0:	4b09      	ldr	r3, [pc, #36]	; (80042f8 <HAL_RCC_OscConfig+0x248>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042d6:	f7fd f9d3 	bl	8001680 <HAL_GetTick>
 80042da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042dc:	e00e      	b.n	80042fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042de:	f7fd f9cf 	bl	8001680 <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d907      	bls.n	80042fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e150      	b.n	8004592 <HAL_RCC_OscConfig+0x4e2>
 80042f0:	40023800 	.word	0x40023800
 80042f4:	42470000 	.word	0x42470000
 80042f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042fc:	4b88      	ldr	r3, [pc, #544]	; (8004520 <HAL_RCC_OscConfig+0x470>)
 80042fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1ea      	bne.n	80042de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b00      	cmp	r3, #0
 8004312:	f000 8097 	beq.w	8004444 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004316:	2300      	movs	r3, #0
 8004318:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800431a:	4b81      	ldr	r3, [pc, #516]	; (8004520 <HAL_RCC_OscConfig+0x470>)
 800431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10f      	bne.n	8004346 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004326:	2300      	movs	r3, #0
 8004328:	60bb      	str	r3, [r7, #8]
 800432a:	4b7d      	ldr	r3, [pc, #500]	; (8004520 <HAL_RCC_OscConfig+0x470>)
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	4a7c      	ldr	r2, [pc, #496]	; (8004520 <HAL_RCC_OscConfig+0x470>)
 8004330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004334:	6413      	str	r3, [r2, #64]	; 0x40
 8004336:	4b7a      	ldr	r3, [pc, #488]	; (8004520 <HAL_RCC_OscConfig+0x470>)
 8004338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800433e:	60bb      	str	r3, [r7, #8]
 8004340:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004342:	2301      	movs	r3, #1
 8004344:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004346:	4b77      	ldr	r3, [pc, #476]	; (8004524 <HAL_RCC_OscConfig+0x474>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800434e:	2b00      	cmp	r3, #0
 8004350:	d118      	bne.n	8004384 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004352:	4b74      	ldr	r3, [pc, #464]	; (8004524 <HAL_RCC_OscConfig+0x474>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a73      	ldr	r2, [pc, #460]	; (8004524 <HAL_RCC_OscConfig+0x474>)
 8004358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800435c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800435e:	f7fd f98f 	bl	8001680 <HAL_GetTick>
 8004362:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004364:	e008      	b.n	8004378 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004366:	f7fd f98b 	bl	8001680 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	2b02      	cmp	r3, #2
 8004372:	d901      	bls.n	8004378 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e10c      	b.n	8004592 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004378:	4b6a      	ldr	r3, [pc, #424]	; (8004524 <HAL_RCC_OscConfig+0x474>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004380:	2b00      	cmp	r3, #0
 8004382:	d0f0      	beq.n	8004366 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d106      	bne.n	800439a <HAL_RCC_OscConfig+0x2ea>
 800438c:	4b64      	ldr	r3, [pc, #400]	; (8004520 <HAL_RCC_OscConfig+0x470>)
 800438e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004390:	4a63      	ldr	r2, [pc, #396]	; (8004520 <HAL_RCC_OscConfig+0x470>)
 8004392:	f043 0301 	orr.w	r3, r3, #1
 8004396:	6713      	str	r3, [r2, #112]	; 0x70
 8004398:	e01c      	b.n	80043d4 <HAL_RCC_OscConfig+0x324>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	2b05      	cmp	r3, #5
 80043a0:	d10c      	bne.n	80043bc <HAL_RCC_OscConfig+0x30c>
 80043a2:	4b5f      	ldr	r3, [pc, #380]	; (8004520 <HAL_RCC_OscConfig+0x470>)
 80043a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a6:	4a5e      	ldr	r2, [pc, #376]	; (8004520 <HAL_RCC_OscConfig+0x470>)
 80043a8:	f043 0304 	orr.w	r3, r3, #4
 80043ac:	6713      	str	r3, [r2, #112]	; 0x70
 80043ae:	4b5c      	ldr	r3, [pc, #368]	; (8004520 <HAL_RCC_OscConfig+0x470>)
 80043b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b2:	4a5b      	ldr	r2, [pc, #364]	; (8004520 <HAL_RCC_OscConfig+0x470>)
 80043b4:	f043 0301 	orr.w	r3, r3, #1
 80043b8:	6713      	str	r3, [r2, #112]	; 0x70
 80043ba:	e00b      	b.n	80043d4 <HAL_RCC_OscConfig+0x324>
 80043bc:	4b58      	ldr	r3, [pc, #352]	; (8004520 <HAL_RCC_OscConfig+0x470>)
 80043be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c0:	4a57      	ldr	r2, [pc, #348]	; (8004520 <HAL_RCC_OscConfig+0x470>)
 80043c2:	f023 0301 	bic.w	r3, r3, #1
 80043c6:	6713      	str	r3, [r2, #112]	; 0x70
 80043c8:	4b55      	ldr	r3, [pc, #340]	; (8004520 <HAL_RCC_OscConfig+0x470>)
 80043ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043cc:	4a54      	ldr	r2, [pc, #336]	; (8004520 <HAL_RCC_OscConfig+0x470>)
 80043ce:	f023 0304 	bic.w	r3, r3, #4
 80043d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d015      	beq.n	8004408 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043dc:	f7fd f950 	bl	8001680 <HAL_GetTick>
 80043e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043e2:	e00a      	b.n	80043fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043e4:	f7fd f94c 	bl	8001680 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e0cb      	b.n	8004592 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043fa:	4b49      	ldr	r3, [pc, #292]	; (8004520 <HAL_RCC_OscConfig+0x470>)
 80043fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d0ee      	beq.n	80043e4 <HAL_RCC_OscConfig+0x334>
 8004406:	e014      	b.n	8004432 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004408:	f7fd f93a 	bl	8001680 <HAL_GetTick>
 800440c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800440e:	e00a      	b.n	8004426 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004410:	f7fd f936 	bl	8001680 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	f241 3288 	movw	r2, #5000	; 0x1388
 800441e:	4293      	cmp	r3, r2
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e0b5      	b.n	8004592 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004426:	4b3e      	ldr	r3, [pc, #248]	; (8004520 <HAL_RCC_OscConfig+0x470>)
 8004428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1ee      	bne.n	8004410 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004432:	7dfb      	ldrb	r3, [r7, #23]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d105      	bne.n	8004444 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004438:	4b39      	ldr	r3, [pc, #228]	; (8004520 <HAL_RCC_OscConfig+0x470>)
 800443a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443c:	4a38      	ldr	r2, [pc, #224]	; (8004520 <HAL_RCC_OscConfig+0x470>)
 800443e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004442:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	2b00      	cmp	r3, #0
 800444a:	f000 80a1 	beq.w	8004590 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800444e:	4b34      	ldr	r3, [pc, #208]	; (8004520 <HAL_RCC_OscConfig+0x470>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f003 030c 	and.w	r3, r3, #12
 8004456:	2b08      	cmp	r3, #8
 8004458:	d05c      	beq.n	8004514 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	2b02      	cmp	r3, #2
 8004460:	d141      	bne.n	80044e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004462:	4b31      	ldr	r3, [pc, #196]	; (8004528 <HAL_RCC_OscConfig+0x478>)
 8004464:	2200      	movs	r2, #0
 8004466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004468:	f7fd f90a 	bl	8001680 <HAL_GetTick>
 800446c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800446e:	e008      	b.n	8004482 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004470:	f7fd f906 	bl	8001680 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b02      	cmp	r3, #2
 800447c:	d901      	bls.n	8004482 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e087      	b.n	8004592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004482:	4b27      	ldr	r3, [pc, #156]	; (8004520 <HAL_RCC_OscConfig+0x470>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1f0      	bne.n	8004470 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	69da      	ldr	r2, [r3, #28]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a1b      	ldr	r3, [r3, #32]
 8004496:	431a      	orrs	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449c:	019b      	lsls	r3, r3, #6
 800449e:	431a      	orrs	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a4:	085b      	lsrs	r3, r3, #1
 80044a6:	3b01      	subs	r3, #1
 80044a8:	041b      	lsls	r3, r3, #16
 80044aa:	431a      	orrs	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b0:	061b      	lsls	r3, r3, #24
 80044b2:	491b      	ldr	r1, [pc, #108]	; (8004520 <HAL_RCC_OscConfig+0x470>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044b8:	4b1b      	ldr	r3, [pc, #108]	; (8004528 <HAL_RCC_OscConfig+0x478>)
 80044ba:	2201      	movs	r2, #1
 80044bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044be:	f7fd f8df 	bl	8001680 <HAL_GetTick>
 80044c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044c4:	e008      	b.n	80044d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044c6:	f7fd f8db 	bl	8001680 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d901      	bls.n	80044d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e05c      	b.n	8004592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044d8:	4b11      	ldr	r3, [pc, #68]	; (8004520 <HAL_RCC_OscConfig+0x470>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d0f0      	beq.n	80044c6 <HAL_RCC_OscConfig+0x416>
 80044e4:	e054      	b.n	8004590 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044e6:	4b10      	ldr	r3, [pc, #64]	; (8004528 <HAL_RCC_OscConfig+0x478>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ec:	f7fd f8c8 	bl	8001680 <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044f4:	f7fd f8c4 	bl	8001680 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e045      	b.n	8004592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004506:	4b06      	ldr	r3, [pc, #24]	; (8004520 <HAL_RCC_OscConfig+0x470>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1f0      	bne.n	80044f4 <HAL_RCC_OscConfig+0x444>
 8004512:	e03d      	b.n	8004590 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d107      	bne.n	800452c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e038      	b.n	8004592 <HAL_RCC_OscConfig+0x4e2>
 8004520:	40023800 	.word	0x40023800
 8004524:	40007000 	.word	0x40007000
 8004528:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800452c:	4b1b      	ldr	r3, [pc, #108]	; (800459c <HAL_RCC_OscConfig+0x4ec>)
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d028      	beq.n	800458c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004544:	429a      	cmp	r2, r3
 8004546:	d121      	bne.n	800458c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004552:	429a      	cmp	r2, r3
 8004554:	d11a      	bne.n	800458c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800455c:	4013      	ands	r3, r2
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004562:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004564:	4293      	cmp	r3, r2
 8004566:	d111      	bne.n	800458c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004572:	085b      	lsrs	r3, r3, #1
 8004574:	3b01      	subs	r3, #1
 8004576:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004578:	429a      	cmp	r2, r3
 800457a:	d107      	bne.n	800458c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004586:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004588:	429a      	cmp	r2, r3
 800458a:	d001      	beq.n	8004590 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e000      	b.n	8004592 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3718      	adds	r7, #24
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	40023800 	.word	0x40023800

080045a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d101      	bne.n	80045b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e0cc      	b.n	800474e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045b4:	4b68      	ldr	r3, [pc, #416]	; (8004758 <HAL_RCC_ClockConfig+0x1b8>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0307 	and.w	r3, r3, #7
 80045bc:	683a      	ldr	r2, [r7, #0]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d90c      	bls.n	80045dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045c2:	4b65      	ldr	r3, [pc, #404]	; (8004758 <HAL_RCC_ClockConfig+0x1b8>)
 80045c4:	683a      	ldr	r2, [r7, #0]
 80045c6:	b2d2      	uxtb	r2, r2
 80045c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ca:	4b63      	ldr	r3, [pc, #396]	; (8004758 <HAL_RCC_ClockConfig+0x1b8>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0307 	and.w	r3, r3, #7
 80045d2:	683a      	ldr	r2, [r7, #0]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d001      	beq.n	80045dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e0b8      	b.n	800474e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0302 	and.w	r3, r3, #2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d020      	beq.n	800462a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0304 	and.w	r3, r3, #4
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d005      	beq.n	8004600 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045f4:	4b59      	ldr	r3, [pc, #356]	; (800475c <HAL_RCC_ClockConfig+0x1bc>)
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	4a58      	ldr	r2, [pc, #352]	; (800475c <HAL_RCC_ClockConfig+0x1bc>)
 80045fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0308 	and.w	r3, r3, #8
 8004608:	2b00      	cmp	r3, #0
 800460a:	d005      	beq.n	8004618 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800460c:	4b53      	ldr	r3, [pc, #332]	; (800475c <HAL_RCC_ClockConfig+0x1bc>)
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	4a52      	ldr	r2, [pc, #328]	; (800475c <HAL_RCC_ClockConfig+0x1bc>)
 8004612:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004616:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004618:	4b50      	ldr	r3, [pc, #320]	; (800475c <HAL_RCC_ClockConfig+0x1bc>)
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	494d      	ldr	r1, [pc, #308]	; (800475c <HAL_RCC_ClockConfig+0x1bc>)
 8004626:	4313      	orrs	r3, r2
 8004628:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b00      	cmp	r3, #0
 8004634:	d044      	beq.n	80046c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d107      	bne.n	800464e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800463e:	4b47      	ldr	r3, [pc, #284]	; (800475c <HAL_RCC_ClockConfig+0x1bc>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d119      	bne.n	800467e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e07f      	b.n	800474e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	2b02      	cmp	r3, #2
 8004654:	d003      	beq.n	800465e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800465a:	2b03      	cmp	r3, #3
 800465c:	d107      	bne.n	800466e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800465e:	4b3f      	ldr	r3, [pc, #252]	; (800475c <HAL_RCC_ClockConfig+0x1bc>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d109      	bne.n	800467e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e06f      	b.n	800474e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800466e:	4b3b      	ldr	r3, [pc, #236]	; (800475c <HAL_RCC_ClockConfig+0x1bc>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e067      	b.n	800474e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800467e:	4b37      	ldr	r3, [pc, #220]	; (800475c <HAL_RCC_ClockConfig+0x1bc>)
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f023 0203 	bic.w	r2, r3, #3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	4934      	ldr	r1, [pc, #208]	; (800475c <HAL_RCC_ClockConfig+0x1bc>)
 800468c:	4313      	orrs	r3, r2
 800468e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004690:	f7fc fff6 	bl	8001680 <HAL_GetTick>
 8004694:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004696:	e00a      	b.n	80046ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004698:	f7fc fff2 	bl	8001680 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e04f      	b.n	800474e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ae:	4b2b      	ldr	r3, [pc, #172]	; (800475c <HAL_RCC_ClockConfig+0x1bc>)
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f003 020c 	and.w	r2, r3, #12
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	429a      	cmp	r2, r3
 80046be:	d1eb      	bne.n	8004698 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046c0:	4b25      	ldr	r3, [pc, #148]	; (8004758 <HAL_RCC_ClockConfig+0x1b8>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0307 	and.w	r3, r3, #7
 80046c8:	683a      	ldr	r2, [r7, #0]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d20c      	bcs.n	80046e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ce:	4b22      	ldr	r3, [pc, #136]	; (8004758 <HAL_RCC_ClockConfig+0x1b8>)
 80046d0:	683a      	ldr	r2, [r7, #0]
 80046d2:	b2d2      	uxtb	r2, r2
 80046d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046d6:	4b20      	ldr	r3, [pc, #128]	; (8004758 <HAL_RCC_ClockConfig+0x1b8>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0307 	and.w	r3, r3, #7
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d001      	beq.n	80046e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e032      	b.n	800474e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0304 	and.w	r3, r3, #4
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d008      	beq.n	8004706 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046f4:	4b19      	ldr	r3, [pc, #100]	; (800475c <HAL_RCC_ClockConfig+0x1bc>)
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	4916      	ldr	r1, [pc, #88]	; (800475c <HAL_RCC_ClockConfig+0x1bc>)
 8004702:	4313      	orrs	r3, r2
 8004704:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0308 	and.w	r3, r3, #8
 800470e:	2b00      	cmp	r3, #0
 8004710:	d009      	beq.n	8004726 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004712:	4b12      	ldr	r3, [pc, #72]	; (800475c <HAL_RCC_ClockConfig+0x1bc>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	00db      	lsls	r3, r3, #3
 8004720:	490e      	ldr	r1, [pc, #56]	; (800475c <HAL_RCC_ClockConfig+0x1bc>)
 8004722:	4313      	orrs	r3, r2
 8004724:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004726:	f000 f821 	bl	800476c <HAL_RCC_GetSysClockFreq>
 800472a:	4602      	mov	r2, r0
 800472c:	4b0b      	ldr	r3, [pc, #44]	; (800475c <HAL_RCC_ClockConfig+0x1bc>)
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	091b      	lsrs	r3, r3, #4
 8004732:	f003 030f 	and.w	r3, r3, #15
 8004736:	490a      	ldr	r1, [pc, #40]	; (8004760 <HAL_RCC_ClockConfig+0x1c0>)
 8004738:	5ccb      	ldrb	r3, [r1, r3]
 800473a:	fa22 f303 	lsr.w	r3, r2, r3
 800473e:	4a09      	ldr	r2, [pc, #36]	; (8004764 <HAL_RCC_ClockConfig+0x1c4>)
 8004740:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004742:	4b09      	ldr	r3, [pc, #36]	; (8004768 <HAL_RCC_ClockConfig+0x1c8>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4618      	mov	r0, r3
 8004748:	f7fc ff56 	bl	80015f8 <HAL_InitTick>

  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	40023c00 	.word	0x40023c00
 800475c:	40023800 	.word	0x40023800
 8004760:	0800e73c 	.word	0x0800e73c
 8004764:	20000000 	.word	0x20000000
 8004768:	20000004 	.word	0x20000004

0800476c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800476c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004770:	b094      	sub	sp, #80	; 0x50
 8004772:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004774:	2300      	movs	r3, #0
 8004776:	647b      	str	r3, [r7, #68]	; 0x44
 8004778:	2300      	movs	r3, #0
 800477a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800477c:	2300      	movs	r3, #0
 800477e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004780:	2300      	movs	r3, #0
 8004782:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004784:	4b79      	ldr	r3, [pc, #484]	; (800496c <HAL_RCC_GetSysClockFreq+0x200>)
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f003 030c 	and.w	r3, r3, #12
 800478c:	2b08      	cmp	r3, #8
 800478e:	d00d      	beq.n	80047ac <HAL_RCC_GetSysClockFreq+0x40>
 8004790:	2b08      	cmp	r3, #8
 8004792:	f200 80e1 	bhi.w	8004958 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004796:	2b00      	cmp	r3, #0
 8004798:	d002      	beq.n	80047a0 <HAL_RCC_GetSysClockFreq+0x34>
 800479a:	2b04      	cmp	r3, #4
 800479c:	d003      	beq.n	80047a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800479e:	e0db      	b.n	8004958 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047a0:	4b73      	ldr	r3, [pc, #460]	; (8004970 <HAL_RCC_GetSysClockFreq+0x204>)
 80047a2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80047a4:	e0db      	b.n	800495e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047a6:	4b73      	ldr	r3, [pc, #460]	; (8004974 <HAL_RCC_GetSysClockFreq+0x208>)
 80047a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047aa:	e0d8      	b.n	800495e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047ac:	4b6f      	ldr	r3, [pc, #444]	; (800496c <HAL_RCC_GetSysClockFreq+0x200>)
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047b4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047b6:	4b6d      	ldr	r3, [pc, #436]	; (800496c <HAL_RCC_GetSysClockFreq+0x200>)
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d063      	beq.n	800488a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047c2:	4b6a      	ldr	r3, [pc, #424]	; (800496c <HAL_RCC_GetSysClockFreq+0x200>)
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	099b      	lsrs	r3, r3, #6
 80047c8:	2200      	movs	r2, #0
 80047ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80047cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80047ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047d4:	633b      	str	r3, [r7, #48]	; 0x30
 80047d6:	2300      	movs	r3, #0
 80047d8:	637b      	str	r3, [r7, #52]	; 0x34
 80047da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80047de:	4622      	mov	r2, r4
 80047e0:	462b      	mov	r3, r5
 80047e2:	f04f 0000 	mov.w	r0, #0
 80047e6:	f04f 0100 	mov.w	r1, #0
 80047ea:	0159      	lsls	r1, r3, #5
 80047ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047f0:	0150      	lsls	r0, r2, #5
 80047f2:	4602      	mov	r2, r0
 80047f4:	460b      	mov	r3, r1
 80047f6:	4621      	mov	r1, r4
 80047f8:	1a51      	subs	r1, r2, r1
 80047fa:	6139      	str	r1, [r7, #16]
 80047fc:	4629      	mov	r1, r5
 80047fe:	eb63 0301 	sbc.w	r3, r3, r1
 8004802:	617b      	str	r3, [r7, #20]
 8004804:	f04f 0200 	mov.w	r2, #0
 8004808:	f04f 0300 	mov.w	r3, #0
 800480c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004810:	4659      	mov	r1, fp
 8004812:	018b      	lsls	r3, r1, #6
 8004814:	4651      	mov	r1, sl
 8004816:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800481a:	4651      	mov	r1, sl
 800481c:	018a      	lsls	r2, r1, #6
 800481e:	4651      	mov	r1, sl
 8004820:	ebb2 0801 	subs.w	r8, r2, r1
 8004824:	4659      	mov	r1, fp
 8004826:	eb63 0901 	sbc.w	r9, r3, r1
 800482a:	f04f 0200 	mov.w	r2, #0
 800482e:	f04f 0300 	mov.w	r3, #0
 8004832:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004836:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800483a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800483e:	4690      	mov	r8, r2
 8004840:	4699      	mov	r9, r3
 8004842:	4623      	mov	r3, r4
 8004844:	eb18 0303 	adds.w	r3, r8, r3
 8004848:	60bb      	str	r3, [r7, #8]
 800484a:	462b      	mov	r3, r5
 800484c:	eb49 0303 	adc.w	r3, r9, r3
 8004850:	60fb      	str	r3, [r7, #12]
 8004852:	f04f 0200 	mov.w	r2, #0
 8004856:	f04f 0300 	mov.w	r3, #0
 800485a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800485e:	4629      	mov	r1, r5
 8004860:	024b      	lsls	r3, r1, #9
 8004862:	4621      	mov	r1, r4
 8004864:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004868:	4621      	mov	r1, r4
 800486a:	024a      	lsls	r2, r1, #9
 800486c:	4610      	mov	r0, r2
 800486e:	4619      	mov	r1, r3
 8004870:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004872:	2200      	movs	r2, #0
 8004874:	62bb      	str	r3, [r7, #40]	; 0x28
 8004876:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004878:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800487c:	f7fb fcf8 	bl	8000270 <__aeabi_uldivmod>
 8004880:	4602      	mov	r2, r0
 8004882:	460b      	mov	r3, r1
 8004884:	4613      	mov	r3, r2
 8004886:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004888:	e058      	b.n	800493c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800488a:	4b38      	ldr	r3, [pc, #224]	; (800496c <HAL_RCC_GetSysClockFreq+0x200>)
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	099b      	lsrs	r3, r3, #6
 8004890:	2200      	movs	r2, #0
 8004892:	4618      	mov	r0, r3
 8004894:	4611      	mov	r1, r2
 8004896:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800489a:	623b      	str	r3, [r7, #32]
 800489c:	2300      	movs	r3, #0
 800489e:	627b      	str	r3, [r7, #36]	; 0x24
 80048a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80048a4:	4642      	mov	r2, r8
 80048a6:	464b      	mov	r3, r9
 80048a8:	f04f 0000 	mov.w	r0, #0
 80048ac:	f04f 0100 	mov.w	r1, #0
 80048b0:	0159      	lsls	r1, r3, #5
 80048b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048b6:	0150      	lsls	r0, r2, #5
 80048b8:	4602      	mov	r2, r0
 80048ba:	460b      	mov	r3, r1
 80048bc:	4641      	mov	r1, r8
 80048be:	ebb2 0a01 	subs.w	sl, r2, r1
 80048c2:	4649      	mov	r1, r9
 80048c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80048c8:	f04f 0200 	mov.w	r2, #0
 80048cc:	f04f 0300 	mov.w	r3, #0
 80048d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80048d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80048d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80048dc:	ebb2 040a 	subs.w	r4, r2, sl
 80048e0:	eb63 050b 	sbc.w	r5, r3, fp
 80048e4:	f04f 0200 	mov.w	r2, #0
 80048e8:	f04f 0300 	mov.w	r3, #0
 80048ec:	00eb      	lsls	r3, r5, #3
 80048ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048f2:	00e2      	lsls	r2, r4, #3
 80048f4:	4614      	mov	r4, r2
 80048f6:	461d      	mov	r5, r3
 80048f8:	4643      	mov	r3, r8
 80048fa:	18e3      	adds	r3, r4, r3
 80048fc:	603b      	str	r3, [r7, #0]
 80048fe:	464b      	mov	r3, r9
 8004900:	eb45 0303 	adc.w	r3, r5, r3
 8004904:	607b      	str	r3, [r7, #4]
 8004906:	f04f 0200 	mov.w	r2, #0
 800490a:	f04f 0300 	mov.w	r3, #0
 800490e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004912:	4629      	mov	r1, r5
 8004914:	028b      	lsls	r3, r1, #10
 8004916:	4621      	mov	r1, r4
 8004918:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800491c:	4621      	mov	r1, r4
 800491e:	028a      	lsls	r2, r1, #10
 8004920:	4610      	mov	r0, r2
 8004922:	4619      	mov	r1, r3
 8004924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004926:	2200      	movs	r2, #0
 8004928:	61bb      	str	r3, [r7, #24]
 800492a:	61fa      	str	r2, [r7, #28]
 800492c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004930:	f7fb fc9e 	bl	8000270 <__aeabi_uldivmod>
 8004934:	4602      	mov	r2, r0
 8004936:	460b      	mov	r3, r1
 8004938:	4613      	mov	r3, r2
 800493a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800493c:	4b0b      	ldr	r3, [pc, #44]	; (800496c <HAL_RCC_GetSysClockFreq+0x200>)
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	0c1b      	lsrs	r3, r3, #16
 8004942:	f003 0303 	and.w	r3, r3, #3
 8004946:	3301      	adds	r3, #1
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800494c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800494e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004950:	fbb2 f3f3 	udiv	r3, r2, r3
 8004954:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004956:	e002      	b.n	800495e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004958:	4b05      	ldr	r3, [pc, #20]	; (8004970 <HAL_RCC_GetSysClockFreq+0x204>)
 800495a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800495c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800495e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004960:	4618      	mov	r0, r3
 8004962:	3750      	adds	r7, #80	; 0x50
 8004964:	46bd      	mov	sp, r7
 8004966:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800496a:	bf00      	nop
 800496c:	40023800 	.word	0x40023800
 8004970:	00f42400 	.word	0x00f42400
 8004974:	007a1200 	.word	0x007a1200

08004978 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004978:	b480      	push	{r7}
 800497a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800497c:	4b03      	ldr	r3, [pc, #12]	; (800498c <HAL_RCC_GetHCLKFreq+0x14>)
 800497e:	681b      	ldr	r3, [r3, #0]
}
 8004980:	4618      	mov	r0, r3
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	20000000 	.word	0x20000000

08004990 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004994:	f7ff fff0 	bl	8004978 <HAL_RCC_GetHCLKFreq>
 8004998:	4602      	mov	r2, r0
 800499a:	4b05      	ldr	r3, [pc, #20]	; (80049b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	0a9b      	lsrs	r3, r3, #10
 80049a0:	f003 0307 	and.w	r3, r3, #7
 80049a4:	4903      	ldr	r1, [pc, #12]	; (80049b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049a6:	5ccb      	ldrb	r3, [r1, r3]
 80049a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	40023800 	.word	0x40023800
 80049b4:	0800e74c 	.word	0x0800e74c

080049b8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b086      	sub	sp, #24
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049c0:	2300      	movs	r3, #0
 80049c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80049c4:	2300      	movs	r3, #0
 80049c6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d105      	bne.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d035      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80049e0:	4b62      	ldr	r3, [pc, #392]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80049e2:	2200      	movs	r2, #0
 80049e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049e6:	f7fc fe4b 	bl	8001680 <HAL_GetTick>
 80049ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049ec:	e008      	b.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80049ee:	f7fc fe47 	bl	8001680 <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d901      	bls.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e0b0      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a00:	4b5b      	ldr	r3, [pc, #364]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1f0      	bne.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	019a      	lsls	r2, r3, #6
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	071b      	lsls	r3, r3, #28
 8004a18:	4955      	ldr	r1, [pc, #340]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a20:	4b52      	ldr	r3, [pc, #328]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004a22:	2201      	movs	r2, #1
 8004a24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a26:	f7fc fe2b 	bl	8001680 <HAL_GetTick>
 8004a2a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a2c:	e008      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a2e:	f7fc fe27 	bl	8001680 <HAL_GetTick>
 8004a32:	4602      	mov	r2, r0
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d901      	bls.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e090      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a40:	4b4b      	ldr	r3, [pc, #300]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d0f0      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0302 	and.w	r3, r3, #2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f000 8083 	beq.w	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	60fb      	str	r3, [r7, #12]
 8004a5e:	4b44      	ldr	r3, [pc, #272]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a62:	4a43      	ldr	r2, [pc, #268]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a68:	6413      	str	r3, [r2, #64]	; 0x40
 8004a6a:	4b41      	ldr	r3, [pc, #260]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a72:	60fb      	str	r3, [r7, #12]
 8004a74:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004a76:	4b3f      	ldr	r3, [pc, #252]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a3e      	ldr	r2, [pc, #248]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a80:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a82:	f7fc fdfd 	bl	8001680 <HAL_GetTick>
 8004a86:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004a88:	e008      	b.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004a8a:	f7fc fdf9 	bl	8001680 <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d901      	bls.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e062      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004a9c:	4b35      	ldr	r3, [pc, #212]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d0f0      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004aa8:	4b31      	ldr	r3, [pc, #196]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ab0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d02f      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d028      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ac6:	4b2a      	ldr	r3, [pc, #168]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ace:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ad0:	4b29      	ldr	r3, [pc, #164]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ad6:	4b28      	ldr	r3, [pc, #160]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004adc:	4a24      	ldr	r2, [pc, #144]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ae2:	4b23      	ldr	r3, [pc, #140]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae6:	f003 0301 	and.w	r3, r3, #1
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d114      	bne.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004aee:	f7fc fdc7 	bl	8001680 <HAL_GetTick>
 8004af2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004af4:	e00a      	b.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004af6:	f7fc fdc3 	bl	8001680 <HAL_GetTick>
 8004afa:	4602      	mov	r2, r0
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d901      	bls.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e02a      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b0c:	4b18      	ldr	r3, [pc, #96]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b10:	f003 0302 	and.w	r3, r3, #2
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d0ee      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b24:	d10d      	bne.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004b26:	4b12      	ldr	r3, [pc, #72]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004b36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b3a:	490d      	ldr	r1, [pc, #52]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	608b      	str	r3, [r1, #8]
 8004b40:	e005      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004b42:	4b0b      	ldr	r3, [pc, #44]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	4a0a      	ldr	r2, [pc, #40]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b48:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004b4c:	6093      	str	r3, [r2, #8]
 8004b4e:	4b08      	ldr	r3, [pc, #32]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b50:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b5a:	4905      	ldr	r1, [pc, #20]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3718      	adds	r7, #24
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	42470068 	.word	0x42470068
 8004b70:	40023800 	.word	0x40023800
 8004b74:	40007000 	.word	0x40007000
 8004b78:	42470e40 	.word	0x42470e40

08004b7c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b087      	sub	sp, #28
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004b84:	2300      	movs	r3, #0
 8004b86:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004b90:	2300      	movs	r3, #0
 8004b92:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d13e      	bne.n	8004c18 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004b9a:	4b23      	ldr	r3, [pc, #140]	; (8004c28 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ba2:	60fb      	str	r3, [r7, #12]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d005      	beq.n	8004bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d12f      	bne.n	8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004bb0:	4b1e      	ldr	r3, [pc, #120]	; (8004c2c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004bb2:	617b      	str	r3, [r7, #20]
          break;
 8004bb4:	e02f      	b.n	8004c16 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004bb6:	4b1c      	ldr	r3, [pc, #112]	; (8004c28 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bc2:	d108      	bne.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004bc4:	4b18      	ldr	r3, [pc, #96]	; (8004c28 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bcc:	4a18      	ldr	r2, [pc, #96]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd2:	613b      	str	r3, [r7, #16]
 8004bd4:	e007      	b.n	8004be6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004bd6:	4b14      	ldr	r3, [pc, #80]	; (8004c28 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bde:	4a15      	ldr	r2, [pc, #84]	; (8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004be6:	4b10      	ldr	r3, [pc, #64]	; (8004c28 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004be8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bec:	099b      	lsrs	r3, r3, #6
 8004bee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	fb02 f303 	mul.w	r3, r2, r3
 8004bf8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004bfa:	4b0b      	ldr	r3, [pc, #44]	; (8004c28 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004bfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c00:	0f1b      	lsrs	r3, r3, #28
 8004c02:	f003 0307 	and.w	r3, r3, #7
 8004c06:	68ba      	ldr	r2, [r7, #8]
 8004c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c0c:	617b      	str	r3, [r7, #20]
          break;
 8004c0e:	e002      	b.n	8004c16 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	617b      	str	r3, [r7, #20]
          break;
 8004c14:	bf00      	nop
        }
      }
      break;
 8004c16:	bf00      	nop
    }
  }
  return frequency;
 8004c18:	697b      	ldr	r3, [r7, #20]
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	371c      	adds	r7, #28
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	40023800 	.word	0x40023800
 8004c2c:	00bb8000 	.word	0x00bb8000
 8004c30:	007a1200 	.word	0x007a1200
 8004c34:	00f42400 	.word	0x00f42400

08004c38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e07b      	b.n	8004d42 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d108      	bne.n	8004c64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c5a:	d009      	beq.n	8004c70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	61da      	str	r2, [r3, #28]
 8004c62:	e005      	b.n	8004c70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d106      	bne.n	8004c90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f7fc fb88 	bl	80013a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2202      	movs	r2, #2
 8004c94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ca6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004cb8:	431a      	orrs	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ce0:	431a      	orrs	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cea:	431a      	orrs	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a1b      	ldr	r3, [r3, #32]
 8004cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf4:	ea42 0103 	orr.w	r1, r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	430a      	orrs	r2, r1
 8004d06:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	0c1b      	lsrs	r3, r3, #16
 8004d0e:	f003 0104 	and.w	r1, r3, #4
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d16:	f003 0210 	and.w	r2, r3, #16
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	69da      	ldr	r2, [r3, #28]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d30:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3708      	adds	r7, #8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b082      	sub	sp, #8
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d101      	bne.n	8004d5c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e041      	b.n	8004de0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d106      	bne.n	8004d76 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f7fc fb5d 	bl	8001430 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2202      	movs	r2, #2
 8004d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	3304      	adds	r3, #4
 8004d86:	4619      	mov	r1, r3
 8004d88:	4610      	mov	r0, r2
 8004d8a:	f000 f82d 	bl	8004de8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2201      	movs	r2, #1
 8004da2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2201      	movs	r2, #1
 8004daa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2201      	movs	r2, #1
 8004db2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2201      	movs	r2, #1
 8004dba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3708      	adds	r7, #8
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a40      	ldr	r2, [pc, #256]	; (8004efc <TIM_Base_SetConfig+0x114>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d013      	beq.n	8004e28 <TIM_Base_SetConfig+0x40>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e06:	d00f      	beq.n	8004e28 <TIM_Base_SetConfig+0x40>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a3d      	ldr	r2, [pc, #244]	; (8004f00 <TIM_Base_SetConfig+0x118>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d00b      	beq.n	8004e28 <TIM_Base_SetConfig+0x40>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a3c      	ldr	r2, [pc, #240]	; (8004f04 <TIM_Base_SetConfig+0x11c>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d007      	beq.n	8004e28 <TIM_Base_SetConfig+0x40>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a3b      	ldr	r2, [pc, #236]	; (8004f08 <TIM_Base_SetConfig+0x120>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d003      	beq.n	8004e28 <TIM_Base_SetConfig+0x40>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a3a      	ldr	r2, [pc, #232]	; (8004f0c <TIM_Base_SetConfig+0x124>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d108      	bne.n	8004e3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a2f      	ldr	r2, [pc, #188]	; (8004efc <TIM_Base_SetConfig+0x114>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d02b      	beq.n	8004e9a <TIM_Base_SetConfig+0xb2>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e48:	d027      	beq.n	8004e9a <TIM_Base_SetConfig+0xb2>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a2c      	ldr	r2, [pc, #176]	; (8004f00 <TIM_Base_SetConfig+0x118>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d023      	beq.n	8004e9a <TIM_Base_SetConfig+0xb2>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a2b      	ldr	r2, [pc, #172]	; (8004f04 <TIM_Base_SetConfig+0x11c>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d01f      	beq.n	8004e9a <TIM_Base_SetConfig+0xb2>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a2a      	ldr	r2, [pc, #168]	; (8004f08 <TIM_Base_SetConfig+0x120>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d01b      	beq.n	8004e9a <TIM_Base_SetConfig+0xb2>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a29      	ldr	r2, [pc, #164]	; (8004f0c <TIM_Base_SetConfig+0x124>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d017      	beq.n	8004e9a <TIM_Base_SetConfig+0xb2>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a28      	ldr	r2, [pc, #160]	; (8004f10 <TIM_Base_SetConfig+0x128>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d013      	beq.n	8004e9a <TIM_Base_SetConfig+0xb2>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a27      	ldr	r2, [pc, #156]	; (8004f14 <TIM_Base_SetConfig+0x12c>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d00f      	beq.n	8004e9a <TIM_Base_SetConfig+0xb2>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a26      	ldr	r2, [pc, #152]	; (8004f18 <TIM_Base_SetConfig+0x130>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d00b      	beq.n	8004e9a <TIM_Base_SetConfig+0xb2>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a25      	ldr	r2, [pc, #148]	; (8004f1c <TIM_Base_SetConfig+0x134>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d007      	beq.n	8004e9a <TIM_Base_SetConfig+0xb2>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a24      	ldr	r2, [pc, #144]	; (8004f20 <TIM_Base_SetConfig+0x138>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d003      	beq.n	8004e9a <TIM_Base_SetConfig+0xb2>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a23      	ldr	r2, [pc, #140]	; (8004f24 <TIM_Base_SetConfig+0x13c>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d108      	bne.n	8004eac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ea0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	689a      	ldr	r2, [r3, #8]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a0a      	ldr	r2, [pc, #40]	; (8004efc <TIM_Base_SetConfig+0x114>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d003      	beq.n	8004ee0 <TIM_Base_SetConfig+0xf8>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a0c      	ldr	r2, [pc, #48]	; (8004f0c <TIM_Base_SetConfig+0x124>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d103      	bne.n	8004ee8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	691a      	ldr	r2, [r3, #16]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	615a      	str	r2, [r3, #20]
}
 8004eee:	bf00      	nop
 8004ef0:	3714      	adds	r7, #20
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	40010000 	.word	0x40010000
 8004f00:	40000400 	.word	0x40000400
 8004f04:	40000800 	.word	0x40000800
 8004f08:	40000c00 	.word	0x40000c00
 8004f0c:	40010400 	.word	0x40010400
 8004f10:	40014000 	.word	0x40014000
 8004f14:	40014400 	.word	0x40014400
 8004f18:	40014800 	.word	0x40014800
 8004f1c:	40001800 	.word	0x40001800
 8004f20:	40001c00 	.word	0x40001c00
 8004f24:	40002000 	.word	0x40002000

08004f28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d101      	bne.n	8004f40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f3c:	2302      	movs	r3, #2
 8004f3e:	e05a      	b.n	8004ff6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2202      	movs	r2, #2
 8004f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a21      	ldr	r2, [pc, #132]	; (8005004 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d022      	beq.n	8004fca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f8c:	d01d      	beq.n	8004fca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a1d      	ldr	r2, [pc, #116]	; (8005008 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d018      	beq.n	8004fca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a1b      	ldr	r2, [pc, #108]	; (800500c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d013      	beq.n	8004fca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a1a      	ldr	r2, [pc, #104]	; (8005010 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d00e      	beq.n	8004fca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a18      	ldr	r2, [pc, #96]	; (8005014 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d009      	beq.n	8004fca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a17      	ldr	r2, [pc, #92]	; (8005018 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d004      	beq.n	8004fca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a15      	ldr	r2, [pc, #84]	; (800501c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d10c      	bne.n	8004fe4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	68ba      	ldr	r2, [r7, #8]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68ba      	ldr	r2, [r7, #8]
 8004fe2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3714      	adds	r7, #20
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	40010000 	.word	0x40010000
 8005008:	40000400 	.word	0x40000400
 800500c:	40000800 	.word	0x40000800
 8005010:	40000c00 	.word	0x40000c00
 8005014:	40010400 	.word	0x40010400
 8005018:	40014000 	.word	0x40014000
 800501c:	40001800 	.word	0x40001800

08005020 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005020:	b084      	sub	sp, #16
 8005022:	b580      	push	{r7, lr}
 8005024:	b084      	sub	sp, #16
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
 800502a:	f107 001c 	add.w	r0, r7, #28
 800502e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005034:	2b01      	cmp	r3, #1
 8005036:	d122      	bne.n	800507e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800504c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005062:	2b01      	cmp	r3, #1
 8005064:	d105      	bne.n	8005072 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 f9c0 	bl	80053f8 <USB_CoreReset>
 8005078:	4603      	mov	r3, r0
 800507a:	73fb      	strb	r3, [r7, #15]
 800507c:	e01a      	b.n	80050b4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 f9b4 	bl	80053f8 <USB_CoreReset>
 8005090:	4603      	mov	r3, r0
 8005092:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005096:	2b00      	cmp	r3, #0
 8005098:	d106      	bne.n	80050a8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800509e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	639a      	str	r2, [r3, #56]	; 0x38
 80050a6:	e005      	b.n	80050b4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80050b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d10b      	bne.n	80050d2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f043 0206 	orr.w	r2, r3, #6
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f043 0220 	orr.w	r2, r3, #32
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80050d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3710      	adds	r7, #16
 80050d8:	46bd      	mov	sp, r7
 80050da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050de:	b004      	add	sp, #16
 80050e0:	4770      	bx	lr

080050e2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b083      	sub	sp, #12
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f043 0201 	orr.w	r2, r3, #1
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f023 0201 	bic.w	r2, r3, #1
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	370c      	adds	r7, #12
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr

08005126 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005126:	b580      	push	{r7, lr}
 8005128:	b084      	sub	sp, #16
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
 800512e:	460b      	mov	r3, r1
 8005130:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005132:	2300      	movs	r3, #0
 8005134:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005142:	78fb      	ldrb	r3, [r7, #3]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d115      	bne.n	8005174 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005154:	2001      	movs	r0, #1
 8005156:	f7fc fa9f 	bl	8001698 <HAL_Delay>
      ms++;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	3301      	adds	r3, #1
 800515e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 f93a 	bl	80053da <USB_GetMode>
 8005166:	4603      	mov	r3, r0
 8005168:	2b01      	cmp	r3, #1
 800516a:	d01e      	beq.n	80051aa <USB_SetCurrentMode+0x84>
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2b31      	cmp	r3, #49	; 0x31
 8005170:	d9f0      	bls.n	8005154 <USB_SetCurrentMode+0x2e>
 8005172:	e01a      	b.n	80051aa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005174:	78fb      	ldrb	r3, [r7, #3]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d115      	bne.n	80051a6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005186:	2001      	movs	r0, #1
 8005188:	f7fc fa86 	bl	8001698 <HAL_Delay>
      ms++;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	3301      	adds	r3, #1
 8005190:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f921 	bl	80053da <USB_GetMode>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d005      	beq.n	80051aa <USB_SetCurrentMode+0x84>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2b31      	cmp	r3, #49	; 0x31
 80051a2:	d9f0      	bls.n	8005186 <USB_SetCurrentMode+0x60>
 80051a4:	e001      	b.n	80051aa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e005      	b.n	80051b6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2b32      	cmp	r3, #50	; 0x32
 80051ae:	d101      	bne.n	80051b4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e000      	b.n	80051b6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3710      	adds	r7, #16
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
	...

080051c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80051ca:	2300      	movs	r3, #0
 80051cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	3301      	adds	r3, #1
 80051d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	4a13      	ldr	r2, [pc, #76]	; (8005224 <USB_FlushTxFifo+0x64>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d901      	bls.n	80051e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80051dc:	2303      	movs	r3, #3
 80051de:	e01b      	b.n	8005218 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	daf2      	bge.n	80051ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80051e8:	2300      	movs	r3, #0
 80051ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	019b      	lsls	r3, r3, #6
 80051f0:	f043 0220 	orr.w	r2, r3, #32
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	3301      	adds	r3, #1
 80051fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	4a08      	ldr	r2, [pc, #32]	; (8005224 <USB_FlushTxFifo+0x64>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d901      	bls.n	800520a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e006      	b.n	8005218 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	f003 0320 	and.w	r3, r3, #32
 8005212:	2b20      	cmp	r3, #32
 8005214:	d0f0      	beq.n	80051f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3714      	adds	r7, #20
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr
 8005224:	00030d40 	.word	0x00030d40

08005228 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005230:	2300      	movs	r3, #0
 8005232:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	3301      	adds	r3, #1
 8005238:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	4a11      	ldr	r2, [pc, #68]	; (8005284 <USB_FlushRxFifo+0x5c>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d901      	bls.n	8005246 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e018      	b.n	8005278 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	2b00      	cmp	r3, #0
 800524c:	daf2      	bge.n	8005234 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800524e:	2300      	movs	r3, #0
 8005250:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2210      	movs	r2, #16
 8005256:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	3301      	adds	r3, #1
 800525c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	4a08      	ldr	r2, [pc, #32]	; (8005284 <USB_FlushRxFifo+0x5c>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d901      	bls.n	800526a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e006      	b.n	8005278 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	f003 0310 	and.w	r3, r3, #16
 8005272:	2b10      	cmp	r3, #16
 8005274:	d0f0      	beq.n	8005258 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	3714      	adds	r7, #20
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr
 8005284:	00030d40 	.word	0x00030d40

08005288 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005288:	b480      	push	{r7}
 800528a:	b089      	sub	sp, #36	; 0x24
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	4611      	mov	r1, r2
 8005294:	461a      	mov	r2, r3
 8005296:	460b      	mov	r3, r1
 8005298:	71fb      	strb	r3, [r7, #7]
 800529a:	4613      	mov	r3, r2
 800529c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80052a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d123      	bne.n	80052f6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80052ae:	88bb      	ldrh	r3, [r7, #4]
 80052b0:	3303      	adds	r3, #3
 80052b2:	089b      	lsrs	r3, r3, #2
 80052b4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80052b6:	2300      	movs	r3, #0
 80052b8:	61bb      	str	r3, [r7, #24]
 80052ba:	e018      	b.n	80052ee <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80052bc:	79fb      	ldrb	r3, [r7, #7]
 80052be:	031a      	lsls	r2, r3, #12
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	4413      	add	r3, r2
 80052c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052c8:	461a      	mov	r2, r3
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	6013      	str	r3, [r2, #0]
      pSrc++;
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	3301      	adds	r3, #1
 80052d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	3301      	adds	r3, #1
 80052da:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	3301      	adds	r3, #1
 80052e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	3301      	adds	r3, #1
 80052e6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	3301      	adds	r3, #1
 80052ec:	61bb      	str	r3, [r7, #24]
 80052ee:	69ba      	ldr	r2, [r7, #24]
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d3e2      	bcc.n	80052bc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3724      	adds	r7, #36	; 0x24
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005304:	b480      	push	{r7}
 8005306:	b08b      	sub	sp, #44	; 0x2c
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	4613      	mov	r3, r2
 8005310:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800531a:	88fb      	ldrh	r3, [r7, #6]
 800531c:	089b      	lsrs	r3, r3, #2
 800531e:	b29b      	uxth	r3, r3
 8005320:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005322:	88fb      	ldrh	r3, [r7, #6]
 8005324:	f003 0303 	and.w	r3, r3, #3
 8005328:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800532a:	2300      	movs	r3, #0
 800532c:	623b      	str	r3, [r7, #32]
 800532e:	e014      	b.n	800535a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533a:	601a      	str	r2, [r3, #0]
    pDest++;
 800533c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533e:	3301      	adds	r3, #1
 8005340:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005344:	3301      	adds	r3, #1
 8005346:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534a:	3301      	adds	r3, #1
 800534c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800534e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005350:	3301      	adds	r3, #1
 8005352:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005354:	6a3b      	ldr	r3, [r7, #32]
 8005356:	3301      	adds	r3, #1
 8005358:	623b      	str	r3, [r7, #32]
 800535a:	6a3a      	ldr	r2, [r7, #32]
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	429a      	cmp	r2, r3
 8005360:	d3e6      	bcc.n	8005330 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005362:	8bfb      	ldrh	r3, [r7, #30]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d01e      	beq.n	80053a6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005368:	2300      	movs	r3, #0
 800536a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005372:	461a      	mov	r2, r3
 8005374:	f107 0310 	add.w	r3, r7, #16
 8005378:	6812      	ldr	r2, [r2, #0]
 800537a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	6a3b      	ldr	r3, [r7, #32]
 8005380:	b2db      	uxtb	r3, r3
 8005382:	00db      	lsls	r3, r3, #3
 8005384:	fa22 f303 	lsr.w	r3, r2, r3
 8005388:	b2da      	uxtb	r2, r3
 800538a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538c:	701a      	strb	r2, [r3, #0]
      i++;
 800538e:	6a3b      	ldr	r3, [r7, #32]
 8005390:	3301      	adds	r3, #1
 8005392:	623b      	str	r3, [r7, #32]
      pDest++;
 8005394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005396:	3301      	adds	r3, #1
 8005398:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800539a:	8bfb      	ldrh	r3, [r7, #30]
 800539c:	3b01      	subs	r3, #1
 800539e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80053a0:	8bfb      	ldrh	r3, [r7, #30]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d1ea      	bne.n	800537c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80053a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	372c      	adds	r7, #44	; 0x2c
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	699b      	ldr	r3, [r3, #24]
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	4013      	ands	r3, r2
 80053ca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80053cc:	68fb      	ldr	r3, [r7, #12]
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3714      	adds	r7, #20
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr

080053da <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80053da:	b480      	push	{r7}
 80053dc:	b083      	sub	sp, #12
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	f003 0301 	and.w	r3, r3, #1
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	370c      	adds	r7, #12
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
	...

080053f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005400:	2300      	movs	r3, #0
 8005402:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	3301      	adds	r3, #1
 8005408:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	4a13      	ldr	r2, [pc, #76]	; (800545c <USB_CoreReset+0x64>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d901      	bls.n	8005416 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e01b      	b.n	800544e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	2b00      	cmp	r3, #0
 800541c:	daf2      	bge.n	8005404 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800541e:	2300      	movs	r3, #0
 8005420:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	f043 0201 	orr.w	r2, r3, #1
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	3301      	adds	r3, #1
 8005432:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	4a09      	ldr	r2, [pc, #36]	; (800545c <USB_CoreReset+0x64>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d901      	bls.n	8005440 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800543c:	2303      	movs	r3, #3
 800543e:	e006      	b.n	800544e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	f003 0301 	and.w	r3, r3, #1
 8005448:	2b01      	cmp	r3, #1
 800544a:	d0f0      	beq.n	800542e <USB_CoreReset+0x36>

  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3714      	adds	r7, #20
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	00030d40 	.word	0x00030d40

08005460 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005460:	b084      	sub	sp, #16
 8005462:	b580      	push	{r7, lr}
 8005464:	b086      	sub	sp, #24
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
 800546a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800546e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005472:	2300      	movs	r3, #0
 8005474:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005480:	461a      	mov	r2, r3
 8005482:	2300      	movs	r3, #0
 8005484:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005496:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d018      	beq.n	80054e8 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80054b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d10a      	bne.n	80054d2 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054ca:	f043 0304 	orr.w	r3, r3, #4
 80054ce:	6013      	str	r3, [r2, #0]
 80054d0:	e014      	b.n	80054fc <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054e0:	f023 0304 	bic.w	r3, r3, #4
 80054e4:	6013      	str	r3, [r2, #0]
 80054e6:	e009      	b.n	80054fc <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054f6:	f023 0304 	bic.w	r3, r3, #4
 80054fa:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80054fc:	2110      	movs	r1, #16
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f7ff fe5e 	bl	80051c0 <USB_FlushTxFifo>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d001      	beq.n	800550e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f7ff fe8a 	bl	8005228 <USB_FlushRxFifo>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d001      	beq.n	800551e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800551e:	2300      	movs	r3, #0
 8005520:	613b      	str	r3, [r7, #16]
 8005522:	e015      	b.n	8005550 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	015a      	lsls	r2, r3, #5
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	4413      	add	r3, r2
 800552c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005530:	461a      	mov	r2, r3
 8005532:	f04f 33ff 	mov.w	r3, #4294967295
 8005536:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	015a      	lsls	r2, r3, #5
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	4413      	add	r3, r2
 8005540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005544:	461a      	mov	r2, r3
 8005546:	2300      	movs	r3, #0
 8005548:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	3301      	adds	r3, #1
 800554e:	613b      	str	r3, [r7, #16]
 8005550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	429a      	cmp	r2, r3
 8005556:	d3e5      	bcc.n	8005524 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f04f 32ff 	mov.w	r2, #4294967295
 8005564:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800556a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00b      	beq.n	800558a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005578:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a13      	ldr	r2, [pc, #76]	; (80055cc <USB_HostInit+0x16c>)
 800557e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a13      	ldr	r2, [pc, #76]	; (80055d0 <USB_HostInit+0x170>)
 8005584:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005588:	e009      	b.n	800559e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2280      	movs	r2, #128	; 0x80
 800558e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a10      	ldr	r2, [pc, #64]	; (80055d4 <USB_HostInit+0x174>)
 8005594:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a0f      	ldr	r2, [pc, #60]	; (80055d8 <USB_HostInit+0x178>)
 800559a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800559e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d105      	bne.n	80055b0 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	f043 0210 	orr.w	r2, r3, #16
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	699a      	ldr	r2, [r3, #24]
 80055b4:	4b09      	ldr	r3, [pc, #36]	; (80055dc <USB_HostInit+0x17c>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80055bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3718      	adds	r7, #24
 80055c2:	46bd      	mov	sp, r7
 80055c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055c8:	b004      	add	sp, #16
 80055ca:	4770      	bx	lr
 80055cc:	01000200 	.word	0x01000200
 80055d0:	00e00300 	.word	0x00e00300
 80055d4:	00600080 	.word	0x00600080
 80055d8:	004000e0 	.word	0x004000e0
 80055dc:	a3200008 	.word	0xa3200008

080055e0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b085      	sub	sp, #20
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	460b      	mov	r3, r1
 80055ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055fe:	f023 0303 	bic.w	r3, r3, #3
 8005602:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	78fb      	ldrb	r3, [r7, #3]
 800560e:	f003 0303 	and.w	r3, r3, #3
 8005612:	68f9      	ldr	r1, [r7, #12]
 8005614:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005618:	4313      	orrs	r3, r2
 800561a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800561c:	78fb      	ldrb	r3, [r7, #3]
 800561e:	2b01      	cmp	r3, #1
 8005620:	d107      	bne.n	8005632 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005628:	461a      	mov	r2, r3
 800562a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800562e:	6053      	str	r3, [r2, #4]
 8005630:	e009      	b.n	8005646 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005632:	78fb      	ldrb	r3, [r7, #3]
 8005634:	2b02      	cmp	r3, #2
 8005636:	d106      	bne.n	8005646 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800563e:	461a      	mov	r2, r3
 8005640:	f241 7370 	movw	r3, #6000	; 0x1770
 8005644:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3714      	adds	r7, #20
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005660:	2300      	movs	r3, #0
 8005662:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005674:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800567e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005682:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005684:	2064      	movs	r0, #100	; 0x64
 8005686:	f7fc f807 	bl	8001698 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005692:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005696:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005698:	200a      	movs	r0, #10
 800569a:	f7fb fffd 	bl	8001698 <HAL_Delay>

  return HAL_OK;
 800569e:	2300      	movs	r3, #0
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3710      	adds	r7, #16
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	460b      	mov	r3, r1
 80056b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80056b8:	2300      	movs	r3, #0
 80056ba:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80056cc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d109      	bne.n	80056ec <USB_DriveVbus+0x44>
 80056d8:	78fb      	ldrb	r3, [r7, #3]
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d106      	bne.n	80056ec <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80056e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80056ea:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056f6:	d109      	bne.n	800570c <USB_DriveVbus+0x64>
 80056f8:	78fb      	ldrb	r3, [r7, #3]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d106      	bne.n	800570c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005706:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800570a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3714      	adds	r7, #20
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr

0800571a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800571a:	b480      	push	{r7}
 800571c:	b085      	sub	sp, #20
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005726:	2300      	movs	r3, #0
 8005728:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	0c5b      	lsrs	r3, r3, #17
 8005738:	f003 0303 	and.w	r3, r3, #3
}
 800573c:	4618      	mov	r0, r3
 800573e:	3714      	adds	r7, #20
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	b29b      	uxth	r3, r3
}
 800575e:	4618      	mov	r0, r3
 8005760:	3714      	adds	r7, #20
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
	...

0800576c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b088      	sub	sp, #32
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	4608      	mov	r0, r1
 8005776:	4611      	mov	r1, r2
 8005778:	461a      	mov	r2, r3
 800577a:	4603      	mov	r3, r0
 800577c:	70fb      	strb	r3, [r7, #3]
 800577e:	460b      	mov	r3, r1
 8005780:	70bb      	strb	r3, [r7, #2]
 8005782:	4613      	mov	r3, r2
 8005784:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005786:	2300      	movs	r3, #0
 8005788:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800578e:	78fb      	ldrb	r3, [r7, #3]
 8005790:	015a      	lsls	r2, r3, #5
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	4413      	add	r3, r2
 8005796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800579a:	461a      	mov	r2, r3
 800579c:	f04f 33ff 	mov.w	r3, #4294967295
 80057a0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80057a2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80057a6:	2b03      	cmp	r3, #3
 80057a8:	d87e      	bhi.n	80058a8 <USB_HC_Init+0x13c>
 80057aa:	a201      	add	r2, pc, #4	; (adr r2, 80057b0 <USB_HC_Init+0x44>)
 80057ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b0:	080057c1 	.word	0x080057c1
 80057b4:	0800586b 	.word	0x0800586b
 80057b8:	080057c1 	.word	0x080057c1
 80057bc:	0800582d 	.word	0x0800582d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80057c0:	78fb      	ldrb	r3, [r7, #3]
 80057c2:	015a      	lsls	r2, r3, #5
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	4413      	add	r3, r2
 80057c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057cc:	461a      	mov	r2, r3
 80057ce:	f240 439d 	movw	r3, #1181	; 0x49d
 80057d2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80057d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	da10      	bge.n	80057fe <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80057dc:	78fb      	ldrb	r3, [r7, #3]
 80057de:	015a      	lsls	r2, r3, #5
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	4413      	add	r3, r2
 80057e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	78fa      	ldrb	r2, [r7, #3]
 80057ec:	0151      	lsls	r1, r2, #5
 80057ee:	693a      	ldr	r2, [r7, #16]
 80057f0:	440a      	add	r2, r1
 80057f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057fa:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80057fc:	e057      	b.n	80058ae <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005806:	2b00      	cmp	r3, #0
 8005808:	d051      	beq.n	80058ae <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800580a:	78fb      	ldrb	r3, [r7, #3]
 800580c:	015a      	lsls	r2, r3, #5
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	4413      	add	r3, r2
 8005812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	78fa      	ldrb	r2, [r7, #3]
 800581a:	0151      	lsls	r1, r2, #5
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	440a      	add	r2, r1
 8005820:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005824:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005828:	60d3      	str	r3, [r2, #12]
      break;
 800582a:	e040      	b.n	80058ae <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800582c:	78fb      	ldrb	r3, [r7, #3]
 800582e:	015a      	lsls	r2, r3, #5
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	4413      	add	r3, r2
 8005834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005838:	461a      	mov	r2, r3
 800583a:	f240 639d 	movw	r3, #1693	; 0x69d
 800583e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005840:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005844:	2b00      	cmp	r3, #0
 8005846:	da34      	bge.n	80058b2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005848:	78fb      	ldrb	r3, [r7, #3]
 800584a:	015a      	lsls	r2, r3, #5
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	4413      	add	r3, r2
 8005850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	78fa      	ldrb	r2, [r7, #3]
 8005858:	0151      	lsls	r1, r2, #5
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	440a      	add	r2, r1
 800585e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005866:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005868:	e023      	b.n	80058b2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800586a:	78fb      	ldrb	r3, [r7, #3]
 800586c:	015a      	lsls	r2, r3, #5
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	4413      	add	r3, r2
 8005872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005876:	461a      	mov	r2, r3
 8005878:	f240 2325 	movw	r3, #549	; 0x225
 800587c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800587e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005882:	2b00      	cmp	r3, #0
 8005884:	da17      	bge.n	80058b6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005886:	78fb      	ldrb	r3, [r7, #3]
 8005888:	015a      	lsls	r2, r3, #5
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	4413      	add	r3, r2
 800588e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	78fa      	ldrb	r2, [r7, #3]
 8005896:	0151      	lsls	r1, r2, #5
 8005898:	693a      	ldr	r2, [r7, #16]
 800589a:	440a      	add	r2, r1
 800589c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058a0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80058a4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80058a6:	e006      	b.n	80058b6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	77fb      	strb	r3, [r7, #31]
      break;
 80058ac:	e004      	b.n	80058b8 <USB_HC_Init+0x14c>
      break;
 80058ae:	bf00      	nop
 80058b0:	e002      	b.n	80058b8 <USB_HC_Init+0x14c>
      break;
 80058b2:	bf00      	nop
 80058b4:	e000      	b.n	80058b8 <USB_HC_Init+0x14c>
      break;
 80058b6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80058b8:	78fb      	ldrb	r3, [r7, #3]
 80058ba:	015a      	lsls	r2, r3, #5
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	4413      	add	r3, r2
 80058c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	78fa      	ldrb	r2, [r7, #3]
 80058c8:	0151      	lsls	r1, r2, #5
 80058ca:	693a      	ldr	r2, [r7, #16]
 80058cc:	440a      	add	r2, r1
 80058ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058d2:	f043 0302 	orr.w	r3, r3, #2
 80058d6:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058de:	699a      	ldr	r2, [r3, #24]
 80058e0:	78fb      	ldrb	r3, [r7, #3]
 80058e2:	f003 030f 	and.w	r3, r3, #15
 80058e6:	2101      	movs	r1, #1
 80058e8:	fa01 f303 	lsl.w	r3, r1, r3
 80058ec:	6939      	ldr	r1, [r7, #16]
 80058ee:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80058f2:	4313      	orrs	r3, r2
 80058f4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005902:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005906:	2b00      	cmp	r3, #0
 8005908:	da03      	bge.n	8005912 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800590a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800590e:	61bb      	str	r3, [r7, #24]
 8005910:	e001      	b.n	8005916 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005912:	2300      	movs	r3, #0
 8005914:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f7ff feff 	bl	800571a <USB_GetHostSpeed>
 800591c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800591e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005922:	2b02      	cmp	r3, #2
 8005924:	d106      	bne.n	8005934 <USB_HC_Init+0x1c8>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2b02      	cmp	r3, #2
 800592a:	d003      	beq.n	8005934 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800592c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005930:	617b      	str	r3, [r7, #20]
 8005932:	e001      	b.n	8005938 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005934:	2300      	movs	r3, #0
 8005936:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005938:	787b      	ldrb	r3, [r7, #1]
 800593a:	059b      	lsls	r3, r3, #22
 800593c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005940:	78bb      	ldrb	r3, [r7, #2]
 8005942:	02db      	lsls	r3, r3, #11
 8005944:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005948:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800594a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800594e:	049b      	lsls	r3, r3, #18
 8005950:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005954:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005956:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005958:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800595c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005962:	78fb      	ldrb	r3, [r7, #3]
 8005964:	0159      	lsls	r1, r3, #5
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	440b      	add	r3, r1
 800596a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800596e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005974:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005976:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800597a:	2b03      	cmp	r3, #3
 800597c:	d003      	beq.n	8005986 <USB_HC_Init+0x21a>
 800597e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005982:	2b01      	cmp	r3, #1
 8005984:	d10f      	bne.n	80059a6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005986:	78fb      	ldrb	r3, [r7, #3]
 8005988:	015a      	lsls	r2, r3, #5
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	4413      	add	r3, r2
 800598e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	78fa      	ldrb	r2, [r7, #3]
 8005996:	0151      	lsls	r1, r2, #5
 8005998:	693a      	ldr	r2, [r7, #16]
 800599a:	440a      	add	r2, r1
 800599c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80059a4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80059a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3720      	adds	r7, #32
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b08c      	sub	sp, #48	; 0x30
 80059b4:	af02      	add	r7, sp, #8
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	4613      	mov	r3, r2
 80059bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	785b      	ldrb	r3, [r3, #1]
 80059c6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80059c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059cc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d02d      	beq.n	8005a36 <USB_HC_StartXfer+0x86>
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	791b      	ldrb	r3, [r3, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d129      	bne.n	8005a36 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80059e2:	79fb      	ldrb	r3, [r7, #7]
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d117      	bne.n	8005a18 <USB_HC_StartXfer+0x68>
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	79db      	ldrb	r3, [r3, #7]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d003      	beq.n	80059f8 <USB_HC_StartXfer+0x48>
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	79db      	ldrb	r3, [r3, #7]
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d10f      	bne.n	8005a18 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	015a      	lsls	r2, r3, #5
 80059fc:	6a3b      	ldr	r3, [r7, #32]
 80059fe:	4413      	add	r3, r2
 8005a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	69fa      	ldr	r2, [r7, #28]
 8005a08:	0151      	lsls	r1, r2, #5
 8005a0a:	6a3a      	ldr	r2, [r7, #32]
 8005a0c:	440a      	add	r2, r1
 8005a0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a16:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005a18:	79fb      	ldrb	r3, [r7, #7]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10b      	bne.n	8005a36 <USB_HC_StartXfer+0x86>
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	795b      	ldrb	r3, [r3, #5]
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d107      	bne.n	8005a36 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	785b      	ldrb	r3, [r3, #1]
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	68f8      	ldr	r0, [r7, #12]
 8005a2e:	f000 fa0f 	bl	8005e50 <USB_DoPing>
      return HAL_OK;
 8005a32:	2300      	movs	r3, #0
 8005a34:	e0f8      	b.n	8005c28 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d018      	beq.n	8005a70 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	695b      	ldr	r3, [r3, #20]
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	8912      	ldrh	r2, [r2, #8]
 8005a46:	4413      	add	r3, r2
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	68ba      	ldr	r2, [r7, #8]
 8005a4c:	8912      	ldrh	r2, [r2, #8]
 8005a4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a52:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005a54:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005a56:	8b7b      	ldrh	r3, [r7, #26]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d90b      	bls.n	8005a74 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005a5c:	8b7b      	ldrh	r3, [r7, #26]
 8005a5e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005a60:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a62:	68ba      	ldr	r2, [r7, #8]
 8005a64:	8912      	ldrh	r2, [r2, #8]
 8005a66:	fb03 f202 	mul.w	r2, r3, r2
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	611a      	str	r2, [r3, #16]
 8005a6e:	e001      	b.n	8005a74 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005a70:	2301      	movs	r3, #1
 8005a72:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	78db      	ldrb	r3, [r3, #3]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d007      	beq.n	8005a8c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005a7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a7e:	68ba      	ldr	r2, [r7, #8]
 8005a80:	8912      	ldrh	r2, [r2, #8]
 8005a82:	fb03 f202 	mul.w	r2, r3, r2
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	611a      	str	r2, [r3, #16]
 8005a8a:	e003      	b.n	8005a94 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	695a      	ldr	r2, [r3, #20]
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005a9c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a9e:	04d9      	lsls	r1, r3, #19
 8005aa0:	4b63      	ldr	r3, [pc, #396]	; (8005c30 <USB_HC_StartXfer+0x280>)
 8005aa2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005aa4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	7a9b      	ldrb	r3, [r3, #10]
 8005aaa:	075b      	lsls	r3, r3, #29
 8005aac:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005ab0:	69f9      	ldr	r1, [r7, #28]
 8005ab2:	0148      	lsls	r0, r1, #5
 8005ab4:	6a39      	ldr	r1, [r7, #32]
 8005ab6:	4401      	add	r1, r0
 8005ab8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005abc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005abe:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005ac0:	79fb      	ldrb	r3, [r7, #7]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d009      	beq.n	8005ada <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	68d9      	ldr	r1, [r3, #12]
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	015a      	lsls	r2, r3, #5
 8005ace:	6a3b      	ldr	r3, [r7, #32]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ad6:	460a      	mov	r2, r1
 8005ad8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005ada:	6a3b      	ldr	r3, [r7, #32]
 8005adc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	f003 0301 	and.w	r3, r3, #1
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	bf0c      	ite	eq
 8005aea:	2301      	moveq	r3, #1
 8005aec:	2300      	movne	r3, #0
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	015a      	lsls	r2, r3, #5
 8005af6:	6a3b      	ldr	r3, [r7, #32]
 8005af8:	4413      	add	r3, r2
 8005afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	69fa      	ldr	r2, [r7, #28]
 8005b02:	0151      	lsls	r1, r2, #5
 8005b04:	6a3a      	ldr	r2, [r7, #32]
 8005b06:	440a      	add	r2, r1
 8005b08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b0c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005b10:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	015a      	lsls	r2, r3, #5
 8005b16:	6a3b      	ldr	r3, [r7, #32]
 8005b18:	4413      	add	r3, r2
 8005b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	7e7b      	ldrb	r3, [r7, #25]
 8005b22:	075b      	lsls	r3, r3, #29
 8005b24:	69f9      	ldr	r1, [r7, #28]
 8005b26:	0148      	lsls	r0, r1, #5
 8005b28:	6a39      	ldr	r1, [r7, #32]
 8005b2a:	4401      	add	r1, r0
 8005b2c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005b30:	4313      	orrs	r3, r2
 8005b32:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	015a      	lsls	r2, r3, #5
 8005b38:	6a3b      	ldr	r3, [r7, #32]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b4a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	78db      	ldrb	r3, [r3, #3]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d004      	beq.n	8005b5e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b5a:	613b      	str	r3, [r7, #16]
 8005b5c:	e003      	b.n	8005b66 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b64:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b6c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	015a      	lsls	r2, r3, #5
 8005b72:	6a3b      	ldr	r3, [r7, #32]
 8005b74:	4413      	add	r3, r2
 8005b76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005b80:	79fb      	ldrb	r3, [r7, #7]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d001      	beq.n	8005b8a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005b86:	2300      	movs	r3, #0
 8005b88:	e04e      	b.n	8005c28 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	78db      	ldrb	r3, [r3, #3]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d149      	bne.n	8005c26 <USB_HC_StartXfer+0x276>
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d045      	beq.n	8005c26 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	79db      	ldrb	r3, [r3, #7]
 8005b9e:	2b03      	cmp	r3, #3
 8005ba0:	d830      	bhi.n	8005c04 <USB_HC_StartXfer+0x254>
 8005ba2:	a201      	add	r2, pc, #4	; (adr r2, 8005ba8 <USB_HC_StartXfer+0x1f8>)
 8005ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba8:	08005bb9 	.word	0x08005bb9
 8005bac:	08005bdd 	.word	0x08005bdd
 8005bb0:	08005bb9 	.word	0x08005bb9
 8005bb4:	08005bdd 	.word	0x08005bdd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	695b      	ldr	r3, [r3, #20]
 8005bbc:	3303      	adds	r3, #3
 8005bbe:	089b      	lsrs	r3, r3, #2
 8005bc0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005bc2:	8afa      	ldrh	r2, [r7, #22]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d91c      	bls.n	8005c08 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	f043 0220 	orr.w	r2, r3, #32
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	619a      	str	r2, [r3, #24]
        }
        break;
 8005bda:	e015      	b.n	8005c08 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	695b      	ldr	r3, [r3, #20]
 8005be0:	3303      	adds	r3, #3
 8005be2:	089b      	lsrs	r3, r3, #2
 8005be4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005be6:	8afa      	ldrh	r2, [r7, #22]
 8005be8:	6a3b      	ldr	r3, [r7, #32]
 8005bea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d90a      	bls.n	8005c0c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	619a      	str	r2, [r3, #24]
        }
        break;
 8005c02:	e003      	b.n	8005c0c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005c04:	bf00      	nop
 8005c06:	e002      	b.n	8005c0e <USB_HC_StartXfer+0x25e>
        break;
 8005c08:	bf00      	nop
 8005c0a:	e000      	b.n	8005c0e <USB_HC_StartXfer+0x25e>
        break;
 8005c0c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	68d9      	ldr	r1, [r3, #12]
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	785a      	ldrb	r2, [r3, #1]
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	2000      	movs	r0, #0
 8005c1e:	9000      	str	r0, [sp, #0]
 8005c20:	68f8      	ldr	r0, [r7, #12]
 8005c22:	f7ff fb31 	bl	8005288 <USB_WritePacket>
  }

  return HAL_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3728      	adds	r7, #40	; 0x28
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	1ff80000 	.word	0x1ff80000

08005c34 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b085      	sub	sp, #20
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c46:	695b      	ldr	r3, [r3, #20]
 8005c48:	b29b      	uxth	r3, r3
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3714      	adds	r7, #20
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr

08005c56 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005c56:	b480      	push	{r7}
 8005c58:	b089      	sub	sp, #36	; 0x24
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
 8005c5e:	460b      	mov	r3, r1
 8005c60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005c66:	78fb      	ldrb	r3, [r7, #3]
 8005c68:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	015a      	lsls	r2, r3, #5
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	4413      	add	r3, r2
 8005c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	0c9b      	lsrs	r3, r3, #18
 8005c7e:	f003 0303 	and.w	r3, r3, #3
 8005c82:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	015a      	lsls	r2, r3, #5
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	0fdb      	lsrs	r3, r3, #31
 8005c94:	f003 0301 	and.w	r3, r3, #1
 8005c98:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	f003 0320 	and.w	r3, r3, #32
 8005ca2:	2b20      	cmp	r3, #32
 8005ca4:	d104      	bne.n	8005cb0 <USB_HC_Halt+0x5a>
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d101      	bne.n	8005cb0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005cac:	2300      	movs	r3, #0
 8005cae:	e0c8      	b.n	8005e42 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d002      	beq.n	8005cbc <USB_HC_Halt+0x66>
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d163      	bne.n	8005d84 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	015a      	lsls	r2, r3, #5
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	69ba      	ldr	r2, [r7, #24]
 8005ccc:	0151      	lsls	r1, r2, #5
 8005cce:	69fa      	ldr	r2, [r7, #28]
 8005cd0:	440a      	add	r2, r1
 8005cd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cd6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005cda:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	f003 0320 	and.w	r3, r3, #32
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	f040 80ab 	bne.w	8005e40 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d133      	bne.n	8005d5e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	015a      	lsls	r2, r3, #5
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	69ba      	ldr	r2, [r7, #24]
 8005d06:	0151      	lsls	r1, r2, #5
 8005d08:	69fa      	ldr	r2, [r7, #28]
 8005d0a:	440a      	add	r2, r1
 8005d0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d14:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	015a      	lsls	r2, r3, #5
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	69ba      	ldr	r2, [r7, #24]
 8005d26:	0151      	lsls	r1, r2, #5
 8005d28:	69fa      	ldr	r2, [r7, #28]
 8005d2a:	440a      	add	r2, r1
 8005d2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d34:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	3301      	adds	r3, #1
 8005d3a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d42:	d81d      	bhi.n	8005d80 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	015a      	lsls	r2, r3, #5
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d5a:	d0ec      	beq.n	8005d36 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005d5c:	e070      	b.n	8005e40 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	015a      	lsls	r2, r3, #5
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	4413      	add	r3, r2
 8005d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	69ba      	ldr	r2, [r7, #24]
 8005d6e:	0151      	lsls	r1, r2, #5
 8005d70:	69fa      	ldr	r2, [r7, #28]
 8005d72:	440a      	add	r2, r1
 8005d74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d7c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005d7e:	e05f      	b.n	8005e40 <USB_HC_Halt+0x1ea>
            break;
 8005d80:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005d82:	e05d      	b.n	8005e40 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	015a      	lsls	r2, r3, #5
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	69ba      	ldr	r2, [r7, #24]
 8005d94:	0151      	lsls	r1, r2, #5
 8005d96:	69fa      	ldr	r2, [r7, #28]
 8005d98:	440a      	add	r2, r1
 8005d9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005da2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d133      	bne.n	8005e1c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	015a      	lsls	r2, r3, #5
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	4413      	add	r3, r2
 8005dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	69ba      	ldr	r2, [r7, #24]
 8005dc4:	0151      	lsls	r1, r2, #5
 8005dc6:	69fa      	ldr	r2, [r7, #28]
 8005dc8:	440a      	add	r2, r1
 8005dca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005dd2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	015a      	lsls	r2, r3, #5
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	4413      	add	r3, r2
 8005ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	69ba      	ldr	r2, [r7, #24]
 8005de4:	0151      	lsls	r1, r2, #5
 8005de6:	69fa      	ldr	r2, [r7, #28]
 8005de8:	440a      	add	r2, r1
 8005dea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005df2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	3301      	adds	r3, #1
 8005df8:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e00:	d81d      	bhi.n	8005e3e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	015a      	lsls	r2, r3, #5
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	4413      	add	r3, r2
 8005e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e18:	d0ec      	beq.n	8005df4 <USB_HC_Halt+0x19e>
 8005e1a:	e011      	b.n	8005e40 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	015a      	lsls	r2, r3, #5
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	4413      	add	r3, r2
 8005e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	69ba      	ldr	r2, [r7, #24]
 8005e2c:	0151      	lsls	r1, r2, #5
 8005e2e:	69fa      	ldr	r2, [r7, #28]
 8005e30:	440a      	add	r2, r1
 8005e32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e3a:	6013      	str	r3, [r2, #0]
 8005e3c:	e000      	b.n	8005e40 <USB_HC_Halt+0x1ea>
          break;
 8005e3e:	bf00      	nop
    }
  }

  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3724      	adds	r7, #36	; 0x24
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
	...

08005e50 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b087      	sub	sp, #28
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	460b      	mov	r3, r1
 8005e5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005e60:	78fb      	ldrb	r3, [r7, #3]
 8005e62:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005e64:	2301      	movs	r3, #1
 8005e66:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	04da      	lsls	r2, r3, #19
 8005e6c:	4b15      	ldr	r3, [pc, #84]	; (8005ec4 <USB_DoPing+0x74>)
 8005e6e:	4013      	ands	r3, r2
 8005e70:	693a      	ldr	r2, [r7, #16]
 8005e72:	0151      	lsls	r1, r2, #5
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	440a      	add	r2, r1
 8005e78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e80:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	015a      	lsls	r2, r3, #5
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	4413      	add	r3, r2
 8005e8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e98:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ea0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	015a      	lsls	r2, r3, #5
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eae:	461a      	mov	r2, r3
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	371c      	adds	r7, #28
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	1ff80000 	.word	0x1ff80000

08005ec8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b088      	sub	sp, #32
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f7ff f911 	bl	8005104 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005ee2:	2110      	movs	r1, #16
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f7ff f96b 	bl	80051c0 <USB_FlushTxFifo>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d001      	beq.n	8005ef4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f7ff f997 	bl	8005228 <USB_FlushRxFifo>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d001      	beq.n	8005f04 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005f04:	2300      	movs	r3, #0
 8005f06:	61bb      	str	r3, [r7, #24]
 8005f08:	e01f      	b.n	8005f4a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	015a      	lsls	r2, r3, #5
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	4413      	add	r3, r2
 8005f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f20:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f28:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f30:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	015a      	lsls	r2, r3, #5
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	4413      	add	r3, r2
 8005f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f3e:	461a      	mov	r2, r3
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	3301      	adds	r3, #1
 8005f48:	61bb      	str	r3, [r7, #24]
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	2b0f      	cmp	r3, #15
 8005f4e:	d9dc      	bls.n	8005f0a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005f50:	2300      	movs	r3, #0
 8005f52:	61bb      	str	r3, [r7, #24]
 8005f54:	e034      	b.n	8005fc0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	015a      	lsls	r2, r3, #5
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f6c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f74:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f7c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	015a      	lsls	r2, r3, #5
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	4413      	add	r3, r2
 8005f86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	3301      	adds	r3, #1
 8005f94:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f9c:	d80c      	bhi.n	8005fb8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	015a      	lsls	r2, r3, #5
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fb4:	d0ec      	beq.n	8005f90 <USB_StopHost+0xc8>
 8005fb6:	e000      	b.n	8005fba <USB_StopHost+0xf2>
        break;
 8005fb8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	61bb      	str	r3, [r7, #24]
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	2b0f      	cmp	r3, #15
 8005fc4:	d9c7      	bls.n	8005f56 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fcc:	461a      	mov	r2, r3
 8005fce:	f04f 33ff 	mov.w	r3, #4294967295
 8005fd2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8005fda:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f7ff f880 	bl	80050e2 <USB_EnableGlobalInt>

  return ret;
 8005fe2:	7ffb      	ldrb	r3, [r7, #31]
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3720      	adds	r7, #32
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005fec:	b590      	push	{r4, r7, lr}
 8005fee:	b089      	sub	sp, #36	; 0x24
 8005ff0:	af04      	add	r7, sp, #16
 8005ff2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	2202      	movs	r2, #2
 8005ff8:	2102      	movs	r1, #2
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 fcb2 	bl	8006964 <USBH_FindInterface>
 8006000:	4603      	mov	r3, r0
 8006002:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006004:	7bfb      	ldrb	r3, [r7, #15]
 8006006:	2bff      	cmp	r3, #255	; 0xff
 8006008:	d002      	beq.n	8006010 <USBH_CDC_InterfaceInit+0x24>
 800600a:	7bfb      	ldrb	r3, [r7, #15]
 800600c:	2b01      	cmp	r3, #1
 800600e:	d901      	bls.n	8006014 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006010:	2302      	movs	r3, #2
 8006012:	e13d      	b.n	8006290 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006014:	7bfb      	ldrb	r3, [r7, #15]
 8006016:	4619      	mov	r1, r3
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f000 fc87 	bl	800692c <USBH_SelectInterface>
 800601e:	4603      	mov	r3, r0
 8006020:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006022:	7bbb      	ldrb	r3, [r7, #14]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d001      	beq.n	800602c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006028:	2302      	movs	r3, #2
 800602a:	e131      	b.n	8006290 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006032:	2050      	movs	r0, #80	; 0x50
 8006034:	f005 fe36 	bl	800bca4 <malloc>
 8006038:	4603      	mov	r3, r0
 800603a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006042:	69db      	ldr	r3, [r3, #28]
 8006044:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d101      	bne.n	8006050 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800604c:	2302      	movs	r3, #2
 800604e:	e11f      	b.n	8006290 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006050:	2250      	movs	r2, #80	; 0x50
 8006052:	2100      	movs	r1, #0
 8006054:	68b8      	ldr	r0, [r7, #8]
 8006056:	f005 fe43 	bl	800bce0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800605a:	7bfb      	ldrb	r3, [r7, #15]
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	211a      	movs	r1, #26
 8006060:	fb01 f303 	mul.w	r3, r1, r3
 8006064:	4413      	add	r3, r2
 8006066:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	b25b      	sxtb	r3, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	da15      	bge.n	800609e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006072:	7bfb      	ldrb	r3, [r7, #15]
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	211a      	movs	r1, #26
 8006078:	fb01 f303 	mul.w	r3, r1, r3
 800607c:	4413      	add	r3, r2
 800607e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006082:	781a      	ldrb	r2, [r3, #0]
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006088:	7bfb      	ldrb	r3, [r7, #15]
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	211a      	movs	r1, #26
 800608e:	fb01 f303 	mul.w	r3, r1, r3
 8006092:	4413      	add	r3, r2
 8006094:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006098:	881a      	ldrh	r2, [r3, #0]
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	785b      	ldrb	r3, [r3, #1]
 80060a2:	4619      	mov	r1, r3
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f002 f984 	bl	80083b2 <USBH_AllocPipe>
 80060aa:	4603      	mov	r3, r0
 80060ac:	461a      	mov	r2, r3
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	7819      	ldrb	r1, [r3, #0]
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	7858      	ldrb	r0, [r3, #1]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80060c6:	68ba      	ldr	r2, [r7, #8]
 80060c8:	8952      	ldrh	r2, [r2, #10]
 80060ca:	9202      	str	r2, [sp, #8]
 80060cc:	2203      	movs	r2, #3
 80060ce:	9201      	str	r2, [sp, #4]
 80060d0:	9300      	str	r3, [sp, #0]
 80060d2:	4623      	mov	r3, r4
 80060d4:	4602      	mov	r2, r0
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f002 f93c 	bl	8008354 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	2200      	movs	r2, #0
 80060e2:	4619      	mov	r1, r3
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f005 fd2f 	bl	800bb48 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80060ea:	2300      	movs	r3, #0
 80060ec:	2200      	movs	r2, #0
 80060ee:	210a      	movs	r1, #10
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 fc37 	bl	8006964 <USBH_FindInterface>
 80060f6:	4603      	mov	r3, r0
 80060f8:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80060fa:	7bfb      	ldrb	r3, [r7, #15]
 80060fc:	2bff      	cmp	r3, #255	; 0xff
 80060fe:	d002      	beq.n	8006106 <USBH_CDC_InterfaceInit+0x11a>
 8006100:	7bfb      	ldrb	r3, [r7, #15]
 8006102:	2b01      	cmp	r3, #1
 8006104:	d901      	bls.n	800610a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006106:	2302      	movs	r3, #2
 8006108:	e0c2      	b.n	8006290 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800610a:	7bfb      	ldrb	r3, [r7, #15]
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	211a      	movs	r1, #26
 8006110:	fb01 f303 	mul.w	r3, r1, r3
 8006114:	4413      	add	r3, r2
 8006116:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	b25b      	sxtb	r3, r3
 800611e:	2b00      	cmp	r3, #0
 8006120:	da16      	bge.n	8006150 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006122:	7bfb      	ldrb	r3, [r7, #15]
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	211a      	movs	r1, #26
 8006128:	fb01 f303 	mul.w	r3, r1, r3
 800612c:	4413      	add	r3, r2
 800612e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006132:	781a      	ldrb	r2, [r3, #0]
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006138:	7bfb      	ldrb	r3, [r7, #15]
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	211a      	movs	r1, #26
 800613e:	fb01 f303 	mul.w	r3, r1, r3
 8006142:	4413      	add	r3, r2
 8006144:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006148:	881a      	ldrh	r2, [r3, #0]
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	835a      	strh	r2, [r3, #26]
 800614e:	e015      	b.n	800617c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006150:	7bfb      	ldrb	r3, [r7, #15]
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	211a      	movs	r1, #26
 8006156:	fb01 f303 	mul.w	r3, r1, r3
 800615a:	4413      	add	r3, r2
 800615c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006160:	781a      	ldrb	r2, [r3, #0]
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006166:	7bfb      	ldrb	r3, [r7, #15]
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	211a      	movs	r1, #26
 800616c:	fb01 f303 	mul.w	r3, r1, r3
 8006170:	4413      	add	r3, r2
 8006172:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006176:	881a      	ldrh	r2, [r3, #0]
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800617c:	7bfb      	ldrb	r3, [r7, #15]
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	211a      	movs	r1, #26
 8006182:	fb01 f303 	mul.w	r3, r1, r3
 8006186:	4413      	add	r3, r2
 8006188:	f203 3356 	addw	r3, r3, #854	; 0x356
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	b25b      	sxtb	r3, r3
 8006190:	2b00      	cmp	r3, #0
 8006192:	da16      	bge.n	80061c2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006194:	7bfb      	ldrb	r3, [r7, #15]
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	211a      	movs	r1, #26
 800619a:	fb01 f303 	mul.w	r3, r1, r3
 800619e:	4413      	add	r3, r2
 80061a0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80061a4:	781a      	ldrb	r2, [r3, #0]
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80061aa:	7bfb      	ldrb	r3, [r7, #15]
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	211a      	movs	r1, #26
 80061b0:	fb01 f303 	mul.w	r3, r1, r3
 80061b4:	4413      	add	r3, r2
 80061b6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80061ba:	881a      	ldrh	r2, [r3, #0]
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	835a      	strh	r2, [r3, #26]
 80061c0:	e015      	b.n	80061ee <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80061c2:	7bfb      	ldrb	r3, [r7, #15]
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	211a      	movs	r1, #26
 80061c8:	fb01 f303 	mul.w	r3, r1, r3
 80061cc:	4413      	add	r3, r2
 80061ce:	f203 3356 	addw	r3, r3, #854	; 0x356
 80061d2:	781a      	ldrb	r2, [r3, #0]
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80061d8:	7bfb      	ldrb	r3, [r7, #15]
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	211a      	movs	r1, #26
 80061de:	fb01 f303 	mul.w	r3, r1, r3
 80061e2:	4413      	add	r3, r2
 80061e4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80061e8:	881a      	ldrh	r2, [r3, #0]
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	7b9b      	ldrb	r3, [r3, #14]
 80061f2:	4619      	mov	r1, r3
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f002 f8dc 	bl	80083b2 <USBH_AllocPipe>
 80061fa:	4603      	mov	r3, r0
 80061fc:	461a      	mov	r2, r3
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	7bdb      	ldrb	r3, [r3, #15]
 8006206:	4619      	mov	r1, r3
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f002 f8d2 	bl	80083b2 <USBH_AllocPipe>
 800620e:	4603      	mov	r3, r0
 8006210:	461a      	mov	r2, r3
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	7b59      	ldrb	r1, [r3, #13]
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	7b98      	ldrb	r0, [r3, #14]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800622a:	68ba      	ldr	r2, [r7, #8]
 800622c:	8b12      	ldrh	r2, [r2, #24]
 800622e:	9202      	str	r2, [sp, #8]
 8006230:	2202      	movs	r2, #2
 8006232:	9201      	str	r2, [sp, #4]
 8006234:	9300      	str	r3, [sp, #0]
 8006236:	4623      	mov	r3, r4
 8006238:	4602      	mov	r2, r0
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f002 f88a 	bl	8008354 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	7b19      	ldrb	r1, [r3, #12]
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	7bd8      	ldrb	r0, [r3, #15]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006254:	68ba      	ldr	r2, [r7, #8]
 8006256:	8b52      	ldrh	r2, [r2, #26]
 8006258:	9202      	str	r2, [sp, #8]
 800625a:	2202      	movs	r2, #2
 800625c:	9201      	str	r2, [sp, #4]
 800625e:	9300      	str	r3, [sp, #0]
 8006260:	4623      	mov	r3, r4
 8006262:	4602      	mov	r2, r0
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f002 f875 	bl	8008354 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	7b5b      	ldrb	r3, [r3, #13]
 8006276:	2200      	movs	r2, #0
 8006278:	4619      	mov	r1, r3
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f005 fc64 	bl	800bb48 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	7b1b      	ldrb	r3, [r3, #12]
 8006284:	2200      	movs	r2, #0
 8006286:	4619      	mov	r1, r3
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f005 fc5d 	bl	800bb48 <USBH_LL_SetToggle>

  return USBH_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3714      	adds	r7, #20
 8006294:	46bd      	mov	sp, r7
 8006296:	bd90      	pop	{r4, r7, pc}

08006298 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062a6:	69db      	ldr	r3, [r3, #28]
 80062a8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00e      	beq.n	80062d0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	4619      	mov	r1, r3
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f002 f86a 	bl	8008392 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	4619      	mov	r1, r3
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f002 f895 	bl	80083f4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2200      	movs	r2, #0
 80062ce:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	7b1b      	ldrb	r3, [r3, #12]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d00e      	beq.n	80062f6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	7b1b      	ldrb	r3, [r3, #12]
 80062dc:	4619      	mov	r1, r3
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f002 f857 	bl	8008392 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	7b1b      	ldrb	r3, [r3, #12]
 80062e8:	4619      	mov	r1, r3
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f002 f882 	bl	80083f4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2200      	movs	r2, #0
 80062f4:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	7b5b      	ldrb	r3, [r3, #13]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00e      	beq.n	800631c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	7b5b      	ldrb	r3, [r3, #13]
 8006302:	4619      	mov	r1, r3
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f002 f844 	bl	8008392 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	7b5b      	ldrb	r3, [r3, #13]
 800630e:	4619      	mov	r1, r3
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f002 f86f 	bl	80083f4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006322:	69db      	ldr	r3, [r3, #28]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d00b      	beq.n	8006340 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800632e:	69db      	ldr	r3, [r3, #28]
 8006330:	4618      	mov	r0, r3
 8006332:	f005 fcbf 	bl	800bcb4 <free>
    phost->pActiveClass->pData = 0U;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800633c:	2200      	movs	r2, #0
 800633e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	3710      	adds	r7, #16
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}

0800634a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800634a:	b580      	push	{r7, lr}
 800634c:	b084      	sub	sp, #16
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006358:	69db      	ldr	r3, [r3, #28]
 800635a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	3340      	adds	r3, #64	; 0x40
 8006360:	4619      	mov	r1, r3
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 f8b1 	bl	80064ca <GetLineCoding>
 8006368:	4603      	mov	r3, r0
 800636a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800636c:	7afb      	ldrb	r3, [r7, #11]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d105      	bne.n	800637e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006378:	2102      	movs	r1, #2
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800637e:	7afb      	ldrb	r3, [r7, #11]
}
 8006380:	4618      	mov	r0, r3
 8006382:	3710      	adds	r7, #16
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006390:	2301      	movs	r3, #1
 8006392:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006394:	2300      	movs	r3, #0
 8006396:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800639e:	69db      	ldr	r3, [r3, #28]
 80063a0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80063a8:	2b04      	cmp	r3, #4
 80063aa:	d877      	bhi.n	800649c <USBH_CDC_Process+0x114>
 80063ac:	a201      	add	r2, pc, #4	; (adr r2, 80063b4 <USBH_CDC_Process+0x2c>)
 80063ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b2:	bf00      	nop
 80063b4:	080063c9 	.word	0x080063c9
 80063b8:	080063cf 	.word	0x080063cf
 80063bc:	080063ff 	.word	0x080063ff
 80063c0:	08006473 	.word	0x08006473
 80063c4:	08006481 	.word	0x08006481
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80063c8:	2300      	movs	r3, #0
 80063ca:	73fb      	strb	r3, [r7, #15]
      break;
 80063cc:	e06d      	b.n	80064aa <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063d2:	4619      	mov	r1, r3
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 f897 	bl	8006508 <SetLineCoding>
 80063da:	4603      	mov	r3, r0
 80063dc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80063de:	7bbb      	ldrb	r3, [r7, #14]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d104      	bne.n	80063ee <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	2202      	movs	r2, #2
 80063e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80063ec:	e058      	b.n	80064a0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80063ee:	7bbb      	ldrb	r3, [r7, #14]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d055      	beq.n	80064a0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	2204      	movs	r2, #4
 80063f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80063fc:	e050      	b.n	80064a0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	3340      	adds	r3, #64	; 0x40
 8006402:	4619      	mov	r1, r3
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 f860 	bl	80064ca <GetLineCoding>
 800640a:	4603      	mov	r3, r0
 800640c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800640e:	7bbb      	ldrb	r3, [r7, #14]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d126      	bne.n	8006462 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	2200      	movs	r2, #0
 8006418:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006426:	791b      	ldrb	r3, [r3, #4]
 8006428:	429a      	cmp	r2, r3
 800642a:	d13b      	bne.n	80064a4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006436:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006438:	429a      	cmp	r2, r3
 800643a:	d133      	bne.n	80064a4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006446:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006448:	429a      	cmp	r2, r3
 800644a:	d12b      	bne.n	80064a4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006454:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006456:	429a      	cmp	r2, r3
 8006458:	d124      	bne.n	80064a4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 f982 	bl	8006764 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006460:	e020      	b.n	80064a4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006462:	7bbb      	ldrb	r3, [r7, #14]
 8006464:	2b01      	cmp	r3, #1
 8006466:	d01d      	beq.n	80064a4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	2204      	movs	r2, #4
 800646c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006470:	e018      	b.n	80064a4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 f867 	bl	8006546 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 f8f6 	bl	800666a <CDC_ProcessReception>
      break;
 800647e:	e014      	b.n	80064aa <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006480:	2100      	movs	r1, #0
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f001 f957 	bl	8007736 <USBH_ClrFeature>
 8006488:	4603      	mov	r3, r0
 800648a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800648c:	7bbb      	ldrb	r3, [r7, #14]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d10a      	bne.n	80064a8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	2200      	movs	r2, #0
 8006496:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800649a:	e005      	b.n	80064a8 <USBH_CDC_Process+0x120>

    default:
      break;
 800649c:	bf00      	nop
 800649e:	e004      	b.n	80064aa <USBH_CDC_Process+0x122>
      break;
 80064a0:	bf00      	nop
 80064a2:	e002      	b.n	80064aa <USBH_CDC_Process+0x122>
      break;
 80064a4:	bf00      	nop
 80064a6:	e000      	b.n	80064aa <USBH_CDC_Process+0x122>
      break;
 80064a8:	bf00      	nop

  }

  return status;
 80064aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3710      	adds	r7, #16
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80064bc:	2300      	movs	r3, #0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	370c      	adds	r7, #12
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr

080064ca <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80064ca:	b580      	push	{r7, lr}
 80064cc:	b082      	sub	sp, #8
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
 80064d2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	22a1      	movs	r2, #161	; 0xa1
 80064d8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2221      	movs	r2, #33	; 0x21
 80064de:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2207      	movs	r2, #7
 80064f0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	2207      	movs	r2, #7
 80064f6:	4619      	mov	r1, r3
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f001 fbe9 	bl	8007cd0 <USBH_CtlReq>
 80064fe:	4603      	mov	r3, r0
}
 8006500:	4618      	mov	r0, r3
 8006502:	3708      	adds	r7, #8
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2221      	movs	r2, #33	; 0x21
 8006516:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2220      	movs	r2, #32
 800651c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2207      	movs	r2, #7
 800652e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	2207      	movs	r2, #7
 8006534:	4619      	mov	r1, r3
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f001 fbca 	bl	8007cd0 <USBH_CtlReq>
 800653c:	4603      	mov	r3, r0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3708      	adds	r7, #8
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b086      	sub	sp, #24
 800654a:	af02      	add	r7, sp, #8
 800654c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006554:	69db      	ldr	r3, [r3, #28]
 8006556:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006558:	2300      	movs	r3, #0
 800655a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006562:	2b01      	cmp	r3, #1
 8006564:	d002      	beq.n	800656c <CDC_ProcessTransmission+0x26>
 8006566:	2b02      	cmp	r3, #2
 8006568:	d023      	beq.n	80065b2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800656a:	e07a      	b.n	8006662 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	8b12      	ldrh	r2, [r2, #24]
 8006574:	4293      	cmp	r3, r2
 8006576:	d90b      	bls.n	8006590 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	69d9      	ldr	r1, [r3, #28]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	8b1a      	ldrh	r2, [r3, #24]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	7b5b      	ldrb	r3, [r3, #13]
 8006584:	2001      	movs	r0, #1
 8006586:	9000      	str	r0, [sp, #0]
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f001 fea0 	bl	80082ce <USBH_BulkSendData>
 800658e:	e00b      	b.n	80065a8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006598:	b29a      	uxth	r2, r3
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	7b5b      	ldrb	r3, [r3, #13]
 800659e:	2001      	movs	r0, #1
 80065a0:	9000      	str	r0, [sp, #0]
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f001 fe93 	bl	80082ce <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2202      	movs	r2, #2
 80065ac:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80065b0:	e057      	b.n	8006662 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	7b5b      	ldrb	r3, [r3, #13]
 80065b6:	4619      	mov	r1, r3
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f005 fa9b 	bl	800baf4 <USBH_LL_GetURBState>
 80065be:	4603      	mov	r3, r0
 80065c0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80065c2:	7afb      	ldrb	r3, [r7, #11]
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d136      	bne.n	8006636 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	8b12      	ldrh	r2, [r2, #24]
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d90e      	bls.n	80065f2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	8b12      	ldrh	r2, [r2, #24]
 80065dc:	1a9a      	subs	r2, r3, r2
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	69db      	ldr	r3, [r3, #28]
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	8b12      	ldrh	r2, [r2, #24]
 80065ea:	441a      	add	r2, r3
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	61da      	str	r2, [r3, #28]
 80065f0:	e002      	b.n	80065f8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2200      	movs	r2, #0
 80065f6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d004      	beq.n	800660a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8006608:	e006      	b.n	8006618 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 f892 	bl	800673c <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2204      	movs	r2, #4
 800661c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800662c:	2300      	movs	r3, #0
 800662e:	2200      	movs	r2, #0
 8006630:	f002 f980 	bl	8008934 <osMessageQueuePut>
      break;
 8006634:	e014      	b.n	8006660 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8006636:	7afb      	ldrb	r3, [r7, #11]
 8006638:	2b02      	cmp	r3, #2
 800663a:	d111      	bne.n	8006660 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2204      	movs	r2, #4
 8006648:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006658:	2300      	movs	r3, #0
 800665a:	2200      	movs	r2, #0
 800665c:	f002 f96a 	bl	8008934 <osMessageQueuePut>
      break;
 8006660:	bf00      	nop
  }
}
 8006662:	bf00      	nop
 8006664:	3710      	adds	r7, #16
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}

0800666a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800666a:	b580      	push	{r7, lr}
 800666c:	b086      	sub	sp, #24
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006678:	69db      	ldr	r3, [r3, #28]
 800667a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800667c:	2300      	movs	r3, #0
 800667e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006686:	2b03      	cmp	r3, #3
 8006688:	d002      	beq.n	8006690 <CDC_ProcessReception+0x26>
 800668a:	2b04      	cmp	r3, #4
 800668c:	d00e      	beq.n	80066ac <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800668e:	e051      	b.n	8006734 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	6a19      	ldr	r1, [r3, #32]
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	8b5a      	ldrh	r2, [r3, #26]
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	7b1b      	ldrb	r3, [r3, #12]
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f001 fe3b 	bl	8008318 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	2204      	movs	r2, #4
 80066a6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80066aa:	e043      	b.n	8006734 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	7b1b      	ldrb	r3, [r3, #12]
 80066b0:	4619      	mov	r1, r3
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f005 fa1e 	bl	800baf4 <USBH_LL_GetURBState>
 80066b8:	4603      	mov	r3, r0
 80066ba:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80066bc:	7cfb      	ldrb	r3, [r7, #19]
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d137      	bne.n	8006732 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	7b1b      	ldrb	r3, [r3, #12]
 80066c6:	4619      	mov	r1, r3
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f005 f981 	bl	800b9d0 <USBH_LL_GetLastXferSize>
 80066ce:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d016      	beq.n	8006708 <CDC_ProcessReception+0x9e>
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	8b5b      	ldrh	r3, [r3, #26]
 80066de:	461a      	mov	r2, r3
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d910      	bls.n	8006708 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	1ad2      	subs	r2, r2, r3
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	6a1a      	ldr	r2, [r3, #32]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	441a      	add	r2, r3
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	2203      	movs	r2, #3
 8006702:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8006706:	e006      	b.n	8006716 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	2200      	movs	r2, #0
 800670c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 f81d 	bl	8006750 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2204      	movs	r2, #4
 800671a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800672a:	2300      	movs	r3, #0
 800672c:	2200      	movs	r2, #0
 800672e:	f002 f901 	bl	8008934 <osMessageQueuePut>
      break;
 8006732:	bf00      	nop
  }
}
 8006734:	bf00      	nop
 8006736:	3718      	adds	r7, #24
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006744:	bf00      	nop
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006758:	bf00      	nop
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800676c:	bf00      	nop
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	4613      	mov	r3, r2
 8006784:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d101      	bne.n	8006790 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800678c:	2302      	movs	r3, #2
 800678e:	e044      	b.n	800681a <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	79fa      	ldrb	r2, [r7, #7]
 8006794:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2200      	movs	r2, #0
 800679c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80067a8:	68f8      	ldr	r0, [r7, #12]
 80067aa:	f000 f841 	bl	8006830 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d003      	beq.n	80067dc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	68ba      	ldr	r2, [r7, #8]
 80067d8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 80067dc:	2200      	movs	r2, #0
 80067de:	2104      	movs	r1, #4
 80067e0:	2010      	movs	r0, #16
 80067e2:	f002 f833 	bl	800884c <osMessageQueueNew>
 80067e6:	4602      	mov	r2, r0
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 80067ee:	4b0d      	ldr	r3, [pc, #52]	; (8006824 <USBH_Init+0xac>)
 80067f0:	4a0d      	ldr	r2, [pc, #52]	; (8006828 <USBH_Init+0xb0>)
 80067f2:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 80067f4:	4b0b      	ldr	r3, [pc, #44]	; (8006824 <USBH_Init+0xac>)
 80067f6:	2280      	movs	r2, #128	; 0x80
 80067f8:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 80067fa:	4b0a      	ldr	r3, [pc, #40]	; (8006824 <USBH_Init+0xac>)
 80067fc:	2218      	movs	r2, #24
 80067fe:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8006800:	4a08      	ldr	r2, [pc, #32]	; (8006824 <USBH_Init+0xac>)
 8006802:	68f9      	ldr	r1, [r7, #12]
 8006804:	4809      	ldr	r0, [pc, #36]	; (800682c <USBH_Init+0xb4>)
 8006806:	f001 feb5 	bl	8008574 <osThreadNew>
 800680a:	4602      	mov	r2, r0
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006812:	68f8      	ldr	r0, [r7, #12]
 8006814:	f005 f828 	bl	800b868 <USBH_LL_Init>

  return USBH_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	20000210 	.word	0x20000210
 8006828:	0800c63c 	.word	0x0800c63c
 800682c:	080074ad 	.word	0x080074ad

08006830 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006830:	b480      	push	{r7}
 8006832:	b085      	sub	sp, #20
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006838:	2300      	movs	r3, #0
 800683a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800683c:	2300      	movs	r3, #0
 800683e:	60fb      	str	r3, [r7, #12]
 8006840:	e009      	b.n	8006856 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	33e0      	adds	r3, #224	; 0xe0
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	4413      	add	r3, r2
 800684c:	2200      	movs	r2, #0
 800684e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	3301      	adds	r3, #1
 8006854:	60fb      	str	r3, [r7, #12]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2b0f      	cmp	r3, #15
 800685a:	d9f2      	bls.n	8006842 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800685c:	2300      	movs	r3, #0
 800685e:	60fb      	str	r3, [r7, #12]
 8006860:	e009      	b.n	8006876 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	4413      	add	r3, r2
 8006868:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800686c:	2200      	movs	r2, #0
 800686e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	3301      	adds	r3, #1
 8006874:	60fb      	str	r3, [r7, #12]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800687c:	d3f1      	bcc.n	8006862 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2201      	movs	r2, #1
 800688e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2240      	movs	r2, #64	; 0x40
 80068a2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3714      	adds	r7, #20
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr

080068d8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80068d8:	b480      	push	{r7}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80068e2:	2300      	movs	r3, #0
 80068e4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d016      	beq.n	800691a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d10e      	bne.n	8006914 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80068fc:	1c59      	adds	r1, r3, #1
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	33de      	adds	r3, #222	; 0xde
 8006908:	6839      	ldr	r1, [r7, #0]
 800690a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800690e:	2300      	movs	r3, #0
 8006910:	73fb      	strb	r3, [r7, #15]
 8006912:	e004      	b.n	800691e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006914:	2302      	movs	r3, #2
 8006916:	73fb      	strb	r3, [r7, #15]
 8006918:	e001      	b.n	800691e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800691a:	2302      	movs	r3, #2
 800691c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800691e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006920:	4618      	mov	r0, r3
 8006922:	3714      	adds	r7, #20
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800692c:	b480      	push	{r7}
 800692e:	b085      	sub	sp, #20
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	460b      	mov	r3, r1
 8006936:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006938:	2300      	movs	r3, #0
 800693a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006942:	78fa      	ldrb	r2, [r7, #3]
 8006944:	429a      	cmp	r2, r3
 8006946:	d204      	bcs.n	8006952 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	78fa      	ldrb	r2, [r7, #3]
 800694c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006950:	e001      	b.n	8006956 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006952:	2302      	movs	r3, #2
 8006954:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006956:	7bfb      	ldrb	r3, [r7, #15]
}
 8006958:	4618      	mov	r0, r3
 800695a:	3714      	adds	r7, #20
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006964:	b480      	push	{r7}
 8006966:	b087      	sub	sp, #28
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	4608      	mov	r0, r1
 800696e:	4611      	mov	r1, r2
 8006970:	461a      	mov	r2, r3
 8006972:	4603      	mov	r3, r0
 8006974:	70fb      	strb	r3, [r7, #3]
 8006976:	460b      	mov	r3, r1
 8006978:	70bb      	strb	r3, [r7, #2]
 800697a:	4613      	mov	r3, r2
 800697c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800697e:	2300      	movs	r3, #0
 8006980:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006982:	2300      	movs	r3, #0
 8006984:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800698c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800698e:	e025      	b.n	80069dc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006990:	7dfb      	ldrb	r3, [r7, #23]
 8006992:	221a      	movs	r2, #26
 8006994:	fb02 f303 	mul.w	r3, r2, r3
 8006998:	3308      	adds	r3, #8
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	4413      	add	r3, r2
 800699e:	3302      	adds	r3, #2
 80069a0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	795b      	ldrb	r3, [r3, #5]
 80069a6:	78fa      	ldrb	r2, [r7, #3]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d002      	beq.n	80069b2 <USBH_FindInterface+0x4e>
 80069ac:	78fb      	ldrb	r3, [r7, #3]
 80069ae:	2bff      	cmp	r3, #255	; 0xff
 80069b0:	d111      	bne.n	80069d6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80069b6:	78ba      	ldrb	r2, [r7, #2]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d002      	beq.n	80069c2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80069bc:	78bb      	ldrb	r3, [r7, #2]
 80069be:	2bff      	cmp	r3, #255	; 0xff
 80069c0:	d109      	bne.n	80069d6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80069c6:	787a      	ldrb	r2, [r7, #1]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d002      	beq.n	80069d2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80069cc:	787b      	ldrb	r3, [r7, #1]
 80069ce:	2bff      	cmp	r3, #255	; 0xff
 80069d0:	d101      	bne.n	80069d6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80069d2:	7dfb      	ldrb	r3, [r7, #23]
 80069d4:	e006      	b.n	80069e4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80069d6:	7dfb      	ldrb	r3, [r7, #23]
 80069d8:	3301      	adds	r3, #1
 80069da:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80069dc:	7dfb      	ldrb	r3, [r7, #23]
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d9d6      	bls.n	8006990 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80069e2:	23ff      	movs	r3, #255	; 0xff
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	371c      	adds	r7, #28
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b082      	sub	sp, #8
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f004 ff71 	bl	800b8e0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80069fe:	2101      	movs	r1, #1
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f005 f88a 	bl	800bb1a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006a06:	2300      	movs	r3, #0
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3708      	adds	r7, #8
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b088      	sub	sp, #32
 8006a14:	af04      	add	r7, sp, #16
 8006a16:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006a18:	2302      	movs	r3, #2
 8006a1a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d102      	bne.n	8006a32 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2203      	movs	r2, #3
 8006a30:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	2b0b      	cmp	r3, #11
 8006a3a:	f200 8247 	bhi.w	8006ecc <USBH_Process+0x4bc>
 8006a3e:	a201      	add	r2, pc, #4	; (adr r2, 8006a44 <USBH_Process+0x34>)
 8006a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a44:	08006a75 	.word	0x08006a75
 8006a48:	08006ac3 	.word	0x08006ac3
 8006a4c:	08006b47 	.word	0x08006b47
 8006a50:	08006e4b 	.word	0x08006e4b
 8006a54:	08006ecd 	.word	0x08006ecd
 8006a58:	08006c07 	.word	0x08006c07
 8006a5c:	08006dd5 	.word	0x08006dd5
 8006a60:	08006c59 	.word	0x08006c59
 8006a64:	08006c95 	.word	0x08006c95
 8006a68:	08006ccf 	.word	0x08006ccf
 8006a6c:	08006d2d 	.word	0x08006d2d
 8006a70:	08006e33 	.word	0x08006e33
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f000 8227 	beq.w	8006ed0 <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2201      	movs	r2, #1
 8006a86:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006a88:	20c8      	movs	r0, #200	; 0xc8
 8006a8a:	f005 f88d 	bl	800bba8 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f004 ff83 	bl	800b99a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006ab8:	2300      	movs	r3, #0
 8006aba:	2200      	movs	r2, #0
 8006abc:	f001 ff3a 	bl	8008934 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8006ac0:	e206      	b.n	8006ed0 <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d107      	bne.n	8006adc <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2202      	movs	r2, #2
 8006ad8:	701a      	strb	r2, [r3, #0]
 8006ada:	e025      	b.n	8006b28 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006ae2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ae6:	d914      	bls.n	8006b12 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006aee:	3301      	adds	r3, #1
 8006af0:	b2da      	uxtb	r2, r3
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006afe:	2b03      	cmp	r3, #3
 8006b00:	d903      	bls.n	8006b0a <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	220d      	movs	r2, #13
 8006b06:	701a      	strb	r2, [r3, #0]
 8006b08:	e00e      	b.n	8006b28 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	701a      	strb	r2, [r3, #0]
 8006b10:	e00a      	b.n	8006b28 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006b18:	f103 020a 	add.w	r2, r3, #10
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006b22:	200a      	movs	r0, #10
 8006b24:	f005 f840 	bl	800bba8 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f001 fef8 	bl	8008934 <osMessageQueuePut>
#endif
#endif
      break;
 8006b44:	e1cb      	b.n	8006ede <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d005      	beq.n	8006b5c <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b56:	2104      	movs	r1, #4
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006b5c:	2064      	movs	r0, #100	; 0x64
 8006b5e:	f005 f823 	bl	800bba8 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f004 fef2 	bl	800b94c <USBH_LL_GetSpeed>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2205      	movs	r2, #5
 8006b76:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006b78:	2100      	movs	r1, #0
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f001 fc19 	bl	80083b2 <USBH_AllocPipe>
 8006b80:	4603      	mov	r3, r0
 8006b82:	461a      	mov	r2, r3
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006b88:	2180      	movs	r1, #128	; 0x80
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f001 fc11 	bl	80083b2 <USBH_AllocPipe>
 8006b90:	4603      	mov	r3, r0
 8006b92:	461a      	mov	r2, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	7919      	ldrb	r1, [r3, #4]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006bac:	b292      	uxth	r2, r2
 8006bae:	9202      	str	r2, [sp, #8]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	9201      	str	r2, [sp, #4]
 8006bb4:	9300      	str	r3, [sp, #0]
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	2280      	movs	r2, #128	; 0x80
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f001 fbca 	bl	8008354 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	7959      	ldrb	r1, [r3, #5]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006bd4:	b292      	uxth	r2, r2
 8006bd6:	9202      	str	r2, [sp, #8]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	9201      	str	r2, [sp, #4]
 8006bdc:	9300      	str	r3, [sp, #0]
 8006bde:	4603      	mov	r3, r0
 8006be0:	2200      	movs	r2, #0
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f001 fbb6 	bl	8008354 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f001 fe98 	bl	8008934 <osMessageQueuePut>
#endif
#endif
      break;
 8006c04:	e16b      	b.n	8006ede <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 f96e 	bl	8006ee8 <USBH_HandleEnum>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006c10:	7bbb      	ldrb	r3, [r7, #14]
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	f040 815d 	bne.w	8006ed4 <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d103      	bne.n	8006c34 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2208      	movs	r2, #8
 8006c30:	701a      	strb	r2, [r3, #0]
 8006c32:	e002      	b.n	8006c3a <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2207      	movs	r2, #7
 8006c38:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2205      	movs	r2, #5
 8006c3e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006c4e:	2300      	movs	r3, #0
 8006c50:	2200      	movs	r2, #0
 8006c52:	f001 fe6f 	bl	8008934 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8006c56:	e13d      	b.n	8006ed4 <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	f000 813a 	beq.w	8006ed8 <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c6a:	2101      	movs	r1, #1
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2208      	movs	r2, #8
 8006c74:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2205      	movs	r2, #5
 8006c7a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f001 fe51 	bl	8008934 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 8006c92:	e121      	b.n	8006ed8 <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 fd02 	bl	80076a8 <USBH_SetCfg>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d102      	bne.n	8006cb0 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2209      	movs	r2, #9
 8006cae:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f001 fe34 	bl	8008934 <osMessageQueuePut>
#endif
#endif
      break;
 8006ccc:	e107      	b.n	8006ede <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006cd4:	f003 0320 	and.w	r3, r3, #32
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d015      	beq.n	8006d08 <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006cdc:	2101      	movs	r1, #1
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 fd05 	bl	80076ee <USBH_SetFeature>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006ce8:	7bbb      	ldrb	r3, [r7, #14]
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d103      	bne.n	8006cf8 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	220a      	movs	r2, #10
 8006cf4:	701a      	strb	r2, [r3, #0]
 8006cf6:	e00a      	b.n	8006d0e <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 8006cf8:	7bbb      	ldrb	r3, [r7, #14]
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	2b03      	cmp	r3, #3
 8006cfe:	d106      	bne.n	8006d0e <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	220a      	movs	r2, #10
 8006d04:	701a      	strb	r2, [r3, #0]
 8006d06:	e002      	b.n	8006d0e <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	220a      	movs	r2, #10
 8006d0c:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2201      	movs	r2, #1
 8006d12:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006d22:	2300      	movs	r3, #0
 8006d24:	2200      	movs	r2, #0
 8006d26:	f001 fe05 	bl	8008934 <osMessageQueuePut>
#endif
#endif
      break;
 8006d2a:	e0d8      	b.n	8006ede <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d03f      	beq.n	8006db6 <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006d3e:	2300      	movs	r3, #0
 8006d40:	73fb      	strb	r3, [r7, #15]
 8006d42:	e016      	b.n	8006d72 <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006d44:	7bfa      	ldrb	r2, [r7, #15]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	32de      	adds	r2, #222	; 0xde
 8006d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d4e:	791a      	ldrb	r2, [r3, #4]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d108      	bne.n	8006d6c <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006d5a:	7bfa      	ldrb	r2, [r7, #15]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	32de      	adds	r2, #222	; 0xde
 8006d60:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006d6a:	e005      	b.n	8006d78 <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006d6c:	7bfb      	ldrb	r3, [r7, #15]
 8006d6e:	3301      	adds	r3, #1
 8006d70:	73fb      	strb	r3, [r7, #15]
 8006d72:	7bfb      	ldrb	r3, [r7, #15]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d0e5      	beq.n	8006d44 <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d016      	beq.n	8006db0 <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	4798      	blx	r3
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d109      	bne.n	8006da8 <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2206      	movs	r2, #6
 8006d98:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006da0:	2103      	movs	r1, #3
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	4798      	blx	r3
 8006da6:	e006      	b.n	8006db6 <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	220d      	movs	r2, #13
 8006dac:	701a      	strb	r2, [r3, #0]
 8006dae:	e002      	b.n	8006db6 <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	220d      	movs	r2, #13
 8006db4:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2205      	movs	r2, #5
 8006dba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006dca:	2300      	movs	r3, #0
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f001 fdb1 	bl	8008934 <osMessageQueuePut>
#endif
#endif
      break;
 8006dd2:	e084      	b.n	8006ede <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d017      	beq.n	8006e0e <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	4798      	blx	r3
 8006dea:	4603      	mov	r3, r0
 8006dec:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006dee:	7bbb      	ldrb	r3, [r7, #14]
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d103      	bne.n	8006dfe <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	220b      	movs	r2, #11
 8006dfa:	701a      	strb	r2, [r3, #0]
 8006dfc:	e00a      	b.n	8006e14 <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 8006dfe:	7bbb      	ldrb	r3, [r7, #14]
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d106      	bne.n	8006e14 <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	220d      	movs	r2, #13
 8006e0a:	701a      	strb	r2, [r3, #0]
 8006e0c:	e002      	b.n	8006e14 <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	220d      	movs	r2, #13
 8006e12:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2205      	movs	r2, #5
 8006e18:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006e28:	2300      	movs	r3, #0
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f001 fd82 	bl	8008934 <osMessageQueuePut>
#endif
#endif
      break;
 8006e30:	e055      	b.n	8006ede <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d04f      	beq.n	8006edc <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e42:	695b      	ldr	r3, [r3, #20]
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	4798      	blx	r3
      }
      break;
 8006e48:	e048      	b.n	8006edc <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f7ff fcec 	bl	8006830 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d009      	beq.n	8006e76 <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d005      	beq.n	8006e8c <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e86:	2105      	movs	r1, #5
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d107      	bne.n	8006ea8 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f7ff fda5 	bl	80069f0 <USBH_Start>
 8006ea6:	e002      	b.n	8006eae <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f004 fd19 	bl	800b8e0 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f001 fd35 	bl	8008934 <osMessageQueuePut>
#endif
#endif
      break;
 8006eca:	e008      	b.n	8006ede <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 8006ecc:	bf00      	nop
 8006ece:	e006      	b.n	8006ede <USBH_Process+0x4ce>
      break;
 8006ed0:	bf00      	nop
 8006ed2:	e004      	b.n	8006ede <USBH_Process+0x4ce>
      break;
 8006ed4:	bf00      	nop
 8006ed6:	e002      	b.n	8006ede <USBH_Process+0x4ce>
    break;
 8006ed8:	bf00      	nop
 8006eda:	e000      	b.n	8006ede <USBH_Process+0x4ce>
      break;
 8006edc:	bf00      	nop
  }
  return USBH_OK;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3710      	adds	r7, #16
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b088      	sub	sp, #32
 8006eec:	af04      	add	r7, sp, #16
 8006eee:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	785b      	ldrb	r3, [r3, #1]
 8006efc:	2b07      	cmp	r3, #7
 8006efe:	f200 8208 	bhi.w	8007312 <USBH_HandleEnum+0x42a>
 8006f02:	a201      	add	r2, pc, #4	; (adr r2, 8006f08 <USBH_HandleEnum+0x20>)
 8006f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f08:	08006f29 	.word	0x08006f29
 8006f0c:	08006fe7 	.word	0x08006fe7
 8006f10:	08007051 	.word	0x08007051
 8006f14:	080070df 	.word	0x080070df
 8006f18:	08007149 	.word	0x08007149
 8006f1c:	080071b9 	.word	0x080071b9
 8006f20:	08007255 	.word	0x08007255
 8006f24:	080072d3 	.word	0x080072d3
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006f28:	2108      	movs	r1, #8
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 faec 	bl	8007508 <USBH_Get_DevDesc>
 8006f30:	4603      	mov	r3, r0
 8006f32:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006f34:	7bbb      	ldrb	r3, [r7, #14]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d130      	bne.n	8006f9c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	7919      	ldrb	r1, [r3, #4]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006f5e:	b292      	uxth	r2, r2
 8006f60:	9202      	str	r2, [sp, #8]
 8006f62:	2200      	movs	r2, #0
 8006f64:	9201      	str	r2, [sp, #4]
 8006f66:	9300      	str	r3, [sp, #0]
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2280      	movs	r2, #128	; 0x80
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f001 f9f1 	bl	8008354 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	7959      	ldrb	r1, [r3, #5]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006f86:	b292      	uxth	r2, r2
 8006f88:	9202      	str	r2, [sp, #8]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	9201      	str	r2, [sp, #4]
 8006f8e:	9300      	str	r3, [sp, #0]
 8006f90:	4603      	mov	r3, r0
 8006f92:	2200      	movs	r2, #0
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f001 f9dd 	bl	8008354 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006f9a:	e1bc      	b.n	8007316 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f9c:	7bbb      	ldrb	r3, [r7, #14]
 8006f9e:	2b03      	cmp	r3, #3
 8006fa0:	f040 81b9 	bne.w	8007316 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006faa:	3301      	adds	r3, #1
 8006fac:	b2da      	uxtb	r2, r3
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006fba:	2b03      	cmp	r3, #3
 8006fbc:	d903      	bls.n	8006fc6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	220d      	movs	r2, #13
 8006fc2:	701a      	strb	r2, [r3, #0]
      break;
 8006fc4:	e1a7      	b.n	8007316 <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	795b      	ldrb	r3, [r3, #5]
 8006fca:	4619      	mov	r1, r3
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f001 fa11 	bl	80083f4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	791b      	ldrb	r3, [r3, #4]
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f001 fa0b 	bl	80083f4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	701a      	strb	r2, [r3, #0]
      break;
 8006fe4:	e197      	b.n	8007316 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006fe6:	2112      	movs	r1, #18
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 fa8d 	bl	8007508 <USBH_Get_DevDesc>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006ff2:	7bbb      	ldrb	r3, [r7, #14]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d103      	bne.n	8007000 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2202      	movs	r2, #2
 8006ffc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006ffe:	e18c      	b.n	800731a <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007000:	7bbb      	ldrb	r3, [r7, #14]
 8007002:	2b03      	cmp	r3, #3
 8007004:	f040 8189 	bne.w	800731a <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800700e:	3301      	adds	r3, #1
 8007010:	b2da      	uxtb	r2, r3
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800701e:	2b03      	cmp	r3, #3
 8007020:	d903      	bls.n	800702a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	220d      	movs	r2, #13
 8007026:	701a      	strb	r2, [r3, #0]
      break;
 8007028:	e177      	b.n	800731a <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	795b      	ldrb	r3, [r3, #5]
 800702e:	4619      	mov	r1, r3
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f001 f9df 	bl	80083f4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	791b      	ldrb	r3, [r3, #4]
 800703a:	4619      	mov	r1, r3
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f001 f9d9 	bl	80083f4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	701a      	strb	r2, [r3, #0]
      break;
 800704e:	e164      	b.n	800731a <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007050:	2101      	movs	r1, #1
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 fb04 	bl	8007660 <USBH_SetAddress>
 8007058:	4603      	mov	r3, r0
 800705a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800705c:	7bbb      	ldrb	r3, [r7, #14]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d132      	bne.n	80070c8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007062:	2002      	movs	r0, #2
 8007064:	f004 fda0 	bl	800bba8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2203      	movs	r2, #3
 8007074:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	7919      	ldrb	r1, [r3, #4]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800708a:	b292      	uxth	r2, r2
 800708c:	9202      	str	r2, [sp, #8]
 800708e:	2200      	movs	r2, #0
 8007090:	9201      	str	r2, [sp, #4]
 8007092:	9300      	str	r3, [sp, #0]
 8007094:	4603      	mov	r3, r0
 8007096:	2280      	movs	r2, #128	; 0x80
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f001 f95b 	bl	8008354 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	7959      	ldrb	r1, [r3, #5]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80070b2:	b292      	uxth	r2, r2
 80070b4:	9202      	str	r2, [sp, #8]
 80070b6:	2200      	movs	r2, #0
 80070b8:	9201      	str	r2, [sp, #4]
 80070ba:	9300      	str	r3, [sp, #0]
 80070bc:	4603      	mov	r3, r0
 80070be:	2200      	movs	r2, #0
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f001 f947 	bl	8008354 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80070c6:	e12a      	b.n	800731e <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80070c8:	7bbb      	ldrb	r3, [r7, #14]
 80070ca:	2b03      	cmp	r3, #3
 80070cc:	f040 8127 	bne.w	800731e <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	220d      	movs	r2, #13
 80070d4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	705a      	strb	r2, [r3, #1]
      break;
 80070dc:	e11f      	b.n	800731e <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80070de:	2109      	movs	r1, #9
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 fa39 	bl	8007558 <USBH_Get_CfgDesc>
 80070e6:	4603      	mov	r3, r0
 80070e8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80070ea:	7bbb      	ldrb	r3, [r7, #14]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d103      	bne.n	80070f8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2204      	movs	r2, #4
 80070f4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80070f6:	e114      	b.n	8007322 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80070f8:	7bbb      	ldrb	r3, [r7, #14]
 80070fa:	2b03      	cmp	r3, #3
 80070fc:	f040 8111 	bne.w	8007322 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007106:	3301      	adds	r3, #1
 8007108:	b2da      	uxtb	r2, r3
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007116:	2b03      	cmp	r3, #3
 8007118:	d903      	bls.n	8007122 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	220d      	movs	r2, #13
 800711e:	701a      	strb	r2, [r3, #0]
      break;
 8007120:	e0ff      	b.n	8007322 <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	795b      	ldrb	r3, [r3, #5]
 8007126:	4619      	mov	r1, r3
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f001 f963 	bl	80083f4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	791b      	ldrb	r3, [r3, #4]
 8007132:	4619      	mov	r1, r3
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f001 f95d 	bl	80083f4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	701a      	strb	r2, [r3, #0]
      break;
 8007146:	e0ec      	b.n	8007322 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800714e:	4619      	mov	r1, r3
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 fa01 	bl	8007558 <USBH_Get_CfgDesc>
 8007156:	4603      	mov	r3, r0
 8007158:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800715a:	7bbb      	ldrb	r3, [r7, #14]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d103      	bne.n	8007168 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2205      	movs	r2, #5
 8007164:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007166:	e0de      	b.n	8007326 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007168:	7bbb      	ldrb	r3, [r7, #14]
 800716a:	2b03      	cmp	r3, #3
 800716c:	f040 80db 	bne.w	8007326 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007176:	3301      	adds	r3, #1
 8007178:	b2da      	uxtb	r2, r3
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007186:	2b03      	cmp	r3, #3
 8007188:	d903      	bls.n	8007192 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	220d      	movs	r2, #13
 800718e:	701a      	strb	r2, [r3, #0]
      break;
 8007190:	e0c9      	b.n	8007326 <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	795b      	ldrb	r3, [r3, #5]
 8007196:	4619      	mov	r1, r3
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f001 f92b 	bl	80083f4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	791b      	ldrb	r3, [r3, #4]
 80071a2:	4619      	mov	r1, r3
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f001 f925 	bl	80083f4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	701a      	strb	r2, [r3, #0]
      break;
 80071b6:	e0b6      	b.n	8007326 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d036      	beq.n	8007230 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80071ce:	23ff      	movs	r3, #255	; 0xff
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 f9e5 	bl	80075a0 <USBH_Get_StringDesc>
 80071d6:	4603      	mov	r3, r0
 80071d8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80071da:	7bbb      	ldrb	r3, [r7, #14]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d111      	bne.n	8007204 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2206      	movs	r2, #6
 80071e4:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2205      	movs	r2, #5
 80071ea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80071fa:	2300      	movs	r3, #0
 80071fc:	2200      	movs	r2, #0
 80071fe:	f001 fb99 	bl	8008934 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007202:	e092      	b.n	800732a <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007204:	7bbb      	ldrb	r3, [r7, #14]
 8007206:	2b03      	cmp	r3, #3
 8007208:	f040 808f 	bne.w	800732a <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2206      	movs	r2, #6
 8007210:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2205      	movs	r2, #5
 8007216:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007226:	2300      	movs	r3, #0
 8007228:	2200      	movs	r2, #0
 800722a:	f001 fb83 	bl	8008934 <osMessageQueuePut>
      break;
 800722e:	e07c      	b.n	800732a <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2206      	movs	r2, #6
 8007234:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2205      	movs	r2, #5
 800723a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800724a:	2300      	movs	r3, #0
 800724c:	2200      	movs	r2, #0
 800724e:	f001 fb71 	bl	8008934 <osMessageQueuePut>
      break;
 8007252:	e06a      	b.n	800732a <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800725a:	2b00      	cmp	r3, #0
 800725c:	d027      	beq.n	80072ae <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800726a:	23ff      	movs	r3, #255	; 0xff
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 f997 	bl	80075a0 <USBH_Get_StringDesc>
 8007272:	4603      	mov	r3, r0
 8007274:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007276:	7bbb      	ldrb	r3, [r7, #14]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d103      	bne.n	8007284 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2207      	movs	r2, #7
 8007280:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007282:	e054      	b.n	800732e <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007284:	7bbb      	ldrb	r3, [r7, #14]
 8007286:	2b03      	cmp	r3, #3
 8007288:	d151      	bne.n	800732e <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2207      	movs	r2, #7
 800728e:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2205      	movs	r2, #5
 8007294:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80072a4:	2300      	movs	r3, #0
 80072a6:	2200      	movs	r2, #0
 80072a8:	f001 fb44 	bl	8008934 <osMessageQueuePut>
      break;
 80072ac:	e03f      	b.n	800732e <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2207      	movs	r2, #7
 80072b2:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2205      	movs	r2, #5
 80072b8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80072c8:	2300      	movs	r3, #0
 80072ca:	2200      	movs	r2, #0
 80072cc:	f001 fb32 	bl	8008934 <osMessageQueuePut>
      break;
 80072d0:	e02d      	b.n	800732e <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d017      	beq.n	800730c <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80072e8:	23ff      	movs	r3, #255	; 0xff
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 f958 	bl	80075a0 <USBH_Get_StringDesc>
 80072f0:	4603      	mov	r3, r0
 80072f2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80072f4:	7bbb      	ldrb	r3, [r7, #14]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d102      	bne.n	8007300 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80072fa:	2300      	movs	r3, #0
 80072fc:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80072fe:	e018      	b.n	8007332 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007300:	7bbb      	ldrb	r3, [r7, #14]
 8007302:	2b03      	cmp	r3, #3
 8007304:	d115      	bne.n	8007332 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 8007306:	2300      	movs	r3, #0
 8007308:	73fb      	strb	r3, [r7, #15]
      break;
 800730a:	e012      	b.n	8007332 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800730c:	2300      	movs	r3, #0
 800730e:	73fb      	strb	r3, [r7, #15]
      break;
 8007310:	e00f      	b.n	8007332 <USBH_HandleEnum+0x44a>

    default:
      break;
 8007312:	bf00      	nop
 8007314:	e00e      	b.n	8007334 <USBH_HandleEnum+0x44c>
      break;
 8007316:	bf00      	nop
 8007318:	e00c      	b.n	8007334 <USBH_HandleEnum+0x44c>
      break;
 800731a:	bf00      	nop
 800731c:	e00a      	b.n	8007334 <USBH_HandleEnum+0x44c>
      break;
 800731e:	bf00      	nop
 8007320:	e008      	b.n	8007334 <USBH_HandleEnum+0x44c>
      break;
 8007322:	bf00      	nop
 8007324:	e006      	b.n	8007334 <USBH_HandleEnum+0x44c>
      break;
 8007326:	bf00      	nop
 8007328:	e004      	b.n	8007334 <USBH_HandleEnum+0x44c>
      break;
 800732a:	bf00      	nop
 800732c:	e002      	b.n	8007334 <USBH_HandleEnum+0x44c>
      break;
 800732e:	bf00      	nop
 8007330:	e000      	b.n	8007334 <USBH_HandleEnum+0x44c>
      break;
 8007332:	bf00      	nop
  }
  return Status;
 8007334:	7bfb      	ldrb	r3, [r7, #15]
}
 8007336:	4618      	mov	r0, r3
 8007338:	3710      	adds	r7, #16
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop

08007340 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	683a      	ldr	r2, [r7, #0]
 800734e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007352:	bf00      	nop
 8007354:	370c      	adds	r7, #12
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr

0800735e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b082      	sub	sp, #8
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800736c:	1c5a      	adds	r2, r3, #1
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 f804 	bl	8007382 <USBH_HandleSof>
}
 800737a:	bf00      	nop
 800737c:	3708      	adds	r7, #8
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007382:	b580      	push	{r7, lr}
 8007384:	b082      	sub	sp, #8
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	b2db      	uxtb	r3, r3
 8007390:	2b0b      	cmp	r3, #11
 8007392:	d10a      	bne.n	80073aa <USBH_HandleSof+0x28>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800739a:	2b00      	cmp	r3, #0
 800739c:	d005      	beq.n	80073aa <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073a4:	699b      	ldr	r3, [r3, #24]
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	4798      	blx	r3
  }
}
 80073aa:	bf00      	nop
 80073ac:	3708      	adds	r7, #8
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}

080073b2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80073b2:	b580      	push	{r7, lr}
 80073b4:	b082      	sub	sp, #8
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2201      	movs	r2, #1
 80073be:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2201      	movs	r2, #1
 80073c6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80073d6:	2300      	movs	r3, #0
 80073d8:	2200      	movs	r2, #0
 80073da:	f001 faab 	bl	8008934 <osMessageQueuePut>
#endif
#endif

  return;
 80073de:	bf00      	nop
}
 80073e0:	3708      	adds	r7, #8
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}

080073e6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80073e6:	b480      	push	{r7}
 80073e8:	b083      	sub	sp, #12
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80073f6:	bf00      	nop
}
 80073f8:	370c      	adds	r7, #12
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr

08007402 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007402:	b580      	push	{r7, lr}
 8007404:	b082      	sub	sp, #8
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2201      	movs	r2, #1
 800740e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2201      	movs	r2, #1
 8007426:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007436:	2300      	movs	r3, #0
 8007438:	2200      	movs	r2, #0
 800743a:	f001 fa7b 	bl	8008934 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800743e:	2300      	movs	r3, #0
}
 8007440:	4618      	mov	r0, r3
 8007442:	3708      	adds	r7, #8
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2201      	movs	r2, #1
 8007454:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f004 fa54 	bl	800b916 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	791b      	ldrb	r3, [r3, #4]
 8007472:	4619      	mov	r1, r3
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 ffbd 	bl	80083f4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	795b      	ldrb	r3, [r3, #5]
 800747e:	4619      	mov	r1, r3
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 ffb7 	bl	80083f4 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2201      	movs	r2, #1
 800748a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800749a:	2300      	movs	r3, #0
 800749c:	2200      	movs	r2, #0
 800749e:	f001 fa49 	bl	8008934 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 80074a2:	2300      	movs	r3, #0
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3708      	adds	r7, #8
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 80074c0:	f04f 33ff 	mov.w	r3, #4294967295
 80074c4:	2200      	movs	r2, #0
 80074c6:	f001 fa95 	bl	80089f4 <osMessageQueueGet>
 80074ca:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1f0      	bne.n	80074b4 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f7ff fa9c 	bl	8006a10 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 80074d8:	e7ec      	b.n	80074b4 <USBH_Process_OS+0x8>

080074da <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 80074da:	b580      	push	{r7, lr}
 80074dc:	b082      	sub	sp, #8
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2201      	movs	r2, #1
 80074e6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80074f6:	2300      	movs	r3, #0
 80074f8:	2200      	movs	r2, #0
 80074fa:	f001 fa1b 	bl	8008934 <osMessageQueuePut>
#endif

  return USBH_OK;
 80074fe:	2300      	movs	r3, #0
}
 8007500:	4618      	mov	r0, r3
 8007502:	3708      	adds	r7, #8
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b086      	sub	sp, #24
 800750c:	af02      	add	r7, sp, #8
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	460b      	mov	r3, r1
 8007512:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800751a:	78fb      	ldrb	r3, [r7, #3]
 800751c:	b29b      	uxth	r3, r3
 800751e:	9300      	str	r3, [sp, #0]
 8007520:	4613      	mov	r3, r2
 8007522:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007526:	2100      	movs	r1, #0
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 f864 	bl	80075f6 <USBH_GetDescriptor>
 800752e:	4603      	mov	r3, r0
 8007530:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8007532:	7bfb      	ldrb	r3, [r7, #15]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d10a      	bne.n	800754e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007544:	78fa      	ldrb	r2, [r7, #3]
 8007546:	b292      	uxth	r2, r2
 8007548:	4619      	mov	r1, r3
 800754a:	f000 f918 	bl	800777e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800754e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007550:	4618      	mov	r0, r3
 8007552:	3710      	adds	r7, #16
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007558:	b580      	push	{r7, lr}
 800755a:	b086      	sub	sp, #24
 800755c:	af02      	add	r7, sp, #8
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	460b      	mov	r3, r1
 8007562:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	331c      	adds	r3, #28
 8007568:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800756a:	887b      	ldrh	r3, [r7, #2]
 800756c:	9300      	str	r3, [sp, #0]
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007574:	2100      	movs	r1, #0
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 f83d 	bl	80075f6 <USBH_GetDescriptor>
 800757c:	4603      	mov	r3, r0
 800757e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007580:	7bfb      	ldrb	r3, [r7, #15]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d107      	bne.n	8007596 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007586:	887b      	ldrh	r3, [r7, #2]
 8007588:	461a      	mov	r2, r3
 800758a:	68b9      	ldr	r1, [r7, #8]
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 f987 	bl	80078a0 <USBH_ParseCfgDesc>
 8007592:	4603      	mov	r3, r0
 8007594:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007596:	7bfb      	ldrb	r3, [r7, #15]
}
 8007598:	4618      	mov	r0, r3
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b088      	sub	sp, #32
 80075a4:	af02      	add	r7, sp, #8
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	607a      	str	r2, [r7, #4]
 80075aa:	461a      	mov	r2, r3
 80075ac:	460b      	mov	r3, r1
 80075ae:	72fb      	strb	r3, [r7, #11]
 80075b0:	4613      	mov	r3, r2
 80075b2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80075b4:	7afb      	ldrb	r3, [r7, #11]
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80075bc:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80075c4:	893b      	ldrh	r3, [r7, #8]
 80075c6:	9300      	str	r3, [sp, #0]
 80075c8:	460b      	mov	r3, r1
 80075ca:	2100      	movs	r1, #0
 80075cc:	68f8      	ldr	r0, [r7, #12]
 80075ce:	f000 f812 	bl	80075f6 <USBH_GetDescriptor>
 80075d2:	4603      	mov	r3, r0
 80075d4:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80075d6:	7dfb      	ldrb	r3, [r7, #23]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d107      	bne.n	80075ec <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80075e2:	893a      	ldrh	r2, [r7, #8]
 80075e4:	6879      	ldr	r1, [r7, #4]
 80075e6:	4618      	mov	r0, r3
 80075e8:	f000 fb24 	bl	8007c34 <USBH_ParseStringDesc>
  }

  return status;
 80075ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3718      	adds	r7, #24
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}

080075f6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80075f6:	b580      	push	{r7, lr}
 80075f8:	b084      	sub	sp, #16
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	60f8      	str	r0, [r7, #12]
 80075fe:	607b      	str	r3, [r7, #4]
 8007600:	460b      	mov	r3, r1
 8007602:	72fb      	strb	r3, [r7, #11]
 8007604:	4613      	mov	r3, r2
 8007606:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	789b      	ldrb	r3, [r3, #2]
 800760c:	2b01      	cmp	r3, #1
 800760e:	d11c      	bne.n	800764a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007610:	7afb      	ldrb	r3, [r7, #11]
 8007612:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007616:	b2da      	uxtb	r2, r3
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2206      	movs	r2, #6
 8007620:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	893a      	ldrh	r2, [r7, #8]
 8007626:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007628:	893b      	ldrh	r3, [r7, #8]
 800762a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800762e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007632:	d104      	bne.n	800763e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f240 4209 	movw	r2, #1033	; 0x409
 800763a:	829a      	strh	r2, [r3, #20]
 800763c:	e002      	b.n	8007644 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2200      	movs	r2, #0
 8007642:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	8b3a      	ldrh	r2, [r7, #24]
 8007648:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800764a:	8b3b      	ldrh	r3, [r7, #24]
 800764c:	461a      	mov	r2, r3
 800764e:	6879      	ldr	r1, [r7, #4]
 8007650:	68f8      	ldr	r0, [r7, #12]
 8007652:	f000 fb3d 	bl	8007cd0 <USBH_CtlReq>
 8007656:	4603      	mov	r3, r0
}
 8007658:	4618      	mov	r0, r3
 800765a:	3710      	adds	r7, #16
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	460b      	mov	r3, r1
 800766a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	789b      	ldrb	r3, [r3, #2]
 8007670:	2b01      	cmp	r3, #1
 8007672:	d10f      	bne.n	8007694 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2205      	movs	r2, #5
 800767e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007680:	78fb      	ldrb	r3, [r7, #3]
 8007682:	b29a      	uxth	r2, r3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007694:	2200      	movs	r2, #0
 8007696:	2100      	movs	r1, #0
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 fb19 	bl	8007cd0 <USBH_CtlReq>
 800769e:	4603      	mov	r3, r0
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3708      	adds	r7, #8
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	460b      	mov	r3, r1
 80076b2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	789b      	ldrb	r3, [r3, #2]
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d10e      	bne.n	80076da <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2209      	movs	r2, #9
 80076c6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	887a      	ldrh	r2, [r7, #2]
 80076cc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80076da:	2200      	movs	r2, #0
 80076dc:	2100      	movs	r1, #0
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 faf6 	bl	8007cd0 <USBH_CtlReq>
 80076e4:	4603      	mov	r3, r0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3708      	adds	r7, #8
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}

080076ee <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80076ee:	b580      	push	{r7, lr}
 80076f0:	b082      	sub	sp, #8
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
 80076f6:	460b      	mov	r3, r1
 80076f8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	789b      	ldrb	r3, [r3, #2]
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d10f      	bne.n	8007722 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2203      	movs	r2, #3
 800770c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800770e:	78fb      	ldrb	r3, [r7, #3]
 8007710:	b29a      	uxth	r2, r3
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007722:	2200      	movs	r2, #0
 8007724:	2100      	movs	r1, #0
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 fad2 	bl	8007cd0 <USBH_CtlReq>
 800772c:	4603      	mov	r3, r0
}
 800772e:	4618      	mov	r0, r3
 8007730:	3708      	adds	r7, #8
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}

08007736 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007736:	b580      	push	{r7, lr}
 8007738:	b082      	sub	sp, #8
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
 800773e:	460b      	mov	r3, r1
 8007740:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	789b      	ldrb	r3, [r3, #2]
 8007746:	2b01      	cmp	r3, #1
 8007748:	d10f      	bne.n	800776a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2202      	movs	r2, #2
 800774e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2201      	movs	r2, #1
 8007754:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800775c:	78fb      	ldrb	r3, [r7, #3]
 800775e:	b29a      	uxth	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800776a:	2200      	movs	r2, #0
 800776c:	2100      	movs	r1, #0
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 faae 	bl	8007cd0 <USBH_CtlReq>
 8007774:	4603      	mov	r3, r0
}
 8007776:	4618      	mov	r0, r3
 8007778:	3708      	adds	r7, #8
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}

0800777e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800777e:	b480      	push	{r7}
 8007780:	b085      	sub	sp, #20
 8007782:	af00      	add	r7, sp, #0
 8007784:	60f8      	str	r0, [r7, #12]
 8007786:	60b9      	str	r1, [r7, #8]
 8007788:	4613      	mov	r3, r2
 800778a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	781a      	ldrb	r2, [r3, #0]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	785a      	ldrb	r2, [r3, #1]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	3302      	adds	r3, #2
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	b29a      	uxth	r2, r3
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	3303      	adds	r3, #3
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	021b      	lsls	r3, r3, #8
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	4313      	orrs	r3, r2
 80077b2:	b29a      	uxth	r2, r3
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	791a      	ldrb	r2, [r3, #4]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	795a      	ldrb	r2, [r3, #5]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	799a      	ldrb	r2, [r3, #6]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	79da      	ldrb	r2, [r3, #7]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	79db      	ldrb	r3, [r3, #7]
 80077dc:	2b20      	cmp	r3, #32
 80077de:	dc11      	bgt.n	8007804 <USBH_ParseDevDesc+0x86>
 80077e0:	2b08      	cmp	r3, #8
 80077e2:	db16      	blt.n	8007812 <USBH_ParseDevDesc+0x94>
 80077e4:	3b08      	subs	r3, #8
 80077e6:	2201      	movs	r2, #1
 80077e8:	fa02 f303 	lsl.w	r3, r2, r3
 80077ec:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80077f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	bf14      	ite	ne
 80077f8:	2301      	movne	r3, #1
 80077fa:	2300      	moveq	r3, #0
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d102      	bne.n	8007808 <USBH_ParseDevDesc+0x8a>
 8007802:	e006      	b.n	8007812 <USBH_ParseDevDesc+0x94>
 8007804:	2b40      	cmp	r3, #64	; 0x40
 8007806:	d104      	bne.n	8007812 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	79da      	ldrb	r2, [r3, #7]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	71da      	strb	r2, [r3, #7]
      break;
 8007810:	e003      	b.n	800781a <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2240      	movs	r2, #64	; 0x40
 8007816:	71da      	strb	r2, [r3, #7]
      break;
 8007818:	bf00      	nop
  }

  if (length > 8U)
 800781a:	88fb      	ldrh	r3, [r7, #6]
 800781c:	2b08      	cmp	r3, #8
 800781e:	d939      	bls.n	8007894 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	3308      	adds	r3, #8
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	b29a      	uxth	r2, r3
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	3309      	adds	r3, #9
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	b29b      	uxth	r3, r3
 8007830:	021b      	lsls	r3, r3, #8
 8007832:	b29b      	uxth	r3, r3
 8007834:	4313      	orrs	r3, r2
 8007836:	b29a      	uxth	r2, r3
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	330a      	adds	r3, #10
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	b29a      	uxth	r2, r3
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	330b      	adds	r3, #11
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	b29b      	uxth	r3, r3
 800784c:	021b      	lsls	r3, r3, #8
 800784e:	b29b      	uxth	r3, r3
 8007850:	4313      	orrs	r3, r2
 8007852:	b29a      	uxth	r2, r3
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	330c      	adds	r3, #12
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	b29a      	uxth	r2, r3
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	330d      	adds	r3, #13
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	b29b      	uxth	r3, r3
 8007868:	021b      	lsls	r3, r3, #8
 800786a:	b29b      	uxth	r3, r3
 800786c:	4313      	orrs	r3, r2
 800786e:	b29a      	uxth	r2, r3
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	7b9a      	ldrb	r2, [r3, #14]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	7bda      	ldrb	r2, [r3, #15]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	7c1a      	ldrb	r2, [r3, #16]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	7c5a      	ldrb	r2, [r3, #17]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	745a      	strb	r2, [r3, #17]
  }
}
 8007894:	bf00      	nop
 8007896:	3714      	adds	r7, #20
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b08c      	sub	sp, #48	; 0x30
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	60b9      	str	r1, [r7, #8]
 80078aa:	4613      	mov	r3, r2
 80078ac:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80078b4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80078b6:	2300      	movs	r3, #0
 80078b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80078c0:	2300      	movs	r3, #0
 80078c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80078c6:	2300      	movs	r3, #0
 80078c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	781a      	ldrb	r2, [r3, #0]
 80078d4:	6a3b      	ldr	r3, [r7, #32]
 80078d6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	785a      	ldrb	r2, [r3, #1]
 80078dc:	6a3b      	ldr	r3, [r7, #32]
 80078de:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	3302      	adds	r3, #2
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	b29a      	uxth	r2, r3
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	3303      	adds	r3, #3
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	021b      	lsls	r3, r3, #8
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	4313      	orrs	r3, r2
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078fc:	bf28      	it	cs
 80078fe:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007902:	b29a      	uxth	r2, r3
 8007904:	6a3b      	ldr	r3, [r7, #32]
 8007906:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	791a      	ldrb	r2, [r3, #4]
 800790c:	6a3b      	ldr	r3, [r7, #32]
 800790e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	795a      	ldrb	r2, [r3, #5]
 8007914:	6a3b      	ldr	r3, [r7, #32]
 8007916:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	799a      	ldrb	r2, [r3, #6]
 800791c:	6a3b      	ldr	r3, [r7, #32]
 800791e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	79da      	ldrb	r2, [r3, #7]
 8007924:	6a3b      	ldr	r3, [r7, #32]
 8007926:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	7a1a      	ldrb	r2, [r3, #8]
 800792c:	6a3b      	ldr	r3, [r7, #32]
 800792e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007930:	6a3b      	ldr	r3, [r7, #32]
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	2b09      	cmp	r3, #9
 8007936:	d002      	beq.n	800793e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007938:	6a3b      	ldr	r3, [r7, #32]
 800793a:	2209      	movs	r2, #9
 800793c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800793e:	88fb      	ldrh	r3, [r7, #6]
 8007940:	2b09      	cmp	r3, #9
 8007942:	f240 809d 	bls.w	8007a80 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007946:	2309      	movs	r3, #9
 8007948:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800794a:	2300      	movs	r3, #0
 800794c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800794e:	e081      	b.n	8007a54 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007950:	f107 0316 	add.w	r3, r7, #22
 8007954:	4619      	mov	r1, r3
 8007956:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007958:	f000 f99f 	bl	8007c9a <USBH_GetNextDesc>
 800795c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800795e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007960:	785b      	ldrb	r3, [r3, #1]
 8007962:	2b04      	cmp	r3, #4
 8007964:	d176      	bne.n	8007a54 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	2b09      	cmp	r3, #9
 800796c:	d002      	beq.n	8007974 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800796e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007970:	2209      	movs	r2, #9
 8007972:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007974:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007978:	221a      	movs	r2, #26
 800797a:	fb02 f303 	mul.w	r3, r2, r3
 800797e:	3308      	adds	r3, #8
 8007980:	6a3a      	ldr	r2, [r7, #32]
 8007982:	4413      	add	r3, r2
 8007984:	3302      	adds	r3, #2
 8007986:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007988:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800798a:	69f8      	ldr	r0, [r7, #28]
 800798c:	f000 f87e 	bl	8007a8c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007990:	2300      	movs	r3, #0
 8007992:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007996:	2300      	movs	r3, #0
 8007998:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800799a:	e043      	b.n	8007a24 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800799c:	f107 0316 	add.w	r3, r7, #22
 80079a0:	4619      	mov	r1, r3
 80079a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079a4:	f000 f979 	bl	8007c9a <USBH_GetNextDesc>
 80079a8:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80079aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ac:	785b      	ldrb	r3, [r3, #1]
 80079ae:	2b05      	cmp	r3, #5
 80079b0:	d138      	bne.n	8007a24 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 80079b2:	69fb      	ldr	r3, [r7, #28]
 80079b4:	795b      	ldrb	r3, [r3, #5]
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d10f      	bne.n	80079da <USBH_ParseCfgDesc+0x13a>
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	799b      	ldrb	r3, [r3, #6]
 80079be:	2b02      	cmp	r3, #2
 80079c0:	d10b      	bne.n	80079da <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	79db      	ldrb	r3, [r3, #7]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d10f      	bne.n	80079ea <USBH_ParseCfgDesc+0x14a>
 80079ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	2b09      	cmp	r3, #9
 80079d0:	d00b      	beq.n	80079ea <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 80079d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d4:	2209      	movs	r2, #9
 80079d6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80079d8:	e007      	b.n	80079ea <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 80079da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	2b07      	cmp	r3, #7
 80079e0:	d004      	beq.n	80079ec <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80079e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e4:	2207      	movs	r2, #7
 80079e6:	701a      	strb	r2, [r3, #0]
 80079e8:	e000      	b.n	80079ec <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80079ea:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80079ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079f0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80079f4:	3201      	adds	r2, #1
 80079f6:	00d2      	lsls	r2, r2, #3
 80079f8:	211a      	movs	r1, #26
 80079fa:	fb01 f303 	mul.w	r3, r1, r3
 80079fe:	4413      	add	r3, r2
 8007a00:	3308      	adds	r3, #8
 8007a02:	6a3a      	ldr	r2, [r7, #32]
 8007a04:	4413      	add	r3, r2
 8007a06:	3304      	adds	r3, #4
 8007a08:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007a0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a0c:	69b9      	ldr	r1, [r7, #24]
 8007a0e:	68f8      	ldr	r0, [r7, #12]
 8007a10:	f000 f86b 	bl	8007aea <USBH_ParseEPDesc>
 8007a14:	4603      	mov	r3, r0
 8007a16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007a1a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007a1e:	3301      	adds	r3, #1
 8007a20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	791b      	ldrb	r3, [r3, #4]
 8007a28:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d204      	bcs.n	8007a3a <USBH_ParseCfgDesc+0x19a>
 8007a30:	6a3b      	ldr	r3, [r7, #32]
 8007a32:	885a      	ldrh	r2, [r3, #2]
 8007a34:	8afb      	ldrh	r3, [r7, #22]
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d8b0      	bhi.n	800799c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007a3a:	69fb      	ldr	r3, [r7, #28]
 8007a3c:	791b      	ldrb	r3, [r3, #4]
 8007a3e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d201      	bcs.n	8007a4a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007a46:	2303      	movs	r3, #3
 8007a48:	e01c      	b.n	8007a84 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007a4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a4e:	3301      	adds	r3, #1
 8007a50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007a54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d805      	bhi.n	8007a68 <USBH_ParseCfgDesc+0x1c8>
 8007a5c:	6a3b      	ldr	r3, [r7, #32]
 8007a5e:	885a      	ldrh	r2, [r3, #2]
 8007a60:	8afb      	ldrh	r3, [r7, #22]
 8007a62:	429a      	cmp	r2, r3
 8007a64:	f63f af74 	bhi.w	8007950 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007a68:	6a3b      	ldr	r3, [r7, #32]
 8007a6a:	791b      	ldrb	r3, [r3, #4]
 8007a6c:	2b02      	cmp	r3, #2
 8007a6e:	bf28      	it	cs
 8007a70:	2302      	movcs	r3, #2
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d201      	bcs.n	8007a80 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007a7c:	2303      	movs	r3, #3
 8007a7e:	e001      	b.n	8007a84 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007a80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3730      	adds	r7, #48	; 0x30
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	781a      	ldrb	r2, [r3, #0]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	785a      	ldrb	r2, [r3, #1]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	789a      	ldrb	r2, [r3, #2]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	78da      	ldrb	r2, [r3, #3]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	791a      	ldrb	r2, [r3, #4]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	795a      	ldrb	r2, [r3, #5]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	799a      	ldrb	r2, [r3, #6]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	79da      	ldrb	r2, [r3, #7]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	7a1a      	ldrb	r2, [r3, #8]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	721a      	strb	r2, [r3, #8]
}
 8007ade:	bf00      	nop
 8007ae0:	370c      	adds	r7, #12
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr

08007aea <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007aea:	b480      	push	{r7}
 8007aec:	b087      	sub	sp, #28
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	60f8      	str	r0, [r7, #12]
 8007af2:	60b9      	str	r1, [r7, #8]
 8007af4:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007af6:	2300      	movs	r3, #0
 8007af8:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	781a      	ldrb	r2, [r3, #0]
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	785a      	ldrb	r2, [r3, #1]
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	789a      	ldrb	r2, [r3, #2]
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	78da      	ldrb	r2, [r3, #3]
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	3304      	adds	r3, #4
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	b29a      	uxth	r2, r3
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	3305      	adds	r3, #5
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	021b      	lsls	r3, r3, #8
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	b29a      	uxth	r2, r3
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	799a      	ldrb	r2, [r3, #6]
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	889b      	ldrh	r3, [r3, #4]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d102      	bne.n	8007b4c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007b46:	2303      	movs	r3, #3
 8007b48:	75fb      	strb	r3, [r7, #23]
 8007b4a:	e033      	b.n	8007bb4 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	889b      	ldrh	r3, [r3, #4]
 8007b50:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007b54:	f023 0307 	bic.w	r3, r3, #7
 8007b58:	b29a      	uxth	r2, r3
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	889b      	ldrh	r3, [r3, #4]
 8007b62:	b21a      	sxth	r2, r3
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	3304      	adds	r3, #4
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	b299      	uxth	r1, r3
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	3305      	adds	r3, #5
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	021b      	lsls	r3, r3, #8
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	430b      	orrs	r3, r1
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d110      	bne.n	8007ba6 <USBH_ParseEPDesc+0xbc>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	3304      	adds	r3, #4
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	b299      	uxth	r1, r3
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	3305      	adds	r3, #5
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	021b      	lsls	r3, r3, #8
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	430b      	orrs	r3, r1
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	b21b      	sxth	r3, r3
 8007b9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007ba2:	b21b      	sxth	r3, r3
 8007ba4:	e001      	b.n	8007baa <USBH_ParseEPDesc+0xc0>
 8007ba6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007baa:	4313      	orrs	r3, r2
 8007bac:	b21b      	sxth	r3, r3
 8007bae:	b29a      	uxth	r2, r3
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d116      	bne.n	8007bec <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	78db      	ldrb	r3, [r3, #3]
 8007bc2:	f003 0303 	and.w	r3, r3, #3
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d005      	beq.n	8007bd6 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	78db      	ldrb	r3, [r3, #3]
 8007bce:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007bd2:	2b03      	cmp	r3, #3
 8007bd4:	d127      	bne.n	8007c26 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	799b      	ldrb	r3, [r3, #6]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d003      	beq.n	8007be6 <USBH_ParseEPDesc+0xfc>
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	799b      	ldrb	r3, [r3, #6]
 8007be2:	2b10      	cmp	r3, #16
 8007be4:	d91f      	bls.n	8007c26 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007be6:	2303      	movs	r3, #3
 8007be8:	75fb      	strb	r3, [r7, #23]
 8007bea:	e01c      	b.n	8007c26 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	78db      	ldrb	r3, [r3, #3]
 8007bf0:	f003 0303 	and.w	r3, r3, #3
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d10a      	bne.n	8007c0e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	799b      	ldrb	r3, [r3, #6]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d003      	beq.n	8007c08 <USBH_ParseEPDesc+0x11e>
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	799b      	ldrb	r3, [r3, #6]
 8007c04:	2b10      	cmp	r3, #16
 8007c06:	d90e      	bls.n	8007c26 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007c08:	2303      	movs	r3, #3
 8007c0a:	75fb      	strb	r3, [r7, #23]
 8007c0c:	e00b      	b.n	8007c26 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	78db      	ldrb	r3, [r3, #3]
 8007c12:	f003 0303 	and.w	r3, r3, #3
 8007c16:	2b03      	cmp	r3, #3
 8007c18:	d105      	bne.n	8007c26 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	799b      	ldrb	r3, [r3, #6]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d101      	bne.n	8007c26 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007c22:	2303      	movs	r3, #3
 8007c24:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8007c26:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	371c      	adds	r7, #28
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b087      	sub	sp, #28
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	4613      	mov	r3, r2
 8007c40:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	3301      	adds	r3, #1
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	2b03      	cmp	r3, #3
 8007c4a:	d120      	bne.n	8007c8e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	781b      	ldrb	r3, [r3, #0]
 8007c50:	1e9a      	subs	r2, r3, #2
 8007c52:	88fb      	ldrh	r3, [r7, #6]
 8007c54:	4293      	cmp	r3, r2
 8007c56:	bf28      	it	cs
 8007c58:	4613      	movcs	r3, r2
 8007c5a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	3302      	adds	r3, #2
 8007c60:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007c62:	2300      	movs	r3, #0
 8007c64:	82fb      	strh	r3, [r7, #22]
 8007c66:	e00b      	b.n	8007c80 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007c68:	8afb      	ldrh	r3, [r7, #22]
 8007c6a:	68fa      	ldr	r2, [r7, #12]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	781a      	ldrb	r2, [r3, #0]
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	3301      	adds	r3, #1
 8007c78:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007c7a:	8afb      	ldrh	r3, [r7, #22]
 8007c7c:	3302      	adds	r3, #2
 8007c7e:	82fb      	strh	r3, [r7, #22]
 8007c80:	8afa      	ldrh	r2, [r7, #22]
 8007c82:	8abb      	ldrh	r3, [r7, #20]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d3ef      	bcc.n	8007c68 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	701a      	strb	r2, [r3, #0]
  }
}
 8007c8e:	bf00      	nop
 8007c90:	371c      	adds	r7, #28
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr

08007c9a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007c9a:	b480      	push	{r7}
 8007c9c:	b085      	sub	sp, #20
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
 8007ca2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	881a      	ldrh	r2, [r3, #0]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	4413      	add	r3, r2
 8007cb0:	b29a      	uxth	r2, r3
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	4413      	add	r3, r2
 8007cc0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3714      	adds	r7, #20
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b086      	sub	sp, #24
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	4613      	mov	r3, r2
 8007cdc:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	789b      	ldrb	r3, [r3, #2]
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d002      	beq.n	8007cf0 <USBH_CtlReq+0x20>
 8007cea:	2b02      	cmp	r3, #2
 8007cec:	d01d      	beq.n	8007d2a <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8007cee:	e043      	b.n	8007d78 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	68ba      	ldr	r2, [r7, #8]
 8007cf4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	88fa      	ldrh	r2, [r7, #6]
 8007cfa:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2202      	movs	r2, #2
 8007d06:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2203      	movs	r2, #3
 8007d10:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007d20:	2300      	movs	r3, #0
 8007d22:	2200      	movs	r2, #0
 8007d24:	f000 fe06 	bl	8008934 <osMessageQueuePut>
      break;
 8007d28:	e026      	b.n	8007d78 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8007d2a:	68f8      	ldr	r0, [r7, #12]
 8007d2c:	f000 f82a 	bl	8007d84 <USBH_HandleControl>
 8007d30:	4603      	mov	r3, r0
 8007d32:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007d34:	7dfb      	ldrb	r3, [r7, #23]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d002      	beq.n	8007d40 <USBH_CtlReq+0x70>
 8007d3a:	7dfb      	ldrb	r3, [r7, #23]
 8007d3c:	2b03      	cmp	r3, #3
 8007d3e:	d106      	bne.n	8007d4e <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2201      	movs	r2, #1
 8007d44:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	761a      	strb	r2, [r3, #24]
 8007d4c:	e005      	b.n	8007d5a <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8007d4e:	7dfb      	ldrb	r3, [r7, #23]
 8007d50:	2b02      	cmp	r3, #2
 8007d52:	d102      	bne.n	8007d5a <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2201      	movs	r2, #1
 8007d58:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2203      	movs	r2, #3
 8007d5e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007d6e:	2300      	movs	r3, #0
 8007d70:	2200      	movs	r2, #0
 8007d72:	f000 fddf 	bl	8008934 <osMessageQueuePut>
      break;
 8007d76:	bf00      	nop
  }
  return status;
 8007d78:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3718      	adds	r7, #24
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
	...

08007d84 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b086      	sub	sp, #24
 8007d88:	af02      	add	r7, sp, #8
 8007d8a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007d90:	2300      	movs	r3, #0
 8007d92:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	7e1b      	ldrb	r3, [r3, #24]
 8007d98:	3b01      	subs	r3, #1
 8007d9a:	2b0a      	cmp	r3, #10
 8007d9c:	f200 8229 	bhi.w	80081f2 <USBH_HandleControl+0x46e>
 8007da0:	a201      	add	r2, pc, #4	; (adr r2, 8007da8 <USBH_HandleControl+0x24>)
 8007da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da6:	bf00      	nop
 8007da8:	08007dd5 	.word	0x08007dd5
 8007dac:	08007def 	.word	0x08007def
 8007db0:	08007e91 	.word	0x08007e91
 8007db4:	08007eb7 	.word	0x08007eb7
 8007db8:	08007f43 	.word	0x08007f43
 8007dbc:	08007f6d 	.word	0x08007f6d
 8007dc0:	0800802f 	.word	0x0800802f
 8007dc4:	08008051 	.word	0x08008051
 8007dc8:	080080e3 	.word	0x080080e3
 8007dcc:	08008109 	.word	0x08008109
 8007dd0:	0800819b 	.word	0x0800819b
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f103 0110 	add.w	r1, r3, #16
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	795b      	ldrb	r3, [r3, #5]
 8007dde:	461a      	mov	r2, r3
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f000 fa17 	bl	8008214 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2202      	movs	r2, #2
 8007dea:	761a      	strb	r2, [r3, #24]
      break;
 8007dec:	e20c      	b.n	8008208 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	795b      	ldrb	r3, [r3, #5]
 8007df2:	4619      	mov	r1, r3
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f003 fe7d 	bl	800baf4 <USBH_LL_GetURBState>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007dfe:	7bbb      	ldrb	r3, [r7, #14]
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d12c      	bne.n	8007e5e <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	7c1b      	ldrb	r3, [r3, #16]
 8007e08:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007e0c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	8adb      	ldrh	r3, [r3, #22]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d00a      	beq.n	8007e2c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007e16:	7b7b      	ldrb	r3, [r7, #13]
 8007e18:	2b80      	cmp	r3, #128	; 0x80
 8007e1a:	d103      	bne.n	8007e24 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2203      	movs	r2, #3
 8007e20:	761a      	strb	r2, [r3, #24]
 8007e22:	e00d      	b.n	8007e40 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2205      	movs	r2, #5
 8007e28:	761a      	strb	r2, [r3, #24]
 8007e2a:	e009      	b.n	8007e40 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8007e2c:	7b7b      	ldrb	r3, [r7, #13]
 8007e2e:	2b80      	cmp	r3, #128	; 0x80
 8007e30:	d103      	bne.n	8007e3a <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2209      	movs	r2, #9
 8007e36:	761a      	strb	r2, [r3, #24]
 8007e38:	e002      	b.n	8007e40 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2207      	movs	r2, #7
 8007e3e:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2203      	movs	r2, #3
 8007e44:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007e54:	2300      	movs	r3, #0
 8007e56:	2200      	movs	r2, #0
 8007e58:	f000 fd6c 	bl	8008934 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007e5c:	e1cb      	b.n	80081f6 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007e5e:	7bbb      	ldrb	r3, [r7, #14]
 8007e60:	2b04      	cmp	r3, #4
 8007e62:	d003      	beq.n	8007e6c <USBH_HandleControl+0xe8>
 8007e64:	7bbb      	ldrb	r3, [r7, #14]
 8007e66:	2b02      	cmp	r3, #2
 8007e68:	f040 81c5 	bne.w	80081f6 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	220b      	movs	r2, #11
 8007e70:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2203      	movs	r2, #3
 8007e76:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007e86:	2300      	movs	r3, #0
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f000 fd53 	bl	8008934 <osMessageQueuePut>
      break;
 8007e8e:	e1b2      	b.n	80081f6 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e96:	b29a      	uxth	r2, r3
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6899      	ldr	r1, [r3, #8]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	899a      	ldrh	r2, [r3, #12]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	791b      	ldrb	r3, [r3, #4]
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 f9f2 	bl	8008292 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2204      	movs	r2, #4
 8007eb2:	761a      	strb	r2, [r3, #24]
      break;
 8007eb4:	e1a8      	b.n	8008208 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	791b      	ldrb	r3, [r3, #4]
 8007eba:	4619      	mov	r1, r3
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f003 fe19 	bl	800baf4 <USBH_LL_GetURBState>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007ec6:	7bbb      	ldrb	r3, [r7, #14]
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d110      	bne.n	8007eee <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2209      	movs	r2, #9
 8007ed0:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2203      	movs	r2, #3
 8007ed6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f000 fd23 	bl	8008934 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007eee:	7bbb      	ldrb	r3, [r7, #14]
 8007ef0:	2b05      	cmp	r3, #5
 8007ef2:	d110      	bne.n	8007f16 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007ef4:	2303      	movs	r3, #3
 8007ef6:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2203      	movs	r2, #3
 8007efc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f000 fd10 	bl	8008934 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007f14:	e171      	b.n	80081fa <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 8007f16:	7bbb      	ldrb	r3, [r7, #14]
 8007f18:	2b04      	cmp	r3, #4
 8007f1a:	f040 816e 	bne.w	80081fa <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	220b      	movs	r2, #11
 8007f22:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2203      	movs	r2, #3
 8007f28:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007f38:	2300      	movs	r3, #0
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f000 fcfa 	bl	8008934 <osMessageQueuePut>
      break;
 8007f40:	e15b      	b.n	80081fa <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6899      	ldr	r1, [r3, #8]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	899a      	ldrh	r2, [r3, #12]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	795b      	ldrb	r3, [r3, #5]
 8007f4e:	2001      	movs	r0, #1
 8007f50:	9000      	str	r0, [sp, #0]
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 f978 	bl	8008248 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007f5e:	b29a      	uxth	r2, r3
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2206      	movs	r2, #6
 8007f68:	761a      	strb	r2, [r3, #24]
      break;
 8007f6a:	e14d      	b.n	8008208 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	795b      	ldrb	r3, [r3, #5]
 8007f70:	4619      	mov	r1, r3
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f003 fdbe 	bl	800baf4 <USBH_LL_GetURBState>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007f7c:	7bbb      	ldrb	r3, [r7, #14]
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d111      	bne.n	8007fa6 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2207      	movs	r2, #7
 8007f86:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2203      	movs	r2, #3
 8007f8c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f000 fcc8 	bl	8008934 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007fa4:	e12b      	b.n	80081fe <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8007fa6:	7bbb      	ldrb	r3, [r7, #14]
 8007fa8:	2b05      	cmp	r3, #5
 8007faa:	d113      	bne.n	8007fd4 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	220c      	movs	r2, #12
 8007fb0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007fb2:	2303      	movs	r3, #3
 8007fb4:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2203      	movs	r2, #3
 8007fba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007fca:	2300      	movs	r3, #0
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f000 fcb1 	bl	8008934 <osMessageQueuePut>
      break;
 8007fd2:	e114      	b.n	80081fe <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007fd4:	7bbb      	ldrb	r3, [r7, #14]
 8007fd6:	2b02      	cmp	r3, #2
 8007fd8:	d111      	bne.n	8007ffe <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2205      	movs	r2, #5
 8007fde:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2203      	movs	r2, #3
 8007fe4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f000 fc9c 	bl	8008934 <osMessageQueuePut>
      break;
 8007ffc:	e0ff      	b.n	80081fe <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8007ffe:	7bbb      	ldrb	r3, [r7, #14]
 8008000:	2b04      	cmp	r3, #4
 8008002:	f040 80fc 	bne.w	80081fe <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	220b      	movs	r2, #11
 800800a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800800c:	2302      	movs	r3, #2
 800800e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2203      	movs	r2, #3
 8008014:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008024:	2300      	movs	r3, #0
 8008026:	2200      	movs	r2, #0
 8008028:	f000 fc84 	bl	8008934 <osMessageQueuePut>
      break;
 800802c:	e0e7      	b.n	80081fe <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	791b      	ldrb	r3, [r3, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	2100      	movs	r1, #0
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 f92b 	bl	8008292 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008042:	b29a      	uxth	r2, r3
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2208      	movs	r2, #8
 800804c:	761a      	strb	r2, [r3, #24]

      break;
 800804e:	e0db      	b.n	8008208 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	791b      	ldrb	r3, [r3, #4]
 8008054:	4619      	mov	r1, r3
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f003 fd4c 	bl	800baf4 <USBH_LL_GetURBState>
 800805c:	4603      	mov	r3, r0
 800805e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008060:	7bbb      	ldrb	r3, [r7, #14]
 8008062:	2b01      	cmp	r3, #1
 8008064:	d113      	bne.n	800808e <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	220d      	movs	r2, #13
 800806a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800806c:	2300      	movs	r3, #0
 800806e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2203      	movs	r2, #3
 8008074:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008084:	2300      	movs	r3, #0
 8008086:	2200      	movs	r2, #0
 8008088:	f000 fc54 	bl	8008934 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800808c:	e0b9      	b.n	8008202 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800808e:	7bbb      	ldrb	r3, [r7, #14]
 8008090:	2b04      	cmp	r3, #4
 8008092:	d111      	bne.n	80080b8 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	220b      	movs	r2, #11
 8008098:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2203      	movs	r2, #3
 800809e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80080ae:	2300      	movs	r3, #0
 80080b0:	2200      	movs	r2, #0
 80080b2:	f000 fc3f 	bl	8008934 <osMessageQueuePut>
      break;
 80080b6:	e0a4      	b.n	8008202 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 80080b8:	7bbb      	ldrb	r3, [r7, #14]
 80080ba:	2b05      	cmp	r3, #5
 80080bc:	f040 80a1 	bne.w	8008202 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 80080c0:	2303      	movs	r3, #3
 80080c2:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2203      	movs	r2, #3
 80080c8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80080d8:	2300      	movs	r3, #0
 80080da:	2200      	movs	r2, #0
 80080dc:	f000 fc2a 	bl	8008934 <osMessageQueuePut>
      break;
 80080e0:	e08f      	b.n	8008202 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	795b      	ldrb	r3, [r3, #5]
 80080e6:	2201      	movs	r2, #1
 80080e8:	9200      	str	r2, [sp, #0]
 80080ea:	2200      	movs	r2, #0
 80080ec:	2100      	movs	r1, #0
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 f8aa 	bl	8008248 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80080fa:	b29a      	uxth	r2, r3
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	220a      	movs	r2, #10
 8008104:	761a      	strb	r2, [r3, #24]
      break;
 8008106:	e07f      	b.n	8008208 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	795b      	ldrb	r3, [r3, #5]
 800810c:	4619      	mov	r1, r3
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f003 fcf0 	bl	800baf4 <USBH_LL_GetURBState>
 8008114:	4603      	mov	r3, r0
 8008116:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008118:	7bbb      	ldrb	r3, [r7, #14]
 800811a:	2b01      	cmp	r3, #1
 800811c:	d113      	bne.n	8008146 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800811e:	2300      	movs	r3, #0
 8008120:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	220d      	movs	r2, #13
 8008126:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2203      	movs	r2, #3
 800812c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800813c:	2300      	movs	r3, #0
 800813e:	2200      	movs	r2, #0
 8008140:	f000 fbf8 	bl	8008934 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008144:	e05f      	b.n	8008206 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008146:	7bbb      	ldrb	r3, [r7, #14]
 8008148:	2b02      	cmp	r3, #2
 800814a:	d111      	bne.n	8008170 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2209      	movs	r2, #9
 8008150:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2203      	movs	r2, #3
 8008156:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008166:	2300      	movs	r3, #0
 8008168:	2200      	movs	r2, #0
 800816a:	f000 fbe3 	bl	8008934 <osMessageQueuePut>
      break;
 800816e:	e04a      	b.n	8008206 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8008170:	7bbb      	ldrb	r3, [r7, #14]
 8008172:	2b04      	cmp	r3, #4
 8008174:	d147      	bne.n	8008206 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	220b      	movs	r2, #11
 800817a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2203      	movs	r2, #3
 8008180:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008190:	2300      	movs	r3, #0
 8008192:	2200      	movs	r2, #0
 8008194:	f000 fbce 	bl	8008934 <osMessageQueuePut>
      break;
 8008198:	e035      	b.n	8008206 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	7e5b      	ldrb	r3, [r3, #25]
 800819e:	3301      	adds	r3, #1
 80081a0:	b2da      	uxtb	r2, r3
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	765a      	strb	r2, [r3, #25]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	7e5b      	ldrb	r3, [r3, #25]
 80081aa:	2b02      	cmp	r3, #2
 80081ac:	d806      	bhi.n	80081bc <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2201      	movs	r2, #1
 80081b2:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2201      	movs	r2, #1
 80081b8:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80081ba:	e025      	b.n	8008208 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80081c2:	2106      	movs	r1, #6
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	795b      	ldrb	r3, [r3, #5]
 80081d2:	4619      	mov	r1, r3
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f000 f90d 	bl	80083f4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	791b      	ldrb	r3, [r3, #4]
 80081de:	4619      	mov	r1, r3
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 f907 	bl	80083f4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2200      	movs	r2, #0
 80081ea:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80081ec:	2302      	movs	r3, #2
 80081ee:	73fb      	strb	r3, [r7, #15]
      break;
 80081f0:	e00a      	b.n	8008208 <USBH_HandleControl+0x484>

    default:
      break;
 80081f2:	bf00      	nop
 80081f4:	e008      	b.n	8008208 <USBH_HandleControl+0x484>
      break;
 80081f6:	bf00      	nop
 80081f8:	e006      	b.n	8008208 <USBH_HandleControl+0x484>
      break;
 80081fa:	bf00      	nop
 80081fc:	e004      	b.n	8008208 <USBH_HandleControl+0x484>
      break;
 80081fe:	bf00      	nop
 8008200:	e002      	b.n	8008208 <USBH_HandleControl+0x484>
      break;
 8008202:	bf00      	nop
 8008204:	e000      	b.n	8008208 <USBH_HandleControl+0x484>
      break;
 8008206:	bf00      	nop
  }

  return status;
 8008208:	7bfb      	ldrb	r3, [r7, #15]
}
 800820a:	4618      	mov	r0, r3
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop

08008214 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b088      	sub	sp, #32
 8008218:	af04      	add	r7, sp, #16
 800821a:	60f8      	str	r0, [r7, #12]
 800821c:	60b9      	str	r1, [r7, #8]
 800821e:	4613      	mov	r3, r2
 8008220:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008222:	79f9      	ldrb	r1, [r7, #7]
 8008224:	2300      	movs	r3, #0
 8008226:	9303      	str	r3, [sp, #12]
 8008228:	2308      	movs	r3, #8
 800822a:	9302      	str	r3, [sp, #8]
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	9301      	str	r3, [sp, #4]
 8008230:	2300      	movs	r3, #0
 8008232:	9300      	str	r3, [sp, #0]
 8008234:	2300      	movs	r3, #0
 8008236:	2200      	movs	r2, #0
 8008238:	68f8      	ldr	r0, [r7, #12]
 800823a:	f003 fc2a 	bl	800ba92 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800823e:	2300      	movs	r3, #0
}
 8008240:	4618      	mov	r0, r3
 8008242:	3710      	adds	r7, #16
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b088      	sub	sp, #32
 800824c:	af04      	add	r7, sp, #16
 800824e:	60f8      	str	r0, [r7, #12]
 8008250:	60b9      	str	r1, [r7, #8]
 8008252:	4611      	mov	r1, r2
 8008254:	461a      	mov	r2, r3
 8008256:	460b      	mov	r3, r1
 8008258:	80fb      	strh	r3, [r7, #6]
 800825a:	4613      	mov	r3, r2
 800825c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008264:	2b00      	cmp	r3, #0
 8008266:	d001      	beq.n	800826c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008268:	2300      	movs	r3, #0
 800826a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800826c:	7979      	ldrb	r1, [r7, #5]
 800826e:	7e3b      	ldrb	r3, [r7, #24]
 8008270:	9303      	str	r3, [sp, #12]
 8008272:	88fb      	ldrh	r3, [r7, #6]
 8008274:	9302      	str	r3, [sp, #8]
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	9301      	str	r3, [sp, #4]
 800827a:	2301      	movs	r3, #1
 800827c:	9300      	str	r3, [sp, #0]
 800827e:	2300      	movs	r3, #0
 8008280:	2200      	movs	r2, #0
 8008282:	68f8      	ldr	r0, [r7, #12]
 8008284:	f003 fc05 	bl	800ba92 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008288:	2300      	movs	r3, #0
}
 800828a:	4618      	mov	r0, r3
 800828c:	3710      	adds	r7, #16
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}

08008292 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008292:	b580      	push	{r7, lr}
 8008294:	b088      	sub	sp, #32
 8008296:	af04      	add	r7, sp, #16
 8008298:	60f8      	str	r0, [r7, #12]
 800829a:	60b9      	str	r1, [r7, #8]
 800829c:	4611      	mov	r1, r2
 800829e:	461a      	mov	r2, r3
 80082a0:	460b      	mov	r3, r1
 80082a2:	80fb      	strh	r3, [r7, #6]
 80082a4:	4613      	mov	r3, r2
 80082a6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80082a8:	7979      	ldrb	r1, [r7, #5]
 80082aa:	2300      	movs	r3, #0
 80082ac:	9303      	str	r3, [sp, #12]
 80082ae:	88fb      	ldrh	r3, [r7, #6]
 80082b0:	9302      	str	r3, [sp, #8]
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	9301      	str	r3, [sp, #4]
 80082b6:	2301      	movs	r3, #1
 80082b8:	9300      	str	r3, [sp, #0]
 80082ba:	2300      	movs	r3, #0
 80082bc:	2201      	movs	r2, #1
 80082be:	68f8      	ldr	r0, [r7, #12]
 80082c0:	f003 fbe7 	bl	800ba92 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80082c4:	2300      	movs	r3, #0

}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3710      	adds	r7, #16
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}

080082ce <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b088      	sub	sp, #32
 80082d2:	af04      	add	r7, sp, #16
 80082d4:	60f8      	str	r0, [r7, #12]
 80082d6:	60b9      	str	r1, [r7, #8]
 80082d8:	4611      	mov	r1, r2
 80082da:	461a      	mov	r2, r3
 80082dc:	460b      	mov	r3, r1
 80082de:	80fb      	strh	r3, [r7, #6]
 80082e0:	4613      	mov	r3, r2
 80082e2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d001      	beq.n	80082f2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80082ee:	2300      	movs	r3, #0
 80082f0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80082f2:	7979      	ldrb	r1, [r7, #5]
 80082f4:	7e3b      	ldrb	r3, [r7, #24]
 80082f6:	9303      	str	r3, [sp, #12]
 80082f8:	88fb      	ldrh	r3, [r7, #6]
 80082fa:	9302      	str	r3, [sp, #8]
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	9301      	str	r3, [sp, #4]
 8008300:	2301      	movs	r3, #1
 8008302:	9300      	str	r3, [sp, #0]
 8008304:	2302      	movs	r3, #2
 8008306:	2200      	movs	r2, #0
 8008308:	68f8      	ldr	r0, [r7, #12]
 800830a:	f003 fbc2 	bl	800ba92 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800830e:	2300      	movs	r3, #0
}
 8008310:	4618      	mov	r0, r3
 8008312:	3710      	adds	r7, #16
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b088      	sub	sp, #32
 800831c:	af04      	add	r7, sp, #16
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	60b9      	str	r1, [r7, #8]
 8008322:	4611      	mov	r1, r2
 8008324:	461a      	mov	r2, r3
 8008326:	460b      	mov	r3, r1
 8008328:	80fb      	strh	r3, [r7, #6]
 800832a:	4613      	mov	r3, r2
 800832c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800832e:	7979      	ldrb	r1, [r7, #5]
 8008330:	2300      	movs	r3, #0
 8008332:	9303      	str	r3, [sp, #12]
 8008334:	88fb      	ldrh	r3, [r7, #6]
 8008336:	9302      	str	r3, [sp, #8]
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	9301      	str	r3, [sp, #4]
 800833c:	2301      	movs	r3, #1
 800833e:	9300      	str	r3, [sp, #0]
 8008340:	2302      	movs	r3, #2
 8008342:	2201      	movs	r2, #1
 8008344:	68f8      	ldr	r0, [r7, #12]
 8008346:	f003 fba4 	bl	800ba92 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800834a:	2300      	movs	r3, #0
}
 800834c:	4618      	mov	r0, r3
 800834e:	3710      	adds	r7, #16
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b086      	sub	sp, #24
 8008358:	af04      	add	r7, sp, #16
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	4608      	mov	r0, r1
 800835e:	4611      	mov	r1, r2
 8008360:	461a      	mov	r2, r3
 8008362:	4603      	mov	r3, r0
 8008364:	70fb      	strb	r3, [r7, #3]
 8008366:	460b      	mov	r3, r1
 8008368:	70bb      	strb	r3, [r7, #2]
 800836a:	4613      	mov	r3, r2
 800836c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800836e:	7878      	ldrb	r0, [r7, #1]
 8008370:	78ba      	ldrb	r2, [r7, #2]
 8008372:	78f9      	ldrb	r1, [r7, #3]
 8008374:	8b3b      	ldrh	r3, [r7, #24]
 8008376:	9302      	str	r3, [sp, #8]
 8008378:	7d3b      	ldrb	r3, [r7, #20]
 800837a:	9301      	str	r3, [sp, #4]
 800837c:	7c3b      	ldrb	r3, [r7, #16]
 800837e:	9300      	str	r3, [sp, #0]
 8008380:	4603      	mov	r3, r0
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f003 fb37 	bl	800b9f6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008388:	2300      	movs	r3, #0
}
 800838a:	4618      	mov	r0, r3
 800838c:	3708      	adds	r7, #8
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}

08008392 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008392:	b580      	push	{r7, lr}
 8008394:	b082      	sub	sp, #8
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
 800839a:	460b      	mov	r3, r1
 800839c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800839e:	78fb      	ldrb	r3, [r7, #3]
 80083a0:	4619      	mov	r1, r3
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f003 fb56 	bl	800ba54 <USBH_LL_ClosePipe>

  return USBH_OK;
 80083a8:	2300      	movs	r3, #0
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3708      	adds	r7, #8
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}

080083b2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80083b2:	b580      	push	{r7, lr}
 80083b4:	b084      	sub	sp, #16
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
 80083ba:	460b      	mov	r3, r1
 80083bc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 f836 	bl	8008430 <USBH_GetFreePipe>
 80083c4:	4603      	mov	r3, r0
 80083c6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80083c8:	89fb      	ldrh	r3, [r7, #14]
 80083ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d00a      	beq.n	80083e8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80083d2:	78fa      	ldrb	r2, [r7, #3]
 80083d4:	89fb      	ldrh	r3, [r7, #14]
 80083d6:	f003 030f 	and.w	r3, r3, #15
 80083da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80083de:	6879      	ldr	r1, [r7, #4]
 80083e0:	33e0      	adds	r3, #224	; 0xe0
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	440b      	add	r3, r1
 80083e6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80083e8:	89fb      	ldrh	r3, [r7, #14]
 80083ea:	b2db      	uxtb	r3, r3
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3710      	adds	r7, #16
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b083      	sub	sp, #12
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	460b      	mov	r3, r1
 80083fe:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008400:	78fb      	ldrb	r3, [r7, #3]
 8008402:	2b0f      	cmp	r3, #15
 8008404:	d80d      	bhi.n	8008422 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008406:	78fb      	ldrb	r3, [r7, #3]
 8008408:	687a      	ldr	r2, [r7, #4]
 800840a:	33e0      	adds	r3, #224	; 0xe0
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	4413      	add	r3, r2
 8008410:	685a      	ldr	r2, [r3, #4]
 8008412:	78fb      	ldrb	r3, [r7, #3]
 8008414:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008418:	6879      	ldr	r1, [r7, #4]
 800841a:	33e0      	adds	r3, #224	; 0xe0
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	440b      	add	r3, r1
 8008420:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008422:	2300      	movs	r3, #0
}
 8008424:	4618      	mov	r0, r3
 8008426:	370c      	adds	r7, #12
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr

08008430 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008430:	b480      	push	{r7}
 8008432:	b085      	sub	sp, #20
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008438:	2300      	movs	r3, #0
 800843a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800843c:	2300      	movs	r3, #0
 800843e:	73fb      	strb	r3, [r7, #15]
 8008440:	e00f      	b.n	8008462 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008442:	7bfb      	ldrb	r3, [r7, #15]
 8008444:	687a      	ldr	r2, [r7, #4]
 8008446:	33e0      	adds	r3, #224	; 0xe0
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	4413      	add	r3, r2
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008452:	2b00      	cmp	r3, #0
 8008454:	d102      	bne.n	800845c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008456:	7bfb      	ldrb	r3, [r7, #15]
 8008458:	b29b      	uxth	r3, r3
 800845a:	e007      	b.n	800846c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800845c:	7bfb      	ldrb	r3, [r7, #15]
 800845e:	3301      	adds	r3, #1
 8008460:	73fb      	strb	r3, [r7, #15]
 8008462:	7bfb      	ldrb	r3, [r7, #15]
 8008464:	2b0f      	cmp	r3, #15
 8008466:	d9ec      	bls.n	8008442 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008468:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800846c:	4618      	mov	r0, r3
 800846e:	3714      	adds	r7, #20
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr

08008478 <__NVIC_SetPriority>:
{
 8008478:	b480      	push	{r7}
 800847a:	b083      	sub	sp, #12
 800847c:	af00      	add	r7, sp, #0
 800847e:	4603      	mov	r3, r0
 8008480:	6039      	str	r1, [r7, #0]
 8008482:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008488:	2b00      	cmp	r3, #0
 800848a:	db0a      	blt.n	80084a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	b2da      	uxtb	r2, r3
 8008490:	490c      	ldr	r1, [pc, #48]	; (80084c4 <__NVIC_SetPriority+0x4c>)
 8008492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008496:	0112      	lsls	r2, r2, #4
 8008498:	b2d2      	uxtb	r2, r2
 800849a:	440b      	add	r3, r1
 800849c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80084a0:	e00a      	b.n	80084b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	b2da      	uxtb	r2, r3
 80084a6:	4908      	ldr	r1, [pc, #32]	; (80084c8 <__NVIC_SetPriority+0x50>)
 80084a8:	79fb      	ldrb	r3, [r7, #7]
 80084aa:	f003 030f 	and.w	r3, r3, #15
 80084ae:	3b04      	subs	r3, #4
 80084b0:	0112      	lsls	r2, r2, #4
 80084b2:	b2d2      	uxtb	r2, r2
 80084b4:	440b      	add	r3, r1
 80084b6:	761a      	strb	r2, [r3, #24]
}
 80084b8:	bf00      	nop
 80084ba:	370c      	adds	r7, #12
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr
 80084c4:	e000e100 	.word	0xe000e100
 80084c8:	e000ed00 	.word	0xe000ed00

080084cc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80084cc:	b580      	push	{r7, lr}
 80084ce:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80084d0:	2100      	movs	r1, #0
 80084d2:	f06f 0004 	mvn.w	r0, #4
 80084d6:	f7ff ffcf 	bl	8008478 <__NVIC_SetPriority>
#endif
}
 80084da:	bf00      	nop
 80084dc:	bd80      	pop	{r7, pc}
	...

080084e0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084e6:	f3ef 8305 	mrs	r3, IPSR
 80084ea:	603b      	str	r3, [r7, #0]
  return(result);
 80084ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d003      	beq.n	80084fa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80084f2:	f06f 0305 	mvn.w	r3, #5
 80084f6:	607b      	str	r3, [r7, #4]
 80084f8:	e00c      	b.n	8008514 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80084fa:	4b0a      	ldr	r3, [pc, #40]	; (8008524 <osKernelInitialize+0x44>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d105      	bne.n	800850e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008502:	4b08      	ldr	r3, [pc, #32]	; (8008524 <osKernelInitialize+0x44>)
 8008504:	2201      	movs	r2, #1
 8008506:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008508:	2300      	movs	r3, #0
 800850a:	607b      	str	r3, [r7, #4]
 800850c:	e002      	b.n	8008514 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800850e:	f04f 33ff 	mov.w	r3, #4294967295
 8008512:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008514:	687b      	ldr	r3, [r7, #4]
}
 8008516:	4618      	mov	r0, r3
 8008518:	370c      	adds	r7, #12
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr
 8008522:	bf00      	nop
 8008524:	20000234 	.word	0x20000234

08008528 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008528:	b580      	push	{r7, lr}
 800852a:	b082      	sub	sp, #8
 800852c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800852e:	f3ef 8305 	mrs	r3, IPSR
 8008532:	603b      	str	r3, [r7, #0]
  return(result);
 8008534:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008536:	2b00      	cmp	r3, #0
 8008538:	d003      	beq.n	8008542 <osKernelStart+0x1a>
    stat = osErrorISR;
 800853a:	f06f 0305 	mvn.w	r3, #5
 800853e:	607b      	str	r3, [r7, #4]
 8008540:	e010      	b.n	8008564 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008542:	4b0b      	ldr	r3, [pc, #44]	; (8008570 <osKernelStart+0x48>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	2b01      	cmp	r3, #1
 8008548:	d109      	bne.n	800855e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800854a:	f7ff ffbf 	bl	80084cc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800854e:	4b08      	ldr	r3, [pc, #32]	; (8008570 <osKernelStart+0x48>)
 8008550:	2202      	movs	r2, #2
 8008552:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008554:	f001 fb10 	bl	8009b78 <vTaskStartScheduler>
      stat = osOK;
 8008558:	2300      	movs	r3, #0
 800855a:	607b      	str	r3, [r7, #4]
 800855c:	e002      	b.n	8008564 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800855e:	f04f 33ff 	mov.w	r3, #4294967295
 8008562:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008564:	687b      	ldr	r3, [r7, #4]
}
 8008566:	4618      	mov	r0, r3
 8008568:	3708      	adds	r7, #8
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}
 800856e:	bf00      	nop
 8008570:	20000234 	.word	0x20000234

08008574 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008574:	b580      	push	{r7, lr}
 8008576:	b08e      	sub	sp, #56	; 0x38
 8008578:	af04      	add	r7, sp, #16
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	60b9      	str	r1, [r7, #8]
 800857e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008580:	2300      	movs	r3, #0
 8008582:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008584:	f3ef 8305 	mrs	r3, IPSR
 8008588:	617b      	str	r3, [r7, #20]
  return(result);
 800858a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800858c:	2b00      	cmp	r3, #0
 800858e:	d17e      	bne.n	800868e <osThreadNew+0x11a>
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d07b      	beq.n	800868e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008596:	2380      	movs	r3, #128	; 0x80
 8008598:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800859a:	2318      	movs	r3, #24
 800859c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800859e:	2300      	movs	r3, #0
 80085a0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80085a2:	f04f 33ff 	mov.w	r3, #4294967295
 80085a6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d045      	beq.n	800863a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d002      	beq.n	80085bc <osThreadNew+0x48>
        name = attr->name;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	699b      	ldr	r3, [r3, #24]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d002      	beq.n	80085ca <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	699b      	ldr	r3, [r3, #24]
 80085c8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80085ca:	69fb      	ldr	r3, [r7, #28]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d008      	beq.n	80085e2 <osThreadNew+0x6e>
 80085d0:	69fb      	ldr	r3, [r7, #28]
 80085d2:	2b38      	cmp	r3, #56	; 0x38
 80085d4:	d805      	bhi.n	80085e2 <osThreadNew+0x6e>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	f003 0301 	and.w	r3, r3, #1
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d001      	beq.n	80085e6 <osThreadNew+0x72>
        return (NULL);
 80085e2:	2300      	movs	r3, #0
 80085e4:	e054      	b.n	8008690 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	695b      	ldr	r3, [r3, #20]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d003      	beq.n	80085f6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	695b      	ldr	r3, [r3, #20]
 80085f2:	089b      	lsrs	r3, r3, #2
 80085f4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d00e      	beq.n	800861c <osThreadNew+0xa8>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	68db      	ldr	r3, [r3, #12]
 8008602:	2b5b      	cmp	r3, #91	; 0x5b
 8008604:	d90a      	bls.n	800861c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800860a:	2b00      	cmp	r3, #0
 800860c:	d006      	beq.n	800861c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	695b      	ldr	r3, [r3, #20]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d002      	beq.n	800861c <osThreadNew+0xa8>
        mem = 1;
 8008616:	2301      	movs	r3, #1
 8008618:	61bb      	str	r3, [r7, #24]
 800861a:	e010      	b.n	800863e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d10c      	bne.n	800863e <osThreadNew+0xca>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d108      	bne.n	800863e <osThreadNew+0xca>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	691b      	ldr	r3, [r3, #16]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d104      	bne.n	800863e <osThreadNew+0xca>
          mem = 0;
 8008634:	2300      	movs	r3, #0
 8008636:	61bb      	str	r3, [r7, #24]
 8008638:	e001      	b.n	800863e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800863a:	2300      	movs	r3, #0
 800863c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800863e:	69bb      	ldr	r3, [r7, #24]
 8008640:	2b01      	cmp	r3, #1
 8008642:	d110      	bne.n	8008666 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008648:	687a      	ldr	r2, [r7, #4]
 800864a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800864c:	9202      	str	r2, [sp, #8]
 800864e:	9301      	str	r3, [sp, #4]
 8008650:	69fb      	ldr	r3, [r7, #28]
 8008652:	9300      	str	r3, [sp, #0]
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	6a3a      	ldr	r2, [r7, #32]
 8008658:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800865a:	68f8      	ldr	r0, [r7, #12]
 800865c:	f001 f8b6 	bl	80097cc <xTaskCreateStatic>
 8008660:	4603      	mov	r3, r0
 8008662:	613b      	str	r3, [r7, #16]
 8008664:	e013      	b.n	800868e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d110      	bne.n	800868e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800866c:	6a3b      	ldr	r3, [r7, #32]
 800866e:	b29a      	uxth	r2, r3
 8008670:	f107 0310 	add.w	r3, r7, #16
 8008674:	9301      	str	r3, [sp, #4]
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	9300      	str	r3, [sp, #0]
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800867e:	68f8      	ldr	r0, [r7, #12]
 8008680:	f001 f901 	bl	8009886 <xTaskCreate>
 8008684:	4603      	mov	r3, r0
 8008686:	2b01      	cmp	r3, #1
 8008688:	d001      	beq.n	800868e <osThreadNew+0x11a>
            hTask = NULL;
 800868a:	2300      	movs	r3, #0
 800868c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800868e:	693b      	ldr	r3, [r7, #16]
}
 8008690:	4618      	mov	r0, r3
 8008692:	3728      	adds	r7, #40	; 0x28
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008698:	b580      	push	{r7, lr}
 800869a:	b084      	sub	sp, #16
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086a0:	f3ef 8305 	mrs	r3, IPSR
 80086a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80086a6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d003      	beq.n	80086b4 <osDelay+0x1c>
    stat = osErrorISR;
 80086ac:	f06f 0305 	mvn.w	r3, #5
 80086b0:	60fb      	str	r3, [r7, #12]
 80086b2:	e007      	b.n	80086c4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80086b4:	2300      	movs	r3, #0
 80086b6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d002      	beq.n	80086c4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f001 fa26 	bl	8009b10 <vTaskDelay>
    }
  }

  return (stat);
 80086c4:	68fb      	ldr	r3, [r7, #12]
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3710      	adds	r7, #16
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}

080086ce <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 80086ce:	b580      	push	{r7, lr}
 80086d0:	b084      	sub	sp, #16
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f002 fb5e 	bl	800ad98 <pvTimerGetTimerID>
 80086dc:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d005      	beq.n	80086f0 <TimerCallback+0x22>
    callb->func (callb->arg);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	68fa      	ldr	r2, [r7, #12]
 80086ea:	6852      	ldr	r2, [r2, #4]
 80086ec:	4610      	mov	r0, r2
 80086ee:	4798      	blx	r3
  }
}
 80086f0:	bf00      	nop
 80086f2:	3710      	adds	r7, #16
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b08c      	sub	sp, #48	; 0x30
 80086fc:	af02      	add	r7, sp, #8
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	607a      	str	r2, [r7, #4]
 8008702:	603b      	str	r3, [r7, #0]
 8008704:	460b      	mov	r3, r1
 8008706:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8008708:	2300      	movs	r3, #0
 800870a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800870c:	f3ef 8305 	mrs	r3, IPSR
 8008710:	613b      	str	r3, [r7, #16]
  return(result);
 8008712:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8008714:	2b00      	cmp	r3, #0
 8008716:	d163      	bne.n	80087e0 <osTimerNew+0xe8>
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d060      	beq.n	80087e0 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800871e:	2008      	movs	r0, #8
 8008720:	f002 fdaa 	bl	800b278 <pvPortMalloc>
 8008724:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d059      	beq.n	80087e0 <osTimerNew+0xe8>
      callb->func = func;
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	68fa      	ldr	r2, [r7, #12]
 8008730:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8008738:	7afb      	ldrb	r3, [r7, #11]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d102      	bne.n	8008744 <osTimerNew+0x4c>
        reload = pdFALSE;
 800873e:	2300      	movs	r3, #0
 8008740:	61fb      	str	r3, [r7, #28]
 8008742:	e001      	b.n	8008748 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8008744:	2301      	movs	r3, #1
 8008746:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8008748:	f04f 33ff 	mov.w	r3, #4294967295
 800874c:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800874e:	2300      	movs	r3, #0
 8008750:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d01c      	beq.n	8008792 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d002      	beq.n	8008766 <osTimerNew+0x6e>
          name = attr->name;
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d006      	beq.n	800877c <osTimerNew+0x84>
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	68db      	ldr	r3, [r3, #12]
 8008772:	2b2b      	cmp	r3, #43	; 0x2b
 8008774:	d902      	bls.n	800877c <osTimerNew+0x84>
          mem = 1;
 8008776:	2301      	movs	r3, #1
 8008778:	61bb      	str	r3, [r7, #24]
 800877a:	e00c      	b.n	8008796 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	689b      	ldr	r3, [r3, #8]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d108      	bne.n	8008796 <osTimerNew+0x9e>
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d104      	bne.n	8008796 <osTimerNew+0x9e>
            mem = 0;
 800878c:	2300      	movs	r3, #0
 800878e:	61bb      	str	r3, [r7, #24]
 8008790:	e001      	b.n	8008796 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8008792:	2300      	movs	r3, #0
 8008794:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8008796:	69bb      	ldr	r3, [r7, #24]
 8008798:	2b01      	cmp	r3, #1
 800879a:	d10c      	bne.n	80087b6 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	689b      	ldr	r3, [r3, #8]
 80087a0:	9301      	str	r3, [sp, #4]
 80087a2:	4b12      	ldr	r3, [pc, #72]	; (80087ec <osTimerNew+0xf4>)
 80087a4:	9300      	str	r3, [sp, #0]
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	69fa      	ldr	r2, [r7, #28]
 80087aa:	2101      	movs	r1, #1
 80087ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80087ae:	f001 ff74 	bl	800a69a <xTimerCreateStatic>
 80087b2:	6238      	str	r0, [r7, #32]
 80087b4:	e00b      	b.n	80087ce <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 80087b6:	69bb      	ldr	r3, [r7, #24]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d108      	bne.n	80087ce <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80087bc:	4b0b      	ldr	r3, [pc, #44]	; (80087ec <osTimerNew+0xf4>)
 80087be:	9300      	str	r3, [sp, #0]
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	69fa      	ldr	r2, [r7, #28]
 80087c4:	2101      	movs	r1, #1
 80087c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80087c8:	f001 ff46 	bl	800a658 <xTimerCreate>
 80087cc:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 80087ce:	6a3b      	ldr	r3, [r7, #32]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d105      	bne.n	80087e0 <osTimerNew+0xe8>
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d002      	beq.n	80087e0 <osTimerNew+0xe8>
        vPortFree (callb);
 80087da:	6978      	ldr	r0, [r7, #20]
 80087dc:	f002 fe18 	bl	800b410 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80087e0:	6a3b      	ldr	r3, [r7, #32]
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3728      	adds	r7, #40	; 0x28
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	bf00      	nop
 80087ec:	080086cf 	.word	0x080086cf

080087f0 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b088      	sub	sp, #32
 80087f4:	af02      	add	r7, sp, #8
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087fe:	f3ef 8305 	mrs	r3, IPSR
 8008802:	60fb      	str	r3, [r7, #12]
  return(result);
 8008804:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008806:	2b00      	cmp	r3, #0
 8008808:	d003      	beq.n	8008812 <osTimerStart+0x22>
    stat = osErrorISR;
 800880a:	f06f 0305 	mvn.w	r3, #5
 800880e:	617b      	str	r3, [r7, #20]
 8008810:	e017      	b.n	8008842 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d103      	bne.n	8008820 <osTimerStart+0x30>
    stat = osErrorParameter;
 8008818:	f06f 0303 	mvn.w	r3, #3
 800881c:	617b      	str	r3, [r7, #20]
 800881e:	e010      	b.n	8008842 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8008820:	2300      	movs	r3, #0
 8008822:	9300      	str	r3, [sp, #0]
 8008824:	2300      	movs	r3, #0
 8008826:	683a      	ldr	r2, [r7, #0]
 8008828:	2104      	movs	r1, #4
 800882a:	6938      	ldr	r0, [r7, #16]
 800882c:	f001 ffae 	bl	800a78c <xTimerGenericCommand>
 8008830:	4603      	mov	r3, r0
 8008832:	2b01      	cmp	r3, #1
 8008834:	d102      	bne.n	800883c <osTimerStart+0x4c>
      stat = osOK;
 8008836:	2300      	movs	r3, #0
 8008838:	617b      	str	r3, [r7, #20]
 800883a:	e002      	b.n	8008842 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800883c:	f06f 0302 	mvn.w	r3, #2
 8008840:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008842:	697b      	ldr	r3, [r7, #20]
}
 8008844:	4618      	mov	r0, r3
 8008846:	3718      	adds	r7, #24
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800884c:	b580      	push	{r7, lr}
 800884e:	b08a      	sub	sp, #40	; 0x28
 8008850:	af02      	add	r7, sp, #8
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	60b9      	str	r1, [r7, #8]
 8008856:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008858:	2300      	movs	r3, #0
 800885a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800885c:	f3ef 8305 	mrs	r3, IPSR
 8008860:	613b      	str	r3, [r7, #16]
  return(result);
 8008862:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008864:	2b00      	cmp	r3, #0
 8008866:	d15f      	bne.n	8008928 <osMessageQueueNew+0xdc>
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d05c      	beq.n	8008928 <osMessageQueueNew+0xdc>
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d059      	beq.n	8008928 <osMessageQueueNew+0xdc>
    mem = -1;
 8008874:	f04f 33ff 	mov.w	r3, #4294967295
 8008878:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d029      	beq.n	80088d4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	689b      	ldr	r3, [r3, #8]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d012      	beq.n	80088ae <osMessageQueueNew+0x62>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	68db      	ldr	r3, [r3, #12]
 800888c:	2b4f      	cmp	r3, #79	; 0x4f
 800888e:	d90e      	bls.n	80088ae <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008894:	2b00      	cmp	r3, #0
 8008896:	d00a      	beq.n	80088ae <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	695a      	ldr	r2, [r3, #20]
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	68b9      	ldr	r1, [r7, #8]
 80088a0:	fb01 f303 	mul.w	r3, r1, r3
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d302      	bcc.n	80088ae <osMessageQueueNew+0x62>
        mem = 1;
 80088a8:	2301      	movs	r3, #1
 80088aa:	61bb      	str	r3, [r7, #24]
 80088ac:	e014      	b.n	80088d8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	689b      	ldr	r3, [r3, #8]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d110      	bne.n	80088d8 <osMessageQueueNew+0x8c>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	68db      	ldr	r3, [r3, #12]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d10c      	bne.n	80088d8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d108      	bne.n	80088d8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	695b      	ldr	r3, [r3, #20]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d104      	bne.n	80088d8 <osMessageQueueNew+0x8c>
          mem = 0;
 80088ce:	2300      	movs	r3, #0
 80088d0:	61bb      	str	r3, [r7, #24]
 80088d2:	e001      	b.n	80088d8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80088d4:	2300      	movs	r3, #0
 80088d6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80088d8:	69bb      	ldr	r3, [r7, #24]
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d10b      	bne.n	80088f6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	691a      	ldr	r2, [r3, #16]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	689b      	ldr	r3, [r3, #8]
 80088e6:	2100      	movs	r1, #0
 80088e8:	9100      	str	r1, [sp, #0]
 80088ea:	68b9      	ldr	r1, [r7, #8]
 80088ec:	68f8      	ldr	r0, [r7, #12]
 80088ee:	f000 fa2f 	bl	8008d50 <xQueueGenericCreateStatic>
 80088f2:	61f8      	str	r0, [r7, #28]
 80088f4:	e008      	b.n	8008908 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80088f6:	69bb      	ldr	r3, [r7, #24]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d105      	bne.n	8008908 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80088fc:	2200      	movs	r2, #0
 80088fe:	68b9      	ldr	r1, [r7, #8]
 8008900:	68f8      	ldr	r0, [r7, #12]
 8008902:	f000 fa9d 	bl	8008e40 <xQueueGenericCreate>
 8008906:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008908:	69fb      	ldr	r3, [r7, #28]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d00c      	beq.n	8008928 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d003      	beq.n	800891c <osMessageQueueNew+0xd0>
        name = attr->name;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	617b      	str	r3, [r7, #20]
 800891a:	e001      	b.n	8008920 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800891c:	2300      	movs	r3, #0
 800891e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008920:	6979      	ldr	r1, [r7, #20]
 8008922:	69f8      	ldr	r0, [r7, #28]
 8008924:	f000 fef4 	bl	8009710 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008928:	69fb      	ldr	r3, [r7, #28]
}
 800892a:	4618      	mov	r0, r3
 800892c:	3720      	adds	r7, #32
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
	...

08008934 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008934:	b580      	push	{r7, lr}
 8008936:	b088      	sub	sp, #32
 8008938:	af00      	add	r7, sp, #0
 800893a:	60f8      	str	r0, [r7, #12]
 800893c:	60b9      	str	r1, [r7, #8]
 800893e:	603b      	str	r3, [r7, #0]
 8008940:	4613      	mov	r3, r2
 8008942:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008948:	2300      	movs	r3, #0
 800894a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800894c:	f3ef 8305 	mrs	r3, IPSR
 8008950:	617b      	str	r3, [r7, #20]
  return(result);
 8008952:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008954:	2b00      	cmp	r3, #0
 8008956:	d028      	beq.n	80089aa <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008958:	69bb      	ldr	r3, [r7, #24]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d005      	beq.n	800896a <osMessageQueuePut+0x36>
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d002      	beq.n	800896a <osMessageQueuePut+0x36>
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d003      	beq.n	8008972 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800896a:	f06f 0303 	mvn.w	r3, #3
 800896e:	61fb      	str	r3, [r7, #28]
 8008970:	e038      	b.n	80089e4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008972:	2300      	movs	r3, #0
 8008974:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008976:	f107 0210 	add.w	r2, r7, #16
 800897a:	2300      	movs	r3, #0
 800897c:	68b9      	ldr	r1, [r7, #8]
 800897e:	69b8      	ldr	r0, [r7, #24]
 8008980:	f000 fbba 	bl	80090f8 <xQueueGenericSendFromISR>
 8008984:	4603      	mov	r3, r0
 8008986:	2b01      	cmp	r3, #1
 8008988:	d003      	beq.n	8008992 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800898a:	f06f 0302 	mvn.w	r3, #2
 800898e:	61fb      	str	r3, [r7, #28]
 8008990:	e028      	b.n	80089e4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d025      	beq.n	80089e4 <osMessageQueuePut+0xb0>
 8008998:	4b15      	ldr	r3, [pc, #84]	; (80089f0 <osMessageQueuePut+0xbc>)
 800899a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800899e:	601a      	str	r2, [r3, #0]
 80089a0:	f3bf 8f4f 	dsb	sy
 80089a4:	f3bf 8f6f 	isb	sy
 80089a8:	e01c      	b.n	80089e4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80089aa:	69bb      	ldr	r3, [r7, #24]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d002      	beq.n	80089b6 <osMessageQueuePut+0x82>
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d103      	bne.n	80089be <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80089b6:	f06f 0303 	mvn.w	r3, #3
 80089ba:	61fb      	str	r3, [r7, #28]
 80089bc:	e012      	b.n	80089e4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80089be:	2300      	movs	r3, #0
 80089c0:	683a      	ldr	r2, [r7, #0]
 80089c2:	68b9      	ldr	r1, [r7, #8]
 80089c4:	69b8      	ldr	r0, [r7, #24]
 80089c6:	f000 fa99 	bl	8008efc <xQueueGenericSend>
 80089ca:	4603      	mov	r3, r0
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d009      	beq.n	80089e4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d003      	beq.n	80089de <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80089d6:	f06f 0301 	mvn.w	r3, #1
 80089da:	61fb      	str	r3, [r7, #28]
 80089dc:	e002      	b.n	80089e4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80089de:	f06f 0302 	mvn.w	r3, #2
 80089e2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80089e4:	69fb      	ldr	r3, [r7, #28]
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3720      	adds	r7, #32
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	e000ed04 	.word	0xe000ed04

080089f4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b088      	sub	sp, #32
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	60b9      	str	r1, [r7, #8]
 80089fe:	607a      	str	r2, [r7, #4]
 8008a00:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008a06:	2300      	movs	r3, #0
 8008a08:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a0a:	f3ef 8305 	mrs	r3, IPSR
 8008a0e:	617b      	str	r3, [r7, #20]
  return(result);
 8008a10:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d028      	beq.n	8008a68 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008a16:	69bb      	ldr	r3, [r7, #24]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d005      	beq.n	8008a28 <osMessageQueueGet+0x34>
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d002      	beq.n	8008a28 <osMessageQueueGet+0x34>
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d003      	beq.n	8008a30 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8008a28:	f06f 0303 	mvn.w	r3, #3
 8008a2c:	61fb      	str	r3, [r7, #28]
 8008a2e:	e037      	b.n	8008aa0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008a30:	2300      	movs	r3, #0
 8008a32:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008a34:	f107 0310 	add.w	r3, r7, #16
 8008a38:	461a      	mov	r2, r3
 8008a3a:	68b9      	ldr	r1, [r7, #8]
 8008a3c:	69b8      	ldr	r0, [r7, #24]
 8008a3e:	f000 fcd7 	bl	80093f0 <xQueueReceiveFromISR>
 8008a42:	4603      	mov	r3, r0
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d003      	beq.n	8008a50 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008a48:	f06f 0302 	mvn.w	r3, #2
 8008a4c:	61fb      	str	r3, [r7, #28]
 8008a4e:	e027      	b.n	8008aa0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d024      	beq.n	8008aa0 <osMessageQueueGet+0xac>
 8008a56:	4b15      	ldr	r3, [pc, #84]	; (8008aac <osMessageQueueGet+0xb8>)
 8008a58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a5c:	601a      	str	r2, [r3, #0]
 8008a5e:	f3bf 8f4f 	dsb	sy
 8008a62:	f3bf 8f6f 	isb	sy
 8008a66:	e01b      	b.n	8008aa0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008a68:	69bb      	ldr	r3, [r7, #24]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d002      	beq.n	8008a74 <osMessageQueueGet+0x80>
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d103      	bne.n	8008a7c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008a74:	f06f 0303 	mvn.w	r3, #3
 8008a78:	61fb      	str	r3, [r7, #28]
 8008a7a:	e011      	b.n	8008aa0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008a7c:	683a      	ldr	r2, [r7, #0]
 8008a7e:	68b9      	ldr	r1, [r7, #8]
 8008a80:	69b8      	ldr	r0, [r7, #24]
 8008a82:	f000 fbd5 	bl	8009230 <xQueueReceive>
 8008a86:	4603      	mov	r3, r0
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	d009      	beq.n	8008aa0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d003      	beq.n	8008a9a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8008a92:	f06f 0301 	mvn.w	r3, #1
 8008a96:	61fb      	str	r3, [r7, #28]
 8008a98:	e002      	b.n	8008aa0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008a9a:	f06f 0302 	mvn.w	r3, #2
 8008a9e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008aa0:	69fb      	ldr	r3, [r7, #28]
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3720      	adds	r7, #32
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}
 8008aaa:	bf00      	nop
 8008aac:	e000ed04 	.word	0xe000ed04

08008ab0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008ab0:	b480      	push	{r7}
 8008ab2:	b085      	sub	sp, #20
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	60b9      	str	r1, [r7, #8]
 8008aba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	4a07      	ldr	r2, [pc, #28]	; (8008adc <vApplicationGetIdleTaskMemory+0x2c>)
 8008ac0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	4a06      	ldr	r2, [pc, #24]	; (8008ae0 <vApplicationGetIdleTaskMemory+0x30>)
 8008ac6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2280      	movs	r2, #128	; 0x80
 8008acc:	601a      	str	r2, [r3, #0]
}
 8008ace:	bf00      	nop
 8008ad0:	3714      	adds	r7, #20
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad8:	4770      	bx	lr
 8008ada:	bf00      	nop
 8008adc:	20000238 	.word	0x20000238
 8008ae0:	20000294 	.word	0x20000294

08008ae4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008ae4:	b480      	push	{r7}
 8008ae6:	b085      	sub	sp, #20
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	60f8      	str	r0, [r7, #12]
 8008aec:	60b9      	str	r1, [r7, #8]
 8008aee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	4a07      	ldr	r2, [pc, #28]	; (8008b10 <vApplicationGetTimerTaskMemory+0x2c>)
 8008af4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	4a06      	ldr	r2, [pc, #24]	; (8008b14 <vApplicationGetTimerTaskMemory+0x30>)
 8008afa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b02:	601a      	str	r2, [r3, #0]
}
 8008b04:	bf00      	nop
 8008b06:	3714      	adds	r7, #20
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr
 8008b10:	20000494 	.word	0x20000494
 8008b14:	200004f0 	.word	0x200004f0

08008b18 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b083      	sub	sp, #12
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f103 0208 	add.w	r2, r3, #8
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b30:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f103 0208 	add.w	r2, r3, #8
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f103 0208 	add.w	r2, r3, #8
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008b4c:	bf00      	nop
 8008b4e:	370c      	adds	r7, #12
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr

08008b58 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b083      	sub	sp, #12
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008b66:	bf00      	nop
 8008b68:	370c      	adds	r7, #12
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr

08008b72 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008b72:	b480      	push	{r7}
 8008b74:	b085      	sub	sp, #20
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	6078      	str	r0, [r7, #4]
 8008b7a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	68fa      	ldr	r2, [r7, #12]
 8008b86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	689a      	ldr	r2, [r3, #8]
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	683a      	ldr	r2, [r7, #0]
 8008b96:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	683a      	ldr	r2, [r7, #0]
 8008b9c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	1c5a      	adds	r2, r3, #1
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	601a      	str	r2, [r3, #0]
}
 8008bae:	bf00      	nop
 8008bb0:	3714      	adds	r7, #20
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr

08008bba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008bba:	b480      	push	{r7}
 8008bbc:	b085      	sub	sp, #20
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
 8008bc2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bd0:	d103      	bne.n	8008bda <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	691b      	ldr	r3, [r3, #16]
 8008bd6:	60fb      	str	r3, [r7, #12]
 8008bd8:	e00c      	b.n	8008bf4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	3308      	adds	r3, #8
 8008bde:	60fb      	str	r3, [r7, #12]
 8008be0:	e002      	b.n	8008be8 <vListInsert+0x2e>
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	60fb      	str	r3, [r7, #12]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	68ba      	ldr	r2, [r7, #8]
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d2f6      	bcs.n	8008be2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	685a      	ldr	r2, [r3, #4]
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	683a      	ldr	r2, [r7, #0]
 8008c02:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	68fa      	ldr	r2, [r7, #12]
 8008c08:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	683a      	ldr	r2, [r7, #0]
 8008c0e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	687a      	ldr	r2, [r7, #4]
 8008c14:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	1c5a      	adds	r2, r3, #1
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	601a      	str	r2, [r3, #0]
}
 8008c20:	bf00      	nop
 8008c22:	3714      	adds	r7, #20
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b085      	sub	sp, #20
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	691b      	ldr	r3, [r3, #16]
 8008c38:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	687a      	ldr	r2, [r7, #4]
 8008c40:	6892      	ldr	r2, [r2, #8]
 8008c42:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	689b      	ldr	r3, [r3, #8]
 8008c48:	687a      	ldr	r2, [r7, #4]
 8008c4a:	6852      	ldr	r2, [r2, #4]
 8008c4c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d103      	bne.n	8008c60 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	689a      	ldr	r2, [r3, #8]
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2200      	movs	r2, #0
 8008c64:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	1e5a      	subs	r2, r3, #1
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3714      	adds	r7, #20
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr

08008c80 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d10a      	bne.n	8008caa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c98:	f383 8811 	msr	BASEPRI, r3
 8008c9c:	f3bf 8f6f 	isb	sy
 8008ca0:	f3bf 8f4f 	dsb	sy
 8008ca4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008ca6:	bf00      	nop
 8008ca8:	e7fe      	b.n	8008ca8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008caa:	f002 f9c3 	bl	800b034 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cb6:	68f9      	ldr	r1, [r7, #12]
 8008cb8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008cba:	fb01 f303 	mul.w	r3, r1, r3
 8008cbe:	441a      	add	r2, r3
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681a      	ldr	r2, [r3, #0]
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681a      	ldr	r2, [r3, #0]
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cda:	3b01      	subs	r3, #1
 8008cdc:	68f9      	ldr	r1, [r7, #12]
 8008cde:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008ce0:	fb01 f303 	mul.w	r3, r1, r3
 8008ce4:	441a      	add	r2, r3
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	22ff      	movs	r2, #255	; 0xff
 8008cee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	22ff      	movs	r2, #255	; 0xff
 8008cf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d114      	bne.n	8008d2a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	691b      	ldr	r3, [r3, #16]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d01a      	beq.n	8008d3e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	3310      	adds	r3, #16
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f001 f9bd 	bl	800a08c <xTaskRemoveFromEventList>
 8008d12:	4603      	mov	r3, r0
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d012      	beq.n	8008d3e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008d18:	4b0c      	ldr	r3, [pc, #48]	; (8008d4c <xQueueGenericReset+0xcc>)
 8008d1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d1e:	601a      	str	r2, [r3, #0]
 8008d20:	f3bf 8f4f 	dsb	sy
 8008d24:	f3bf 8f6f 	isb	sy
 8008d28:	e009      	b.n	8008d3e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	3310      	adds	r3, #16
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f7ff fef2 	bl	8008b18 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	3324      	adds	r3, #36	; 0x24
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f7ff feed 	bl	8008b18 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008d3e:	f002 f9a9 	bl	800b094 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008d42:	2301      	movs	r3, #1
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3710      	adds	r7, #16
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}
 8008d4c:	e000ed04 	.word	0xe000ed04

08008d50 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b08e      	sub	sp, #56	; 0x38
 8008d54:	af02      	add	r7, sp, #8
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	60b9      	str	r1, [r7, #8]
 8008d5a:	607a      	str	r2, [r7, #4]
 8008d5c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d10a      	bne.n	8008d7a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d68:	f383 8811 	msr	BASEPRI, r3
 8008d6c:	f3bf 8f6f 	isb	sy
 8008d70:	f3bf 8f4f 	dsb	sy
 8008d74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008d76:	bf00      	nop
 8008d78:	e7fe      	b.n	8008d78 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d10a      	bne.n	8008d96 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d84:	f383 8811 	msr	BASEPRI, r3
 8008d88:	f3bf 8f6f 	isb	sy
 8008d8c:	f3bf 8f4f 	dsb	sy
 8008d90:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008d92:	bf00      	nop
 8008d94:	e7fe      	b.n	8008d94 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d002      	beq.n	8008da2 <xQueueGenericCreateStatic+0x52>
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d001      	beq.n	8008da6 <xQueueGenericCreateStatic+0x56>
 8008da2:	2301      	movs	r3, #1
 8008da4:	e000      	b.n	8008da8 <xQueueGenericCreateStatic+0x58>
 8008da6:	2300      	movs	r3, #0
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d10a      	bne.n	8008dc2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db0:	f383 8811 	msr	BASEPRI, r3
 8008db4:	f3bf 8f6f 	isb	sy
 8008db8:	f3bf 8f4f 	dsb	sy
 8008dbc:	623b      	str	r3, [r7, #32]
}
 8008dbe:	bf00      	nop
 8008dc0:	e7fe      	b.n	8008dc0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d102      	bne.n	8008dce <xQueueGenericCreateStatic+0x7e>
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d101      	bne.n	8008dd2 <xQueueGenericCreateStatic+0x82>
 8008dce:	2301      	movs	r3, #1
 8008dd0:	e000      	b.n	8008dd4 <xQueueGenericCreateStatic+0x84>
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d10a      	bne.n	8008dee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ddc:	f383 8811 	msr	BASEPRI, r3
 8008de0:	f3bf 8f6f 	isb	sy
 8008de4:	f3bf 8f4f 	dsb	sy
 8008de8:	61fb      	str	r3, [r7, #28]
}
 8008dea:	bf00      	nop
 8008dec:	e7fe      	b.n	8008dec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008dee:	2350      	movs	r3, #80	; 0x50
 8008df0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	2b50      	cmp	r3, #80	; 0x50
 8008df6:	d00a      	beq.n	8008e0e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dfc:	f383 8811 	msr	BASEPRI, r3
 8008e00:	f3bf 8f6f 	isb	sy
 8008e04:	f3bf 8f4f 	dsb	sy
 8008e08:	61bb      	str	r3, [r7, #24]
}
 8008e0a:	bf00      	nop
 8008e0c:	e7fe      	b.n	8008e0c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008e0e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d00d      	beq.n	8008e36 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008e22:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e28:	9300      	str	r3, [sp, #0]
 8008e2a:	4613      	mov	r3, r2
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	68b9      	ldr	r1, [r7, #8]
 8008e30:	68f8      	ldr	r0, [r7, #12]
 8008e32:	f000 f83f 	bl	8008eb4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3730      	adds	r7, #48	; 0x30
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b08a      	sub	sp, #40	; 0x28
 8008e44:	af02      	add	r7, sp, #8
 8008e46:	60f8      	str	r0, [r7, #12]
 8008e48:	60b9      	str	r1, [r7, #8]
 8008e4a:	4613      	mov	r3, r2
 8008e4c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d10a      	bne.n	8008e6a <xQueueGenericCreate+0x2a>
	__asm volatile
 8008e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e58:	f383 8811 	msr	BASEPRI, r3
 8008e5c:	f3bf 8f6f 	isb	sy
 8008e60:	f3bf 8f4f 	dsb	sy
 8008e64:	613b      	str	r3, [r7, #16]
}
 8008e66:	bf00      	nop
 8008e68:	e7fe      	b.n	8008e68 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	68ba      	ldr	r2, [r7, #8]
 8008e6e:	fb02 f303 	mul.w	r3, r2, r3
 8008e72:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008e74:	69fb      	ldr	r3, [r7, #28]
 8008e76:	3350      	adds	r3, #80	; 0x50
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f002 f9fd 	bl	800b278 <pvPortMalloc>
 8008e7e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008e80:	69bb      	ldr	r3, [r7, #24]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d011      	beq.n	8008eaa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008e86:	69bb      	ldr	r3, [r7, #24]
 8008e88:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	3350      	adds	r3, #80	; 0x50
 8008e8e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008e90:	69bb      	ldr	r3, [r7, #24]
 8008e92:	2200      	movs	r2, #0
 8008e94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008e98:	79fa      	ldrb	r2, [r7, #7]
 8008e9a:	69bb      	ldr	r3, [r7, #24]
 8008e9c:	9300      	str	r3, [sp, #0]
 8008e9e:	4613      	mov	r3, r2
 8008ea0:	697a      	ldr	r2, [r7, #20]
 8008ea2:	68b9      	ldr	r1, [r7, #8]
 8008ea4:	68f8      	ldr	r0, [r7, #12]
 8008ea6:	f000 f805 	bl	8008eb4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008eaa:	69bb      	ldr	r3, [r7, #24]
	}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3720      	adds	r7, #32
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b084      	sub	sp, #16
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	60f8      	str	r0, [r7, #12]
 8008ebc:	60b9      	str	r1, [r7, #8]
 8008ebe:	607a      	str	r2, [r7, #4]
 8008ec0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d103      	bne.n	8008ed0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008ec8:	69bb      	ldr	r3, [r7, #24]
 8008eca:	69ba      	ldr	r2, [r7, #24]
 8008ecc:	601a      	str	r2, [r3, #0]
 8008ece:	e002      	b.n	8008ed6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008ed0:	69bb      	ldr	r3, [r7, #24]
 8008ed2:	687a      	ldr	r2, [r7, #4]
 8008ed4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008ed6:	69bb      	ldr	r3, [r7, #24]
 8008ed8:	68fa      	ldr	r2, [r7, #12]
 8008eda:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008edc:	69bb      	ldr	r3, [r7, #24]
 8008ede:	68ba      	ldr	r2, [r7, #8]
 8008ee0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008ee2:	2101      	movs	r1, #1
 8008ee4:	69b8      	ldr	r0, [r7, #24]
 8008ee6:	f7ff fecb 	bl	8008c80 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008eea:	69bb      	ldr	r3, [r7, #24]
 8008eec:	78fa      	ldrb	r2, [r7, #3]
 8008eee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008ef2:	bf00      	nop
 8008ef4:	3710      	adds	r7, #16
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
	...

08008efc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b08e      	sub	sp, #56	; 0x38
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	60f8      	str	r0, [r7, #12]
 8008f04:	60b9      	str	r1, [r7, #8]
 8008f06:	607a      	str	r2, [r7, #4]
 8008f08:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d10a      	bne.n	8008f2e <xQueueGenericSend+0x32>
	__asm volatile
 8008f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f1c:	f383 8811 	msr	BASEPRI, r3
 8008f20:	f3bf 8f6f 	isb	sy
 8008f24:	f3bf 8f4f 	dsb	sy
 8008f28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008f2a:	bf00      	nop
 8008f2c:	e7fe      	b.n	8008f2c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d103      	bne.n	8008f3c <xQueueGenericSend+0x40>
 8008f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d101      	bne.n	8008f40 <xQueueGenericSend+0x44>
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	e000      	b.n	8008f42 <xQueueGenericSend+0x46>
 8008f40:	2300      	movs	r3, #0
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d10a      	bne.n	8008f5c <xQueueGenericSend+0x60>
	__asm volatile
 8008f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f4a:	f383 8811 	msr	BASEPRI, r3
 8008f4e:	f3bf 8f6f 	isb	sy
 8008f52:	f3bf 8f4f 	dsb	sy
 8008f56:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008f58:	bf00      	nop
 8008f5a:	e7fe      	b.n	8008f5a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	2b02      	cmp	r3, #2
 8008f60:	d103      	bne.n	8008f6a <xQueueGenericSend+0x6e>
 8008f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d101      	bne.n	8008f6e <xQueueGenericSend+0x72>
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	e000      	b.n	8008f70 <xQueueGenericSend+0x74>
 8008f6e:	2300      	movs	r3, #0
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d10a      	bne.n	8008f8a <xQueueGenericSend+0x8e>
	__asm volatile
 8008f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f78:	f383 8811 	msr	BASEPRI, r3
 8008f7c:	f3bf 8f6f 	isb	sy
 8008f80:	f3bf 8f4f 	dsb	sy
 8008f84:	623b      	str	r3, [r7, #32]
}
 8008f86:	bf00      	nop
 8008f88:	e7fe      	b.n	8008f88 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f8a:	f001 fa3d 	bl	800a408 <xTaskGetSchedulerState>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d102      	bne.n	8008f9a <xQueueGenericSend+0x9e>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d101      	bne.n	8008f9e <xQueueGenericSend+0xa2>
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	e000      	b.n	8008fa0 <xQueueGenericSend+0xa4>
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d10a      	bne.n	8008fba <xQueueGenericSend+0xbe>
	__asm volatile
 8008fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa8:	f383 8811 	msr	BASEPRI, r3
 8008fac:	f3bf 8f6f 	isb	sy
 8008fb0:	f3bf 8f4f 	dsb	sy
 8008fb4:	61fb      	str	r3, [r7, #28]
}
 8008fb6:	bf00      	nop
 8008fb8:	e7fe      	b.n	8008fb8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008fba:	f002 f83b 	bl	800b034 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d302      	bcc.n	8008fd0 <xQueueGenericSend+0xd4>
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	2b02      	cmp	r3, #2
 8008fce:	d129      	bne.n	8009024 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008fd0:	683a      	ldr	r2, [r7, #0]
 8008fd2:	68b9      	ldr	r1, [r7, #8]
 8008fd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008fd6:	f000 fa8b 	bl	80094f0 <prvCopyDataToQueue>
 8008fda:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d010      	beq.n	8009006 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe6:	3324      	adds	r3, #36	; 0x24
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f001 f84f 	bl	800a08c <xTaskRemoveFromEventList>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d013      	beq.n	800901c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008ff4:	4b3f      	ldr	r3, [pc, #252]	; (80090f4 <xQueueGenericSend+0x1f8>)
 8008ff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ffa:	601a      	str	r2, [r3, #0]
 8008ffc:	f3bf 8f4f 	dsb	sy
 8009000:	f3bf 8f6f 	isb	sy
 8009004:	e00a      	b.n	800901c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009008:	2b00      	cmp	r3, #0
 800900a:	d007      	beq.n	800901c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800900c:	4b39      	ldr	r3, [pc, #228]	; (80090f4 <xQueueGenericSend+0x1f8>)
 800900e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009012:	601a      	str	r2, [r3, #0]
 8009014:	f3bf 8f4f 	dsb	sy
 8009018:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800901c:	f002 f83a 	bl	800b094 <vPortExitCritical>
				return pdPASS;
 8009020:	2301      	movs	r3, #1
 8009022:	e063      	b.n	80090ec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d103      	bne.n	8009032 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800902a:	f002 f833 	bl	800b094 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800902e:	2300      	movs	r3, #0
 8009030:	e05c      	b.n	80090ec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009034:	2b00      	cmp	r3, #0
 8009036:	d106      	bne.n	8009046 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009038:	f107 0314 	add.w	r3, r7, #20
 800903c:	4618      	mov	r0, r3
 800903e:	f001 f889 	bl	800a154 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009042:	2301      	movs	r3, #1
 8009044:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009046:	f002 f825 	bl	800b094 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800904a:	f000 fdfb 	bl	8009c44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800904e:	f001 fff1 	bl	800b034 <vPortEnterCritical>
 8009052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009054:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009058:	b25b      	sxtb	r3, r3
 800905a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800905e:	d103      	bne.n	8009068 <xQueueGenericSend+0x16c>
 8009060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009062:	2200      	movs	r2, #0
 8009064:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800906a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800906e:	b25b      	sxtb	r3, r3
 8009070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009074:	d103      	bne.n	800907e <xQueueGenericSend+0x182>
 8009076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009078:	2200      	movs	r2, #0
 800907a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800907e:	f002 f809 	bl	800b094 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009082:	1d3a      	adds	r2, r7, #4
 8009084:	f107 0314 	add.w	r3, r7, #20
 8009088:	4611      	mov	r1, r2
 800908a:	4618      	mov	r0, r3
 800908c:	f001 f878 	bl	800a180 <xTaskCheckForTimeOut>
 8009090:	4603      	mov	r3, r0
 8009092:	2b00      	cmp	r3, #0
 8009094:	d124      	bne.n	80090e0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009096:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009098:	f000 fb22 	bl	80096e0 <prvIsQueueFull>
 800909c:	4603      	mov	r3, r0
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d018      	beq.n	80090d4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80090a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a4:	3310      	adds	r3, #16
 80090a6:	687a      	ldr	r2, [r7, #4]
 80090a8:	4611      	mov	r1, r2
 80090aa:	4618      	mov	r0, r3
 80090ac:	f000 ff9e 	bl	8009fec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80090b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090b2:	f000 faad 	bl	8009610 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80090b6:	f000 fdd3 	bl	8009c60 <xTaskResumeAll>
 80090ba:	4603      	mov	r3, r0
 80090bc:	2b00      	cmp	r3, #0
 80090be:	f47f af7c 	bne.w	8008fba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80090c2:	4b0c      	ldr	r3, [pc, #48]	; (80090f4 <xQueueGenericSend+0x1f8>)
 80090c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090c8:	601a      	str	r2, [r3, #0]
 80090ca:	f3bf 8f4f 	dsb	sy
 80090ce:	f3bf 8f6f 	isb	sy
 80090d2:	e772      	b.n	8008fba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80090d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090d6:	f000 fa9b 	bl	8009610 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80090da:	f000 fdc1 	bl	8009c60 <xTaskResumeAll>
 80090de:	e76c      	b.n	8008fba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80090e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090e2:	f000 fa95 	bl	8009610 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80090e6:	f000 fdbb 	bl	8009c60 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80090ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3738      	adds	r7, #56	; 0x38
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}
 80090f4:	e000ed04 	.word	0xe000ed04

080090f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b090      	sub	sp, #64	; 0x40
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	60f8      	str	r0, [r7, #12]
 8009100:	60b9      	str	r1, [r7, #8]
 8009102:	607a      	str	r2, [r7, #4]
 8009104:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800910a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800910c:	2b00      	cmp	r3, #0
 800910e:	d10a      	bne.n	8009126 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009114:	f383 8811 	msr	BASEPRI, r3
 8009118:	f3bf 8f6f 	isb	sy
 800911c:	f3bf 8f4f 	dsb	sy
 8009120:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009122:	bf00      	nop
 8009124:	e7fe      	b.n	8009124 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d103      	bne.n	8009134 <xQueueGenericSendFromISR+0x3c>
 800912c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800912e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009130:	2b00      	cmp	r3, #0
 8009132:	d101      	bne.n	8009138 <xQueueGenericSendFromISR+0x40>
 8009134:	2301      	movs	r3, #1
 8009136:	e000      	b.n	800913a <xQueueGenericSendFromISR+0x42>
 8009138:	2300      	movs	r3, #0
 800913a:	2b00      	cmp	r3, #0
 800913c:	d10a      	bne.n	8009154 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800913e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009142:	f383 8811 	msr	BASEPRI, r3
 8009146:	f3bf 8f6f 	isb	sy
 800914a:	f3bf 8f4f 	dsb	sy
 800914e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009150:	bf00      	nop
 8009152:	e7fe      	b.n	8009152 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	2b02      	cmp	r3, #2
 8009158:	d103      	bne.n	8009162 <xQueueGenericSendFromISR+0x6a>
 800915a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800915c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800915e:	2b01      	cmp	r3, #1
 8009160:	d101      	bne.n	8009166 <xQueueGenericSendFromISR+0x6e>
 8009162:	2301      	movs	r3, #1
 8009164:	e000      	b.n	8009168 <xQueueGenericSendFromISR+0x70>
 8009166:	2300      	movs	r3, #0
 8009168:	2b00      	cmp	r3, #0
 800916a:	d10a      	bne.n	8009182 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800916c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009170:	f383 8811 	msr	BASEPRI, r3
 8009174:	f3bf 8f6f 	isb	sy
 8009178:	f3bf 8f4f 	dsb	sy
 800917c:	623b      	str	r3, [r7, #32]
}
 800917e:	bf00      	nop
 8009180:	e7fe      	b.n	8009180 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009182:	f002 f839 	bl	800b1f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009186:	f3ef 8211 	mrs	r2, BASEPRI
 800918a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800918e:	f383 8811 	msr	BASEPRI, r3
 8009192:	f3bf 8f6f 	isb	sy
 8009196:	f3bf 8f4f 	dsb	sy
 800919a:	61fa      	str	r2, [r7, #28]
 800919c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800919e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80091a0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80091a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d302      	bcc.n	80091b4 <xQueueGenericSendFromISR+0xbc>
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	2b02      	cmp	r3, #2
 80091b2:	d12f      	bne.n	8009214 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80091b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80091be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091c2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80091c4:	683a      	ldr	r2, [r7, #0]
 80091c6:	68b9      	ldr	r1, [r7, #8]
 80091c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80091ca:	f000 f991 	bl	80094f0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80091ce:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80091d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091d6:	d112      	bne.n	80091fe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80091d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d016      	beq.n	800920e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80091e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e2:	3324      	adds	r3, #36	; 0x24
 80091e4:	4618      	mov	r0, r3
 80091e6:	f000 ff51 	bl	800a08c <xTaskRemoveFromEventList>
 80091ea:	4603      	mov	r3, r0
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d00e      	beq.n	800920e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d00b      	beq.n	800920e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2201      	movs	r2, #1
 80091fa:	601a      	str	r2, [r3, #0]
 80091fc:	e007      	b.n	800920e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80091fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009202:	3301      	adds	r3, #1
 8009204:	b2db      	uxtb	r3, r3
 8009206:	b25a      	sxtb	r2, r3
 8009208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800920a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800920e:	2301      	movs	r3, #1
 8009210:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009212:	e001      	b.n	8009218 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009214:	2300      	movs	r3, #0
 8009216:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800921a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009222:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009226:	4618      	mov	r0, r3
 8009228:	3740      	adds	r7, #64	; 0x40
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}
	...

08009230 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b08c      	sub	sp, #48	; 0x30
 8009234:	af00      	add	r7, sp, #0
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	60b9      	str	r1, [r7, #8]
 800923a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800923c:	2300      	movs	r3, #0
 800923e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009246:	2b00      	cmp	r3, #0
 8009248:	d10a      	bne.n	8009260 <xQueueReceive+0x30>
	__asm volatile
 800924a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800924e:	f383 8811 	msr	BASEPRI, r3
 8009252:	f3bf 8f6f 	isb	sy
 8009256:	f3bf 8f4f 	dsb	sy
 800925a:	623b      	str	r3, [r7, #32]
}
 800925c:	bf00      	nop
 800925e:	e7fe      	b.n	800925e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d103      	bne.n	800926e <xQueueReceive+0x3e>
 8009266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800926a:	2b00      	cmp	r3, #0
 800926c:	d101      	bne.n	8009272 <xQueueReceive+0x42>
 800926e:	2301      	movs	r3, #1
 8009270:	e000      	b.n	8009274 <xQueueReceive+0x44>
 8009272:	2300      	movs	r3, #0
 8009274:	2b00      	cmp	r3, #0
 8009276:	d10a      	bne.n	800928e <xQueueReceive+0x5e>
	__asm volatile
 8009278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800927c:	f383 8811 	msr	BASEPRI, r3
 8009280:	f3bf 8f6f 	isb	sy
 8009284:	f3bf 8f4f 	dsb	sy
 8009288:	61fb      	str	r3, [r7, #28]
}
 800928a:	bf00      	nop
 800928c:	e7fe      	b.n	800928c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800928e:	f001 f8bb 	bl	800a408 <xTaskGetSchedulerState>
 8009292:	4603      	mov	r3, r0
 8009294:	2b00      	cmp	r3, #0
 8009296:	d102      	bne.n	800929e <xQueueReceive+0x6e>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d101      	bne.n	80092a2 <xQueueReceive+0x72>
 800929e:	2301      	movs	r3, #1
 80092a0:	e000      	b.n	80092a4 <xQueueReceive+0x74>
 80092a2:	2300      	movs	r3, #0
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d10a      	bne.n	80092be <xQueueReceive+0x8e>
	__asm volatile
 80092a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ac:	f383 8811 	msr	BASEPRI, r3
 80092b0:	f3bf 8f6f 	isb	sy
 80092b4:	f3bf 8f4f 	dsb	sy
 80092b8:	61bb      	str	r3, [r7, #24]
}
 80092ba:	bf00      	nop
 80092bc:	e7fe      	b.n	80092bc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80092be:	f001 feb9 	bl	800b034 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80092c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092c6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80092c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d01f      	beq.n	800930e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80092ce:	68b9      	ldr	r1, [r7, #8]
 80092d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092d2:	f000 f977 	bl	80095c4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80092d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d8:	1e5a      	subs	r2, r3, #1
 80092da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092dc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e0:	691b      	ldr	r3, [r3, #16]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d00f      	beq.n	8009306 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80092e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e8:	3310      	adds	r3, #16
 80092ea:	4618      	mov	r0, r3
 80092ec:	f000 fece 	bl	800a08c <xTaskRemoveFromEventList>
 80092f0:	4603      	mov	r3, r0
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d007      	beq.n	8009306 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80092f6:	4b3d      	ldr	r3, [pc, #244]	; (80093ec <xQueueReceive+0x1bc>)
 80092f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092fc:	601a      	str	r2, [r3, #0]
 80092fe:	f3bf 8f4f 	dsb	sy
 8009302:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009306:	f001 fec5 	bl	800b094 <vPortExitCritical>
				return pdPASS;
 800930a:	2301      	movs	r3, #1
 800930c:	e069      	b.n	80093e2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d103      	bne.n	800931c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009314:	f001 febe 	bl	800b094 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009318:	2300      	movs	r3, #0
 800931a:	e062      	b.n	80093e2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800931c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800931e:	2b00      	cmp	r3, #0
 8009320:	d106      	bne.n	8009330 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009322:	f107 0310 	add.w	r3, r7, #16
 8009326:	4618      	mov	r0, r3
 8009328:	f000 ff14 	bl	800a154 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800932c:	2301      	movs	r3, #1
 800932e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009330:	f001 feb0 	bl	800b094 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009334:	f000 fc86 	bl	8009c44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009338:	f001 fe7c 	bl	800b034 <vPortEnterCritical>
 800933c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800933e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009342:	b25b      	sxtb	r3, r3
 8009344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009348:	d103      	bne.n	8009352 <xQueueReceive+0x122>
 800934a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800934c:	2200      	movs	r2, #0
 800934e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009354:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009358:	b25b      	sxtb	r3, r3
 800935a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800935e:	d103      	bne.n	8009368 <xQueueReceive+0x138>
 8009360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009362:	2200      	movs	r2, #0
 8009364:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009368:	f001 fe94 	bl	800b094 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800936c:	1d3a      	adds	r2, r7, #4
 800936e:	f107 0310 	add.w	r3, r7, #16
 8009372:	4611      	mov	r1, r2
 8009374:	4618      	mov	r0, r3
 8009376:	f000 ff03 	bl	800a180 <xTaskCheckForTimeOut>
 800937a:	4603      	mov	r3, r0
 800937c:	2b00      	cmp	r3, #0
 800937e:	d123      	bne.n	80093c8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009380:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009382:	f000 f997 	bl	80096b4 <prvIsQueueEmpty>
 8009386:	4603      	mov	r3, r0
 8009388:	2b00      	cmp	r3, #0
 800938a:	d017      	beq.n	80093bc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800938c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800938e:	3324      	adds	r3, #36	; 0x24
 8009390:	687a      	ldr	r2, [r7, #4]
 8009392:	4611      	mov	r1, r2
 8009394:	4618      	mov	r0, r3
 8009396:	f000 fe29 	bl	8009fec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800939a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800939c:	f000 f938 	bl	8009610 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80093a0:	f000 fc5e 	bl	8009c60 <xTaskResumeAll>
 80093a4:	4603      	mov	r3, r0
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d189      	bne.n	80092be <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80093aa:	4b10      	ldr	r3, [pc, #64]	; (80093ec <xQueueReceive+0x1bc>)
 80093ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093b0:	601a      	str	r2, [r3, #0]
 80093b2:	f3bf 8f4f 	dsb	sy
 80093b6:	f3bf 8f6f 	isb	sy
 80093ba:	e780      	b.n	80092be <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80093bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093be:	f000 f927 	bl	8009610 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80093c2:	f000 fc4d 	bl	8009c60 <xTaskResumeAll>
 80093c6:	e77a      	b.n	80092be <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80093c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093ca:	f000 f921 	bl	8009610 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80093ce:	f000 fc47 	bl	8009c60 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80093d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093d4:	f000 f96e 	bl	80096b4 <prvIsQueueEmpty>
 80093d8:	4603      	mov	r3, r0
 80093da:	2b00      	cmp	r3, #0
 80093dc:	f43f af6f 	beq.w	80092be <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80093e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3730      	adds	r7, #48	; 0x30
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}
 80093ea:	bf00      	nop
 80093ec:	e000ed04 	.word	0xe000ed04

080093f0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b08e      	sub	sp, #56	; 0x38
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	60f8      	str	r0, [r7, #12]
 80093f8:	60b9      	str	r1, [r7, #8]
 80093fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009402:	2b00      	cmp	r3, #0
 8009404:	d10a      	bne.n	800941c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800940a:	f383 8811 	msr	BASEPRI, r3
 800940e:	f3bf 8f6f 	isb	sy
 8009412:	f3bf 8f4f 	dsb	sy
 8009416:	623b      	str	r3, [r7, #32]
}
 8009418:	bf00      	nop
 800941a:	e7fe      	b.n	800941a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d103      	bne.n	800942a <xQueueReceiveFromISR+0x3a>
 8009422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009426:	2b00      	cmp	r3, #0
 8009428:	d101      	bne.n	800942e <xQueueReceiveFromISR+0x3e>
 800942a:	2301      	movs	r3, #1
 800942c:	e000      	b.n	8009430 <xQueueReceiveFromISR+0x40>
 800942e:	2300      	movs	r3, #0
 8009430:	2b00      	cmp	r3, #0
 8009432:	d10a      	bne.n	800944a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009438:	f383 8811 	msr	BASEPRI, r3
 800943c:	f3bf 8f6f 	isb	sy
 8009440:	f3bf 8f4f 	dsb	sy
 8009444:	61fb      	str	r3, [r7, #28]
}
 8009446:	bf00      	nop
 8009448:	e7fe      	b.n	8009448 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800944a:	f001 fed5 	bl	800b1f8 <vPortValidateInterruptPriority>
	__asm volatile
 800944e:	f3ef 8211 	mrs	r2, BASEPRI
 8009452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009456:	f383 8811 	msr	BASEPRI, r3
 800945a:	f3bf 8f6f 	isb	sy
 800945e:	f3bf 8f4f 	dsb	sy
 8009462:	61ba      	str	r2, [r7, #24]
 8009464:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009466:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009468:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800946a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800946c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800946e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009472:	2b00      	cmp	r3, #0
 8009474:	d02f      	beq.n	80094d6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009478:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800947c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009480:	68b9      	ldr	r1, [r7, #8]
 8009482:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009484:	f000 f89e 	bl	80095c4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800948a:	1e5a      	subs	r2, r3, #1
 800948c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800948e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009490:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009498:	d112      	bne.n	80094c0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800949a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800949c:	691b      	ldr	r3, [r3, #16]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d016      	beq.n	80094d0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80094a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a4:	3310      	adds	r3, #16
 80094a6:	4618      	mov	r0, r3
 80094a8:	f000 fdf0 	bl	800a08c <xTaskRemoveFromEventList>
 80094ac:	4603      	mov	r3, r0
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d00e      	beq.n	80094d0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d00b      	beq.n	80094d0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2201      	movs	r2, #1
 80094bc:	601a      	str	r2, [r3, #0]
 80094be:	e007      	b.n	80094d0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80094c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094c4:	3301      	adds	r3, #1
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	b25a      	sxtb	r2, r3
 80094ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80094d0:	2301      	movs	r3, #1
 80094d2:	637b      	str	r3, [r7, #52]	; 0x34
 80094d4:	e001      	b.n	80094da <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80094d6:	2300      	movs	r3, #0
 80094d8:	637b      	str	r3, [r7, #52]	; 0x34
 80094da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094dc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	f383 8811 	msr	BASEPRI, r3
}
 80094e4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80094e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3738      	adds	r7, #56	; 0x38
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}

080094f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b086      	sub	sp, #24
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	60f8      	str	r0, [r7, #12]
 80094f8:	60b9      	str	r1, [r7, #8]
 80094fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80094fc:	2300      	movs	r3, #0
 80094fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009504:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800950a:	2b00      	cmp	r3, #0
 800950c:	d10d      	bne.n	800952a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d14d      	bne.n	80095b2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	689b      	ldr	r3, [r3, #8]
 800951a:	4618      	mov	r0, r3
 800951c:	f000 ff92 	bl	800a444 <xTaskPriorityDisinherit>
 8009520:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2200      	movs	r2, #0
 8009526:	609a      	str	r2, [r3, #8]
 8009528:	e043      	b.n	80095b2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d119      	bne.n	8009564 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	6858      	ldr	r0, [r3, #4]
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009538:	461a      	mov	r2, r3
 800953a:	68b9      	ldr	r1, [r7, #8]
 800953c:	f002 fbc2 	bl	800bcc4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	685a      	ldr	r2, [r3, #4]
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009548:	441a      	add	r2, r3
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	685a      	ldr	r2, [r3, #4]
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	689b      	ldr	r3, [r3, #8]
 8009556:	429a      	cmp	r2, r3
 8009558:	d32b      	bcc.n	80095b2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681a      	ldr	r2, [r3, #0]
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	605a      	str	r2, [r3, #4]
 8009562:	e026      	b.n	80095b2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	68d8      	ldr	r0, [r3, #12]
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800956c:	461a      	mov	r2, r3
 800956e:	68b9      	ldr	r1, [r7, #8]
 8009570:	f002 fba8 	bl	800bcc4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	68da      	ldr	r2, [r3, #12]
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800957c:	425b      	negs	r3, r3
 800957e:	441a      	add	r2, r3
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	68da      	ldr	r2, [r3, #12]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	429a      	cmp	r2, r3
 800958e:	d207      	bcs.n	80095a0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	689a      	ldr	r2, [r3, #8]
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009598:	425b      	negs	r3, r3
 800959a:	441a      	add	r2, r3
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2b02      	cmp	r3, #2
 80095a4:	d105      	bne.n	80095b2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d002      	beq.n	80095b2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	3b01      	subs	r3, #1
 80095b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	1c5a      	adds	r2, r3, #1
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80095ba:	697b      	ldr	r3, [r7, #20]
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3718      	adds	r7, #24
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d018      	beq.n	8009608 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	68da      	ldr	r2, [r3, #12]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095de:	441a      	add	r2, r3
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	68da      	ldr	r2, [r3, #12]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	689b      	ldr	r3, [r3, #8]
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d303      	bcc.n	80095f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	68d9      	ldr	r1, [r3, #12]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009600:	461a      	mov	r2, r3
 8009602:	6838      	ldr	r0, [r7, #0]
 8009604:	f002 fb5e 	bl	800bcc4 <memcpy>
	}
}
 8009608:	bf00      	nop
 800960a:	3708      	adds	r7, #8
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b084      	sub	sp, #16
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009618:	f001 fd0c 	bl	800b034 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009622:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009624:	e011      	b.n	800964a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800962a:	2b00      	cmp	r3, #0
 800962c:	d012      	beq.n	8009654 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	3324      	adds	r3, #36	; 0x24
 8009632:	4618      	mov	r0, r3
 8009634:	f000 fd2a 	bl	800a08c <xTaskRemoveFromEventList>
 8009638:	4603      	mov	r3, r0
 800963a:	2b00      	cmp	r3, #0
 800963c:	d001      	beq.n	8009642 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800963e:	f000 fe01 	bl	800a244 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009642:	7bfb      	ldrb	r3, [r7, #15]
 8009644:	3b01      	subs	r3, #1
 8009646:	b2db      	uxtb	r3, r3
 8009648:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800964a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800964e:	2b00      	cmp	r3, #0
 8009650:	dce9      	bgt.n	8009626 <prvUnlockQueue+0x16>
 8009652:	e000      	b.n	8009656 <prvUnlockQueue+0x46>
					break;
 8009654:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	22ff      	movs	r2, #255	; 0xff
 800965a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800965e:	f001 fd19 	bl	800b094 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009662:	f001 fce7 	bl	800b034 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800966c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800966e:	e011      	b.n	8009694 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	691b      	ldr	r3, [r3, #16]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d012      	beq.n	800969e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	3310      	adds	r3, #16
 800967c:	4618      	mov	r0, r3
 800967e:	f000 fd05 	bl	800a08c <xTaskRemoveFromEventList>
 8009682:	4603      	mov	r3, r0
 8009684:	2b00      	cmp	r3, #0
 8009686:	d001      	beq.n	800968c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009688:	f000 fddc 	bl	800a244 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800968c:	7bbb      	ldrb	r3, [r7, #14]
 800968e:	3b01      	subs	r3, #1
 8009690:	b2db      	uxtb	r3, r3
 8009692:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009694:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009698:	2b00      	cmp	r3, #0
 800969a:	dce9      	bgt.n	8009670 <prvUnlockQueue+0x60>
 800969c:	e000      	b.n	80096a0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800969e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	22ff      	movs	r2, #255	; 0xff
 80096a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80096a8:	f001 fcf4 	bl	800b094 <vPortExitCritical>
}
 80096ac:	bf00      	nop
 80096ae:	3710      	adds	r7, #16
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}

080096b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b084      	sub	sp, #16
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80096bc:	f001 fcba 	bl	800b034 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d102      	bne.n	80096ce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80096c8:	2301      	movs	r3, #1
 80096ca:	60fb      	str	r3, [r7, #12]
 80096cc:	e001      	b.n	80096d2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80096ce:	2300      	movs	r3, #0
 80096d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80096d2:	f001 fcdf 	bl	800b094 <vPortExitCritical>

	return xReturn;
 80096d6:	68fb      	ldr	r3, [r7, #12]
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3710      	adds	r7, #16
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}

080096e0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80096e8:	f001 fca4 	bl	800b034 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096f4:	429a      	cmp	r2, r3
 80096f6:	d102      	bne.n	80096fe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80096f8:	2301      	movs	r3, #1
 80096fa:	60fb      	str	r3, [r7, #12]
 80096fc:	e001      	b.n	8009702 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80096fe:	2300      	movs	r3, #0
 8009700:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009702:	f001 fcc7 	bl	800b094 <vPortExitCritical>

	return xReturn;
 8009706:	68fb      	ldr	r3, [r7, #12]
}
 8009708:	4618      	mov	r0, r3
 800970a:	3710      	adds	r7, #16
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}

08009710 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009710:	b480      	push	{r7}
 8009712:	b085      	sub	sp, #20
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800971a:	2300      	movs	r3, #0
 800971c:	60fb      	str	r3, [r7, #12]
 800971e:	e014      	b.n	800974a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009720:	4a0f      	ldr	r2, [pc, #60]	; (8009760 <vQueueAddToRegistry+0x50>)
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d10b      	bne.n	8009744 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800972c:	490c      	ldr	r1, [pc, #48]	; (8009760 <vQueueAddToRegistry+0x50>)
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	683a      	ldr	r2, [r7, #0]
 8009732:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009736:	4a0a      	ldr	r2, [pc, #40]	; (8009760 <vQueueAddToRegistry+0x50>)
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	00db      	lsls	r3, r3, #3
 800973c:	4413      	add	r3, r2
 800973e:	687a      	ldr	r2, [r7, #4]
 8009740:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009742:	e006      	b.n	8009752 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	3301      	adds	r3, #1
 8009748:	60fb      	str	r3, [r7, #12]
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2b07      	cmp	r3, #7
 800974e:	d9e7      	bls.n	8009720 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009750:	bf00      	nop
 8009752:	bf00      	nop
 8009754:	3714      	adds	r7, #20
 8009756:	46bd      	mov	sp, r7
 8009758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975c:	4770      	bx	lr
 800975e:	bf00      	nop
 8009760:	200008f0 	.word	0x200008f0

08009764 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009764:	b580      	push	{r7, lr}
 8009766:	b086      	sub	sp, #24
 8009768:	af00      	add	r7, sp, #0
 800976a:	60f8      	str	r0, [r7, #12]
 800976c:	60b9      	str	r1, [r7, #8]
 800976e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009774:	f001 fc5e 	bl	800b034 <vPortEnterCritical>
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800977e:	b25b      	sxtb	r3, r3
 8009780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009784:	d103      	bne.n	800978e <vQueueWaitForMessageRestricted+0x2a>
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	2200      	movs	r2, #0
 800978a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009794:	b25b      	sxtb	r3, r3
 8009796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800979a:	d103      	bne.n	80097a4 <vQueueWaitForMessageRestricted+0x40>
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	2200      	movs	r2, #0
 80097a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80097a4:	f001 fc76 	bl	800b094 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d106      	bne.n	80097be <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	3324      	adds	r3, #36	; 0x24
 80097b4:	687a      	ldr	r2, [r7, #4]
 80097b6:	68b9      	ldr	r1, [r7, #8]
 80097b8:	4618      	mov	r0, r3
 80097ba:	f000 fc3b 	bl	800a034 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80097be:	6978      	ldr	r0, [r7, #20]
 80097c0:	f7ff ff26 	bl	8009610 <prvUnlockQueue>
	}
 80097c4:	bf00      	nop
 80097c6:	3718      	adds	r7, #24
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b08e      	sub	sp, #56	; 0x38
 80097d0:	af04      	add	r7, sp, #16
 80097d2:	60f8      	str	r0, [r7, #12]
 80097d4:	60b9      	str	r1, [r7, #8]
 80097d6:	607a      	str	r2, [r7, #4]
 80097d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80097da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d10a      	bne.n	80097f6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80097e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e4:	f383 8811 	msr	BASEPRI, r3
 80097e8:	f3bf 8f6f 	isb	sy
 80097ec:	f3bf 8f4f 	dsb	sy
 80097f0:	623b      	str	r3, [r7, #32]
}
 80097f2:	bf00      	nop
 80097f4:	e7fe      	b.n	80097f4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80097f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d10a      	bne.n	8009812 <xTaskCreateStatic+0x46>
	__asm volatile
 80097fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009800:	f383 8811 	msr	BASEPRI, r3
 8009804:	f3bf 8f6f 	isb	sy
 8009808:	f3bf 8f4f 	dsb	sy
 800980c:	61fb      	str	r3, [r7, #28]
}
 800980e:	bf00      	nop
 8009810:	e7fe      	b.n	8009810 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009812:	235c      	movs	r3, #92	; 0x5c
 8009814:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	2b5c      	cmp	r3, #92	; 0x5c
 800981a:	d00a      	beq.n	8009832 <xTaskCreateStatic+0x66>
	__asm volatile
 800981c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009820:	f383 8811 	msr	BASEPRI, r3
 8009824:	f3bf 8f6f 	isb	sy
 8009828:	f3bf 8f4f 	dsb	sy
 800982c:	61bb      	str	r3, [r7, #24]
}
 800982e:	bf00      	nop
 8009830:	e7fe      	b.n	8009830 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009832:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009836:	2b00      	cmp	r3, #0
 8009838:	d01e      	beq.n	8009878 <xTaskCreateStatic+0xac>
 800983a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800983c:	2b00      	cmp	r3, #0
 800983e:	d01b      	beq.n	8009878 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009842:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009846:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009848:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800984a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800984c:	2202      	movs	r2, #2
 800984e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009852:	2300      	movs	r3, #0
 8009854:	9303      	str	r3, [sp, #12]
 8009856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009858:	9302      	str	r3, [sp, #8]
 800985a:	f107 0314 	add.w	r3, r7, #20
 800985e:	9301      	str	r3, [sp, #4]
 8009860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009862:	9300      	str	r3, [sp, #0]
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	687a      	ldr	r2, [r7, #4]
 8009868:	68b9      	ldr	r1, [r7, #8]
 800986a:	68f8      	ldr	r0, [r7, #12]
 800986c:	f000 f850 	bl	8009910 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009870:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009872:	f000 f8dd 	bl	8009a30 <prvAddNewTaskToReadyList>
 8009876:	e001      	b.n	800987c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009878:	2300      	movs	r3, #0
 800987a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800987c:	697b      	ldr	r3, [r7, #20]
	}
 800987e:	4618      	mov	r0, r3
 8009880:	3728      	adds	r7, #40	; 0x28
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}

08009886 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009886:	b580      	push	{r7, lr}
 8009888:	b08c      	sub	sp, #48	; 0x30
 800988a:	af04      	add	r7, sp, #16
 800988c:	60f8      	str	r0, [r7, #12]
 800988e:	60b9      	str	r1, [r7, #8]
 8009890:	603b      	str	r3, [r7, #0]
 8009892:	4613      	mov	r3, r2
 8009894:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009896:	88fb      	ldrh	r3, [r7, #6]
 8009898:	009b      	lsls	r3, r3, #2
 800989a:	4618      	mov	r0, r3
 800989c:	f001 fcec 	bl	800b278 <pvPortMalloc>
 80098a0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d00e      	beq.n	80098c6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80098a8:	205c      	movs	r0, #92	; 0x5c
 80098aa:	f001 fce5 	bl	800b278 <pvPortMalloc>
 80098ae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80098b0:	69fb      	ldr	r3, [r7, #28]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d003      	beq.n	80098be <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80098b6:	69fb      	ldr	r3, [r7, #28]
 80098b8:	697a      	ldr	r2, [r7, #20]
 80098ba:	631a      	str	r2, [r3, #48]	; 0x30
 80098bc:	e005      	b.n	80098ca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80098be:	6978      	ldr	r0, [r7, #20]
 80098c0:	f001 fda6 	bl	800b410 <vPortFree>
 80098c4:	e001      	b.n	80098ca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80098c6:	2300      	movs	r3, #0
 80098c8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80098ca:	69fb      	ldr	r3, [r7, #28]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d017      	beq.n	8009900 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80098d0:	69fb      	ldr	r3, [r7, #28]
 80098d2:	2200      	movs	r2, #0
 80098d4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80098d8:	88fa      	ldrh	r2, [r7, #6]
 80098da:	2300      	movs	r3, #0
 80098dc:	9303      	str	r3, [sp, #12]
 80098de:	69fb      	ldr	r3, [r7, #28]
 80098e0:	9302      	str	r3, [sp, #8]
 80098e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098e4:	9301      	str	r3, [sp, #4]
 80098e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e8:	9300      	str	r3, [sp, #0]
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	68b9      	ldr	r1, [r7, #8]
 80098ee:	68f8      	ldr	r0, [r7, #12]
 80098f0:	f000 f80e 	bl	8009910 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80098f4:	69f8      	ldr	r0, [r7, #28]
 80098f6:	f000 f89b 	bl	8009a30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80098fa:	2301      	movs	r3, #1
 80098fc:	61bb      	str	r3, [r7, #24]
 80098fe:	e002      	b.n	8009906 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009900:	f04f 33ff 	mov.w	r3, #4294967295
 8009904:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009906:	69bb      	ldr	r3, [r7, #24]
	}
 8009908:	4618      	mov	r0, r3
 800990a:	3720      	adds	r7, #32
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}

08009910 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b088      	sub	sp, #32
 8009914:	af00      	add	r7, sp, #0
 8009916:	60f8      	str	r0, [r7, #12]
 8009918:	60b9      	str	r1, [r7, #8]
 800991a:	607a      	str	r2, [r7, #4]
 800991c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800991e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009920:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	009b      	lsls	r3, r3, #2
 8009926:	461a      	mov	r2, r3
 8009928:	21a5      	movs	r1, #165	; 0xa5
 800992a:	f002 f9d9 	bl	800bce0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800992e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009930:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009938:	3b01      	subs	r3, #1
 800993a:	009b      	lsls	r3, r3, #2
 800993c:	4413      	add	r3, r2
 800993e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009940:	69bb      	ldr	r3, [r7, #24]
 8009942:	f023 0307 	bic.w	r3, r3, #7
 8009946:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009948:	69bb      	ldr	r3, [r7, #24]
 800994a:	f003 0307 	and.w	r3, r3, #7
 800994e:	2b00      	cmp	r3, #0
 8009950:	d00a      	beq.n	8009968 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009956:	f383 8811 	msr	BASEPRI, r3
 800995a:	f3bf 8f6f 	isb	sy
 800995e:	f3bf 8f4f 	dsb	sy
 8009962:	617b      	str	r3, [r7, #20]
}
 8009964:	bf00      	nop
 8009966:	e7fe      	b.n	8009966 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d01f      	beq.n	80099ae <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800996e:	2300      	movs	r3, #0
 8009970:	61fb      	str	r3, [r7, #28]
 8009972:	e012      	b.n	800999a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009974:	68ba      	ldr	r2, [r7, #8]
 8009976:	69fb      	ldr	r3, [r7, #28]
 8009978:	4413      	add	r3, r2
 800997a:	7819      	ldrb	r1, [r3, #0]
 800997c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800997e:	69fb      	ldr	r3, [r7, #28]
 8009980:	4413      	add	r3, r2
 8009982:	3334      	adds	r3, #52	; 0x34
 8009984:	460a      	mov	r2, r1
 8009986:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009988:	68ba      	ldr	r2, [r7, #8]
 800998a:	69fb      	ldr	r3, [r7, #28]
 800998c:	4413      	add	r3, r2
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d006      	beq.n	80099a2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009994:	69fb      	ldr	r3, [r7, #28]
 8009996:	3301      	adds	r3, #1
 8009998:	61fb      	str	r3, [r7, #28]
 800999a:	69fb      	ldr	r3, [r7, #28]
 800999c:	2b0f      	cmp	r3, #15
 800999e:	d9e9      	bls.n	8009974 <prvInitialiseNewTask+0x64>
 80099a0:	e000      	b.n	80099a4 <prvInitialiseNewTask+0x94>
			{
				break;
 80099a2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80099a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a6:	2200      	movs	r2, #0
 80099a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80099ac:	e003      	b.n	80099b6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80099ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b0:	2200      	movs	r2, #0
 80099b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80099b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b8:	2b37      	cmp	r3, #55	; 0x37
 80099ba:	d901      	bls.n	80099c0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80099bc:	2337      	movs	r3, #55	; 0x37
 80099be:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80099c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099c4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80099c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099ca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80099cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ce:	2200      	movs	r2, #0
 80099d0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80099d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d4:	3304      	adds	r3, #4
 80099d6:	4618      	mov	r0, r3
 80099d8:	f7ff f8be 	bl	8008b58 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80099dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099de:	3318      	adds	r3, #24
 80099e0:	4618      	mov	r0, r3
 80099e2:	f7ff f8b9 	bl	8008b58 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80099e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80099f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80099f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099fa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80099fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099fe:	2200      	movs	r2, #0
 8009a00:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a04:	2200      	movs	r2, #0
 8009a06:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009a0a:	683a      	ldr	r2, [r7, #0]
 8009a0c:	68f9      	ldr	r1, [r7, #12]
 8009a0e:	69b8      	ldr	r0, [r7, #24]
 8009a10:	f001 f9e2 	bl	800add8 <pxPortInitialiseStack>
 8009a14:	4602      	mov	r2, r0
 8009a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a18:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d002      	beq.n	8009a26 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a26:	bf00      	nop
 8009a28:	3720      	adds	r7, #32
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}
	...

08009a30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b082      	sub	sp, #8
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009a38:	f001 fafc 	bl	800b034 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009a3c:	4b2d      	ldr	r3, [pc, #180]	; (8009af4 <prvAddNewTaskToReadyList+0xc4>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	3301      	adds	r3, #1
 8009a42:	4a2c      	ldr	r2, [pc, #176]	; (8009af4 <prvAddNewTaskToReadyList+0xc4>)
 8009a44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009a46:	4b2c      	ldr	r3, [pc, #176]	; (8009af8 <prvAddNewTaskToReadyList+0xc8>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d109      	bne.n	8009a62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009a4e:	4a2a      	ldr	r2, [pc, #168]	; (8009af8 <prvAddNewTaskToReadyList+0xc8>)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009a54:	4b27      	ldr	r3, [pc, #156]	; (8009af4 <prvAddNewTaskToReadyList+0xc4>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d110      	bne.n	8009a7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009a5c:	f000 fc16 	bl	800a28c <prvInitialiseTaskLists>
 8009a60:	e00d      	b.n	8009a7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009a62:	4b26      	ldr	r3, [pc, #152]	; (8009afc <prvAddNewTaskToReadyList+0xcc>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d109      	bne.n	8009a7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009a6a:	4b23      	ldr	r3, [pc, #140]	; (8009af8 <prvAddNewTaskToReadyList+0xc8>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a74:	429a      	cmp	r2, r3
 8009a76:	d802      	bhi.n	8009a7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009a78:	4a1f      	ldr	r2, [pc, #124]	; (8009af8 <prvAddNewTaskToReadyList+0xc8>)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009a7e:	4b20      	ldr	r3, [pc, #128]	; (8009b00 <prvAddNewTaskToReadyList+0xd0>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	3301      	adds	r3, #1
 8009a84:	4a1e      	ldr	r2, [pc, #120]	; (8009b00 <prvAddNewTaskToReadyList+0xd0>)
 8009a86:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009a88:	4b1d      	ldr	r3, [pc, #116]	; (8009b00 <prvAddNewTaskToReadyList+0xd0>)
 8009a8a:	681a      	ldr	r2, [r3, #0]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a94:	4b1b      	ldr	r3, [pc, #108]	; (8009b04 <prvAddNewTaskToReadyList+0xd4>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d903      	bls.n	8009aa4 <prvAddNewTaskToReadyList+0x74>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa0:	4a18      	ldr	r2, [pc, #96]	; (8009b04 <prvAddNewTaskToReadyList+0xd4>)
 8009aa2:	6013      	str	r3, [r2, #0]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aa8:	4613      	mov	r3, r2
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	4413      	add	r3, r2
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	4a15      	ldr	r2, [pc, #84]	; (8009b08 <prvAddNewTaskToReadyList+0xd8>)
 8009ab2:	441a      	add	r2, r3
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	3304      	adds	r3, #4
 8009ab8:	4619      	mov	r1, r3
 8009aba:	4610      	mov	r0, r2
 8009abc:	f7ff f859 	bl	8008b72 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009ac0:	f001 fae8 	bl	800b094 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009ac4:	4b0d      	ldr	r3, [pc, #52]	; (8009afc <prvAddNewTaskToReadyList+0xcc>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d00e      	beq.n	8009aea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009acc:	4b0a      	ldr	r3, [pc, #40]	; (8009af8 <prvAddNewTaskToReadyList+0xc8>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ad6:	429a      	cmp	r2, r3
 8009ad8:	d207      	bcs.n	8009aea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009ada:	4b0c      	ldr	r3, [pc, #48]	; (8009b0c <prvAddNewTaskToReadyList+0xdc>)
 8009adc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ae0:	601a      	str	r2, [r3, #0]
 8009ae2:	f3bf 8f4f 	dsb	sy
 8009ae6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009aea:	bf00      	nop
 8009aec:	3708      	adds	r7, #8
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}
 8009af2:	bf00      	nop
 8009af4:	20000e04 	.word	0x20000e04
 8009af8:	20000930 	.word	0x20000930
 8009afc:	20000e10 	.word	0x20000e10
 8009b00:	20000e20 	.word	0x20000e20
 8009b04:	20000e0c 	.word	0x20000e0c
 8009b08:	20000934 	.word	0x20000934
 8009b0c:	e000ed04 	.word	0xe000ed04

08009b10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b084      	sub	sp, #16
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d017      	beq.n	8009b52 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009b22:	4b13      	ldr	r3, [pc, #76]	; (8009b70 <vTaskDelay+0x60>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d00a      	beq.n	8009b40 <vTaskDelay+0x30>
	__asm volatile
 8009b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b2e:	f383 8811 	msr	BASEPRI, r3
 8009b32:	f3bf 8f6f 	isb	sy
 8009b36:	f3bf 8f4f 	dsb	sy
 8009b3a:	60bb      	str	r3, [r7, #8]
}
 8009b3c:	bf00      	nop
 8009b3e:	e7fe      	b.n	8009b3e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009b40:	f000 f880 	bl	8009c44 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009b44:	2100      	movs	r1, #0
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 fcea 	bl	800a520 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009b4c:	f000 f888 	bl	8009c60 <xTaskResumeAll>
 8009b50:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d107      	bne.n	8009b68 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009b58:	4b06      	ldr	r3, [pc, #24]	; (8009b74 <vTaskDelay+0x64>)
 8009b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b5e:	601a      	str	r2, [r3, #0]
 8009b60:	f3bf 8f4f 	dsb	sy
 8009b64:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009b68:	bf00      	nop
 8009b6a:	3710      	adds	r7, #16
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}
 8009b70:	20000e2c 	.word	0x20000e2c
 8009b74:	e000ed04 	.word	0xe000ed04

08009b78 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b08a      	sub	sp, #40	; 0x28
 8009b7c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009b82:	2300      	movs	r3, #0
 8009b84:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009b86:	463a      	mov	r2, r7
 8009b88:	1d39      	adds	r1, r7, #4
 8009b8a:	f107 0308 	add.w	r3, r7, #8
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f7fe ff8e 	bl	8008ab0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009b94:	6839      	ldr	r1, [r7, #0]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	68ba      	ldr	r2, [r7, #8]
 8009b9a:	9202      	str	r2, [sp, #8]
 8009b9c:	9301      	str	r3, [sp, #4]
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	9300      	str	r3, [sp, #0]
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	460a      	mov	r2, r1
 8009ba6:	4921      	ldr	r1, [pc, #132]	; (8009c2c <vTaskStartScheduler+0xb4>)
 8009ba8:	4821      	ldr	r0, [pc, #132]	; (8009c30 <vTaskStartScheduler+0xb8>)
 8009baa:	f7ff fe0f 	bl	80097cc <xTaskCreateStatic>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	4a20      	ldr	r2, [pc, #128]	; (8009c34 <vTaskStartScheduler+0xbc>)
 8009bb2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009bb4:	4b1f      	ldr	r3, [pc, #124]	; (8009c34 <vTaskStartScheduler+0xbc>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d002      	beq.n	8009bc2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	617b      	str	r3, [r7, #20]
 8009bc0:	e001      	b.n	8009bc6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	2b01      	cmp	r3, #1
 8009bca:	d102      	bne.n	8009bd2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009bcc:	f000 fcfc 	bl	800a5c8 <xTimerCreateTimerTask>
 8009bd0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	2b01      	cmp	r3, #1
 8009bd6:	d116      	bne.n	8009c06 <vTaskStartScheduler+0x8e>
	__asm volatile
 8009bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bdc:	f383 8811 	msr	BASEPRI, r3
 8009be0:	f3bf 8f6f 	isb	sy
 8009be4:	f3bf 8f4f 	dsb	sy
 8009be8:	613b      	str	r3, [r7, #16]
}
 8009bea:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009bec:	4b12      	ldr	r3, [pc, #72]	; (8009c38 <vTaskStartScheduler+0xc0>)
 8009bee:	f04f 32ff 	mov.w	r2, #4294967295
 8009bf2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009bf4:	4b11      	ldr	r3, [pc, #68]	; (8009c3c <vTaskStartScheduler+0xc4>)
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009bfa:	4b11      	ldr	r3, [pc, #68]	; (8009c40 <vTaskStartScheduler+0xc8>)
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009c00:	f001 f976 	bl	800aef0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009c04:	e00e      	b.n	8009c24 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c0c:	d10a      	bne.n	8009c24 <vTaskStartScheduler+0xac>
	__asm volatile
 8009c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c12:	f383 8811 	msr	BASEPRI, r3
 8009c16:	f3bf 8f6f 	isb	sy
 8009c1a:	f3bf 8f4f 	dsb	sy
 8009c1e:	60fb      	str	r3, [r7, #12]
}
 8009c20:	bf00      	nop
 8009c22:	e7fe      	b.n	8009c22 <vTaskStartScheduler+0xaa>
}
 8009c24:	bf00      	nop
 8009c26:	3718      	adds	r7, #24
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}
 8009c2c:	0800c648 	.word	0x0800c648
 8009c30:	0800a25d 	.word	0x0800a25d
 8009c34:	20000e28 	.word	0x20000e28
 8009c38:	20000e24 	.word	0x20000e24
 8009c3c:	20000e10 	.word	0x20000e10
 8009c40:	20000e08 	.word	0x20000e08

08009c44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009c44:	b480      	push	{r7}
 8009c46:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009c48:	4b04      	ldr	r3, [pc, #16]	; (8009c5c <vTaskSuspendAll+0x18>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	3301      	adds	r3, #1
 8009c4e:	4a03      	ldr	r2, [pc, #12]	; (8009c5c <vTaskSuspendAll+0x18>)
 8009c50:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009c52:	bf00      	nop
 8009c54:	46bd      	mov	sp, r7
 8009c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5a:	4770      	bx	lr
 8009c5c:	20000e2c 	.word	0x20000e2c

08009c60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b084      	sub	sp, #16
 8009c64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009c66:	2300      	movs	r3, #0
 8009c68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009c6e:	4b42      	ldr	r3, [pc, #264]	; (8009d78 <xTaskResumeAll+0x118>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d10a      	bne.n	8009c8c <xTaskResumeAll+0x2c>
	__asm volatile
 8009c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c7a:	f383 8811 	msr	BASEPRI, r3
 8009c7e:	f3bf 8f6f 	isb	sy
 8009c82:	f3bf 8f4f 	dsb	sy
 8009c86:	603b      	str	r3, [r7, #0]
}
 8009c88:	bf00      	nop
 8009c8a:	e7fe      	b.n	8009c8a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009c8c:	f001 f9d2 	bl	800b034 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009c90:	4b39      	ldr	r3, [pc, #228]	; (8009d78 <xTaskResumeAll+0x118>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	3b01      	subs	r3, #1
 8009c96:	4a38      	ldr	r2, [pc, #224]	; (8009d78 <xTaskResumeAll+0x118>)
 8009c98:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c9a:	4b37      	ldr	r3, [pc, #220]	; (8009d78 <xTaskResumeAll+0x118>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d162      	bne.n	8009d68 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009ca2:	4b36      	ldr	r3, [pc, #216]	; (8009d7c <xTaskResumeAll+0x11c>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d05e      	beq.n	8009d68 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009caa:	e02f      	b.n	8009d0c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cac:	4b34      	ldr	r3, [pc, #208]	; (8009d80 <xTaskResumeAll+0x120>)
 8009cae:	68db      	ldr	r3, [r3, #12]
 8009cb0:	68db      	ldr	r3, [r3, #12]
 8009cb2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	3318      	adds	r3, #24
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f7fe ffb7 	bl	8008c2c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	3304      	adds	r3, #4
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f7fe ffb2 	bl	8008c2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ccc:	4b2d      	ldr	r3, [pc, #180]	; (8009d84 <xTaskResumeAll+0x124>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	d903      	bls.n	8009cdc <xTaskResumeAll+0x7c>
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cd8:	4a2a      	ldr	r2, [pc, #168]	; (8009d84 <xTaskResumeAll+0x124>)
 8009cda:	6013      	str	r3, [r2, #0]
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ce0:	4613      	mov	r3, r2
 8009ce2:	009b      	lsls	r3, r3, #2
 8009ce4:	4413      	add	r3, r2
 8009ce6:	009b      	lsls	r3, r3, #2
 8009ce8:	4a27      	ldr	r2, [pc, #156]	; (8009d88 <xTaskResumeAll+0x128>)
 8009cea:	441a      	add	r2, r3
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	3304      	adds	r3, #4
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	4610      	mov	r0, r2
 8009cf4:	f7fe ff3d 	bl	8008b72 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cfc:	4b23      	ldr	r3, [pc, #140]	; (8009d8c <xTaskResumeAll+0x12c>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d02:	429a      	cmp	r2, r3
 8009d04:	d302      	bcc.n	8009d0c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009d06:	4b22      	ldr	r3, [pc, #136]	; (8009d90 <xTaskResumeAll+0x130>)
 8009d08:	2201      	movs	r2, #1
 8009d0a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009d0c:	4b1c      	ldr	r3, [pc, #112]	; (8009d80 <xTaskResumeAll+0x120>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d1cb      	bne.n	8009cac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d001      	beq.n	8009d1e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009d1a:	f000 fb55 	bl	800a3c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009d1e:	4b1d      	ldr	r3, [pc, #116]	; (8009d94 <xTaskResumeAll+0x134>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d010      	beq.n	8009d4c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009d2a:	f000 f847 	bl	8009dbc <xTaskIncrementTick>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d002      	beq.n	8009d3a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009d34:	4b16      	ldr	r3, [pc, #88]	; (8009d90 <xTaskResumeAll+0x130>)
 8009d36:	2201      	movs	r2, #1
 8009d38:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	3b01      	subs	r3, #1
 8009d3e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d1f1      	bne.n	8009d2a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009d46:	4b13      	ldr	r3, [pc, #76]	; (8009d94 <xTaskResumeAll+0x134>)
 8009d48:	2200      	movs	r2, #0
 8009d4a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009d4c:	4b10      	ldr	r3, [pc, #64]	; (8009d90 <xTaskResumeAll+0x130>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d009      	beq.n	8009d68 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009d54:	2301      	movs	r3, #1
 8009d56:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009d58:	4b0f      	ldr	r3, [pc, #60]	; (8009d98 <xTaskResumeAll+0x138>)
 8009d5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d5e:	601a      	str	r2, [r3, #0]
 8009d60:	f3bf 8f4f 	dsb	sy
 8009d64:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d68:	f001 f994 	bl	800b094 <vPortExitCritical>

	return xAlreadyYielded;
 8009d6c:	68bb      	ldr	r3, [r7, #8]
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3710      	adds	r7, #16
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}
 8009d76:	bf00      	nop
 8009d78:	20000e2c 	.word	0x20000e2c
 8009d7c:	20000e04 	.word	0x20000e04
 8009d80:	20000dc4 	.word	0x20000dc4
 8009d84:	20000e0c 	.word	0x20000e0c
 8009d88:	20000934 	.word	0x20000934
 8009d8c:	20000930 	.word	0x20000930
 8009d90:	20000e18 	.word	0x20000e18
 8009d94:	20000e14 	.word	0x20000e14
 8009d98:	e000ed04 	.word	0xe000ed04

08009d9c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b083      	sub	sp, #12
 8009da0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009da2:	4b05      	ldr	r3, [pc, #20]	; (8009db8 <xTaskGetTickCount+0x1c>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009da8:	687b      	ldr	r3, [r7, #4]
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	370c      	adds	r7, #12
 8009dae:	46bd      	mov	sp, r7
 8009db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db4:	4770      	bx	lr
 8009db6:	bf00      	nop
 8009db8:	20000e08 	.word	0x20000e08

08009dbc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b086      	sub	sp, #24
 8009dc0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009dc6:	4b4f      	ldr	r3, [pc, #316]	; (8009f04 <xTaskIncrementTick+0x148>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	f040 808f 	bne.w	8009eee <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009dd0:	4b4d      	ldr	r3, [pc, #308]	; (8009f08 <xTaskIncrementTick+0x14c>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009dd8:	4a4b      	ldr	r2, [pc, #300]	; (8009f08 <xTaskIncrementTick+0x14c>)
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d120      	bne.n	8009e26 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009de4:	4b49      	ldr	r3, [pc, #292]	; (8009f0c <xTaskIncrementTick+0x150>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d00a      	beq.n	8009e04 <xTaskIncrementTick+0x48>
	__asm volatile
 8009dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df2:	f383 8811 	msr	BASEPRI, r3
 8009df6:	f3bf 8f6f 	isb	sy
 8009dfa:	f3bf 8f4f 	dsb	sy
 8009dfe:	603b      	str	r3, [r7, #0]
}
 8009e00:	bf00      	nop
 8009e02:	e7fe      	b.n	8009e02 <xTaskIncrementTick+0x46>
 8009e04:	4b41      	ldr	r3, [pc, #260]	; (8009f0c <xTaskIncrementTick+0x150>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	60fb      	str	r3, [r7, #12]
 8009e0a:	4b41      	ldr	r3, [pc, #260]	; (8009f10 <xTaskIncrementTick+0x154>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	4a3f      	ldr	r2, [pc, #252]	; (8009f0c <xTaskIncrementTick+0x150>)
 8009e10:	6013      	str	r3, [r2, #0]
 8009e12:	4a3f      	ldr	r2, [pc, #252]	; (8009f10 <xTaskIncrementTick+0x154>)
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	6013      	str	r3, [r2, #0]
 8009e18:	4b3e      	ldr	r3, [pc, #248]	; (8009f14 <xTaskIncrementTick+0x158>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	3301      	adds	r3, #1
 8009e1e:	4a3d      	ldr	r2, [pc, #244]	; (8009f14 <xTaskIncrementTick+0x158>)
 8009e20:	6013      	str	r3, [r2, #0]
 8009e22:	f000 fad1 	bl	800a3c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009e26:	4b3c      	ldr	r3, [pc, #240]	; (8009f18 <xTaskIncrementTick+0x15c>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	693a      	ldr	r2, [r7, #16]
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	d349      	bcc.n	8009ec4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e30:	4b36      	ldr	r3, [pc, #216]	; (8009f0c <xTaskIncrementTick+0x150>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d104      	bne.n	8009e44 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e3a:	4b37      	ldr	r3, [pc, #220]	; (8009f18 <xTaskIncrementTick+0x15c>)
 8009e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8009e40:	601a      	str	r2, [r3, #0]
					break;
 8009e42:	e03f      	b.n	8009ec4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e44:	4b31      	ldr	r3, [pc, #196]	; (8009f0c <xTaskIncrementTick+0x150>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	68db      	ldr	r3, [r3, #12]
 8009e4a:	68db      	ldr	r3, [r3, #12]
 8009e4c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	685b      	ldr	r3, [r3, #4]
 8009e52:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009e54:	693a      	ldr	r2, [r7, #16]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d203      	bcs.n	8009e64 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009e5c:	4a2e      	ldr	r2, [pc, #184]	; (8009f18 <xTaskIncrementTick+0x15c>)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009e62:	e02f      	b.n	8009ec4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	3304      	adds	r3, #4
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f7fe fedf 	bl	8008c2c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d004      	beq.n	8009e80 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	3318      	adds	r3, #24
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f7fe fed6 	bl	8008c2c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e84:	4b25      	ldr	r3, [pc, #148]	; (8009f1c <xTaskIncrementTick+0x160>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d903      	bls.n	8009e94 <xTaskIncrementTick+0xd8>
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e90:	4a22      	ldr	r2, [pc, #136]	; (8009f1c <xTaskIncrementTick+0x160>)
 8009e92:	6013      	str	r3, [r2, #0]
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e98:	4613      	mov	r3, r2
 8009e9a:	009b      	lsls	r3, r3, #2
 8009e9c:	4413      	add	r3, r2
 8009e9e:	009b      	lsls	r3, r3, #2
 8009ea0:	4a1f      	ldr	r2, [pc, #124]	; (8009f20 <xTaskIncrementTick+0x164>)
 8009ea2:	441a      	add	r2, r3
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	3304      	adds	r3, #4
 8009ea8:	4619      	mov	r1, r3
 8009eaa:	4610      	mov	r0, r2
 8009eac:	f7fe fe61 	bl	8008b72 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eb4:	4b1b      	ldr	r3, [pc, #108]	; (8009f24 <xTaskIncrementTick+0x168>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	d3b8      	bcc.n	8009e30 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ec2:	e7b5      	b.n	8009e30 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009ec4:	4b17      	ldr	r3, [pc, #92]	; (8009f24 <xTaskIncrementTick+0x168>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eca:	4915      	ldr	r1, [pc, #84]	; (8009f20 <xTaskIncrementTick+0x164>)
 8009ecc:	4613      	mov	r3, r2
 8009ece:	009b      	lsls	r3, r3, #2
 8009ed0:	4413      	add	r3, r2
 8009ed2:	009b      	lsls	r3, r3, #2
 8009ed4:	440b      	add	r3, r1
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	2b01      	cmp	r3, #1
 8009eda:	d901      	bls.n	8009ee0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009edc:	2301      	movs	r3, #1
 8009ede:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009ee0:	4b11      	ldr	r3, [pc, #68]	; (8009f28 <xTaskIncrementTick+0x16c>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d007      	beq.n	8009ef8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009ee8:	2301      	movs	r3, #1
 8009eea:	617b      	str	r3, [r7, #20]
 8009eec:	e004      	b.n	8009ef8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009eee:	4b0f      	ldr	r3, [pc, #60]	; (8009f2c <xTaskIncrementTick+0x170>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	3301      	adds	r3, #1
 8009ef4:	4a0d      	ldr	r2, [pc, #52]	; (8009f2c <xTaskIncrementTick+0x170>)
 8009ef6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009ef8:	697b      	ldr	r3, [r7, #20]
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3718      	adds	r7, #24
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}
 8009f02:	bf00      	nop
 8009f04:	20000e2c 	.word	0x20000e2c
 8009f08:	20000e08 	.word	0x20000e08
 8009f0c:	20000dbc 	.word	0x20000dbc
 8009f10:	20000dc0 	.word	0x20000dc0
 8009f14:	20000e1c 	.word	0x20000e1c
 8009f18:	20000e24 	.word	0x20000e24
 8009f1c:	20000e0c 	.word	0x20000e0c
 8009f20:	20000934 	.word	0x20000934
 8009f24:	20000930 	.word	0x20000930
 8009f28:	20000e18 	.word	0x20000e18
 8009f2c:	20000e14 	.word	0x20000e14

08009f30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009f30:	b480      	push	{r7}
 8009f32:	b085      	sub	sp, #20
 8009f34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009f36:	4b28      	ldr	r3, [pc, #160]	; (8009fd8 <vTaskSwitchContext+0xa8>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d003      	beq.n	8009f46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009f3e:	4b27      	ldr	r3, [pc, #156]	; (8009fdc <vTaskSwitchContext+0xac>)
 8009f40:	2201      	movs	r2, #1
 8009f42:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009f44:	e041      	b.n	8009fca <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8009f46:	4b25      	ldr	r3, [pc, #148]	; (8009fdc <vTaskSwitchContext+0xac>)
 8009f48:	2200      	movs	r2, #0
 8009f4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f4c:	4b24      	ldr	r3, [pc, #144]	; (8009fe0 <vTaskSwitchContext+0xb0>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	60fb      	str	r3, [r7, #12]
 8009f52:	e010      	b.n	8009f76 <vTaskSwitchContext+0x46>
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d10a      	bne.n	8009f70 <vTaskSwitchContext+0x40>
	__asm volatile
 8009f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f5e:	f383 8811 	msr	BASEPRI, r3
 8009f62:	f3bf 8f6f 	isb	sy
 8009f66:	f3bf 8f4f 	dsb	sy
 8009f6a:	607b      	str	r3, [r7, #4]
}
 8009f6c:	bf00      	nop
 8009f6e:	e7fe      	b.n	8009f6e <vTaskSwitchContext+0x3e>
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	3b01      	subs	r3, #1
 8009f74:	60fb      	str	r3, [r7, #12]
 8009f76:	491b      	ldr	r1, [pc, #108]	; (8009fe4 <vTaskSwitchContext+0xb4>)
 8009f78:	68fa      	ldr	r2, [r7, #12]
 8009f7a:	4613      	mov	r3, r2
 8009f7c:	009b      	lsls	r3, r3, #2
 8009f7e:	4413      	add	r3, r2
 8009f80:	009b      	lsls	r3, r3, #2
 8009f82:	440b      	add	r3, r1
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d0e4      	beq.n	8009f54 <vTaskSwitchContext+0x24>
 8009f8a:	68fa      	ldr	r2, [r7, #12]
 8009f8c:	4613      	mov	r3, r2
 8009f8e:	009b      	lsls	r3, r3, #2
 8009f90:	4413      	add	r3, r2
 8009f92:	009b      	lsls	r3, r3, #2
 8009f94:	4a13      	ldr	r2, [pc, #76]	; (8009fe4 <vTaskSwitchContext+0xb4>)
 8009f96:	4413      	add	r3, r2
 8009f98:	60bb      	str	r3, [r7, #8]
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	685b      	ldr	r3, [r3, #4]
 8009f9e:	685a      	ldr	r2, [r3, #4]
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	605a      	str	r2, [r3, #4]
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	685a      	ldr	r2, [r3, #4]
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	3308      	adds	r3, #8
 8009fac:	429a      	cmp	r2, r3
 8009fae:	d104      	bne.n	8009fba <vTaskSwitchContext+0x8a>
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	685a      	ldr	r2, [r3, #4]
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	605a      	str	r2, [r3, #4]
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	68db      	ldr	r3, [r3, #12]
 8009fc0:	4a09      	ldr	r2, [pc, #36]	; (8009fe8 <vTaskSwitchContext+0xb8>)
 8009fc2:	6013      	str	r3, [r2, #0]
 8009fc4:	4a06      	ldr	r2, [pc, #24]	; (8009fe0 <vTaskSwitchContext+0xb0>)
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	6013      	str	r3, [r2, #0]
}
 8009fca:	bf00      	nop
 8009fcc:	3714      	adds	r7, #20
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd4:	4770      	bx	lr
 8009fd6:	bf00      	nop
 8009fd8:	20000e2c 	.word	0x20000e2c
 8009fdc:	20000e18 	.word	0x20000e18
 8009fe0:	20000e0c 	.word	0x20000e0c
 8009fe4:	20000934 	.word	0x20000934
 8009fe8:	20000930 	.word	0x20000930

08009fec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b084      	sub	sp, #16
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
 8009ff4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d10a      	bne.n	800a012 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a000:	f383 8811 	msr	BASEPRI, r3
 800a004:	f3bf 8f6f 	isb	sy
 800a008:	f3bf 8f4f 	dsb	sy
 800a00c:	60fb      	str	r3, [r7, #12]
}
 800a00e:	bf00      	nop
 800a010:	e7fe      	b.n	800a010 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a012:	4b07      	ldr	r3, [pc, #28]	; (800a030 <vTaskPlaceOnEventList+0x44>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	3318      	adds	r3, #24
 800a018:	4619      	mov	r1, r3
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f7fe fdcd 	bl	8008bba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a020:	2101      	movs	r1, #1
 800a022:	6838      	ldr	r0, [r7, #0]
 800a024:	f000 fa7c 	bl	800a520 <prvAddCurrentTaskToDelayedList>
}
 800a028:	bf00      	nop
 800a02a:	3710      	adds	r7, #16
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}
 800a030:	20000930 	.word	0x20000930

0800a034 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a034:	b580      	push	{r7, lr}
 800a036:	b086      	sub	sp, #24
 800a038:	af00      	add	r7, sp, #0
 800a03a:	60f8      	str	r0, [r7, #12]
 800a03c:	60b9      	str	r1, [r7, #8]
 800a03e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d10a      	bne.n	800a05c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a04a:	f383 8811 	msr	BASEPRI, r3
 800a04e:	f3bf 8f6f 	isb	sy
 800a052:	f3bf 8f4f 	dsb	sy
 800a056:	617b      	str	r3, [r7, #20]
}
 800a058:	bf00      	nop
 800a05a:	e7fe      	b.n	800a05a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a05c:	4b0a      	ldr	r3, [pc, #40]	; (800a088 <vTaskPlaceOnEventListRestricted+0x54>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	3318      	adds	r3, #24
 800a062:	4619      	mov	r1, r3
 800a064:	68f8      	ldr	r0, [r7, #12]
 800a066:	f7fe fd84 	bl	8008b72 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d002      	beq.n	800a076 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a070:	f04f 33ff 	mov.w	r3, #4294967295
 800a074:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a076:	6879      	ldr	r1, [r7, #4]
 800a078:	68b8      	ldr	r0, [r7, #8]
 800a07a:	f000 fa51 	bl	800a520 <prvAddCurrentTaskToDelayedList>
	}
 800a07e:	bf00      	nop
 800a080:	3718      	adds	r7, #24
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}
 800a086:	bf00      	nop
 800a088:	20000930 	.word	0x20000930

0800a08c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b086      	sub	sp, #24
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	68db      	ldr	r3, [r3, #12]
 800a098:	68db      	ldr	r3, [r3, #12]
 800a09a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a09c:	693b      	ldr	r3, [r7, #16]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d10a      	bne.n	800a0b8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a6:	f383 8811 	msr	BASEPRI, r3
 800a0aa:	f3bf 8f6f 	isb	sy
 800a0ae:	f3bf 8f4f 	dsb	sy
 800a0b2:	60fb      	str	r3, [r7, #12]
}
 800a0b4:	bf00      	nop
 800a0b6:	e7fe      	b.n	800a0b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	3318      	adds	r3, #24
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f7fe fdb5 	bl	8008c2c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0c2:	4b1e      	ldr	r3, [pc, #120]	; (800a13c <xTaskRemoveFromEventList+0xb0>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d11d      	bne.n	800a106 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	3304      	adds	r3, #4
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f7fe fdac 	bl	8008c2c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0d8:	4b19      	ldr	r3, [pc, #100]	; (800a140 <xTaskRemoveFromEventList+0xb4>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d903      	bls.n	800a0e8 <xTaskRemoveFromEventList+0x5c>
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0e4:	4a16      	ldr	r2, [pc, #88]	; (800a140 <xTaskRemoveFromEventList+0xb4>)
 800a0e6:	6013      	str	r3, [r2, #0]
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0ec:	4613      	mov	r3, r2
 800a0ee:	009b      	lsls	r3, r3, #2
 800a0f0:	4413      	add	r3, r2
 800a0f2:	009b      	lsls	r3, r3, #2
 800a0f4:	4a13      	ldr	r2, [pc, #76]	; (800a144 <xTaskRemoveFromEventList+0xb8>)
 800a0f6:	441a      	add	r2, r3
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	3304      	adds	r3, #4
 800a0fc:	4619      	mov	r1, r3
 800a0fe:	4610      	mov	r0, r2
 800a100:	f7fe fd37 	bl	8008b72 <vListInsertEnd>
 800a104:	e005      	b.n	800a112 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	3318      	adds	r3, #24
 800a10a:	4619      	mov	r1, r3
 800a10c:	480e      	ldr	r0, [pc, #56]	; (800a148 <xTaskRemoveFromEventList+0xbc>)
 800a10e:	f7fe fd30 	bl	8008b72 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a116:	4b0d      	ldr	r3, [pc, #52]	; (800a14c <xTaskRemoveFromEventList+0xc0>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d905      	bls.n	800a12c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a120:	2301      	movs	r3, #1
 800a122:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a124:	4b0a      	ldr	r3, [pc, #40]	; (800a150 <xTaskRemoveFromEventList+0xc4>)
 800a126:	2201      	movs	r2, #1
 800a128:	601a      	str	r2, [r3, #0]
 800a12a:	e001      	b.n	800a130 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a12c:	2300      	movs	r3, #0
 800a12e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a130:	697b      	ldr	r3, [r7, #20]
}
 800a132:	4618      	mov	r0, r3
 800a134:	3718      	adds	r7, #24
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
 800a13a:	bf00      	nop
 800a13c:	20000e2c 	.word	0x20000e2c
 800a140:	20000e0c 	.word	0x20000e0c
 800a144:	20000934 	.word	0x20000934
 800a148:	20000dc4 	.word	0x20000dc4
 800a14c:	20000930 	.word	0x20000930
 800a150:	20000e18 	.word	0x20000e18

0800a154 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a154:	b480      	push	{r7}
 800a156:	b083      	sub	sp, #12
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a15c:	4b06      	ldr	r3, [pc, #24]	; (800a178 <vTaskInternalSetTimeOutState+0x24>)
 800a15e:	681a      	ldr	r2, [r3, #0]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a164:	4b05      	ldr	r3, [pc, #20]	; (800a17c <vTaskInternalSetTimeOutState+0x28>)
 800a166:	681a      	ldr	r2, [r3, #0]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	605a      	str	r2, [r3, #4]
}
 800a16c:	bf00      	nop
 800a16e:	370c      	adds	r7, #12
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr
 800a178:	20000e1c 	.word	0x20000e1c
 800a17c:	20000e08 	.word	0x20000e08

0800a180 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b088      	sub	sp, #32
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
 800a188:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d10a      	bne.n	800a1a6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a194:	f383 8811 	msr	BASEPRI, r3
 800a198:	f3bf 8f6f 	isb	sy
 800a19c:	f3bf 8f4f 	dsb	sy
 800a1a0:	613b      	str	r3, [r7, #16]
}
 800a1a2:	bf00      	nop
 800a1a4:	e7fe      	b.n	800a1a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d10a      	bne.n	800a1c2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b0:	f383 8811 	msr	BASEPRI, r3
 800a1b4:	f3bf 8f6f 	isb	sy
 800a1b8:	f3bf 8f4f 	dsb	sy
 800a1bc:	60fb      	str	r3, [r7, #12]
}
 800a1be:	bf00      	nop
 800a1c0:	e7fe      	b.n	800a1c0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a1c2:	f000 ff37 	bl	800b034 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a1c6:	4b1d      	ldr	r3, [pc, #116]	; (800a23c <xTaskCheckForTimeOut+0xbc>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	685b      	ldr	r3, [r3, #4]
 800a1d0:	69ba      	ldr	r2, [r7, #24]
 800a1d2:	1ad3      	subs	r3, r2, r3
 800a1d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1de:	d102      	bne.n	800a1e6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	61fb      	str	r3, [r7, #28]
 800a1e4:	e023      	b.n	800a22e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681a      	ldr	r2, [r3, #0]
 800a1ea:	4b15      	ldr	r3, [pc, #84]	; (800a240 <xTaskCheckForTimeOut+0xc0>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	429a      	cmp	r2, r3
 800a1f0:	d007      	beq.n	800a202 <xTaskCheckForTimeOut+0x82>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	685b      	ldr	r3, [r3, #4]
 800a1f6:	69ba      	ldr	r2, [r7, #24]
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	d302      	bcc.n	800a202 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	61fb      	str	r3, [r7, #28]
 800a200:	e015      	b.n	800a22e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	697a      	ldr	r2, [r7, #20]
 800a208:	429a      	cmp	r2, r3
 800a20a:	d20b      	bcs.n	800a224 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	681a      	ldr	r2, [r3, #0]
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	1ad2      	subs	r2, r2, r3
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f7ff ff9b 	bl	800a154 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a21e:	2300      	movs	r3, #0
 800a220:	61fb      	str	r3, [r7, #28]
 800a222:	e004      	b.n	800a22e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	2200      	movs	r2, #0
 800a228:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a22a:	2301      	movs	r3, #1
 800a22c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a22e:	f000 ff31 	bl	800b094 <vPortExitCritical>

	return xReturn;
 800a232:	69fb      	ldr	r3, [r7, #28]
}
 800a234:	4618      	mov	r0, r3
 800a236:	3720      	adds	r7, #32
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}
 800a23c:	20000e08 	.word	0x20000e08
 800a240:	20000e1c 	.word	0x20000e1c

0800a244 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a244:	b480      	push	{r7}
 800a246:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a248:	4b03      	ldr	r3, [pc, #12]	; (800a258 <vTaskMissedYield+0x14>)
 800a24a:	2201      	movs	r2, #1
 800a24c:	601a      	str	r2, [r3, #0]
}
 800a24e:	bf00      	nop
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr
 800a258:	20000e18 	.word	0x20000e18

0800a25c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b082      	sub	sp, #8
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a264:	f000 f852 	bl	800a30c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a268:	4b06      	ldr	r3, [pc, #24]	; (800a284 <prvIdleTask+0x28>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	2b01      	cmp	r3, #1
 800a26e:	d9f9      	bls.n	800a264 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a270:	4b05      	ldr	r3, [pc, #20]	; (800a288 <prvIdleTask+0x2c>)
 800a272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a276:	601a      	str	r2, [r3, #0]
 800a278:	f3bf 8f4f 	dsb	sy
 800a27c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a280:	e7f0      	b.n	800a264 <prvIdleTask+0x8>
 800a282:	bf00      	nop
 800a284:	20000934 	.word	0x20000934
 800a288:	e000ed04 	.word	0xe000ed04

0800a28c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b082      	sub	sp, #8
 800a290:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a292:	2300      	movs	r3, #0
 800a294:	607b      	str	r3, [r7, #4]
 800a296:	e00c      	b.n	800a2b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a298:	687a      	ldr	r2, [r7, #4]
 800a29a:	4613      	mov	r3, r2
 800a29c:	009b      	lsls	r3, r3, #2
 800a29e:	4413      	add	r3, r2
 800a2a0:	009b      	lsls	r3, r3, #2
 800a2a2:	4a12      	ldr	r2, [pc, #72]	; (800a2ec <prvInitialiseTaskLists+0x60>)
 800a2a4:	4413      	add	r3, r2
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f7fe fc36 	bl	8008b18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	3301      	adds	r3, #1
 800a2b0:	607b      	str	r3, [r7, #4]
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2b37      	cmp	r3, #55	; 0x37
 800a2b6:	d9ef      	bls.n	800a298 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a2b8:	480d      	ldr	r0, [pc, #52]	; (800a2f0 <prvInitialiseTaskLists+0x64>)
 800a2ba:	f7fe fc2d 	bl	8008b18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a2be:	480d      	ldr	r0, [pc, #52]	; (800a2f4 <prvInitialiseTaskLists+0x68>)
 800a2c0:	f7fe fc2a 	bl	8008b18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a2c4:	480c      	ldr	r0, [pc, #48]	; (800a2f8 <prvInitialiseTaskLists+0x6c>)
 800a2c6:	f7fe fc27 	bl	8008b18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a2ca:	480c      	ldr	r0, [pc, #48]	; (800a2fc <prvInitialiseTaskLists+0x70>)
 800a2cc:	f7fe fc24 	bl	8008b18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a2d0:	480b      	ldr	r0, [pc, #44]	; (800a300 <prvInitialiseTaskLists+0x74>)
 800a2d2:	f7fe fc21 	bl	8008b18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a2d6:	4b0b      	ldr	r3, [pc, #44]	; (800a304 <prvInitialiseTaskLists+0x78>)
 800a2d8:	4a05      	ldr	r2, [pc, #20]	; (800a2f0 <prvInitialiseTaskLists+0x64>)
 800a2da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a2dc:	4b0a      	ldr	r3, [pc, #40]	; (800a308 <prvInitialiseTaskLists+0x7c>)
 800a2de:	4a05      	ldr	r2, [pc, #20]	; (800a2f4 <prvInitialiseTaskLists+0x68>)
 800a2e0:	601a      	str	r2, [r3, #0]
}
 800a2e2:	bf00      	nop
 800a2e4:	3708      	adds	r7, #8
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}
 800a2ea:	bf00      	nop
 800a2ec:	20000934 	.word	0x20000934
 800a2f0:	20000d94 	.word	0x20000d94
 800a2f4:	20000da8 	.word	0x20000da8
 800a2f8:	20000dc4 	.word	0x20000dc4
 800a2fc:	20000dd8 	.word	0x20000dd8
 800a300:	20000df0 	.word	0x20000df0
 800a304:	20000dbc 	.word	0x20000dbc
 800a308:	20000dc0 	.word	0x20000dc0

0800a30c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b082      	sub	sp, #8
 800a310:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a312:	e019      	b.n	800a348 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a314:	f000 fe8e 	bl	800b034 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a318:	4b10      	ldr	r3, [pc, #64]	; (800a35c <prvCheckTasksWaitingTermination+0x50>)
 800a31a:	68db      	ldr	r3, [r3, #12]
 800a31c:	68db      	ldr	r3, [r3, #12]
 800a31e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	3304      	adds	r3, #4
 800a324:	4618      	mov	r0, r3
 800a326:	f7fe fc81 	bl	8008c2c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a32a:	4b0d      	ldr	r3, [pc, #52]	; (800a360 <prvCheckTasksWaitingTermination+0x54>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	3b01      	subs	r3, #1
 800a330:	4a0b      	ldr	r2, [pc, #44]	; (800a360 <prvCheckTasksWaitingTermination+0x54>)
 800a332:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a334:	4b0b      	ldr	r3, [pc, #44]	; (800a364 <prvCheckTasksWaitingTermination+0x58>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	3b01      	subs	r3, #1
 800a33a:	4a0a      	ldr	r2, [pc, #40]	; (800a364 <prvCheckTasksWaitingTermination+0x58>)
 800a33c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a33e:	f000 fea9 	bl	800b094 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f000 f810 	bl	800a368 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a348:	4b06      	ldr	r3, [pc, #24]	; (800a364 <prvCheckTasksWaitingTermination+0x58>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d1e1      	bne.n	800a314 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a350:	bf00      	nop
 800a352:	bf00      	nop
 800a354:	3708      	adds	r7, #8
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}
 800a35a:	bf00      	nop
 800a35c:	20000dd8 	.word	0x20000dd8
 800a360:	20000e04 	.word	0x20000e04
 800a364:	20000dec 	.word	0x20000dec

0800a368 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b084      	sub	sp, #16
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a376:	2b00      	cmp	r3, #0
 800a378:	d108      	bne.n	800a38c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a37e:	4618      	mov	r0, r3
 800a380:	f001 f846 	bl	800b410 <vPortFree>
				vPortFree( pxTCB );
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f001 f843 	bl	800b410 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a38a:	e018      	b.n	800a3be <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a392:	2b01      	cmp	r3, #1
 800a394:	d103      	bne.n	800a39e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f001 f83a 	bl	800b410 <vPortFree>
	}
 800a39c:	e00f      	b.n	800a3be <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a3a4:	2b02      	cmp	r3, #2
 800a3a6:	d00a      	beq.n	800a3be <prvDeleteTCB+0x56>
	__asm volatile
 800a3a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ac:	f383 8811 	msr	BASEPRI, r3
 800a3b0:	f3bf 8f6f 	isb	sy
 800a3b4:	f3bf 8f4f 	dsb	sy
 800a3b8:	60fb      	str	r3, [r7, #12]
}
 800a3ba:	bf00      	nop
 800a3bc:	e7fe      	b.n	800a3bc <prvDeleteTCB+0x54>
	}
 800a3be:	bf00      	nop
 800a3c0:	3710      	adds	r7, #16
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
	...

0800a3c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b083      	sub	sp, #12
 800a3cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a3ce:	4b0c      	ldr	r3, [pc, #48]	; (800a400 <prvResetNextTaskUnblockTime+0x38>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d104      	bne.n	800a3e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a3d8:	4b0a      	ldr	r3, [pc, #40]	; (800a404 <prvResetNextTaskUnblockTime+0x3c>)
 800a3da:	f04f 32ff 	mov.w	r2, #4294967295
 800a3de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a3e0:	e008      	b.n	800a3f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3e2:	4b07      	ldr	r3, [pc, #28]	; (800a400 <prvResetNextTaskUnblockTime+0x38>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	68db      	ldr	r3, [r3, #12]
 800a3e8:	68db      	ldr	r3, [r3, #12]
 800a3ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	685b      	ldr	r3, [r3, #4]
 800a3f0:	4a04      	ldr	r2, [pc, #16]	; (800a404 <prvResetNextTaskUnblockTime+0x3c>)
 800a3f2:	6013      	str	r3, [r2, #0]
}
 800a3f4:	bf00      	nop
 800a3f6:	370c      	adds	r7, #12
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fe:	4770      	bx	lr
 800a400:	20000dbc 	.word	0x20000dbc
 800a404:	20000e24 	.word	0x20000e24

0800a408 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a408:	b480      	push	{r7}
 800a40a:	b083      	sub	sp, #12
 800a40c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a40e:	4b0b      	ldr	r3, [pc, #44]	; (800a43c <xTaskGetSchedulerState+0x34>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d102      	bne.n	800a41c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a416:	2301      	movs	r3, #1
 800a418:	607b      	str	r3, [r7, #4]
 800a41a:	e008      	b.n	800a42e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a41c:	4b08      	ldr	r3, [pc, #32]	; (800a440 <xTaskGetSchedulerState+0x38>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d102      	bne.n	800a42a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a424:	2302      	movs	r3, #2
 800a426:	607b      	str	r3, [r7, #4]
 800a428:	e001      	b.n	800a42e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a42a:	2300      	movs	r3, #0
 800a42c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a42e:	687b      	ldr	r3, [r7, #4]
	}
 800a430:	4618      	mov	r0, r3
 800a432:	370c      	adds	r7, #12
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr
 800a43c:	20000e10 	.word	0x20000e10
 800a440:	20000e2c 	.word	0x20000e2c

0800a444 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a444:	b580      	push	{r7, lr}
 800a446:	b086      	sub	sp, #24
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a450:	2300      	movs	r3, #0
 800a452:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d056      	beq.n	800a508 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a45a:	4b2e      	ldr	r3, [pc, #184]	; (800a514 <xTaskPriorityDisinherit+0xd0>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	693a      	ldr	r2, [r7, #16]
 800a460:	429a      	cmp	r2, r3
 800a462:	d00a      	beq.n	800a47a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a464:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a468:	f383 8811 	msr	BASEPRI, r3
 800a46c:	f3bf 8f6f 	isb	sy
 800a470:	f3bf 8f4f 	dsb	sy
 800a474:	60fb      	str	r3, [r7, #12]
}
 800a476:	bf00      	nop
 800a478:	e7fe      	b.n	800a478 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d10a      	bne.n	800a498 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a486:	f383 8811 	msr	BASEPRI, r3
 800a48a:	f3bf 8f6f 	isb	sy
 800a48e:	f3bf 8f4f 	dsb	sy
 800a492:	60bb      	str	r3, [r7, #8]
}
 800a494:	bf00      	nop
 800a496:	e7fe      	b.n	800a496 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a49c:	1e5a      	subs	r2, r3, #1
 800a49e:	693b      	ldr	r3, [r7, #16]
 800a4a0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	d02c      	beq.n	800a508 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d128      	bne.n	800a508 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a4b6:	693b      	ldr	r3, [r7, #16]
 800a4b8:	3304      	adds	r3, #4
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f7fe fbb6 	bl	8008c2c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4cc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a4d0:	693b      	ldr	r3, [r7, #16]
 800a4d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a4d4:	693b      	ldr	r3, [r7, #16]
 800a4d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4d8:	4b0f      	ldr	r3, [pc, #60]	; (800a518 <xTaskPriorityDisinherit+0xd4>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	d903      	bls.n	800a4e8 <xTaskPriorityDisinherit+0xa4>
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e4:	4a0c      	ldr	r2, [pc, #48]	; (800a518 <xTaskPriorityDisinherit+0xd4>)
 800a4e6:	6013      	str	r3, [r2, #0]
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4ec:	4613      	mov	r3, r2
 800a4ee:	009b      	lsls	r3, r3, #2
 800a4f0:	4413      	add	r3, r2
 800a4f2:	009b      	lsls	r3, r3, #2
 800a4f4:	4a09      	ldr	r2, [pc, #36]	; (800a51c <xTaskPriorityDisinherit+0xd8>)
 800a4f6:	441a      	add	r2, r3
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	3304      	adds	r3, #4
 800a4fc:	4619      	mov	r1, r3
 800a4fe:	4610      	mov	r0, r2
 800a500:	f7fe fb37 	bl	8008b72 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a504:	2301      	movs	r3, #1
 800a506:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a508:	697b      	ldr	r3, [r7, #20]
	}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3718      	adds	r7, #24
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}
 800a512:	bf00      	nop
 800a514:	20000930 	.word	0x20000930
 800a518:	20000e0c 	.word	0x20000e0c
 800a51c:	20000934 	.word	0x20000934

0800a520 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b084      	sub	sp, #16
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a52a:	4b21      	ldr	r3, [pc, #132]	; (800a5b0 <prvAddCurrentTaskToDelayedList+0x90>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a530:	4b20      	ldr	r3, [pc, #128]	; (800a5b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	3304      	adds	r3, #4
 800a536:	4618      	mov	r0, r3
 800a538:	f7fe fb78 	bl	8008c2c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a542:	d10a      	bne.n	800a55a <prvAddCurrentTaskToDelayedList+0x3a>
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d007      	beq.n	800a55a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a54a:	4b1a      	ldr	r3, [pc, #104]	; (800a5b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	3304      	adds	r3, #4
 800a550:	4619      	mov	r1, r3
 800a552:	4819      	ldr	r0, [pc, #100]	; (800a5b8 <prvAddCurrentTaskToDelayedList+0x98>)
 800a554:	f7fe fb0d 	bl	8008b72 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a558:	e026      	b.n	800a5a8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a55a:	68fa      	ldr	r2, [r7, #12]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	4413      	add	r3, r2
 800a560:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a562:	4b14      	ldr	r3, [pc, #80]	; (800a5b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	68ba      	ldr	r2, [r7, #8]
 800a568:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a56a:	68ba      	ldr	r2, [r7, #8]
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	429a      	cmp	r2, r3
 800a570:	d209      	bcs.n	800a586 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a572:	4b12      	ldr	r3, [pc, #72]	; (800a5bc <prvAddCurrentTaskToDelayedList+0x9c>)
 800a574:	681a      	ldr	r2, [r3, #0]
 800a576:	4b0f      	ldr	r3, [pc, #60]	; (800a5b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	3304      	adds	r3, #4
 800a57c:	4619      	mov	r1, r3
 800a57e:	4610      	mov	r0, r2
 800a580:	f7fe fb1b 	bl	8008bba <vListInsert>
}
 800a584:	e010      	b.n	800a5a8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a586:	4b0e      	ldr	r3, [pc, #56]	; (800a5c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a588:	681a      	ldr	r2, [r3, #0]
 800a58a:	4b0a      	ldr	r3, [pc, #40]	; (800a5b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	3304      	adds	r3, #4
 800a590:	4619      	mov	r1, r3
 800a592:	4610      	mov	r0, r2
 800a594:	f7fe fb11 	bl	8008bba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a598:	4b0a      	ldr	r3, [pc, #40]	; (800a5c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	68ba      	ldr	r2, [r7, #8]
 800a59e:	429a      	cmp	r2, r3
 800a5a0:	d202      	bcs.n	800a5a8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a5a2:	4a08      	ldr	r2, [pc, #32]	; (800a5c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	6013      	str	r3, [r2, #0]
}
 800a5a8:	bf00      	nop
 800a5aa:	3710      	adds	r7, #16
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}
 800a5b0:	20000e08 	.word	0x20000e08
 800a5b4:	20000930 	.word	0x20000930
 800a5b8:	20000df0 	.word	0x20000df0
 800a5bc:	20000dc0 	.word	0x20000dc0
 800a5c0:	20000dbc 	.word	0x20000dbc
 800a5c4:	20000e24 	.word	0x20000e24

0800a5c8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b08a      	sub	sp, #40	; 0x28
 800a5cc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a5d2:	f000 fba1 	bl	800ad18 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a5d6:	4b1c      	ldr	r3, [pc, #112]	; (800a648 <xTimerCreateTimerTask+0x80>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d021      	beq.n	800a622 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a5e6:	1d3a      	adds	r2, r7, #4
 800a5e8:	f107 0108 	add.w	r1, r7, #8
 800a5ec:	f107 030c 	add.w	r3, r7, #12
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f7fe fa77 	bl	8008ae4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a5f6:	6879      	ldr	r1, [r7, #4]
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	68fa      	ldr	r2, [r7, #12]
 800a5fc:	9202      	str	r2, [sp, #8]
 800a5fe:	9301      	str	r3, [sp, #4]
 800a600:	2302      	movs	r3, #2
 800a602:	9300      	str	r3, [sp, #0]
 800a604:	2300      	movs	r3, #0
 800a606:	460a      	mov	r2, r1
 800a608:	4910      	ldr	r1, [pc, #64]	; (800a64c <xTimerCreateTimerTask+0x84>)
 800a60a:	4811      	ldr	r0, [pc, #68]	; (800a650 <xTimerCreateTimerTask+0x88>)
 800a60c:	f7ff f8de 	bl	80097cc <xTaskCreateStatic>
 800a610:	4603      	mov	r3, r0
 800a612:	4a10      	ldr	r2, [pc, #64]	; (800a654 <xTimerCreateTimerTask+0x8c>)
 800a614:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a616:	4b0f      	ldr	r3, [pc, #60]	; (800a654 <xTimerCreateTimerTask+0x8c>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d001      	beq.n	800a622 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a61e:	2301      	movs	r3, #1
 800a620:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d10a      	bne.n	800a63e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a62c:	f383 8811 	msr	BASEPRI, r3
 800a630:	f3bf 8f6f 	isb	sy
 800a634:	f3bf 8f4f 	dsb	sy
 800a638:	613b      	str	r3, [r7, #16]
}
 800a63a:	bf00      	nop
 800a63c:	e7fe      	b.n	800a63c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a63e:	697b      	ldr	r3, [r7, #20]
}
 800a640:	4618      	mov	r0, r3
 800a642:	3718      	adds	r7, #24
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}
 800a648:	20000e60 	.word	0x20000e60
 800a64c:	0800c650 	.word	0x0800c650
 800a650:	0800a8c1 	.word	0x0800a8c1
 800a654:	20000e64 	.word	0x20000e64

0800a658 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b088      	sub	sp, #32
 800a65c:	af02      	add	r7, sp, #8
 800a65e:	60f8      	str	r0, [r7, #12]
 800a660:	60b9      	str	r1, [r7, #8]
 800a662:	607a      	str	r2, [r7, #4]
 800a664:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800a666:	202c      	movs	r0, #44	; 0x2c
 800a668:	f000 fe06 	bl	800b278 <pvPortMalloc>
 800a66c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800a66e:	697b      	ldr	r3, [r7, #20]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d00d      	beq.n	800a690 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	2200      	movs	r2, #0
 800a678:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a67c:	697b      	ldr	r3, [r7, #20]
 800a67e:	9301      	str	r3, [sp, #4]
 800a680:	6a3b      	ldr	r3, [r7, #32]
 800a682:	9300      	str	r3, [sp, #0]
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	687a      	ldr	r2, [r7, #4]
 800a688:	68b9      	ldr	r1, [r7, #8]
 800a68a:	68f8      	ldr	r0, [r7, #12]
 800a68c:	f000 f843 	bl	800a716 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800a690:	697b      	ldr	r3, [r7, #20]
	}
 800a692:	4618      	mov	r0, r3
 800a694:	3718      	adds	r7, #24
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}

0800a69a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800a69a:	b580      	push	{r7, lr}
 800a69c:	b08a      	sub	sp, #40	; 0x28
 800a69e:	af02      	add	r7, sp, #8
 800a6a0:	60f8      	str	r0, [r7, #12]
 800a6a2:	60b9      	str	r1, [r7, #8]
 800a6a4:	607a      	str	r2, [r7, #4]
 800a6a6:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800a6a8:	232c      	movs	r3, #44	; 0x2c
 800a6aa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800a6ac:	693b      	ldr	r3, [r7, #16]
 800a6ae:	2b2c      	cmp	r3, #44	; 0x2c
 800a6b0:	d00a      	beq.n	800a6c8 <xTimerCreateStatic+0x2e>
	__asm volatile
 800a6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b6:	f383 8811 	msr	BASEPRI, r3
 800a6ba:	f3bf 8f6f 	isb	sy
 800a6be:	f3bf 8f4f 	dsb	sy
 800a6c2:	61bb      	str	r3, [r7, #24]
}
 800a6c4:	bf00      	nop
 800a6c6:	e7fe      	b.n	800a6c6 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a6c8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800a6ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d10a      	bne.n	800a6e6 <xTimerCreateStatic+0x4c>
	__asm volatile
 800a6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d4:	f383 8811 	msr	BASEPRI, r3
 800a6d8:	f3bf 8f6f 	isb	sy
 800a6dc:	f3bf 8f4f 	dsb	sy
 800a6e0:	617b      	str	r3, [r7, #20]
}
 800a6e2:	bf00      	nop
 800a6e4:	e7fe      	b.n	800a6e4 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800a6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6e8:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800a6ea:	69fb      	ldr	r3, [r7, #28]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d00d      	beq.n	800a70c <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800a6f0:	69fb      	ldr	r3, [r7, #28]
 800a6f2:	2202      	movs	r2, #2
 800a6f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a6f8:	69fb      	ldr	r3, [r7, #28]
 800a6fa:	9301      	str	r3, [sp, #4]
 800a6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6fe:	9300      	str	r3, [sp, #0]
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	687a      	ldr	r2, [r7, #4]
 800a704:	68b9      	ldr	r1, [r7, #8]
 800a706:	68f8      	ldr	r0, [r7, #12]
 800a708:	f000 f805 	bl	800a716 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800a70c:	69fb      	ldr	r3, [r7, #28]
	}
 800a70e:	4618      	mov	r0, r3
 800a710:	3720      	adds	r7, #32
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}

0800a716 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800a716:	b580      	push	{r7, lr}
 800a718:	b086      	sub	sp, #24
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	60f8      	str	r0, [r7, #12]
 800a71e:	60b9      	str	r1, [r7, #8]
 800a720:	607a      	str	r2, [r7, #4]
 800a722:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d10a      	bne.n	800a740 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800a72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a72e:	f383 8811 	msr	BASEPRI, r3
 800a732:	f3bf 8f6f 	isb	sy
 800a736:	f3bf 8f4f 	dsb	sy
 800a73a:	617b      	str	r3, [r7, #20]
}
 800a73c:	bf00      	nop
 800a73e:	e7fe      	b.n	800a73e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800a740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a742:	2b00      	cmp	r3, #0
 800a744:	d01e      	beq.n	800a784 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800a746:	f000 fae7 	bl	800ad18 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800a74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a74c:	68fa      	ldr	r2, [r7, #12]
 800a74e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800a750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a752:	68ba      	ldr	r2, [r7, #8]
 800a754:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800a756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a758:	683a      	ldr	r2, [r7, #0]
 800a75a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800a75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a75e:	6a3a      	ldr	r2, [r7, #32]
 800a760:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800a762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a764:	3304      	adds	r3, #4
 800a766:	4618      	mov	r0, r3
 800a768:	f7fe f9f6 	bl	8008b58 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d008      	beq.n	800a784 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800a772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a774:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a778:	f043 0304 	orr.w	r3, r3, #4
 800a77c:	b2da      	uxtb	r2, r3
 800a77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a780:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800a784:	bf00      	nop
 800a786:	3718      	adds	r7, #24
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}

0800a78c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b08a      	sub	sp, #40	; 0x28
 800a790:	af00      	add	r7, sp, #0
 800a792:	60f8      	str	r0, [r7, #12]
 800a794:	60b9      	str	r1, [r7, #8]
 800a796:	607a      	str	r2, [r7, #4]
 800a798:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a79a:	2300      	movs	r3, #0
 800a79c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d10a      	bne.n	800a7ba <xTimerGenericCommand+0x2e>
	__asm volatile
 800a7a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a8:	f383 8811 	msr	BASEPRI, r3
 800a7ac:	f3bf 8f6f 	isb	sy
 800a7b0:	f3bf 8f4f 	dsb	sy
 800a7b4:	623b      	str	r3, [r7, #32]
}
 800a7b6:	bf00      	nop
 800a7b8:	e7fe      	b.n	800a7b8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a7ba:	4b1a      	ldr	r3, [pc, #104]	; (800a824 <xTimerGenericCommand+0x98>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d02a      	beq.n	800a818 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	2b05      	cmp	r3, #5
 800a7d2:	dc18      	bgt.n	800a806 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a7d4:	f7ff fe18 	bl	800a408 <xTaskGetSchedulerState>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	2b02      	cmp	r3, #2
 800a7dc:	d109      	bne.n	800a7f2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a7de:	4b11      	ldr	r3, [pc, #68]	; (800a824 <xTimerGenericCommand+0x98>)
 800a7e0:	6818      	ldr	r0, [r3, #0]
 800a7e2:	f107 0110 	add.w	r1, r7, #16
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7ea:	f7fe fb87 	bl	8008efc <xQueueGenericSend>
 800a7ee:	6278      	str	r0, [r7, #36]	; 0x24
 800a7f0:	e012      	b.n	800a818 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a7f2:	4b0c      	ldr	r3, [pc, #48]	; (800a824 <xTimerGenericCommand+0x98>)
 800a7f4:	6818      	ldr	r0, [r3, #0]
 800a7f6:	f107 0110 	add.w	r1, r7, #16
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	f7fe fb7d 	bl	8008efc <xQueueGenericSend>
 800a802:	6278      	str	r0, [r7, #36]	; 0x24
 800a804:	e008      	b.n	800a818 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a806:	4b07      	ldr	r3, [pc, #28]	; (800a824 <xTimerGenericCommand+0x98>)
 800a808:	6818      	ldr	r0, [r3, #0]
 800a80a:	f107 0110 	add.w	r1, r7, #16
 800a80e:	2300      	movs	r3, #0
 800a810:	683a      	ldr	r2, [r7, #0]
 800a812:	f7fe fc71 	bl	80090f8 <xQueueGenericSendFromISR>
 800a816:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3728      	adds	r7, #40	; 0x28
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}
 800a822:	bf00      	nop
 800a824:	20000e60 	.word	0x20000e60

0800a828 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b088      	sub	sp, #32
 800a82c:	af02      	add	r7, sp, #8
 800a82e:	6078      	str	r0, [r7, #4]
 800a830:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a832:	4b22      	ldr	r3, [pc, #136]	; (800a8bc <prvProcessExpiredTimer+0x94>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	68db      	ldr	r3, [r3, #12]
 800a838:	68db      	ldr	r3, [r3, #12]
 800a83a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a83c:	697b      	ldr	r3, [r7, #20]
 800a83e:	3304      	adds	r3, #4
 800a840:	4618      	mov	r0, r3
 800a842:	f7fe f9f3 	bl	8008c2c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a84c:	f003 0304 	and.w	r3, r3, #4
 800a850:	2b00      	cmp	r3, #0
 800a852:	d022      	beq.n	800a89a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	699a      	ldr	r2, [r3, #24]
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	18d1      	adds	r1, r2, r3
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	683a      	ldr	r2, [r7, #0]
 800a860:	6978      	ldr	r0, [r7, #20]
 800a862:	f000 f8d1 	bl	800aa08 <prvInsertTimerInActiveList>
 800a866:	4603      	mov	r3, r0
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d01f      	beq.n	800a8ac <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a86c:	2300      	movs	r3, #0
 800a86e:	9300      	str	r3, [sp, #0]
 800a870:	2300      	movs	r3, #0
 800a872:	687a      	ldr	r2, [r7, #4]
 800a874:	2100      	movs	r1, #0
 800a876:	6978      	ldr	r0, [r7, #20]
 800a878:	f7ff ff88 	bl	800a78c <xTimerGenericCommand>
 800a87c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d113      	bne.n	800a8ac <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a884:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a888:	f383 8811 	msr	BASEPRI, r3
 800a88c:	f3bf 8f6f 	isb	sy
 800a890:	f3bf 8f4f 	dsb	sy
 800a894:	60fb      	str	r3, [r7, #12]
}
 800a896:	bf00      	nop
 800a898:	e7fe      	b.n	800a898 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a8a0:	f023 0301 	bic.w	r3, r3, #1
 800a8a4:	b2da      	uxtb	r2, r3
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	6a1b      	ldr	r3, [r3, #32]
 800a8b0:	6978      	ldr	r0, [r7, #20]
 800a8b2:	4798      	blx	r3
}
 800a8b4:	bf00      	nop
 800a8b6:	3718      	adds	r7, #24
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}
 800a8bc:	20000e58 	.word	0x20000e58

0800a8c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b084      	sub	sp, #16
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a8c8:	f107 0308 	add.w	r3, r7, #8
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f000 f857 	bl	800a980 <prvGetNextExpireTime>
 800a8d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	4619      	mov	r1, r3
 800a8d8:	68f8      	ldr	r0, [r7, #12]
 800a8da:	f000 f803 	bl	800a8e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a8de:	f000 f8d5 	bl	800aa8c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a8e2:	e7f1      	b.n	800a8c8 <prvTimerTask+0x8>

0800a8e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b084      	sub	sp, #16
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a8ee:	f7ff f9a9 	bl	8009c44 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a8f2:	f107 0308 	add.w	r3, r7, #8
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f000 f866 	bl	800a9c8 <prvSampleTimeNow>
 800a8fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d130      	bne.n	800a966 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d10a      	bne.n	800a920 <prvProcessTimerOrBlockTask+0x3c>
 800a90a:	687a      	ldr	r2, [r7, #4]
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	429a      	cmp	r2, r3
 800a910:	d806      	bhi.n	800a920 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a912:	f7ff f9a5 	bl	8009c60 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a916:	68f9      	ldr	r1, [r7, #12]
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f7ff ff85 	bl	800a828 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a91e:	e024      	b.n	800a96a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d008      	beq.n	800a938 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a926:	4b13      	ldr	r3, [pc, #76]	; (800a974 <prvProcessTimerOrBlockTask+0x90>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d101      	bne.n	800a934 <prvProcessTimerOrBlockTask+0x50>
 800a930:	2301      	movs	r3, #1
 800a932:	e000      	b.n	800a936 <prvProcessTimerOrBlockTask+0x52>
 800a934:	2300      	movs	r3, #0
 800a936:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a938:	4b0f      	ldr	r3, [pc, #60]	; (800a978 <prvProcessTimerOrBlockTask+0x94>)
 800a93a:	6818      	ldr	r0, [r3, #0]
 800a93c:	687a      	ldr	r2, [r7, #4]
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	1ad3      	subs	r3, r2, r3
 800a942:	683a      	ldr	r2, [r7, #0]
 800a944:	4619      	mov	r1, r3
 800a946:	f7fe ff0d 	bl	8009764 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a94a:	f7ff f989 	bl	8009c60 <xTaskResumeAll>
 800a94e:	4603      	mov	r3, r0
 800a950:	2b00      	cmp	r3, #0
 800a952:	d10a      	bne.n	800a96a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a954:	4b09      	ldr	r3, [pc, #36]	; (800a97c <prvProcessTimerOrBlockTask+0x98>)
 800a956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a95a:	601a      	str	r2, [r3, #0]
 800a95c:	f3bf 8f4f 	dsb	sy
 800a960:	f3bf 8f6f 	isb	sy
}
 800a964:	e001      	b.n	800a96a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a966:	f7ff f97b 	bl	8009c60 <xTaskResumeAll>
}
 800a96a:	bf00      	nop
 800a96c:	3710      	adds	r7, #16
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}
 800a972:	bf00      	nop
 800a974:	20000e5c 	.word	0x20000e5c
 800a978:	20000e60 	.word	0x20000e60
 800a97c:	e000ed04 	.word	0xe000ed04

0800a980 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a980:	b480      	push	{r7}
 800a982:	b085      	sub	sp, #20
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a988:	4b0e      	ldr	r3, [pc, #56]	; (800a9c4 <prvGetNextExpireTime+0x44>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d101      	bne.n	800a996 <prvGetNextExpireTime+0x16>
 800a992:	2201      	movs	r2, #1
 800a994:	e000      	b.n	800a998 <prvGetNextExpireTime+0x18>
 800a996:	2200      	movs	r2, #0
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d105      	bne.n	800a9b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a9a4:	4b07      	ldr	r3, [pc, #28]	; (800a9c4 <prvGetNextExpireTime+0x44>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	68db      	ldr	r3, [r3, #12]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	60fb      	str	r3, [r7, #12]
 800a9ae:	e001      	b.n	800a9b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3714      	adds	r7, #20
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c0:	4770      	bx	lr
 800a9c2:	bf00      	nop
 800a9c4:	20000e58 	.word	0x20000e58

0800a9c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b084      	sub	sp, #16
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a9d0:	f7ff f9e4 	bl	8009d9c <xTaskGetTickCount>
 800a9d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a9d6:	4b0b      	ldr	r3, [pc, #44]	; (800aa04 <prvSampleTimeNow+0x3c>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	68fa      	ldr	r2, [r7, #12]
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d205      	bcs.n	800a9ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a9e0:	f000 f936 	bl	800ac50 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	601a      	str	r2, [r3, #0]
 800a9ea:	e002      	b.n	800a9f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a9f2:	4a04      	ldr	r2, [pc, #16]	; (800aa04 <prvSampleTimeNow+0x3c>)
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3710      	adds	r7, #16
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}
 800aa02:	bf00      	nop
 800aa04:	20000e68 	.word	0x20000e68

0800aa08 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b086      	sub	sp, #24
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	60f8      	str	r0, [r7, #12]
 800aa10:	60b9      	str	r1, [r7, #8]
 800aa12:	607a      	str	r2, [r7, #4]
 800aa14:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800aa16:	2300      	movs	r3, #0
 800aa18:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	68ba      	ldr	r2, [r7, #8]
 800aa1e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	68fa      	ldr	r2, [r7, #12]
 800aa24:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800aa26:	68ba      	ldr	r2, [r7, #8]
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d812      	bhi.n	800aa54 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa2e:	687a      	ldr	r2, [r7, #4]
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	1ad2      	subs	r2, r2, r3
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	699b      	ldr	r3, [r3, #24]
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d302      	bcc.n	800aa42 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	617b      	str	r3, [r7, #20]
 800aa40:	e01b      	b.n	800aa7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800aa42:	4b10      	ldr	r3, [pc, #64]	; (800aa84 <prvInsertTimerInActiveList+0x7c>)
 800aa44:	681a      	ldr	r2, [r3, #0]
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	3304      	adds	r3, #4
 800aa4a:	4619      	mov	r1, r3
 800aa4c:	4610      	mov	r0, r2
 800aa4e:	f7fe f8b4 	bl	8008bba <vListInsert>
 800aa52:	e012      	b.n	800aa7a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800aa54:	687a      	ldr	r2, [r7, #4]
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	429a      	cmp	r2, r3
 800aa5a:	d206      	bcs.n	800aa6a <prvInsertTimerInActiveList+0x62>
 800aa5c:	68ba      	ldr	r2, [r7, #8]
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d302      	bcc.n	800aa6a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800aa64:	2301      	movs	r3, #1
 800aa66:	617b      	str	r3, [r7, #20]
 800aa68:	e007      	b.n	800aa7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aa6a:	4b07      	ldr	r3, [pc, #28]	; (800aa88 <prvInsertTimerInActiveList+0x80>)
 800aa6c:	681a      	ldr	r2, [r3, #0]
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	3304      	adds	r3, #4
 800aa72:	4619      	mov	r1, r3
 800aa74:	4610      	mov	r0, r2
 800aa76:	f7fe f8a0 	bl	8008bba <vListInsert>
		}
	}

	return xProcessTimerNow;
 800aa7a:	697b      	ldr	r3, [r7, #20]
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3718      	adds	r7, #24
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}
 800aa84:	20000e5c 	.word	0x20000e5c
 800aa88:	20000e58 	.word	0x20000e58

0800aa8c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b08e      	sub	sp, #56	; 0x38
 800aa90:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aa92:	e0ca      	b.n	800ac2a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	da18      	bge.n	800aacc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800aa9a:	1d3b      	adds	r3, r7, #4
 800aa9c:	3304      	adds	r3, #4
 800aa9e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800aaa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d10a      	bne.n	800aabc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800aaa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaaa:	f383 8811 	msr	BASEPRI, r3
 800aaae:	f3bf 8f6f 	isb	sy
 800aab2:	f3bf 8f4f 	dsb	sy
 800aab6:	61fb      	str	r3, [r7, #28]
}
 800aab8:	bf00      	nop
 800aaba:	e7fe      	b.n	800aaba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800aabc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aac2:	6850      	ldr	r0, [r2, #4]
 800aac4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aac6:	6892      	ldr	r2, [r2, #8]
 800aac8:	4611      	mov	r1, r2
 800aaca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	f2c0 80aa 	blt.w	800ac28 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800aad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aada:	695b      	ldr	r3, [r3, #20]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d004      	beq.n	800aaea <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae2:	3304      	adds	r3, #4
 800aae4:	4618      	mov	r0, r3
 800aae6:	f7fe f8a1 	bl	8008c2c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aaea:	463b      	mov	r3, r7
 800aaec:	4618      	mov	r0, r3
 800aaee:	f7ff ff6b 	bl	800a9c8 <prvSampleTimeNow>
 800aaf2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2b09      	cmp	r3, #9
 800aaf8:	f200 8097 	bhi.w	800ac2a <prvProcessReceivedCommands+0x19e>
 800aafc:	a201      	add	r2, pc, #4	; (adr r2, 800ab04 <prvProcessReceivedCommands+0x78>)
 800aafe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab02:	bf00      	nop
 800ab04:	0800ab2d 	.word	0x0800ab2d
 800ab08:	0800ab2d 	.word	0x0800ab2d
 800ab0c:	0800ab2d 	.word	0x0800ab2d
 800ab10:	0800aba1 	.word	0x0800aba1
 800ab14:	0800abb5 	.word	0x0800abb5
 800ab18:	0800abff 	.word	0x0800abff
 800ab1c:	0800ab2d 	.word	0x0800ab2d
 800ab20:	0800ab2d 	.word	0x0800ab2d
 800ab24:	0800aba1 	.word	0x0800aba1
 800ab28:	0800abb5 	.word	0x0800abb5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ab2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab32:	f043 0301 	orr.w	r3, r3, #1
 800ab36:	b2da      	uxtb	r2, r3
 800ab38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ab3e:	68ba      	ldr	r2, [r7, #8]
 800ab40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab42:	699b      	ldr	r3, [r3, #24]
 800ab44:	18d1      	adds	r1, r2, r3
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab4c:	f7ff ff5c 	bl	800aa08 <prvInsertTimerInActiveList>
 800ab50:	4603      	mov	r3, r0
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d069      	beq.n	800ac2a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ab56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab58:	6a1b      	ldr	r3, [r3, #32]
 800ab5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab5c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ab5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab64:	f003 0304 	and.w	r3, r3, #4
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d05e      	beq.n	800ac2a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ab6c:	68ba      	ldr	r2, [r7, #8]
 800ab6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab70:	699b      	ldr	r3, [r3, #24]
 800ab72:	441a      	add	r2, r3
 800ab74:	2300      	movs	r3, #0
 800ab76:	9300      	str	r3, [sp, #0]
 800ab78:	2300      	movs	r3, #0
 800ab7a:	2100      	movs	r1, #0
 800ab7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab7e:	f7ff fe05 	bl	800a78c <xTimerGenericCommand>
 800ab82:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ab84:	6a3b      	ldr	r3, [r7, #32]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d14f      	bne.n	800ac2a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ab8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab8e:	f383 8811 	msr	BASEPRI, r3
 800ab92:	f3bf 8f6f 	isb	sy
 800ab96:	f3bf 8f4f 	dsb	sy
 800ab9a:	61bb      	str	r3, [r7, #24]
}
 800ab9c:	bf00      	nop
 800ab9e:	e7fe      	b.n	800ab9e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aba6:	f023 0301 	bic.w	r3, r3, #1
 800abaa:	b2da      	uxtb	r2, r3
 800abac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800abb2:	e03a      	b.n	800ac2a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800abb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800abba:	f043 0301 	orr.w	r3, r3, #1
 800abbe:	b2da      	uxtb	r2, r3
 800abc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800abc6:	68ba      	ldr	r2, [r7, #8]
 800abc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800abcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abce:	699b      	ldr	r3, [r3, #24]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d10a      	bne.n	800abea <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800abd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd8:	f383 8811 	msr	BASEPRI, r3
 800abdc:	f3bf 8f6f 	isb	sy
 800abe0:	f3bf 8f4f 	dsb	sy
 800abe4:	617b      	str	r3, [r7, #20]
}
 800abe6:	bf00      	nop
 800abe8:	e7fe      	b.n	800abe8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800abea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abec:	699a      	ldr	r2, [r3, #24]
 800abee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf0:	18d1      	adds	r1, r2, r3
 800abf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abf8:	f7ff ff06 	bl	800aa08 <prvInsertTimerInActiveList>
					break;
 800abfc:	e015      	b.n	800ac2a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800abfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac04:	f003 0302 	and.w	r3, r3, #2
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d103      	bne.n	800ac14 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ac0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac0e:	f000 fbff 	bl	800b410 <vPortFree>
 800ac12:	e00a      	b.n	800ac2a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ac14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac1a:	f023 0301 	bic.w	r3, r3, #1
 800ac1e:	b2da      	uxtb	r2, r3
 800ac20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ac26:	e000      	b.n	800ac2a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ac28:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ac2a:	4b08      	ldr	r3, [pc, #32]	; (800ac4c <prvProcessReceivedCommands+0x1c0>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	1d39      	adds	r1, r7, #4
 800ac30:	2200      	movs	r2, #0
 800ac32:	4618      	mov	r0, r3
 800ac34:	f7fe fafc 	bl	8009230 <xQueueReceive>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	f47f af2a 	bne.w	800aa94 <prvProcessReceivedCommands+0x8>
	}
}
 800ac40:	bf00      	nop
 800ac42:	bf00      	nop
 800ac44:	3730      	adds	r7, #48	; 0x30
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}
 800ac4a:	bf00      	nop
 800ac4c:	20000e60 	.word	0x20000e60

0800ac50 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b088      	sub	sp, #32
 800ac54:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ac56:	e048      	b.n	800acea <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ac58:	4b2d      	ldr	r3, [pc, #180]	; (800ad10 <prvSwitchTimerLists+0xc0>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	68db      	ldr	r3, [r3, #12]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac62:	4b2b      	ldr	r3, [pc, #172]	; (800ad10 <prvSwitchTimerLists+0xc0>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	68db      	ldr	r3, [r3, #12]
 800ac68:	68db      	ldr	r3, [r3, #12]
 800ac6a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	3304      	adds	r3, #4
 800ac70:	4618      	mov	r0, r3
 800ac72:	f7fd ffdb 	bl	8008c2c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	6a1b      	ldr	r3, [r3, #32]
 800ac7a:	68f8      	ldr	r0, [r7, #12]
 800ac7c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac84:	f003 0304 	and.w	r3, r3, #4
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d02e      	beq.n	800acea <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	699b      	ldr	r3, [r3, #24]
 800ac90:	693a      	ldr	r2, [r7, #16]
 800ac92:	4413      	add	r3, r2
 800ac94:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ac96:	68ba      	ldr	r2, [r7, #8]
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d90e      	bls.n	800acbc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	68ba      	ldr	r2, [r7, #8]
 800aca2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	68fa      	ldr	r2, [r7, #12]
 800aca8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800acaa:	4b19      	ldr	r3, [pc, #100]	; (800ad10 <prvSwitchTimerLists+0xc0>)
 800acac:	681a      	ldr	r2, [r3, #0]
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	3304      	adds	r3, #4
 800acb2:	4619      	mov	r1, r3
 800acb4:	4610      	mov	r0, r2
 800acb6:	f7fd ff80 	bl	8008bba <vListInsert>
 800acba:	e016      	b.n	800acea <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800acbc:	2300      	movs	r3, #0
 800acbe:	9300      	str	r3, [sp, #0]
 800acc0:	2300      	movs	r3, #0
 800acc2:	693a      	ldr	r2, [r7, #16]
 800acc4:	2100      	movs	r1, #0
 800acc6:	68f8      	ldr	r0, [r7, #12]
 800acc8:	f7ff fd60 	bl	800a78c <xTimerGenericCommand>
 800accc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d10a      	bne.n	800acea <prvSwitchTimerLists+0x9a>
	__asm volatile
 800acd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd8:	f383 8811 	msr	BASEPRI, r3
 800acdc:	f3bf 8f6f 	isb	sy
 800ace0:	f3bf 8f4f 	dsb	sy
 800ace4:	603b      	str	r3, [r7, #0]
}
 800ace6:	bf00      	nop
 800ace8:	e7fe      	b.n	800ace8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800acea:	4b09      	ldr	r3, [pc, #36]	; (800ad10 <prvSwitchTimerLists+0xc0>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d1b1      	bne.n	800ac58 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800acf4:	4b06      	ldr	r3, [pc, #24]	; (800ad10 <prvSwitchTimerLists+0xc0>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800acfa:	4b06      	ldr	r3, [pc, #24]	; (800ad14 <prvSwitchTimerLists+0xc4>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	4a04      	ldr	r2, [pc, #16]	; (800ad10 <prvSwitchTimerLists+0xc0>)
 800ad00:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ad02:	4a04      	ldr	r2, [pc, #16]	; (800ad14 <prvSwitchTimerLists+0xc4>)
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	6013      	str	r3, [r2, #0]
}
 800ad08:	bf00      	nop
 800ad0a:	3718      	adds	r7, #24
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}
 800ad10:	20000e58 	.word	0x20000e58
 800ad14:	20000e5c 	.word	0x20000e5c

0800ad18 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b082      	sub	sp, #8
 800ad1c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ad1e:	f000 f989 	bl	800b034 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ad22:	4b15      	ldr	r3, [pc, #84]	; (800ad78 <prvCheckForValidListAndQueue+0x60>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d120      	bne.n	800ad6c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ad2a:	4814      	ldr	r0, [pc, #80]	; (800ad7c <prvCheckForValidListAndQueue+0x64>)
 800ad2c:	f7fd fef4 	bl	8008b18 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ad30:	4813      	ldr	r0, [pc, #76]	; (800ad80 <prvCheckForValidListAndQueue+0x68>)
 800ad32:	f7fd fef1 	bl	8008b18 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ad36:	4b13      	ldr	r3, [pc, #76]	; (800ad84 <prvCheckForValidListAndQueue+0x6c>)
 800ad38:	4a10      	ldr	r2, [pc, #64]	; (800ad7c <prvCheckForValidListAndQueue+0x64>)
 800ad3a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ad3c:	4b12      	ldr	r3, [pc, #72]	; (800ad88 <prvCheckForValidListAndQueue+0x70>)
 800ad3e:	4a10      	ldr	r2, [pc, #64]	; (800ad80 <prvCheckForValidListAndQueue+0x68>)
 800ad40:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ad42:	2300      	movs	r3, #0
 800ad44:	9300      	str	r3, [sp, #0]
 800ad46:	4b11      	ldr	r3, [pc, #68]	; (800ad8c <prvCheckForValidListAndQueue+0x74>)
 800ad48:	4a11      	ldr	r2, [pc, #68]	; (800ad90 <prvCheckForValidListAndQueue+0x78>)
 800ad4a:	2110      	movs	r1, #16
 800ad4c:	200a      	movs	r0, #10
 800ad4e:	f7fd ffff 	bl	8008d50 <xQueueGenericCreateStatic>
 800ad52:	4603      	mov	r3, r0
 800ad54:	4a08      	ldr	r2, [pc, #32]	; (800ad78 <prvCheckForValidListAndQueue+0x60>)
 800ad56:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ad58:	4b07      	ldr	r3, [pc, #28]	; (800ad78 <prvCheckForValidListAndQueue+0x60>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d005      	beq.n	800ad6c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ad60:	4b05      	ldr	r3, [pc, #20]	; (800ad78 <prvCheckForValidListAndQueue+0x60>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	490b      	ldr	r1, [pc, #44]	; (800ad94 <prvCheckForValidListAndQueue+0x7c>)
 800ad66:	4618      	mov	r0, r3
 800ad68:	f7fe fcd2 	bl	8009710 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ad6c:	f000 f992 	bl	800b094 <vPortExitCritical>
}
 800ad70:	bf00      	nop
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}
 800ad76:	bf00      	nop
 800ad78:	20000e60 	.word	0x20000e60
 800ad7c:	20000e30 	.word	0x20000e30
 800ad80:	20000e44 	.word	0x20000e44
 800ad84:	20000e58 	.word	0x20000e58
 800ad88:	20000e5c 	.word	0x20000e5c
 800ad8c:	20000f0c 	.word	0x20000f0c
 800ad90:	20000e6c 	.word	0x20000e6c
 800ad94:	0800c658 	.word	0x0800c658

0800ad98 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b086      	sub	sp, #24
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d10a      	bne.n	800adc0 <pvTimerGetTimerID+0x28>
	__asm volatile
 800adaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adae:	f383 8811 	msr	BASEPRI, r3
 800adb2:	f3bf 8f6f 	isb	sy
 800adb6:	f3bf 8f4f 	dsb	sy
 800adba:	60fb      	str	r3, [r7, #12]
}
 800adbc:	bf00      	nop
 800adbe:	e7fe      	b.n	800adbe <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800adc0:	f000 f938 	bl	800b034 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	69db      	ldr	r3, [r3, #28]
 800adc8:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800adca:	f000 f963 	bl	800b094 <vPortExitCritical>

	return pvReturn;
 800adce:	693b      	ldr	r3, [r7, #16]
}
 800add0:	4618      	mov	r0, r3
 800add2:	3718      	adds	r7, #24
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}

0800add8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800add8:	b480      	push	{r7}
 800adda:	b085      	sub	sp, #20
 800addc:	af00      	add	r7, sp, #0
 800adde:	60f8      	str	r0, [r7, #12]
 800ade0:	60b9      	str	r1, [r7, #8]
 800ade2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	3b04      	subs	r3, #4
 800ade8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800adf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	3b04      	subs	r3, #4
 800adf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	f023 0201 	bic.w	r2, r3, #1
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	3b04      	subs	r3, #4
 800ae06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ae08:	4a0c      	ldr	r2, [pc, #48]	; (800ae3c <pxPortInitialiseStack+0x64>)
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	3b14      	subs	r3, #20
 800ae12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ae14:	687a      	ldr	r2, [r7, #4]
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	3b04      	subs	r3, #4
 800ae1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	f06f 0202 	mvn.w	r2, #2
 800ae26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	3b20      	subs	r3, #32
 800ae2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
}
 800ae30:	4618      	mov	r0, r3
 800ae32:	3714      	adds	r7, #20
 800ae34:	46bd      	mov	sp, r7
 800ae36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3a:	4770      	bx	lr
 800ae3c:	0800ae41 	.word	0x0800ae41

0800ae40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ae40:	b480      	push	{r7}
 800ae42:	b085      	sub	sp, #20
 800ae44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ae46:	2300      	movs	r3, #0
 800ae48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ae4a:	4b12      	ldr	r3, [pc, #72]	; (800ae94 <prvTaskExitError+0x54>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae52:	d00a      	beq.n	800ae6a <prvTaskExitError+0x2a>
	__asm volatile
 800ae54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae58:	f383 8811 	msr	BASEPRI, r3
 800ae5c:	f3bf 8f6f 	isb	sy
 800ae60:	f3bf 8f4f 	dsb	sy
 800ae64:	60fb      	str	r3, [r7, #12]
}
 800ae66:	bf00      	nop
 800ae68:	e7fe      	b.n	800ae68 <prvTaskExitError+0x28>
	__asm volatile
 800ae6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae6e:	f383 8811 	msr	BASEPRI, r3
 800ae72:	f3bf 8f6f 	isb	sy
 800ae76:	f3bf 8f4f 	dsb	sy
 800ae7a:	60bb      	str	r3, [r7, #8]
}
 800ae7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ae7e:	bf00      	nop
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d0fc      	beq.n	800ae80 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ae86:	bf00      	nop
 800ae88:	bf00      	nop
 800ae8a:	3714      	adds	r7, #20
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae92:	4770      	bx	lr
 800ae94:	2000002c 	.word	0x2000002c
	...

0800aea0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aea0:	4b07      	ldr	r3, [pc, #28]	; (800aec0 <pxCurrentTCBConst2>)
 800aea2:	6819      	ldr	r1, [r3, #0]
 800aea4:	6808      	ldr	r0, [r1, #0]
 800aea6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeaa:	f380 8809 	msr	PSP, r0
 800aeae:	f3bf 8f6f 	isb	sy
 800aeb2:	f04f 0000 	mov.w	r0, #0
 800aeb6:	f380 8811 	msr	BASEPRI, r0
 800aeba:	4770      	bx	lr
 800aebc:	f3af 8000 	nop.w

0800aec0 <pxCurrentTCBConst2>:
 800aec0:	20000930 	.word	0x20000930
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aec4:	bf00      	nop
 800aec6:	bf00      	nop

0800aec8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800aec8:	4808      	ldr	r0, [pc, #32]	; (800aeec <prvPortStartFirstTask+0x24>)
 800aeca:	6800      	ldr	r0, [r0, #0]
 800aecc:	6800      	ldr	r0, [r0, #0]
 800aece:	f380 8808 	msr	MSP, r0
 800aed2:	f04f 0000 	mov.w	r0, #0
 800aed6:	f380 8814 	msr	CONTROL, r0
 800aeda:	b662      	cpsie	i
 800aedc:	b661      	cpsie	f
 800aede:	f3bf 8f4f 	dsb	sy
 800aee2:	f3bf 8f6f 	isb	sy
 800aee6:	df00      	svc	0
 800aee8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800aeea:	bf00      	nop
 800aeec:	e000ed08 	.word	0xe000ed08

0800aef0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b086      	sub	sp, #24
 800aef4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800aef6:	4b46      	ldr	r3, [pc, #280]	; (800b010 <xPortStartScheduler+0x120>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	4a46      	ldr	r2, [pc, #280]	; (800b014 <xPortStartScheduler+0x124>)
 800aefc:	4293      	cmp	r3, r2
 800aefe:	d10a      	bne.n	800af16 <xPortStartScheduler+0x26>
	__asm volatile
 800af00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af04:	f383 8811 	msr	BASEPRI, r3
 800af08:	f3bf 8f6f 	isb	sy
 800af0c:	f3bf 8f4f 	dsb	sy
 800af10:	613b      	str	r3, [r7, #16]
}
 800af12:	bf00      	nop
 800af14:	e7fe      	b.n	800af14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800af16:	4b3e      	ldr	r3, [pc, #248]	; (800b010 <xPortStartScheduler+0x120>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	4a3f      	ldr	r2, [pc, #252]	; (800b018 <xPortStartScheduler+0x128>)
 800af1c:	4293      	cmp	r3, r2
 800af1e:	d10a      	bne.n	800af36 <xPortStartScheduler+0x46>
	__asm volatile
 800af20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af24:	f383 8811 	msr	BASEPRI, r3
 800af28:	f3bf 8f6f 	isb	sy
 800af2c:	f3bf 8f4f 	dsb	sy
 800af30:	60fb      	str	r3, [r7, #12]
}
 800af32:	bf00      	nop
 800af34:	e7fe      	b.n	800af34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800af36:	4b39      	ldr	r3, [pc, #228]	; (800b01c <xPortStartScheduler+0x12c>)
 800af38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	781b      	ldrb	r3, [r3, #0]
 800af3e:	b2db      	uxtb	r3, r3
 800af40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	22ff      	movs	r2, #255	; 0xff
 800af46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	781b      	ldrb	r3, [r3, #0]
 800af4c:	b2db      	uxtb	r3, r3
 800af4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800af50:	78fb      	ldrb	r3, [r7, #3]
 800af52:	b2db      	uxtb	r3, r3
 800af54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800af58:	b2da      	uxtb	r2, r3
 800af5a:	4b31      	ldr	r3, [pc, #196]	; (800b020 <xPortStartScheduler+0x130>)
 800af5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800af5e:	4b31      	ldr	r3, [pc, #196]	; (800b024 <xPortStartScheduler+0x134>)
 800af60:	2207      	movs	r2, #7
 800af62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800af64:	e009      	b.n	800af7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800af66:	4b2f      	ldr	r3, [pc, #188]	; (800b024 <xPortStartScheduler+0x134>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	3b01      	subs	r3, #1
 800af6c:	4a2d      	ldr	r2, [pc, #180]	; (800b024 <xPortStartScheduler+0x134>)
 800af6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800af70:	78fb      	ldrb	r3, [r7, #3]
 800af72:	b2db      	uxtb	r3, r3
 800af74:	005b      	lsls	r3, r3, #1
 800af76:	b2db      	uxtb	r3, r3
 800af78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800af7a:	78fb      	ldrb	r3, [r7, #3]
 800af7c:	b2db      	uxtb	r3, r3
 800af7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af82:	2b80      	cmp	r3, #128	; 0x80
 800af84:	d0ef      	beq.n	800af66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800af86:	4b27      	ldr	r3, [pc, #156]	; (800b024 <xPortStartScheduler+0x134>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f1c3 0307 	rsb	r3, r3, #7
 800af8e:	2b04      	cmp	r3, #4
 800af90:	d00a      	beq.n	800afa8 <xPortStartScheduler+0xb8>
	__asm volatile
 800af92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af96:	f383 8811 	msr	BASEPRI, r3
 800af9a:	f3bf 8f6f 	isb	sy
 800af9e:	f3bf 8f4f 	dsb	sy
 800afa2:	60bb      	str	r3, [r7, #8]
}
 800afa4:	bf00      	nop
 800afa6:	e7fe      	b.n	800afa6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800afa8:	4b1e      	ldr	r3, [pc, #120]	; (800b024 <xPortStartScheduler+0x134>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	021b      	lsls	r3, r3, #8
 800afae:	4a1d      	ldr	r2, [pc, #116]	; (800b024 <xPortStartScheduler+0x134>)
 800afb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800afb2:	4b1c      	ldr	r3, [pc, #112]	; (800b024 <xPortStartScheduler+0x134>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800afba:	4a1a      	ldr	r2, [pc, #104]	; (800b024 <xPortStartScheduler+0x134>)
 800afbc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	b2da      	uxtb	r2, r3
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800afc6:	4b18      	ldr	r3, [pc, #96]	; (800b028 <xPortStartScheduler+0x138>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	4a17      	ldr	r2, [pc, #92]	; (800b028 <xPortStartScheduler+0x138>)
 800afcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800afd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800afd2:	4b15      	ldr	r3, [pc, #84]	; (800b028 <xPortStartScheduler+0x138>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	4a14      	ldr	r2, [pc, #80]	; (800b028 <xPortStartScheduler+0x138>)
 800afd8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800afdc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800afde:	f000 f8dd 	bl	800b19c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800afe2:	4b12      	ldr	r3, [pc, #72]	; (800b02c <xPortStartScheduler+0x13c>)
 800afe4:	2200      	movs	r2, #0
 800afe6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800afe8:	f000 f8fc 	bl	800b1e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800afec:	4b10      	ldr	r3, [pc, #64]	; (800b030 <xPortStartScheduler+0x140>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	4a0f      	ldr	r2, [pc, #60]	; (800b030 <xPortStartScheduler+0x140>)
 800aff2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800aff6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800aff8:	f7ff ff66 	bl	800aec8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800affc:	f7fe ff98 	bl	8009f30 <vTaskSwitchContext>
	prvTaskExitError();
 800b000:	f7ff ff1e 	bl	800ae40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b004:	2300      	movs	r3, #0
}
 800b006:	4618      	mov	r0, r3
 800b008:	3718      	adds	r7, #24
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}
 800b00e:	bf00      	nop
 800b010:	e000ed00 	.word	0xe000ed00
 800b014:	410fc271 	.word	0x410fc271
 800b018:	410fc270 	.word	0x410fc270
 800b01c:	e000e400 	.word	0xe000e400
 800b020:	20000f5c 	.word	0x20000f5c
 800b024:	20000f60 	.word	0x20000f60
 800b028:	e000ed20 	.word	0xe000ed20
 800b02c:	2000002c 	.word	0x2000002c
 800b030:	e000ef34 	.word	0xe000ef34

0800b034 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b034:	b480      	push	{r7}
 800b036:	b083      	sub	sp, #12
 800b038:	af00      	add	r7, sp, #0
	__asm volatile
 800b03a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b03e:	f383 8811 	msr	BASEPRI, r3
 800b042:	f3bf 8f6f 	isb	sy
 800b046:	f3bf 8f4f 	dsb	sy
 800b04a:	607b      	str	r3, [r7, #4]
}
 800b04c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b04e:	4b0f      	ldr	r3, [pc, #60]	; (800b08c <vPortEnterCritical+0x58>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	3301      	adds	r3, #1
 800b054:	4a0d      	ldr	r2, [pc, #52]	; (800b08c <vPortEnterCritical+0x58>)
 800b056:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b058:	4b0c      	ldr	r3, [pc, #48]	; (800b08c <vPortEnterCritical+0x58>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	2b01      	cmp	r3, #1
 800b05e:	d10f      	bne.n	800b080 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b060:	4b0b      	ldr	r3, [pc, #44]	; (800b090 <vPortEnterCritical+0x5c>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	b2db      	uxtb	r3, r3
 800b066:	2b00      	cmp	r3, #0
 800b068:	d00a      	beq.n	800b080 <vPortEnterCritical+0x4c>
	__asm volatile
 800b06a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b06e:	f383 8811 	msr	BASEPRI, r3
 800b072:	f3bf 8f6f 	isb	sy
 800b076:	f3bf 8f4f 	dsb	sy
 800b07a:	603b      	str	r3, [r7, #0]
}
 800b07c:	bf00      	nop
 800b07e:	e7fe      	b.n	800b07e <vPortEnterCritical+0x4a>
	}
}
 800b080:	bf00      	nop
 800b082:	370c      	adds	r7, #12
 800b084:	46bd      	mov	sp, r7
 800b086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08a:	4770      	bx	lr
 800b08c:	2000002c 	.word	0x2000002c
 800b090:	e000ed04 	.word	0xe000ed04

0800b094 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b094:	b480      	push	{r7}
 800b096:	b083      	sub	sp, #12
 800b098:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b09a:	4b12      	ldr	r3, [pc, #72]	; (800b0e4 <vPortExitCritical+0x50>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d10a      	bne.n	800b0b8 <vPortExitCritical+0x24>
	__asm volatile
 800b0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a6:	f383 8811 	msr	BASEPRI, r3
 800b0aa:	f3bf 8f6f 	isb	sy
 800b0ae:	f3bf 8f4f 	dsb	sy
 800b0b2:	607b      	str	r3, [r7, #4]
}
 800b0b4:	bf00      	nop
 800b0b6:	e7fe      	b.n	800b0b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b0b8:	4b0a      	ldr	r3, [pc, #40]	; (800b0e4 <vPortExitCritical+0x50>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	3b01      	subs	r3, #1
 800b0be:	4a09      	ldr	r2, [pc, #36]	; (800b0e4 <vPortExitCritical+0x50>)
 800b0c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b0c2:	4b08      	ldr	r3, [pc, #32]	; (800b0e4 <vPortExitCritical+0x50>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d105      	bne.n	800b0d6 <vPortExitCritical+0x42>
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	f383 8811 	msr	BASEPRI, r3
}
 800b0d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b0d6:	bf00      	nop
 800b0d8:	370c      	adds	r7, #12
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e0:	4770      	bx	lr
 800b0e2:	bf00      	nop
 800b0e4:	2000002c 	.word	0x2000002c
	...

0800b0f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b0f0:	f3ef 8009 	mrs	r0, PSP
 800b0f4:	f3bf 8f6f 	isb	sy
 800b0f8:	4b15      	ldr	r3, [pc, #84]	; (800b150 <pxCurrentTCBConst>)
 800b0fa:	681a      	ldr	r2, [r3, #0]
 800b0fc:	f01e 0f10 	tst.w	lr, #16
 800b100:	bf08      	it	eq
 800b102:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b106:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b10a:	6010      	str	r0, [r2, #0]
 800b10c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b110:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b114:	f380 8811 	msr	BASEPRI, r0
 800b118:	f3bf 8f4f 	dsb	sy
 800b11c:	f3bf 8f6f 	isb	sy
 800b120:	f7fe ff06 	bl	8009f30 <vTaskSwitchContext>
 800b124:	f04f 0000 	mov.w	r0, #0
 800b128:	f380 8811 	msr	BASEPRI, r0
 800b12c:	bc09      	pop	{r0, r3}
 800b12e:	6819      	ldr	r1, [r3, #0]
 800b130:	6808      	ldr	r0, [r1, #0]
 800b132:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b136:	f01e 0f10 	tst.w	lr, #16
 800b13a:	bf08      	it	eq
 800b13c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b140:	f380 8809 	msr	PSP, r0
 800b144:	f3bf 8f6f 	isb	sy
 800b148:	4770      	bx	lr
 800b14a:	bf00      	nop
 800b14c:	f3af 8000 	nop.w

0800b150 <pxCurrentTCBConst>:
 800b150:	20000930 	.word	0x20000930
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b154:	bf00      	nop
 800b156:	bf00      	nop

0800b158 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b082      	sub	sp, #8
 800b15c:	af00      	add	r7, sp, #0
	__asm volatile
 800b15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b162:	f383 8811 	msr	BASEPRI, r3
 800b166:	f3bf 8f6f 	isb	sy
 800b16a:	f3bf 8f4f 	dsb	sy
 800b16e:	607b      	str	r3, [r7, #4]
}
 800b170:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b172:	f7fe fe23 	bl	8009dbc <xTaskIncrementTick>
 800b176:	4603      	mov	r3, r0
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d003      	beq.n	800b184 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b17c:	4b06      	ldr	r3, [pc, #24]	; (800b198 <xPortSysTickHandler+0x40>)
 800b17e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b182:	601a      	str	r2, [r3, #0]
 800b184:	2300      	movs	r3, #0
 800b186:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	f383 8811 	msr	BASEPRI, r3
}
 800b18e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b190:	bf00      	nop
 800b192:	3708      	adds	r7, #8
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}
 800b198:	e000ed04 	.word	0xe000ed04

0800b19c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b19c:	b480      	push	{r7}
 800b19e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b1a0:	4b0b      	ldr	r3, [pc, #44]	; (800b1d0 <vPortSetupTimerInterrupt+0x34>)
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b1a6:	4b0b      	ldr	r3, [pc, #44]	; (800b1d4 <vPortSetupTimerInterrupt+0x38>)
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b1ac:	4b0a      	ldr	r3, [pc, #40]	; (800b1d8 <vPortSetupTimerInterrupt+0x3c>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	4a0a      	ldr	r2, [pc, #40]	; (800b1dc <vPortSetupTimerInterrupt+0x40>)
 800b1b2:	fba2 2303 	umull	r2, r3, r2, r3
 800b1b6:	099b      	lsrs	r3, r3, #6
 800b1b8:	4a09      	ldr	r2, [pc, #36]	; (800b1e0 <vPortSetupTimerInterrupt+0x44>)
 800b1ba:	3b01      	subs	r3, #1
 800b1bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b1be:	4b04      	ldr	r3, [pc, #16]	; (800b1d0 <vPortSetupTimerInterrupt+0x34>)
 800b1c0:	2207      	movs	r2, #7
 800b1c2:	601a      	str	r2, [r3, #0]
}
 800b1c4:	bf00      	nop
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1cc:	4770      	bx	lr
 800b1ce:	bf00      	nop
 800b1d0:	e000e010 	.word	0xe000e010
 800b1d4:	e000e018 	.word	0xe000e018
 800b1d8:	20000000 	.word	0x20000000
 800b1dc:	10624dd3 	.word	0x10624dd3
 800b1e0:	e000e014 	.word	0xe000e014

0800b1e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b1e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b1f4 <vPortEnableVFP+0x10>
 800b1e8:	6801      	ldr	r1, [r0, #0]
 800b1ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b1ee:	6001      	str	r1, [r0, #0]
 800b1f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b1f2:	bf00      	nop
 800b1f4:	e000ed88 	.word	0xe000ed88

0800b1f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b085      	sub	sp, #20
 800b1fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b1fe:	f3ef 8305 	mrs	r3, IPSR
 800b202:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	2b0f      	cmp	r3, #15
 800b208:	d914      	bls.n	800b234 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b20a:	4a17      	ldr	r2, [pc, #92]	; (800b268 <vPortValidateInterruptPriority+0x70>)
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	4413      	add	r3, r2
 800b210:	781b      	ldrb	r3, [r3, #0]
 800b212:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b214:	4b15      	ldr	r3, [pc, #84]	; (800b26c <vPortValidateInterruptPriority+0x74>)
 800b216:	781b      	ldrb	r3, [r3, #0]
 800b218:	7afa      	ldrb	r2, [r7, #11]
 800b21a:	429a      	cmp	r2, r3
 800b21c:	d20a      	bcs.n	800b234 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b222:	f383 8811 	msr	BASEPRI, r3
 800b226:	f3bf 8f6f 	isb	sy
 800b22a:	f3bf 8f4f 	dsb	sy
 800b22e:	607b      	str	r3, [r7, #4]
}
 800b230:	bf00      	nop
 800b232:	e7fe      	b.n	800b232 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b234:	4b0e      	ldr	r3, [pc, #56]	; (800b270 <vPortValidateInterruptPriority+0x78>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b23c:	4b0d      	ldr	r3, [pc, #52]	; (800b274 <vPortValidateInterruptPriority+0x7c>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	429a      	cmp	r2, r3
 800b242:	d90a      	bls.n	800b25a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b244:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b248:	f383 8811 	msr	BASEPRI, r3
 800b24c:	f3bf 8f6f 	isb	sy
 800b250:	f3bf 8f4f 	dsb	sy
 800b254:	603b      	str	r3, [r7, #0]
}
 800b256:	bf00      	nop
 800b258:	e7fe      	b.n	800b258 <vPortValidateInterruptPriority+0x60>
	}
 800b25a:	bf00      	nop
 800b25c:	3714      	adds	r7, #20
 800b25e:	46bd      	mov	sp, r7
 800b260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b264:	4770      	bx	lr
 800b266:	bf00      	nop
 800b268:	e000e3f0 	.word	0xe000e3f0
 800b26c:	20000f5c 	.word	0x20000f5c
 800b270:	e000ed0c 	.word	0xe000ed0c
 800b274:	20000f60 	.word	0x20000f60

0800b278 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b08a      	sub	sp, #40	; 0x28
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b280:	2300      	movs	r3, #0
 800b282:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b284:	f7fe fcde 	bl	8009c44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b288:	4b5b      	ldr	r3, [pc, #364]	; (800b3f8 <pvPortMalloc+0x180>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d101      	bne.n	800b294 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b290:	f000 f920 	bl	800b4d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b294:	4b59      	ldr	r3, [pc, #356]	; (800b3fc <pvPortMalloc+0x184>)
 800b296:	681a      	ldr	r2, [r3, #0]
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	4013      	ands	r3, r2
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	f040 8093 	bne.w	800b3c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d01d      	beq.n	800b2e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b2a8:	2208      	movs	r2, #8
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	4413      	add	r3, r2
 800b2ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f003 0307 	and.w	r3, r3, #7
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d014      	beq.n	800b2e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	f023 0307 	bic.w	r3, r3, #7
 800b2c0:	3308      	adds	r3, #8
 800b2c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f003 0307 	and.w	r3, r3, #7
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d00a      	beq.n	800b2e4 <pvPortMalloc+0x6c>
	__asm volatile
 800b2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2d2:	f383 8811 	msr	BASEPRI, r3
 800b2d6:	f3bf 8f6f 	isb	sy
 800b2da:	f3bf 8f4f 	dsb	sy
 800b2de:	617b      	str	r3, [r7, #20]
}
 800b2e0:	bf00      	nop
 800b2e2:	e7fe      	b.n	800b2e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d06e      	beq.n	800b3c8 <pvPortMalloc+0x150>
 800b2ea:	4b45      	ldr	r3, [pc, #276]	; (800b400 <pvPortMalloc+0x188>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	687a      	ldr	r2, [r7, #4]
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	d869      	bhi.n	800b3c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b2f4:	4b43      	ldr	r3, [pc, #268]	; (800b404 <pvPortMalloc+0x18c>)
 800b2f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b2f8:	4b42      	ldr	r3, [pc, #264]	; (800b404 <pvPortMalloc+0x18c>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b2fe:	e004      	b.n	800b30a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b302:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b30c:	685b      	ldr	r3, [r3, #4]
 800b30e:	687a      	ldr	r2, [r7, #4]
 800b310:	429a      	cmp	r2, r3
 800b312:	d903      	bls.n	800b31c <pvPortMalloc+0xa4>
 800b314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d1f1      	bne.n	800b300 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b31c:	4b36      	ldr	r3, [pc, #216]	; (800b3f8 <pvPortMalloc+0x180>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b322:	429a      	cmp	r2, r3
 800b324:	d050      	beq.n	800b3c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b326:	6a3b      	ldr	r3, [r7, #32]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	2208      	movs	r2, #8
 800b32c:	4413      	add	r3, r2
 800b32e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b332:	681a      	ldr	r2, [r3, #0]
 800b334:	6a3b      	ldr	r3, [r7, #32]
 800b336:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b33a:	685a      	ldr	r2, [r3, #4]
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	1ad2      	subs	r2, r2, r3
 800b340:	2308      	movs	r3, #8
 800b342:	005b      	lsls	r3, r3, #1
 800b344:	429a      	cmp	r2, r3
 800b346:	d91f      	bls.n	800b388 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	4413      	add	r3, r2
 800b34e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b350:	69bb      	ldr	r3, [r7, #24]
 800b352:	f003 0307 	and.w	r3, r3, #7
 800b356:	2b00      	cmp	r3, #0
 800b358:	d00a      	beq.n	800b370 <pvPortMalloc+0xf8>
	__asm volatile
 800b35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b35e:	f383 8811 	msr	BASEPRI, r3
 800b362:	f3bf 8f6f 	isb	sy
 800b366:	f3bf 8f4f 	dsb	sy
 800b36a:	613b      	str	r3, [r7, #16]
}
 800b36c:	bf00      	nop
 800b36e:	e7fe      	b.n	800b36e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b372:	685a      	ldr	r2, [r3, #4]
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	1ad2      	subs	r2, r2, r3
 800b378:	69bb      	ldr	r3, [r7, #24]
 800b37a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b37e:	687a      	ldr	r2, [r7, #4]
 800b380:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b382:	69b8      	ldr	r0, [r7, #24]
 800b384:	f000 f908 	bl	800b598 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b388:	4b1d      	ldr	r3, [pc, #116]	; (800b400 <pvPortMalloc+0x188>)
 800b38a:	681a      	ldr	r2, [r3, #0]
 800b38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b38e:	685b      	ldr	r3, [r3, #4]
 800b390:	1ad3      	subs	r3, r2, r3
 800b392:	4a1b      	ldr	r2, [pc, #108]	; (800b400 <pvPortMalloc+0x188>)
 800b394:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b396:	4b1a      	ldr	r3, [pc, #104]	; (800b400 <pvPortMalloc+0x188>)
 800b398:	681a      	ldr	r2, [r3, #0]
 800b39a:	4b1b      	ldr	r3, [pc, #108]	; (800b408 <pvPortMalloc+0x190>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	429a      	cmp	r2, r3
 800b3a0:	d203      	bcs.n	800b3aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b3a2:	4b17      	ldr	r3, [pc, #92]	; (800b400 <pvPortMalloc+0x188>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	4a18      	ldr	r2, [pc, #96]	; (800b408 <pvPortMalloc+0x190>)
 800b3a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ac:	685a      	ldr	r2, [r3, #4]
 800b3ae:	4b13      	ldr	r3, [pc, #76]	; (800b3fc <pvPortMalloc+0x184>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	431a      	orrs	r2, r3
 800b3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b3be:	4b13      	ldr	r3, [pc, #76]	; (800b40c <pvPortMalloc+0x194>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	3301      	adds	r3, #1
 800b3c4:	4a11      	ldr	r2, [pc, #68]	; (800b40c <pvPortMalloc+0x194>)
 800b3c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b3c8:	f7fe fc4a 	bl	8009c60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b3cc:	69fb      	ldr	r3, [r7, #28]
 800b3ce:	f003 0307 	and.w	r3, r3, #7
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d00a      	beq.n	800b3ec <pvPortMalloc+0x174>
	__asm volatile
 800b3d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3da:	f383 8811 	msr	BASEPRI, r3
 800b3de:	f3bf 8f6f 	isb	sy
 800b3e2:	f3bf 8f4f 	dsb	sy
 800b3e6:	60fb      	str	r3, [r7, #12]
}
 800b3e8:	bf00      	nop
 800b3ea:	e7fe      	b.n	800b3ea <pvPortMalloc+0x172>
	return pvReturn;
 800b3ec:	69fb      	ldr	r3, [r7, #28]
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	3728      	adds	r7, #40	; 0x28
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}
 800b3f6:	bf00      	nop
 800b3f8:	20004b6c 	.word	0x20004b6c
 800b3fc:	20004b80 	.word	0x20004b80
 800b400:	20004b70 	.word	0x20004b70
 800b404:	20004b64 	.word	0x20004b64
 800b408:	20004b74 	.word	0x20004b74
 800b40c:	20004b78 	.word	0x20004b78

0800b410 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b086      	sub	sp, #24
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d04d      	beq.n	800b4be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b422:	2308      	movs	r3, #8
 800b424:	425b      	negs	r3, r3
 800b426:	697a      	ldr	r2, [r7, #20]
 800b428:	4413      	add	r3, r2
 800b42a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b430:	693b      	ldr	r3, [r7, #16]
 800b432:	685a      	ldr	r2, [r3, #4]
 800b434:	4b24      	ldr	r3, [pc, #144]	; (800b4c8 <vPortFree+0xb8>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	4013      	ands	r3, r2
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d10a      	bne.n	800b454 <vPortFree+0x44>
	__asm volatile
 800b43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b442:	f383 8811 	msr	BASEPRI, r3
 800b446:	f3bf 8f6f 	isb	sy
 800b44a:	f3bf 8f4f 	dsb	sy
 800b44e:	60fb      	str	r3, [r7, #12]
}
 800b450:	bf00      	nop
 800b452:	e7fe      	b.n	800b452 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b454:	693b      	ldr	r3, [r7, #16]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d00a      	beq.n	800b472 <vPortFree+0x62>
	__asm volatile
 800b45c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b460:	f383 8811 	msr	BASEPRI, r3
 800b464:	f3bf 8f6f 	isb	sy
 800b468:	f3bf 8f4f 	dsb	sy
 800b46c:	60bb      	str	r3, [r7, #8]
}
 800b46e:	bf00      	nop
 800b470:	e7fe      	b.n	800b470 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b472:	693b      	ldr	r3, [r7, #16]
 800b474:	685a      	ldr	r2, [r3, #4]
 800b476:	4b14      	ldr	r3, [pc, #80]	; (800b4c8 <vPortFree+0xb8>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	4013      	ands	r3, r2
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d01e      	beq.n	800b4be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b480:	693b      	ldr	r3, [r7, #16]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d11a      	bne.n	800b4be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b488:	693b      	ldr	r3, [r7, #16]
 800b48a:	685a      	ldr	r2, [r3, #4]
 800b48c:	4b0e      	ldr	r3, [pc, #56]	; (800b4c8 <vPortFree+0xb8>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	43db      	mvns	r3, r3
 800b492:	401a      	ands	r2, r3
 800b494:	693b      	ldr	r3, [r7, #16]
 800b496:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b498:	f7fe fbd4 	bl	8009c44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	685a      	ldr	r2, [r3, #4]
 800b4a0:	4b0a      	ldr	r3, [pc, #40]	; (800b4cc <vPortFree+0xbc>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	4413      	add	r3, r2
 800b4a6:	4a09      	ldr	r2, [pc, #36]	; (800b4cc <vPortFree+0xbc>)
 800b4a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b4aa:	6938      	ldr	r0, [r7, #16]
 800b4ac:	f000 f874 	bl	800b598 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b4b0:	4b07      	ldr	r3, [pc, #28]	; (800b4d0 <vPortFree+0xc0>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	3301      	adds	r3, #1
 800b4b6:	4a06      	ldr	r2, [pc, #24]	; (800b4d0 <vPortFree+0xc0>)
 800b4b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b4ba:	f7fe fbd1 	bl	8009c60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b4be:	bf00      	nop
 800b4c0:	3718      	adds	r7, #24
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}
 800b4c6:	bf00      	nop
 800b4c8:	20004b80 	.word	0x20004b80
 800b4cc:	20004b70 	.word	0x20004b70
 800b4d0:	20004b7c 	.word	0x20004b7c

0800b4d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b085      	sub	sp, #20
 800b4d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b4da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b4de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b4e0:	4b27      	ldr	r3, [pc, #156]	; (800b580 <prvHeapInit+0xac>)
 800b4e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	f003 0307 	and.w	r3, r3, #7
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d00c      	beq.n	800b508 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	3307      	adds	r3, #7
 800b4f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	f023 0307 	bic.w	r3, r3, #7
 800b4fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b4fc:	68ba      	ldr	r2, [r7, #8]
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	1ad3      	subs	r3, r2, r3
 800b502:	4a1f      	ldr	r2, [pc, #124]	; (800b580 <prvHeapInit+0xac>)
 800b504:	4413      	add	r3, r2
 800b506:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b50c:	4a1d      	ldr	r2, [pc, #116]	; (800b584 <prvHeapInit+0xb0>)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b512:	4b1c      	ldr	r3, [pc, #112]	; (800b584 <prvHeapInit+0xb0>)
 800b514:	2200      	movs	r2, #0
 800b516:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	68ba      	ldr	r2, [r7, #8]
 800b51c:	4413      	add	r3, r2
 800b51e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b520:	2208      	movs	r2, #8
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	1a9b      	subs	r3, r3, r2
 800b526:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	f023 0307 	bic.w	r3, r3, #7
 800b52e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	4a15      	ldr	r2, [pc, #84]	; (800b588 <prvHeapInit+0xb4>)
 800b534:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b536:	4b14      	ldr	r3, [pc, #80]	; (800b588 <prvHeapInit+0xb4>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	2200      	movs	r2, #0
 800b53c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b53e:	4b12      	ldr	r3, [pc, #72]	; (800b588 <prvHeapInit+0xb4>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	2200      	movs	r2, #0
 800b544:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	68fa      	ldr	r2, [r7, #12]
 800b54e:	1ad2      	subs	r2, r2, r3
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b554:	4b0c      	ldr	r3, [pc, #48]	; (800b588 <prvHeapInit+0xb4>)
 800b556:	681a      	ldr	r2, [r3, #0]
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	685b      	ldr	r3, [r3, #4]
 800b560:	4a0a      	ldr	r2, [pc, #40]	; (800b58c <prvHeapInit+0xb8>)
 800b562:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	685b      	ldr	r3, [r3, #4]
 800b568:	4a09      	ldr	r2, [pc, #36]	; (800b590 <prvHeapInit+0xbc>)
 800b56a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b56c:	4b09      	ldr	r3, [pc, #36]	; (800b594 <prvHeapInit+0xc0>)
 800b56e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b572:	601a      	str	r2, [r3, #0]
}
 800b574:	bf00      	nop
 800b576:	3714      	adds	r7, #20
 800b578:	46bd      	mov	sp, r7
 800b57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57e:	4770      	bx	lr
 800b580:	20000f64 	.word	0x20000f64
 800b584:	20004b64 	.word	0x20004b64
 800b588:	20004b6c 	.word	0x20004b6c
 800b58c:	20004b74 	.word	0x20004b74
 800b590:	20004b70 	.word	0x20004b70
 800b594:	20004b80 	.word	0x20004b80

0800b598 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b598:	b480      	push	{r7}
 800b59a:	b085      	sub	sp, #20
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b5a0:	4b28      	ldr	r3, [pc, #160]	; (800b644 <prvInsertBlockIntoFreeList+0xac>)
 800b5a2:	60fb      	str	r3, [r7, #12]
 800b5a4:	e002      	b.n	800b5ac <prvInsertBlockIntoFreeList+0x14>
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	60fb      	str	r3, [r7, #12]
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	687a      	ldr	r2, [r7, #4]
 800b5b2:	429a      	cmp	r2, r3
 800b5b4:	d8f7      	bhi.n	800b5a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	685b      	ldr	r3, [r3, #4]
 800b5be:	68ba      	ldr	r2, [r7, #8]
 800b5c0:	4413      	add	r3, r2
 800b5c2:	687a      	ldr	r2, [r7, #4]
 800b5c4:	429a      	cmp	r2, r3
 800b5c6:	d108      	bne.n	800b5da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	685a      	ldr	r2, [r3, #4]
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	685b      	ldr	r3, [r3, #4]
 800b5d0:	441a      	add	r2, r3
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	685b      	ldr	r3, [r3, #4]
 800b5e2:	68ba      	ldr	r2, [r7, #8]
 800b5e4:	441a      	add	r2, r3
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	429a      	cmp	r2, r3
 800b5ec:	d118      	bne.n	800b620 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	681a      	ldr	r2, [r3, #0]
 800b5f2:	4b15      	ldr	r3, [pc, #84]	; (800b648 <prvInsertBlockIntoFreeList+0xb0>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	429a      	cmp	r2, r3
 800b5f8:	d00d      	beq.n	800b616 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	685a      	ldr	r2, [r3, #4]
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	685b      	ldr	r3, [r3, #4]
 800b604:	441a      	add	r2, r3
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	681a      	ldr	r2, [r3, #0]
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	601a      	str	r2, [r3, #0]
 800b614:	e008      	b.n	800b628 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b616:	4b0c      	ldr	r3, [pc, #48]	; (800b648 <prvInsertBlockIntoFreeList+0xb0>)
 800b618:	681a      	ldr	r2, [r3, #0]
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	601a      	str	r2, [r3, #0]
 800b61e:	e003      	b.n	800b628 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	681a      	ldr	r2, [r3, #0]
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b628:	68fa      	ldr	r2, [r7, #12]
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	429a      	cmp	r2, r3
 800b62e:	d002      	beq.n	800b636 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	687a      	ldr	r2, [r7, #4]
 800b634:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b636:	bf00      	nop
 800b638:	3714      	adds	r7, #20
 800b63a:	46bd      	mov	sp, r7
 800b63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b640:	4770      	bx	lr
 800b642:	bf00      	nop
 800b644:	20004b64 	.word	0x20004b64
 800b648:	20004b6c 	.word	0x20004b6c

0800b64c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b650:	2201      	movs	r2, #1
 800b652:	490e      	ldr	r1, [pc, #56]	; (800b68c <MX_USB_HOST_Init+0x40>)
 800b654:	480e      	ldr	r0, [pc, #56]	; (800b690 <MX_USB_HOST_Init+0x44>)
 800b656:	f7fb f88f 	bl	8006778 <USBH_Init>
 800b65a:	4603      	mov	r3, r0
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d001      	beq.n	800b664 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b660:	f7f5 fda4 	bl	80011ac <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b664:	490b      	ldr	r1, [pc, #44]	; (800b694 <MX_USB_HOST_Init+0x48>)
 800b666:	480a      	ldr	r0, [pc, #40]	; (800b690 <MX_USB_HOST_Init+0x44>)
 800b668:	f7fb f936 	bl	80068d8 <USBH_RegisterClass>
 800b66c:	4603      	mov	r3, r0
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d001      	beq.n	800b676 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b672:	f7f5 fd9b 	bl	80011ac <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b676:	4806      	ldr	r0, [pc, #24]	; (800b690 <MX_USB_HOST_Init+0x44>)
 800b678:	f7fb f9ba 	bl	80069f0 <USBH_Start>
 800b67c:	4603      	mov	r3, r0
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d001      	beq.n	800b686 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b682:	f7f5 fd93 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b686:	bf00      	nop
 800b688:	bd80      	pop	{r7, pc}
 800b68a:	bf00      	nop
 800b68c:	0800b699 	.word	0x0800b699
 800b690:	20004b84 	.word	0x20004b84
 800b694:	2000000c 	.word	0x2000000c

0800b698 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b698:	b480      	push	{r7}
 800b69a:	b083      	sub	sp, #12
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
 800b6a0:	460b      	mov	r3, r1
 800b6a2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b6a4:	78fb      	ldrb	r3, [r7, #3]
 800b6a6:	3b01      	subs	r3, #1
 800b6a8:	2b04      	cmp	r3, #4
 800b6aa:	d819      	bhi.n	800b6e0 <USBH_UserProcess+0x48>
 800b6ac:	a201      	add	r2, pc, #4	; (adr r2, 800b6b4 <USBH_UserProcess+0x1c>)
 800b6ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6b2:	bf00      	nop
 800b6b4:	0800b6e1 	.word	0x0800b6e1
 800b6b8:	0800b6d1 	.word	0x0800b6d1
 800b6bc:	0800b6e1 	.word	0x0800b6e1
 800b6c0:	0800b6d9 	.word	0x0800b6d9
 800b6c4:	0800b6c9 	.word	0x0800b6c9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b6c8:	4b09      	ldr	r3, [pc, #36]	; (800b6f0 <USBH_UserProcess+0x58>)
 800b6ca:	2203      	movs	r2, #3
 800b6cc:	701a      	strb	r2, [r3, #0]
  break;
 800b6ce:	e008      	b.n	800b6e2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b6d0:	4b07      	ldr	r3, [pc, #28]	; (800b6f0 <USBH_UserProcess+0x58>)
 800b6d2:	2202      	movs	r2, #2
 800b6d4:	701a      	strb	r2, [r3, #0]
  break;
 800b6d6:	e004      	b.n	800b6e2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b6d8:	4b05      	ldr	r3, [pc, #20]	; (800b6f0 <USBH_UserProcess+0x58>)
 800b6da:	2201      	movs	r2, #1
 800b6dc:	701a      	strb	r2, [r3, #0]
  break;
 800b6de:	e000      	b.n	800b6e2 <USBH_UserProcess+0x4a>

  default:
  break;
 800b6e0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b6e2:	bf00      	nop
 800b6e4:	370c      	adds	r7, #12
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ec:	4770      	bx	lr
 800b6ee:	bf00      	nop
 800b6f0:	20004f68 	.word	0x20004f68

0800b6f4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b08a      	sub	sp, #40	; 0x28
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b6fc:	f107 0314 	add.w	r3, r7, #20
 800b700:	2200      	movs	r2, #0
 800b702:	601a      	str	r2, [r3, #0]
 800b704:	605a      	str	r2, [r3, #4]
 800b706:	609a      	str	r2, [r3, #8]
 800b708:	60da      	str	r2, [r3, #12]
 800b70a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b714:	d147      	bne.n	800b7a6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b716:	2300      	movs	r3, #0
 800b718:	613b      	str	r3, [r7, #16]
 800b71a:	4b25      	ldr	r3, [pc, #148]	; (800b7b0 <HAL_HCD_MspInit+0xbc>)
 800b71c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b71e:	4a24      	ldr	r2, [pc, #144]	; (800b7b0 <HAL_HCD_MspInit+0xbc>)
 800b720:	f043 0301 	orr.w	r3, r3, #1
 800b724:	6313      	str	r3, [r2, #48]	; 0x30
 800b726:	4b22      	ldr	r3, [pc, #136]	; (800b7b0 <HAL_HCD_MspInit+0xbc>)
 800b728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b72a:	f003 0301 	and.w	r3, r3, #1
 800b72e:	613b      	str	r3, [r7, #16]
 800b730:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b732:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b736:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b738:	2300      	movs	r3, #0
 800b73a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b73c:	2300      	movs	r3, #0
 800b73e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b740:	f107 0314 	add.w	r3, r7, #20
 800b744:	4619      	mov	r1, r3
 800b746:	481b      	ldr	r0, [pc, #108]	; (800b7b4 <HAL_HCD_MspInit+0xc0>)
 800b748:	f7f6 f8dc 	bl	8001904 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b74c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800b750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b752:	2302      	movs	r3, #2
 800b754:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b756:	2300      	movs	r3, #0
 800b758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b75a:	2300      	movs	r3, #0
 800b75c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b75e:	230a      	movs	r3, #10
 800b760:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b762:	f107 0314 	add.w	r3, r7, #20
 800b766:	4619      	mov	r1, r3
 800b768:	4812      	ldr	r0, [pc, #72]	; (800b7b4 <HAL_HCD_MspInit+0xc0>)
 800b76a:	f7f6 f8cb 	bl	8001904 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b76e:	4b10      	ldr	r3, [pc, #64]	; (800b7b0 <HAL_HCD_MspInit+0xbc>)
 800b770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b772:	4a0f      	ldr	r2, [pc, #60]	; (800b7b0 <HAL_HCD_MspInit+0xbc>)
 800b774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b778:	6353      	str	r3, [r2, #52]	; 0x34
 800b77a:	2300      	movs	r3, #0
 800b77c:	60fb      	str	r3, [r7, #12]
 800b77e:	4b0c      	ldr	r3, [pc, #48]	; (800b7b0 <HAL_HCD_MspInit+0xbc>)
 800b780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b782:	4a0b      	ldr	r2, [pc, #44]	; (800b7b0 <HAL_HCD_MspInit+0xbc>)
 800b784:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b788:	6453      	str	r3, [r2, #68]	; 0x44
 800b78a:	4b09      	ldr	r3, [pc, #36]	; (800b7b0 <HAL_HCD_MspInit+0xbc>)
 800b78c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b78e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b792:	60fb      	str	r3, [r7, #12]
 800b794:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800b796:	2200      	movs	r2, #0
 800b798:	2105      	movs	r1, #5
 800b79a:	2043      	movs	r0, #67	; 0x43
 800b79c:	f7f6 f87b 	bl	8001896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b7a0:	2043      	movs	r0, #67	; 0x43
 800b7a2:	f7f6 f894 	bl	80018ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b7a6:	bf00      	nop
 800b7a8:	3728      	adds	r7, #40	; 0x28
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}
 800b7ae:	bf00      	nop
 800b7b0:	40023800 	.word	0x40023800
 800b7b4:	40020000 	.word	0x40020000

0800b7b8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b082      	sub	sp, #8
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f7fb fdc9 	bl	800735e <USBH_LL_IncTimer>
}
 800b7cc:	bf00      	nop
 800b7ce:	3708      	adds	r7, #8
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}

0800b7d4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b082      	sub	sp, #8
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f7fb fe0d 	bl	8007402 <USBH_LL_Connect>
}
 800b7e8:	bf00      	nop
 800b7ea:	3708      	adds	r7, #8
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}

0800b7f0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b082      	sub	sp, #8
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b7fe:	4618      	mov	r0, r3
 800b800:	f7fb fe22 	bl	8007448 <USBH_LL_Disconnect>
}
 800b804:	bf00      	nop
 800b806:	3708      	adds	r7, #8
 800b808:	46bd      	mov	sp, r7
 800b80a:	bd80      	pop	{r7, pc}

0800b80c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b082      	sub	sp, #8
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
 800b814:	460b      	mov	r3, r1
 800b816:	70fb      	strb	r3, [r7, #3]
 800b818:	4613      	mov	r3, r2
 800b81a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b822:	4618      	mov	r0, r3
 800b824:	f7fb fe59 	bl	80074da <USBH_LL_NotifyURBChange>
#endif
}
 800b828:	bf00      	nop
 800b82a:	3708      	adds	r7, #8
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}

0800b830 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b082      	sub	sp, #8
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b83e:	4618      	mov	r0, r3
 800b840:	f7fb fdb7 	bl	80073b2 <USBH_LL_PortEnabled>
}
 800b844:	bf00      	nop
 800b846:	3708      	adds	r7, #8
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}

0800b84c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b082      	sub	sp, #8
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b85a:	4618      	mov	r0, r3
 800b85c:	f7fb fdc3 	bl	80073e6 <USBH_LL_PortDisabled>
}
 800b860:	bf00      	nop
 800b862:	3708      	adds	r7, #8
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}

0800b868 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b082      	sub	sp, #8
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b876:	2b01      	cmp	r3, #1
 800b878:	d12a      	bne.n	800b8d0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b87a:	4a18      	ldr	r2, [pc, #96]	; (800b8dc <USBH_LL_Init+0x74>)
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	4a15      	ldr	r2, [pc, #84]	; (800b8dc <USBH_LL_Init+0x74>)
 800b886:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b88a:	4b14      	ldr	r3, [pc, #80]	; (800b8dc <USBH_LL_Init+0x74>)
 800b88c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b890:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b892:	4b12      	ldr	r3, [pc, #72]	; (800b8dc <USBH_LL_Init+0x74>)
 800b894:	2208      	movs	r2, #8
 800b896:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b898:	4b10      	ldr	r3, [pc, #64]	; (800b8dc <USBH_LL_Init+0x74>)
 800b89a:	2201      	movs	r2, #1
 800b89c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b89e:	4b0f      	ldr	r3, [pc, #60]	; (800b8dc <USBH_LL_Init+0x74>)
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b8a4:	4b0d      	ldr	r3, [pc, #52]	; (800b8dc <USBH_LL_Init+0x74>)
 800b8a6:	2202      	movs	r2, #2
 800b8a8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b8aa:	4b0c      	ldr	r3, [pc, #48]	; (800b8dc <USBH_LL_Init+0x74>)
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b8b0:	480a      	ldr	r0, [pc, #40]	; (800b8dc <USBH_LL_Init+0x74>)
 800b8b2:	f7f6 fa0e 	bl	8001cd2 <HAL_HCD_Init>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d001      	beq.n	800b8c0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b8bc:	f7f5 fc76 	bl	80011ac <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b8c0:	4806      	ldr	r0, [pc, #24]	; (800b8dc <USBH_LL_Init+0x74>)
 800b8c2:	f7f6 fdf2 	bl	80024aa <HAL_HCD_GetCurrentFrame>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	4619      	mov	r1, r3
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f7fb fd38 	bl	8007340 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b8d0:	2300      	movs	r3, #0
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3708      	adds	r7, #8
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}
 800b8da:	bf00      	nop
 800b8dc:	20004f6c 	.word	0x20004f6c

0800b8e0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b084      	sub	sp, #16
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f7f6 fd61 	bl	80023be <HAL_HCD_Start>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b900:	7bfb      	ldrb	r3, [r7, #15]
 800b902:	4618      	mov	r0, r3
 800b904:	f000 f95c 	bl	800bbc0 <USBH_Get_USB_Status>
 800b908:	4603      	mov	r3, r0
 800b90a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b90c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b90e:	4618      	mov	r0, r3
 800b910:	3710      	adds	r7, #16
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}

0800b916 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b916:	b580      	push	{r7, lr}
 800b918:	b084      	sub	sp, #16
 800b91a:	af00      	add	r7, sp, #0
 800b91c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b91e:	2300      	movs	r3, #0
 800b920:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b922:	2300      	movs	r3, #0
 800b924:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b92c:	4618      	mov	r0, r3
 800b92e:	f7f6 fd69 	bl	8002404 <HAL_HCD_Stop>
 800b932:	4603      	mov	r3, r0
 800b934:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b936:	7bfb      	ldrb	r3, [r7, #15]
 800b938:	4618      	mov	r0, r3
 800b93a:	f000 f941 	bl	800bbc0 <USBH_Get_USB_Status>
 800b93e:	4603      	mov	r3, r0
 800b940:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b942:	7bbb      	ldrb	r3, [r7, #14]
}
 800b944:	4618      	mov	r0, r3
 800b946:	3710      	adds	r7, #16
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}

0800b94c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b084      	sub	sp, #16
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b954:	2301      	movs	r3, #1
 800b956:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b95e:	4618      	mov	r0, r3
 800b960:	f7f6 fdb1 	bl	80024c6 <HAL_HCD_GetCurrentSpeed>
 800b964:	4603      	mov	r3, r0
 800b966:	2b02      	cmp	r3, #2
 800b968:	d00c      	beq.n	800b984 <USBH_LL_GetSpeed+0x38>
 800b96a:	2b02      	cmp	r3, #2
 800b96c:	d80d      	bhi.n	800b98a <USBH_LL_GetSpeed+0x3e>
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d002      	beq.n	800b978 <USBH_LL_GetSpeed+0x2c>
 800b972:	2b01      	cmp	r3, #1
 800b974:	d003      	beq.n	800b97e <USBH_LL_GetSpeed+0x32>
 800b976:	e008      	b.n	800b98a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b978:	2300      	movs	r3, #0
 800b97a:	73fb      	strb	r3, [r7, #15]
    break;
 800b97c:	e008      	b.n	800b990 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b97e:	2301      	movs	r3, #1
 800b980:	73fb      	strb	r3, [r7, #15]
    break;
 800b982:	e005      	b.n	800b990 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b984:	2302      	movs	r3, #2
 800b986:	73fb      	strb	r3, [r7, #15]
    break;
 800b988:	e002      	b.n	800b990 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b98a:	2301      	movs	r3, #1
 800b98c:	73fb      	strb	r3, [r7, #15]
    break;
 800b98e:	bf00      	nop
  }
  return  speed;
 800b990:	7bfb      	ldrb	r3, [r7, #15]
}
 800b992:	4618      	mov	r0, r3
 800b994:	3710      	adds	r7, #16
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}

0800b99a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b99a:	b580      	push	{r7, lr}
 800b99c:	b084      	sub	sp, #16
 800b99e:	af00      	add	r7, sp, #0
 800b9a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f7f6 fd44 	bl	800243e <HAL_HCD_ResetPort>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b9ba:	7bfb      	ldrb	r3, [r7, #15]
 800b9bc:	4618      	mov	r0, r3
 800b9be:	f000 f8ff 	bl	800bbc0 <USBH_Get_USB_Status>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3710      	adds	r7, #16
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}

0800b9d0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b082      	sub	sp, #8
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
 800b9d8:	460b      	mov	r3, r1
 800b9da:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b9e2:	78fa      	ldrb	r2, [r7, #3]
 800b9e4:	4611      	mov	r1, r2
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f7f6 fd4b 	bl	8002482 <HAL_HCD_HC_GetXferCount>
 800b9ec:	4603      	mov	r3, r0
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3708      	adds	r7, #8
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}

0800b9f6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b9f6:	b590      	push	{r4, r7, lr}
 800b9f8:	b089      	sub	sp, #36	; 0x24
 800b9fa:	af04      	add	r7, sp, #16
 800b9fc:	6078      	str	r0, [r7, #4]
 800b9fe:	4608      	mov	r0, r1
 800ba00:	4611      	mov	r1, r2
 800ba02:	461a      	mov	r2, r3
 800ba04:	4603      	mov	r3, r0
 800ba06:	70fb      	strb	r3, [r7, #3]
 800ba08:	460b      	mov	r3, r1
 800ba0a:	70bb      	strb	r3, [r7, #2]
 800ba0c:	4613      	mov	r3, r2
 800ba0e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba10:	2300      	movs	r3, #0
 800ba12:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ba14:	2300      	movs	r3, #0
 800ba16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ba1e:	787c      	ldrb	r4, [r7, #1]
 800ba20:	78ba      	ldrb	r2, [r7, #2]
 800ba22:	78f9      	ldrb	r1, [r7, #3]
 800ba24:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ba26:	9302      	str	r3, [sp, #8]
 800ba28:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ba2c:	9301      	str	r3, [sp, #4]
 800ba2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ba32:	9300      	str	r3, [sp, #0]
 800ba34:	4623      	mov	r3, r4
 800ba36:	f7f6 f9ae 	bl	8001d96 <HAL_HCD_HC_Init>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ba3e:	7bfb      	ldrb	r3, [r7, #15]
 800ba40:	4618      	mov	r0, r3
 800ba42:	f000 f8bd 	bl	800bbc0 <USBH_Get_USB_Status>
 800ba46:	4603      	mov	r3, r0
 800ba48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba4a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3714      	adds	r7, #20
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd90      	pop	{r4, r7, pc}

0800ba54 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b084      	sub	sp, #16
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
 800ba5c:	460b      	mov	r3, r1
 800ba5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba60:	2300      	movs	r3, #0
 800ba62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ba64:	2300      	movs	r3, #0
 800ba66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ba6e:	78fa      	ldrb	r2, [r7, #3]
 800ba70:	4611      	mov	r1, r2
 800ba72:	4618      	mov	r0, r3
 800ba74:	f7f6 fa1e 	bl	8001eb4 <HAL_HCD_HC_Halt>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ba7c:	7bfb      	ldrb	r3, [r7, #15]
 800ba7e:	4618      	mov	r0, r3
 800ba80:	f000 f89e 	bl	800bbc0 <USBH_Get_USB_Status>
 800ba84:	4603      	mov	r3, r0
 800ba86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba88:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	3710      	adds	r7, #16
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}

0800ba92 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ba92:	b590      	push	{r4, r7, lr}
 800ba94:	b089      	sub	sp, #36	; 0x24
 800ba96:	af04      	add	r7, sp, #16
 800ba98:	6078      	str	r0, [r7, #4]
 800ba9a:	4608      	mov	r0, r1
 800ba9c:	4611      	mov	r1, r2
 800ba9e:	461a      	mov	r2, r3
 800baa0:	4603      	mov	r3, r0
 800baa2:	70fb      	strb	r3, [r7, #3]
 800baa4:	460b      	mov	r3, r1
 800baa6:	70bb      	strb	r3, [r7, #2]
 800baa8:	4613      	mov	r3, r2
 800baaa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800baac:	2300      	movs	r3, #0
 800baae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bab0:	2300      	movs	r3, #0
 800bab2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800baba:	787c      	ldrb	r4, [r7, #1]
 800babc:	78ba      	ldrb	r2, [r7, #2]
 800babe:	78f9      	ldrb	r1, [r7, #3]
 800bac0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800bac4:	9303      	str	r3, [sp, #12]
 800bac6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bac8:	9302      	str	r3, [sp, #8]
 800baca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bacc:	9301      	str	r3, [sp, #4]
 800bace:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bad2:	9300      	str	r3, [sp, #0]
 800bad4:	4623      	mov	r3, r4
 800bad6:	f7f6 fa11 	bl	8001efc <HAL_HCD_HC_SubmitRequest>
 800bada:	4603      	mov	r3, r0
 800badc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800bade:	7bfb      	ldrb	r3, [r7, #15]
 800bae0:	4618      	mov	r0, r3
 800bae2:	f000 f86d 	bl	800bbc0 <USBH_Get_USB_Status>
 800bae6:	4603      	mov	r3, r0
 800bae8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800baea:	7bbb      	ldrb	r3, [r7, #14]
}
 800baec:	4618      	mov	r0, r3
 800baee:	3714      	adds	r7, #20
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bd90      	pop	{r4, r7, pc}

0800baf4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b082      	sub	sp, #8
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
 800bafc:	460b      	mov	r3, r1
 800bafe:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bb06:	78fa      	ldrb	r2, [r7, #3]
 800bb08:	4611      	mov	r1, r2
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f7f6 fca5 	bl	800245a <HAL_HCD_HC_GetURBState>
 800bb10:	4603      	mov	r3, r0
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	3708      	adds	r7, #8
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}

0800bb1a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800bb1a:	b580      	push	{r7, lr}
 800bb1c:	b082      	sub	sp, #8
 800bb1e:	af00      	add	r7, sp, #0
 800bb20:	6078      	str	r0, [r7, #4]
 800bb22:	460b      	mov	r3, r1
 800bb24:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800bb2c:	2b01      	cmp	r3, #1
 800bb2e:	d103      	bne.n	800bb38 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800bb30:	78fb      	ldrb	r3, [r7, #3]
 800bb32:	4618      	mov	r0, r3
 800bb34:	f000 f870 	bl	800bc18 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800bb38:	20c8      	movs	r0, #200	; 0xc8
 800bb3a:	f7f5 fdad 	bl	8001698 <HAL_Delay>
  return USBH_OK;
 800bb3e:	2300      	movs	r3, #0
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	3708      	adds	r7, #8
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}

0800bb48 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800bb48:	b480      	push	{r7}
 800bb4a:	b085      	sub	sp, #20
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
 800bb50:	460b      	mov	r3, r1
 800bb52:	70fb      	strb	r3, [r7, #3]
 800bb54:	4613      	mov	r3, r2
 800bb56:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bb5e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800bb60:	78fb      	ldrb	r3, [r7, #3]
 800bb62:	68fa      	ldr	r2, [r7, #12]
 800bb64:	212c      	movs	r1, #44	; 0x2c
 800bb66:	fb01 f303 	mul.w	r3, r1, r3
 800bb6a:	4413      	add	r3, r2
 800bb6c:	333b      	adds	r3, #59	; 0x3b
 800bb6e:	781b      	ldrb	r3, [r3, #0]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d009      	beq.n	800bb88 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800bb74:	78fb      	ldrb	r3, [r7, #3]
 800bb76:	68fa      	ldr	r2, [r7, #12]
 800bb78:	212c      	movs	r1, #44	; 0x2c
 800bb7a:	fb01 f303 	mul.w	r3, r1, r3
 800bb7e:	4413      	add	r3, r2
 800bb80:	3354      	adds	r3, #84	; 0x54
 800bb82:	78ba      	ldrb	r2, [r7, #2]
 800bb84:	701a      	strb	r2, [r3, #0]
 800bb86:	e008      	b.n	800bb9a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800bb88:	78fb      	ldrb	r3, [r7, #3]
 800bb8a:	68fa      	ldr	r2, [r7, #12]
 800bb8c:	212c      	movs	r1, #44	; 0x2c
 800bb8e:	fb01 f303 	mul.w	r3, r1, r3
 800bb92:	4413      	add	r3, r2
 800bb94:	3355      	adds	r3, #85	; 0x55
 800bb96:	78ba      	ldrb	r2, [r7, #2]
 800bb98:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800bb9a:	2300      	movs	r3, #0
}
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	3714      	adds	r7, #20
 800bba0:	46bd      	mov	sp, r7
 800bba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba6:	4770      	bx	lr

0800bba8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b082      	sub	sp, #8
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f7f5 fd71 	bl	8001698 <HAL_Delay>
}
 800bbb6:	bf00      	nop
 800bbb8:	3708      	adds	r7, #8
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}
	...

0800bbc0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bbc0:	b480      	push	{r7}
 800bbc2:	b085      	sub	sp, #20
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bbce:	79fb      	ldrb	r3, [r7, #7]
 800bbd0:	2b03      	cmp	r3, #3
 800bbd2:	d817      	bhi.n	800bc04 <USBH_Get_USB_Status+0x44>
 800bbd4:	a201      	add	r2, pc, #4	; (adr r2, 800bbdc <USBH_Get_USB_Status+0x1c>)
 800bbd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbda:	bf00      	nop
 800bbdc:	0800bbed 	.word	0x0800bbed
 800bbe0:	0800bbf3 	.word	0x0800bbf3
 800bbe4:	0800bbf9 	.word	0x0800bbf9
 800bbe8:	0800bbff 	.word	0x0800bbff
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800bbec:	2300      	movs	r3, #0
 800bbee:	73fb      	strb	r3, [r7, #15]
    break;
 800bbf0:	e00b      	b.n	800bc0a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800bbf2:	2302      	movs	r3, #2
 800bbf4:	73fb      	strb	r3, [r7, #15]
    break;
 800bbf6:	e008      	b.n	800bc0a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	73fb      	strb	r3, [r7, #15]
    break;
 800bbfc:	e005      	b.n	800bc0a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800bbfe:	2302      	movs	r3, #2
 800bc00:	73fb      	strb	r3, [r7, #15]
    break;
 800bc02:	e002      	b.n	800bc0a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800bc04:	2302      	movs	r3, #2
 800bc06:	73fb      	strb	r3, [r7, #15]
    break;
 800bc08:	bf00      	nop
  }
  return usb_status;
 800bc0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	3714      	adds	r7, #20
 800bc10:	46bd      	mov	sp, r7
 800bc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc16:	4770      	bx	lr

0800bc18 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b084      	sub	sp, #16
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	4603      	mov	r3, r0
 800bc20:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800bc22:	79fb      	ldrb	r3, [r7, #7]
 800bc24:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800bc26:	79fb      	ldrb	r3, [r7, #7]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d102      	bne.n	800bc32 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	73fb      	strb	r3, [r7, #15]
 800bc30:	e001      	b.n	800bc36 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800bc32:	2301      	movs	r3, #1
 800bc34:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800bc36:	7bfb      	ldrb	r3, [r7, #15]
 800bc38:	461a      	mov	r2, r3
 800bc3a:	2101      	movs	r1, #1
 800bc3c:	4803      	ldr	r0, [pc, #12]	; (800bc4c <MX_DriverVbusFS+0x34>)
 800bc3e:	f7f6 f815 	bl	8001c6c <HAL_GPIO_WritePin>
}
 800bc42:	bf00      	nop
 800bc44:	3710      	adds	r7, #16
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}
 800bc4a:	bf00      	nop
 800bc4c:	40020800 	.word	0x40020800

0800bc50 <__errno>:
 800bc50:	4b01      	ldr	r3, [pc, #4]	; (800bc58 <__errno+0x8>)
 800bc52:	6818      	ldr	r0, [r3, #0]
 800bc54:	4770      	bx	lr
 800bc56:	bf00      	nop
 800bc58:	20000030 	.word	0x20000030

0800bc5c <__libc_init_array>:
 800bc5c:	b570      	push	{r4, r5, r6, lr}
 800bc5e:	4d0d      	ldr	r5, [pc, #52]	; (800bc94 <__libc_init_array+0x38>)
 800bc60:	4c0d      	ldr	r4, [pc, #52]	; (800bc98 <__libc_init_array+0x3c>)
 800bc62:	1b64      	subs	r4, r4, r5
 800bc64:	10a4      	asrs	r4, r4, #2
 800bc66:	2600      	movs	r6, #0
 800bc68:	42a6      	cmp	r6, r4
 800bc6a:	d109      	bne.n	800bc80 <__libc_init_array+0x24>
 800bc6c:	4d0b      	ldr	r5, [pc, #44]	; (800bc9c <__libc_init_array+0x40>)
 800bc6e:	4c0c      	ldr	r4, [pc, #48]	; (800bca0 <__libc_init_array+0x44>)
 800bc70:	f000 fc9e 	bl	800c5b0 <_init>
 800bc74:	1b64      	subs	r4, r4, r5
 800bc76:	10a4      	asrs	r4, r4, #2
 800bc78:	2600      	movs	r6, #0
 800bc7a:	42a6      	cmp	r6, r4
 800bc7c:	d105      	bne.n	800bc8a <__libc_init_array+0x2e>
 800bc7e:	bd70      	pop	{r4, r5, r6, pc}
 800bc80:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc84:	4798      	blx	r3
 800bc86:	3601      	adds	r6, #1
 800bc88:	e7ee      	b.n	800bc68 <__libc_init_array+0xc>
 800bc8a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc8e:	4798      	blx	r3
 800bc90:	3601      	adds	r6, #1
 800bc92:	e7f2      	b.n	800bc7a <__libc_init_array+0x1e>
 800bc94:	0800e790 	.word	0x0800e790
 800bc98:	0800e790 	.word	0x0800e790
 800bc9c:	0800e790 	.word	0x0800e790
 800bca0:	0800e794 	.word	0x0800e794

0800bca4 <malloc>:
 800bca4:	4b02      	ldr	r3, [pc, #8]	; (800bcb0 <malloc+0xc>)
 800bca6:	4601      	mov	r1, r0
 800bca8:	6818      	ldr	r0, [r3, #0]
 800bcaa:	f000 b88d 	b.w	800bdc8 <_malloc_r>
 800bcae:	bf00      	nop
 800bcb0:	20000030 	.word	0x20000030

0800bcb4 <free>:
 800bcb4:	4b02      	ldr	r3, [pc, #8]	; (800bcc0 <free+0xc>)
 800bcb6:	4601      	mov	r1, r0
 800bcb8:	6818      	ldr	r0, [r3, #0]
 800bcba:	f000 b819 	b.w	800bcf0 <_free_r>
 800bcbe:	bf00      	nop
 800bcc0:	20000030 	.word	0x20000030

0800bcc4 <memcpy>:
 800bcc4:	440a      	add	r2, r1
 800bcc6:	4291      	cmp	r1, r2
 800bcc8:	f100 33ff 	add.w	r3, r0, #4294967295
 800bccc:	d100      	bne.n	800bcd0 <memcpy+0xc>
 800bcce:	4770      	bx	lr
 800bcd0:	b510      	push	{r4, lr}
 800bcd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bcd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bcda:	4291      	cmp	r1, r2
 800bcdc:	d1f9      	bne.n	800bcd2 <memcpy+0xe>
 800bcde:	bd10      	pop	{r4, pc}

0800bce0 <memset>:
 800bce0:	4402      	add	r2, r0
 800bce2:	4603      	mov	r3, r0
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d100      	bne.n	800bcea <memset+0xa>
 800bce8:	4770      	bx	lr
 800bcea:	f803 1b01 	strb.w	r1, [r3], #1
 800bcee:	e7f9      	b.n	800bce4 <memset+0x4>

0800bcf0 <_free_r>:
 800bcf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bcf2:	2900      	cmp	r1, #0
 800bcf4:	d044      	beq.n	800bd80 <_free_r+0x90>
 800bcf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bcfa:	9001      	str	r0, [sp, #4]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	f1a1 0404 	sub.w	r4, r1, #4
 800bd02:	bfb8      	it	lt
 800bd04:	18e4      	addlt	r4, r4, r3
 800bd06:	f000 f903 	bl	800bf10 <__malloc_lock>
 800bd0a:	4a1e      	ldr	r2, [pc, #120]	; (800bd84 <_free_r+0x94>)
 800bd0c:	9801      	ldr	r0, [sp, #4]
 800bd0e:	6813      	ldr	r3, [r2, #0]
 800bd10:	b933      	cbnz	r3, 800bd20 <_free_r+0x30>
 800bd12:	6063      	str	r3, [r4, #4]
 800bd14:	6014      	str	r4, [r2, #0]
 800bd16:	b003      	add	sp, #12
 800bd18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bd1c:	f000 b8fe 	b.w	800bf1c <__malloc_unlock>
 800bd20:	42a3      	cmp	r3, r4
 800bd22:	d908      	bls.n	800bd36 <_free_r+0x46>
 800bd24:	6825      	ldr	r5, [r4, #0]
 800bd26:	1961      	adds	r1, r4, r5
 800bd28:	428b      	cmp	r3, r1
 800bd2a:	bf01      	itttt	eq
 800bd2c:	6819      	ldreq	r1, [r3, #0]
 800bd2e:	685b      	ldreq	r3, [r3, #4]
 800bd30:	1949      	addeq	r1, r1, r5
 800bd32:	6021      	streq	r1, [r4, #0]
 800bd34:	e7ed      	b.n	800bd12 <_free_r+0x22>
 800bd36:	461a      	mov	r2, r3
 800bd38:	685b      	ldr	r3, [r3, #4]
 800bd3a:	b10b      	cbz	r3, 800bd40 <_free_r+0x50>
 800bd3c:	42a3      	cmp	r3, r4
 800bd3e:	d9fa      	bls.n	800bd36 <_free_r+0x46>
 800bd40:	6811      	ldr	r1, [r2, #0]
 800bd42:	1855      	adds	r5, r2, r1
 800bd44:	42a5      	cmp	r5, r4
 800bd46:	d10b      	bne.n	800bd60 <_free_r+0x70>
 800bd48:	6824      	ldr	r4, [r4, #0]
 800bd4a:	4421      	add	r1, r4
 800bd4c:	1854      	adds	r4, r2, r1
 800bd4e:	42a3      	cmp	r3, r4
 800bd50:	6011      	str	r1, [r2, #0]
 800bd52:	d1e0      	bne.n	800bd16 <_free_r+0x26>
 800bd54:	681c      	ldr	r4, [r3, #0]
 800bd56:	685b      	ldr	r3, [r3, #4]
 800bd58:	6053      	str	r3, [r2, #4]
 800bd5a:	4421      	add	r1, r4
 800bd5c:	6011      	str	r1, [r2, #0]
 800bd5e:	e7da      	b.n	800bd16 <_free_r+0x26>
 800bd60:	d902      	bls.n	800bd68 <_free_r+0x78>
 800bd62:	230c      	movs	r3, #12
 800bd64:	6003      	str	r3, [r0, #0]
 800bd66:	e7d6      	b.n	800bd16 <_free_r+0x26>
 800bd68:	6825      	ldr	r5, [r4, #0]
 800bd6a:	1961      	adds	r1, r4, r5
 800bd6c:	428b      	cmp	r3, r1
 800bd6e:	bf04      	itt	eq
 800bd70:	6819      	ldreq	r1, [r3, #0]
 800bd72:	685b      	ldreq	r3, [r3, #4]
 800bd74:	6063      	str	r3, [r4, #4]
 800bd76:	bf04      	itt	eq
 800bd78:	1949      	addeq	r1, r1, r5
 800bd7a:	6021      	streq	r1, [r4, #0]
 800bd7c:	6054      	str	r4, [r2, #4]
 800bd7e:	e7ca      	b.n	800bd16 <_free_r+0x26>
 800bd80:	b003      	add	sp, #12
 800bd82:	bd30      	pop	{r4, r5, pc}
 800bd84:	20005270 	.word	0x20005270

0800bd88 <sbrk_aligned>:
 800bd88:	b570      	push	{r4, r5, r6, lr}
 800bd8a:	4e0e      	ldr	r6, [pc, #56]	; (800bdc4 <sbrk_aligned+0x3c>)
 800bd8c:	460c      	mov	r4, r1
 800bd8e:	6831      	ldr	r1, [r6, #0]
 800bd90:	4605      	mov	r5, r0
 800bd92:	b911      	cbnz	r1, 800bd9a <sbrk_aligned+0x12>
 800bd94:	f000 f88c 	bl	800beb0 <_sbrk_r>
 800bd98:	6030      	str	r0, [r6, #0]
 800bd9a:	4621      	mov	r1, r4
 800bd9c:	4628      	mov	r0, r5
 800bd9e:	f000 f887 	bl	800beb0 <_sbrk_r>
 800bda2:	1c43      	adds	r3, r0, #1
 800bda4:	d00a      	beq.n	800bdbc <sbrk_aligned+0x34>
 800bda6:	1cc4      	adds	r4, r0, #3
 800bda8:	f024 0403 	bic.w	r4, r4, #3
 800bdac:	42a0      	cmp	r0, r4
 800bdae:	d007      	beq.n	800bdc0 <sbrk_aligned+0x38>
 800bdb0:	1a21      	subs	r1, r4, r0
 800bdb2:	4628      	mov	r0, r5
 800bdb4:	f000 f87c 	bl	800beb0 <_sbrk_r>
 800bdb8:	3001      	adds	r0, #1
 800bdba:	d101      	bne.n	800bdc0 <sbrk_aligned+0x38>
 800bdbc:	f04f 34ff 	mov.w	r4, #4294967295
 800bdc0:	4620      	mov	r0, r4
 800bdc2:	bd70      	pop	{r4, r5, r6, pc}
 800bdc4:	20005274 	.word	0x20005274

0800bdc8 <_malloc_r>:
 800bdc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdcc:	1ccd      	adds	r5, r1, #3
 800bdce:	f025 0503 	bic.w	r5, r5, #3
 800bdd2:	3508      	adds	r5, #8
 800bdd4:	2d0c      	cmp	r5, #12
 800bdd6:	bf38      	it	cc
 800bdd8:	250c      	movcc	r5, #12
 800bdda:	2d00      	cmp	r5, #0
 800bddc:	4607      	mov	r7, r0
 800bdde:	db01      	blt.n	800bde4 <_malloc_r+0x1c>
 800bde0:	42a9      	cmp	r1, r5
 800bde2:	d905      	bls.n	800bdf0 <_malloc_r+0x28>
 800bde4:	230c      	movs	r3, #12
 800bde6:	603b      	str	r3, [r7, #0]
 800bde8:	2600      	movs	r6, #0
 800bdea:	4630      	mov	r0, r6
 800bdec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdf0:	4e2e      	ldr	r6, [pc, #184]	; (800beac <_malloc_r+0xe4>)
 800bdf2:	f000 f88d 	bl	800bf10 <__malloc_lock>
 800bdf6:	6833      	ldr	r3, [r6, #0]
 800bdf8:	461c      	mov	r4, r3
 800bdfa:	bb34      	cbnz	r4, 800be4a <_malloc_r+0x82>
 800bdfc:	4629      	mov	r1, r5
 800bdfe:	4638      	mov	r0, r7
 800be00:	f7ff ffc2 	bl	800bd88 <sbrk_aligned>
 800be04:	1c43      	adds	r3, r0, #1
 800be06:	4604      	mov	r4, r0
 800be08:	d14d      	bne.n	800bea6 <_malloc_r+0xde>
 800be0a:	6834      	ldr	r4, [r6, #0]
 800be0c:	4626      	mov	r6, r4
 800be0e:	2e00      	cmp	r6, #0
 800be10:	d140      	bne.n	800be94 <_malloc_r+0xcc>
 800be12:	6823      	ldr	r3, [r4, #0]
 800be14:	4631      	mov	r1, r6
 800be16:	4638      	mov	r0, r7
 800be18:	eb04 0803 	add.w	r8, r4, r3
 800be1c:	f000 f848 	bl	800beb0 <_sbrk_r>
 800be20:	4580      	cmp	r8, r0
 800be22:	d13a      	bne.n	800be9a <_malloc_r+0xd2>
 800be24:	6821      	ldr	r1, [r4, #0]
 800be26:	3503      	adds	r5, #3
 800be28:	1a6d      	subs	r5, r5, r1
 800be2a:	f025 0503 	bic.w	r5, r5, #3
 800be2e:	3508      	adds	r5, #8
 800be30:	2d0c      	cmp	r5, #12
 800be32:	bf38      	it	cc
 800be34:	250c      	movcc	r5, #12
 800be36:	4629      	mov	r1, r5
 800be38:	4638      	mov	r0, r7
 800be3a:	f7ff ffa5 	bl	800bd88 <sbrk_aligned>
 800be3e:	3001      	adds	r0, #1
 800be40:	d02b      	beq.n	800be9a <_malloc_r+0xd2>
 800be42:	6823      	ldr	r3, [r4, #0]
 800be44:	442b      	add	r3, r5
 800be46:	6023      	str	r3, [r4, #0]
 800be48:	e00e      	b.n	800be68 <_malloc_r+0xa0>
 800be4a:	6822      	ldr	r2, [r4, #0]
 800be4c:	1b52      	subs	r2, r2, r5
 800be4e:	d41e      	bmi.n	800be8e <_malloc_r+0xc6>
 800be50:	2a0b      	cmp	r2, #11
 800be52:	d916      	bls.n	800be82 <_malloc_r+0xba>
 800be54:	1961      	adds	r1, r4, r5
 800be56:	42a3      	cmp	r3, r4
 800be58:	6025      	str	r5, [r4, #0]
 800be5a:	bf18      	it	ne
 800be5c:	6059      	strne	r1, [r3, #4]
 800be5e:	6863      	ldr	r3, [r4, #4]
 800be60:	bf08      	it	eq
 800be62:	6031      	streq	r1, [r6, #0]
 800be64:	5162      	str	r2, [r4, r5]
 800be66:	604b      	str	r3, [r1, #4]
 800be68:	4638      	mov	r0, r7
 800be6a:	f104 060b 	add.w	r6, r4, #11
 800be6e:	f000 f855 	bl	800bf1c <__malloc_unlock>
 800be72:	f026 0607 	bic.w	r6, r6, #7
 800be76:	1d23      	adds	r3, r4, #4
 800be78:	1af2      	subs	r2, r6, r3
 800be7a:	d0b6      	beq.n	800bdea <_malloc_r+0x22>
 800be7c:	1b9b      	subs	r3, r3, r6
 800be7e:	50a3      	str	r3, [r4, r2]
 800be80:	e7b3      	b.n	800bdea <_malloc_r+0x22>
 800be82:	6862      	ldr	r2, [r4, #4]
 800be84:	42a3      	cmp	r3, r4
 800be86:	bf0c      	ite	eq
 800be88:	6032      	streq	r2, [r6, #0]
 800be8a:	605a      	strne	r2, [r3, #4]
 800be8c:	e7ec      	b.n	800be68 <_malloc_r+0xa0>
 800be8e:	4623      	mov	r3, r4
 800be90:	6864      	ldr	r4, [r4, #4]
 800be92:	e7b2      	b.n	800bdfa <_malloc_r+0x32>
 800be94:	4634      	mov	r4, r6
 800be96:	6876      	ldr	r6, [r6, #4]
 800be98:	e7b9      	b.n	800be0e <_malloc_r+0x46>
 800be9a:	230c      	movs	r3, #12
 800be9c:	603b      	str	r3, [r7, #0]
 800be9e:	4638      	mov	r0, r7
 800bea0:	f000 f83c 	bl	800bf1c <__malloc_unlock>
 800bea4:	e7a1      	b.n	800bdea <_malloc_r+0x22>
 800bea6:	6025      	str	r5, [r4, #0]
 800bea8:	e7de      	b.n	800be68 <_malloc_r+0xa0>
 800beaa:	bf00      	nop
 800beac:	20005270 	.word	0x20005270

0800beb0 <_sbrk_r>:
 800beb0:	b538      	push	{r3, r4, r5, lr}
 800beb2:	4d06      	ldr	r5, [pc, #24]	; (800becc <_sbrk_r+0x1c>)
 800beb4:	2300      	movs	r3, #0
 800beb6:	4604      	mov	r4, r0
 800beb8:	4608      	mov	r0, r1
 800beba:	602b      	str	r3, [r5, #0]
 800bebc:	f7f5 fb08 	bl	80014d0 <_sbrk>
 800bec0:	1c43      	adds	r3, r0, #1
 800bec2:	d102      	bne.n	800beca <_sbrk_r+0x1a>
 800bec4:	682b      	ldr	r3, [r5, #0]
 800bec6:	b103      	cbz	r3, 800beca <_sbrk_r+0x1a>
 800bec8:	6023      	str	r3, [r4, #0]
 800beca:	bd38      	pop	{r3, r4, r5, pc}
 800becc:	20005278 	.word	0x20005278

0800bed0 <siprintf>:
 800bed0:	b40e      	push	{r1, r2, r3}
 800bed2:	b500      	push	{lr}
 800bed4:	b09c      	sub	sp, #112	; 0x70
 800bed6:	ab1d      	add	r3, sp, #116	; 0x74
 800bed8:	9002      	str	r0, [sp, #8]
 800beda:	9006      	str	r0, [sp, #24]
 800bedc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bee0:	4809      	ldr	r0, [pc, #36]	; (800bf08 <siprintf+0x38>)
 800bee2:	9107      	str	r1, [sp, #28]
 800bee4:	9104      	str	r1, [sp, #16]
 800bee6:	4909      	ldr	r1, [pc, #36]	; (800bf0c <siprintf+0x3c>)
 800bee8:	f853 2b04 	ldr.w	r2, [r3], #4
 800beec:	9105      	str	r1, [sp, #20]
 800beee:	6800      	ldr	r0, [r0, #0]
 800bef0:	9301      	str	r3, [sp, #4]
 800bef2:	a902      	add	r1, sp, #8
 800bef4:	f000 f874 	bl	800bfe0 <_svfiprintf_r>
 800bef8:	9b02      	ldr	r3, [sp, #8]
 800befa:	2200      	movs	r2, #0
 800befc:	701a      	strb	r2, [r3, #0]
 800befe:	b01c      	add	sp, #112	; 0x70
 800bf00:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf04:	b003      	add	sp, #12
 800bf06:	4770      	bx	lr
 800bf08:	20000030 	.word	0x20000030
 800bf0c:	ffff0208 	.word	0xffff0208

0800bf10 <__malloc_lock>:
 800bf10:	4801      	ldr	r0, [pc, #4]	; (800bf18 <__malloc_lock+0x8>)
 800bf12:	f000 baf9 	b.w	800c508 <__retarget_lock_acquire_recursive>
 800bf16:	bf00      	nop
 800bf18:	2000527c 	.word	0x2000527c

0800bf1c <__malloc_unlock>:
 800bf1c:	4801      	ldr	r0, [pc, #4]	; (800bf24 <__malloc_unlock+0x8>)
 800bf1e:	f000 baf4 	b.w	800c50a <__retarget_lock_release_recursive>
 800bf22:	bf00      	nop
 800bf24:	2000527c 	.word	0x2000527c

0800bf28 <__ssputs_r>:
 800bf28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf2c:	688e      	ldr	r6, [r1, #8]
 800bf2e:	429e      	cmp	r6, r3
 800bf30:	4682      	mov	sl, r0
 800bf32:	460c      	mov	r4, r1
 800bf34:	4690      	mov	r8, r2
 800bf36:	461f      	mov	r7, r3
 800bf38:	d838      	bhi.n	800bfac <__ssputs_r+0x84>
 800bf3a:	898a      	ldrh	r2, [r1, #12]
 800bf3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bf40:	d032      	beq.n	800bfa8 <__ssputs_r+0x80>
 800bf42:	6825      	ldr	r5, [r4, #0]
 800bf44:	6909      	ldr	r1, [r1, #16]
 800bf46:	eba5 0901 	sub.w	r9, r5, r1
 800bf4a:	6965      	ldr	r5, [r4, #20]
 800bf4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bf50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bf54:	3301      	adds	r3, #1
 800bf56:	444b      	add	r3, r9
 800bf58:	106d      	asrs	r5, r5, #1
 800bf5a:	429d      	cmp	r5, r3
 800bf5c:	bf38      	it	cc
 800bf5e:	461d      	movcc	r5, r3
 800bf60:	0553      	lsls	r3, r2, #21
 800bf62:	d531      	bpl.n	800bfc8 <__ssputs_r+0xa0>
 800bf64:	4629      	mov	r1, r5
 800bf66:	f7ff ff2f 	bl	800bdc8 <_malloc_r>
 800bf6a:	4606      	mov	r6, r0
 800bf6c:	b950      	cbnz	r0, 800bf84 <__ssputs_r+0x5c>
 800bf6e:	230c      	movs	r3, #12
 800bf70:	f8ca 3000 	str.w	r3, [sl]
 800bf74:	89a3      	ldrh	r3, [r4, #12]
 800bf76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf7a:	81a3      	strh	r3, [r4, #12]
 800bf7c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf84:	6921      	ldr	r1, [r4, #16]
 800bf86:	464a      	mov	r2, r9
 800bf88:	f7ff fe9c 	bl	800bcc4 <memcpy>
 800bf8c:	89a3      	ldrh	r3, [r4, #12]
 800bf8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bf92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf96:	81a3      	strh	r3, [r4, #12]
 800bf98:	6126      	str	r6, [r4, #16]
 800bf9a:	6165      	str	r5, [r4, #20]
 800bf9c:	444e      	add	r6, r9
 800bf9e:	eba5 0509 	sub.w	r5, r5, r9
 800bfa2:	6026      	str	r6, [r4, #0]
 800bfa4:	60a5      	str	r5, [r4, #8]
 800bfa6:	463e      	mov	r6, r7
 800bfa8:	42be      	cmp	r6, r7
 800bfaa:	d900      	bls.n	800bfae <__ssputs_r+0x86>
 800bfac:	463e      	mov	r6, r7
 800bfae:	6820      	ldr	r0, [r4, #0]
 800bfb0:	4632      	mov	r2, r6
 800bfb2:	4641      	mov	r1, r8
 800bfb4:	f000 faaa 	bl	800c50c <memmove>
 800bfb8:	68a3      	ldr	r3, [r4, #8]
 800bfba:	1b9b      	subs	r3, r3, r6
 800bfbc:	60a3      	str	r3, [r4, #8]
 800bfbe:	6823      	ldr	r3, [r4, #0]
 800bfc0:	4433      	add	r3, r6
 800bfc2:	6023      	str	r3, [r4, #0]
 800bfc4:	2000      	movs	r0, #0
 800bfc6:	e7db      	b.n	800bf80 <__ssputs_r+0x58>
 800bfc8:	462a      	mov	r2, r5
 800bfca:	f000 fab9 	bl	800c540 <_realloc_r>
 800bfce:	4606      	mov	r6, r0
 800bfd0:	2800      	cmp	r0, #0
 800bfd2:	d1e1      	bne.n	800bf98 <__ssputs_r+0x70>
 800bfd4:	6921      	ldr	r1, [r4, #16]
 800bfd6:	4650      	mov	r0, sl
 800bfd8:	f7ff fe8a 	bl	800bcf0 <_free_r>
 800bfdc:	e7c7      	b.n	800bf6e <__ssputs_r+0x46>
	...

0800bfe0 <_svfiprintf_r>:
 800bfe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfe4:	4698      	mov	r8, r3
 800bfe6:	898b      	ldrh	r3, [r1, #12]
 800bfe8:	061b      	lsls	r3, r3, #24
 800bfea:	b09d      	sub	sp, #116	; 0x74
 800bfec:	4607      	mov	r7, r0
 800bfee:	460d      	mov	r5, r1
 800bff0:	4614      	mov	r4, r2
 800bff2:	d50e      	bpl.n	800c012 <_svfiprintf_r+0x32>
 800bff4:	690b      	ldr	r3, [r1, #16]
 800bff6:	b963      	cbnz	r3, 800c012 <_svfiprintf_r+0x32>
 800bff8:	2140      	movs	r1, #64	; 0x40
 800bffa:	f7ff fee5 	bl	800bdc8 <_malloc_r>
 800bffe:	6028      	str	r0, [r5, #0]
 800c000:	6128      	str	r0, [r5, #16]
 800c002:	b920      	cbnz	r0, 800c00e <_svfiprintf_r+0x2e>
 800c004:	230c      	movs	r3, #12
 800c006:	603b      	str	r3, [r7, #0]
 800c008:	f04f 30ff 	mov.w	r0, #4294967295
 800c00c:	e0d1      	b.n	800c1b2 <_svfiprintf_r+0x1d2>
 800c00e:	2340      	movs	r3, #64	; 0x40
 800c010:	616b      	str	r3, [r5, #20]
 800c012:	2300      	movs	r3, #0
 800c014:	9309      	str	r3, [sp, #36]	; 0x24
 800c016:	2320      	movs	r3, #32
 800c018:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c01c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c020:	2330      	movs	r3, #48	; 0x30
 800c022:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c1cc <_svfiprintf_r+0x1ec>
 800c026:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c02a:	f04f 0901 	mov.w	r9, #1
 800c02e:	4623      	mov	r3, r4
 800c030:	469a      	mov	sl, r3
 800c032:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c036:	b10a      	cbz	r2, 800c03c <_svfiprintf_r+0x5c>
 800c038:	2a25      	cmp	r2, #37	; 0x25
 800c03a:	d1f9      	bne.n	800c030 <_svfiprintf_r+0x50>
 800c03c:	ebba 0b04 	subs.w	fp, sl, r4
 800c040:	d00b      	beq.n	800c05a <_svfiprintf_r+0x7a>
 800c042:	465b      	mov	r3, fp
 800c044:	4622      	mov	r2, r4
 800c046:	4629      	mov	r1, r5
 800c048:	4638      	mov	r0, r7
 800c04a:	f7ff ff6d 	bl	800bf28 <__ssputs_r>
 800c04e:	3001      	adds	r0, #1
 800c050:	f000 80aa 	beq.w	800c1a8 <_svfiprintf_r+0x1c8>
 800c054:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c056:	445a      	add	r2, fp
 800c058:	9209      	str	r2, [sp, #36]	; 0x24
 800c05a:	f89a 3000 	ldrb.w	r3, [sl]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	f000 80a2 	beq.w	800c1a8 <_svfiprintf_r+0x1c8>
 800c064:	2300      	movs	r3, #0
 800c066:	f04f 32ff 	mov.w	r2, #4294967295
 800c06a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c06e:	f10a 0a01 	add.w	sl, sl, #1
 800c072:	9304      	str	r3, [sp, #16]
 800c074:	9307      	str	r3, [sp, #28]
 800c076:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c07a:	931a      	str	r3, [sp, #104]	; 0x68
 800c07c:	4654      	mov	r4, sl
 800c07e:	2205      	movs	r2, #5
 800c080:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c084:	4851      	ldr	r0, [pc, #324]	; (800c1cc <_svfiprintf_r+0x1ec>)
 800c086:	f7f4 f8a3 	bl	80001d0 <memchr>
 800c08a:	9a04      	ldr	r2, [sp, #16]
 800c08c:	b9d8      	cbnz	r0, 800c0c6 <_svfiprintf_r+0xe6>
 800c08e:	06d0      	lsls	r0, r2, #27
 800c090:	bf44      	itt	mi
 800c092:	2320      	movmi	r3, #32
 800c094:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c098:	0711      	lsls	r1, r2, #28
 800c09a:	bf44      	itt	mi
 800c09c:	232b      	movmi	r3, #43	; 0x2b
 800c09e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0a2:	f89a 3000 	ldrb.w	r3, [sl]
 800c0a6:	2b2a      	cmp	r3, #42	; 0x2a
 800c0a8:	d015      	beq.n	800c0d6 <_svfiprintf_r+0xf6>
 800c0aa:	9a07      	ldr	r2, [sp, #28]
 800c0ac:	4654      	mov	r4, sl
 800c0ae:	2000      	movs	r0, #0
 800c0b0:	f04f 0c0a 	mov.w	ip, #10
 800c0b4:	4621      	mov	r1, r4
 800c0b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c0ba:	3b30      	subs	r3, #48	; 0x30
 800c0bc:	2b09      	cmp	r3, #9
 800c0be:	d94e      	bls.n	800c15e <_svfiprintf_r+0x17e>
 800c0c0:	b1b0      	cbz	r0, 800c0f0 <_svfiprintf_r+0x110>
 800c0c2:	9207      	str	r2, [sp, #28]
 800c0c4:	e014      	b.n	800c0f0 <_svfiprintf_r+0x110>
 800c0c6:	eba0 0308 	sub.w	r3, r0, r8
 800c0ca:	fa09 f303 	lsl.w	r3, r9, r3
 800c0ce:	4313      	orrs	r3, r2
 800c0d0:	9304      	str	r3, [sp, #16]
 800c0d2:	46a2      	mov	sl, r4
 800c0d4:	e7d2      	b.n	800c07c <_svfiprintf_r+0x9c>
 800c0d6:	9b03      	ldr	r3, [sp, #12]
 800c0d8:	1d19      	adds	r1, r3, #4
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	9103      	str	r1, [sp, #12]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	bfbb      	ittet	lt
 800c0e2:	425b      	neglt	r3, r3
 800c0e4:	f042 0202 	orrlt.w	r2, r2, #2
 800c0e8:	9307      	strge	r3, [sp, #28]
 800c0ea:	9307      	strlt	r3, [sp, #28]
 800c0ec:	bfb8      	it	lt
 800c0ee:	9204      	strlt	r2, [sp, #16]
 800c0f0:	7823      	ldrb	r3, [r4, #0]
 800c0f2:	2b2e      	cmp	r3, #46	; 0x2e
 800c0f4:	d10c      	bne.n	800c110 <_svfiprintf_r+0x130>
 800c0f6:	7863      	ldrb	r3, [r4, #1]
 800c0f8:	2b2a      	cmp	r3, #42	; 0x2a
 800c0fa:	d135      	bne.n	800c168 <_svfiprintf_r+0x188>
 800c0fc:	9b03      	ldr	r3, [sp, #12]
 800c0fe:	1d1a      	adds	r2, r3, #4
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	9203      	str	r2, [sp, #12]
 800c104:	2b00      	cmp	r3, #0
 800c106:	bfb8      	it	lt
 800c108:	f04f 33ff 	movlt.w	r3, #4294967295
 800c10c:	3402      	adds	r4, #2
 800c10e:	9305      	str	r3, [sp, #20]
 800c110:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c1dc <_svfiprintf_r+0x1fc>
 800c114:	7821      	ldrb	r1, [r4, #0]
 800c116:	2203      	movs	r2, #3
 800c118:	4650      	mov	r0, sl
 800c11a:	f7f4 f859 	bl	80001d0 <memchr>
 800c11e:	b140      	cbz	r0, 800c132 <_svfiprintf_r+0x152>
 800c120:	2340      	movs	r3, #64	; 0x40
 800c122:	eba0 000a 	sub.w	r0, r0, sl
 800c126:	fa03 f000 	lsl.w	r0, r3, r0
 800c12a:	9b04      	ldr	r3, [sp, #16]
 800c12c:	4303      	orrs	r3, r0
 800c12e:	3401      	adds	r4, #1
 800c130:	9304      	str	r3, [sp, #16]
 800c132:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c136:	4826      	ldr	r0, [pc, #152]	; (800c1d0 <_svfiprintf_r+0x1f0>)
 800c138:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c13c:	2206      	movs	r2, #6
 800c13e:	f7f4 f847 	bl	80001d0 <memchr>
 800c142:	2800      	cmp	r0, #0
 800c144:	d038      	beq.n	800c1b8 <_svfiprintf_r+0x1d8>
 800c146:	4b23      	ldr	r3, [pc, #140]	; (800c1d4 <_svfiprintf_r+0x1f4>)
 800c148:	bb1b      	cbnz	r3, 800c192 <_svfiprintf_r+0x1b2>
 800c14a:	9b03      	ldr	r3, [sp, #12]
 800c14c:	3307      	adds	r3, #7
 800c14e:	f023 0307 	bic.w	r3, r3, #7
 800c152:	3308      	adds	r3, #8
 800c154:	9303      	str	r3, [sp, #12]
 800c156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c158:	4433      	add	r3, r6
 800c15a:	9309      	str	r3, [sp, #36]	; 0x24
 800c15c:	e767      	b.n	800c02e <_svfiprintf_r+0x4e>
 800c15e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c162:	460c      	mov	r4, r1
 800c164:	2001      	movs	r0, #1
 800c166:	e7a5      	b.n	800c0b4 <_svfiprintf_r+0xd4>
 800c168:	2300      	movs	r3, #0
 800c16a:	3401      	adds	r4, #1
 800c16c:	9305      	str	r3, [sp, #20]
 800c16e:	4619      	mov	r1, r3
 800c170:	f04f 0c0a 	mov.w	ip, #10
 800c174:	4620      	mov	r0, r4
 800c176:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c17a:	3a30      	subs	r2, #48	; 0x30
 800c17c:	2a09      	cmp	r2, #9
 800c17e:	d903      	bls.n	800c188 <_svfiprintf_r+0x1a8>
 800c180:	2b00      	cmp	r3, #0
 800c182:	d0c5      	beq.n	800c110 <_svfiprintf_r+0x130>
 800c184:	9105      	str	r1, [sp, #20]
 800c186:	e7c3      	b.n	800c110 <_svfiprintf_r+0x130>
 800c188:	fb0c 2101 	mla	r1, ip, r1, r2
 800c18c:	4604      	mov	r4, r0
 800c18e:	2301      	movs	r3, #1
 800c190:	e7f0      	b.n	800c174 <_svfiprintf_r+0x194>
 800c192:	ab03      	add	r3, sp, #12
 800c194:	9300      	str	r3, [sp, #0]
 800c196:	462a      	mov	r2, r5
 800c198:	4b0f      	ldr	r3, [pc, #60]	; (800c1d8 <_svfiprintf_r+0x1f8>)
 800c19a:	a904      	add	r1, sp, #16
 800c19c:	4638      	mov	r0, r7
 800c19e:	f3af 8000 	nop.w
 800c1a2:	1c42      	adds	r2, r0, #1
 800c1a4:	4606      	mov	r6, r0
 800c1a6:	d1d6      	bne.n	800c156 <_svfiprintf_r+0x176>
 800c1a8:	89ab      	ldrh	r3, [r5, #12]
 800c1aa:	065b      	lsls	r3, r3, #25
 800c1ac:	f53f af2c 	bmi.w	800c008 <_svfiprintf_r+0x28>
 800c1b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c1b2:	b01d      	add	sp, #116	; 0x74
 800c1b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1b8:	ab03      	add	r3, sp, #12
 800c1ba:	9300      	str	r3, [sp, #0]
 800c1bc:	462a      	mov	r2, r5
 800c1be:	4b06      	ldr	r3, [pc, #24]	; (800c1d8 <_svfiprintf_r+0x1f8>)
 800c1c0:	a904      	add	r1, sp, #16
 800c1c2:	4638      	mov	r0, r7
 800c1c4:	f000 f87a 	bl	800c2bc <_printf_i>
 800c1c8:	e7eb      	b.n	800c1a2 <_svfiprintf_r+0x1c2>
 800c1ca:	bf00      	nop
 800c1cc:	0800e754 	.word	0x0800e754
 800c1d0:	0800e75e 	.word	0x0800e75e
 800c1d4:	00000000 	.word	0x00000000
 800c1d8:	0800bf29 	.word	0x0800bf29
 800c1dc:	0800e75a 	.word	0x0800e75a

0800c1e0 <_printf_common>:
 800c1e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1e4:	4616      	mov	r6, r2
 800c1e6:	4699      	mov	r9, r3
 800c1e8:	688a      	ldr	r2, [r1, #8]
 800c1ea:	690b      	ldr	r3, [r1, #16]
 800c1ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c1f0:	4293      	cmp	r3, r2
 800c1f2:	bfb8      	it	lt
 800c1f4:	4613      	movlt	r3, r2
 800c1f6:	6033      	str	r3, [r6, #0]
 800c1f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c1fc:	4607      	mov	r7, r0
 800c1fe:	460c      	mov	r4, r1
 800c200:	b10a      	cbz	r2, 800c206 <_printf_common+0x26>
 800c202:	3301      	adds	r3, #1
 800c204:	6033      	str	r3, [r6, #0]
 800c206:	6823      	ldr	r3, [r4, #0]
 800c208:	0699      	lsls	r1, r3, #26
 800c20a:	bf42      	ittt	mi
 800c20c:	6833      	ldrmi	r3, [r6, #0]
 800c20e:	3302      	addmi	r3, #2
 800c210:	6033      	strmi	r3, [r6, #0]
 800c212:	6825      	ldr	r5, [r4, #0]
 800c214:	f015 0506 	ands.w	r5, r5, #6
 800c218:	d106      	bne.n	800c228 <_printf_common+0x48>
 800c21a:	f104 0a19 	add.w	sl, r4, #25
 800c21e:	68e3      	ldr	r3, [r4, #12]
 800c220:	6832      	ldr	r2, [r6, #0]
 800c222:	1a9b      	subs	r3, r3, r2
 800c224:	42ab      	cmp	r3, r5
 800c226:	dc26      	bgt.n	800c276 <_printf_common+0x96>
 800c228:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c22c:	1e13      	subs	r3, r2, #0
 800c22e:	6822      	ldr	r2, [r4, #0]
 800c230:	bf18      	it	ne
 800c232:	2301      	movne	r3, #1
 800c234:	0692      	lsls	r2, r2, #26
 800c236:	d42b      	bmi.n	800c290 <_printf_common+0xb0>
 800c238:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c23c:	4649      	mov	r1, r9
 800c23e:	4638      	mov	r0, r7
 800c240:	47c0      	blx	r8
 800c242:	3001      	adds	r0, #1
 800c244:	d01e      	beq.n	800c284 <_printf_common+0xa4>
 800c246:	6823      	ldr	r3, [r4, #0]
 800c248:	68e5      	ldr	r5, [r4, #12]
 800c24a:	6832      	ldr	r2, [r6, #0]
 800c24c:	f003 0306 	and.w	r3, r3, #6
 800c250:	2b04      	cmp	r3, #4
 800c252:	bf08      	it	eq
 800c254:	1aad      	subeq	r5, r5, r2
 800c256:	68a3      	ldr	r3, [r4, #8]
 800c258:	6922      	ldr	r2, [r4, #16]
 800c25a:	bf0c      	ite	eq
 800c25c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c260:	2500      	movne	r5, #0
 800c262:	4293      	cmp	r3, r2
 800c264:	bfc4      	itt	gt
 800c266:	1a9b      	subgt	r3, r3, r2
 800c268:	18ed      	addgt	r5, r5, r3
 800c26a:	2600      	movs	r6, #0
 800c26c:	341a      	adds	r4, #26
 800c26e:	42b5      	cmp	r5, r6
 800c270:	d11a      	bne.n	800c2a8 <_printf_common+0xc8>
 800c272:	2000      	movs	r0, #0
 800c274:	e008      	b.n	800c288 <_printf_common+0xa8>
 800c276:	2301      	movs	r3, #1
 800c278:	4652      	mov	r2, sl
 800c27a:	4649      	mov	r1, r9
 800c27c:	4638      	mov	r0, r7
 800c27e:	47c0      	blx	r8
 800c280:	3001      	adds	r0, #1
 800c282:	d103      	bne.n	800c28c <_printf_common+0xac>
 800c284:	f04f 30ff 	mov.w	r0, #4294967295
 800c288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c28c:	3501      	adds	r5, #1
 800c28e:	e7c6      	b.n	800c21e <_printf_common+0x3e>
 800c290:	18e1      	adds	r1, r4, r3
 800c292:	1c5a      	adds	r2, r3, #1
 800c294:	2030      	movs	r0, #48	; 0x30
 800c296:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c29a:	4422      	add	r2, r4
 800c29c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c2a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c2a4:	3302      	adds	r3, #2
 800c2a6:	e7c7      	b.n	800c238 <_printf_common+0x58>
 800c2a8:	2301      	movs	r3, #1
 800c2aa:	4622      	mov	r2, r4
 800c2ac:	4649      	mov	r1, r9
 800c2ae:	4638      	mov	r0, r7
 800c2b0:	47c0      	blx	r8
 800c2b2:	3001      	adds	r0, #1
 800c2b4:	d0e6      	beq.n	800c284 <_printf_common+0xa4>
 800c2b6:	3601      	adds	r6, #1
 800c2b8:	e7d9      	b.n	800c26e <_printf_common+0x8e>
	...

0800c2bc <_printf_i>:
 800c2bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c2c0:	7e0f      	ldrb	r7, [r1, #24]
 800c2c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c2c4:	2f78      	cmp	r7, #120	; 0x78
 800c2c6:	4691      	mov	r9, r2
 800c2c8:	4680      	mov	r8, r0
 800c2ca:	460c      	mov	r4, r1
 800c2cc:	469a      	mov	sl, r3
 800c2ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c2d2:	d807      	bhi.n	800c2e4 <_printf_i+0x28>
 800c2d4:	2f62      	cmp	r7, #98	; 0x62
 800c2d6:	d80a      	bhi.n	800c2ee <_printf_i+0x32>
 800c2d8:	2f00      	cmp	r7, #0
 800c2da:	f000 80d8 	beq.w	800c48e <_printf_i+0x1d2>
 800c2de:	2f58      	cmp	r7, #88	; 0x58
 800c2e0:	f000 80a3 	beq.w	800c42a <_printf_i+0x16e>
 800c2e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c2e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c2ec:	e03a      	b.n	800c364 <_printf_i+0xa8>
 800c2ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c2f2:	2b15      	cmp	r3, #21
 800c2f4:	d8f6      	bhi.n	800c2e4 <_printf_i+0x28>
 800c2f6:	a101      	add	r1, pc, #4	; (adr r1, 800c2fc <_printf_i+0x40>)
 800c2f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c2fc:	0800c355 	.word	0x0800c355
 800c300:	0800c369 	.word	0x0800c369
 800c304:	0800c2e5 	.word	0x0800c2e5
 800c308:	0800c2e5 	.word	0x0800c2e5
 800c30c:	0800c2e5 	.word	0x0800c2e5
 800c310:	0800c2e5 	.word	0x0800c2e5
 800c314:	0800c369 	.word	0x0800c369
 800c318:	0800c2e5 	.word	0x0800c2e5
 800c31c:	0800c2e5 	.word	0x0800c2e5
 800c320:	0800c2e5 	.word	0x0800c2e5
 800c324:	0800c2e5 	.word	0x0800c2e5
 800c328:	0800c475 	.word	0x0800c475
 800c32c:	0800c399 	.word	0x0800c399
 800c330:	0800c457 	.word	0x0800c457
 800c334:	0800c2e5 	.word	0x0800c2e5
 800c338:	0800c2e5 	.word	0x0800c2e5
 800c33c:	0800c497 	.word	0x0800c497
 800c340:	0800c2e5 	.word	0x0800c2e5
 800c344:	0800c399 	.word	0x0800c399
 800c348:	0800c2e5 	.word	0x0800c2e5
 800c34c:	0800c2e5 	.word	0x0800c2e5
 800c350:	0800c45f 	.word	0x0800c45f
 800c354:	682b      	ldr	r3, [r5, #0]
 800c356:	1d1a      	adds	r2, r3, #4
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	602a      	str	r2, [r5, #0]
 800c35c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c360:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c364:	2301      	movs	r3, #1
 800c366:	e0a3      	b.n	800c4b0 <_printf_i+0x1f4>
 800c368:	6820      	ldr	r0, [r4, #0]
 800c36a:	6829      	ldr	r1, [r5, #0]
 800c36c:	0606      	lsls	r6, r0, #24
 800c36e:	f101 0304 	add.w	r3, r1, #4
 800c372:	d50a      	bpl.n	800c38a <_printf_i+0xce>
 800c374:	680e      	ldr	r6, [r1, #0]
 800c376:	602b      	str	r3, [r5, #0]
 800c378:	2e00      	cmp	r6, #0
 800c37a:	da03      	bge.n	800c384 <_printf_i+0xc8>
 800c37c:	232d      	movs	r3, #45	; 0x2d
 800c37e:	4276      	negs	r6, r6
 800c380:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c384:	485e      	ldr	r0, [pc, #376]	; (800c500 <_printf_i+0x244>)
 800c386:	230a      	movs	r3, #10
 800c388:	e019      	b.n	800c3be <_printf_i+0x102>
 800c38a:	680e      	ldr	r6, [r1, #0]
 800c38c:	602b      	str	r3, [r5, #0]
 800c38e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c392:	bf18      	it	ne
 800c394:	b236      	sxthne	r6, r6
 800c396:	e7ef      	b.n	800c378 <_printf_i+0xbc>
 800c398:	682b      	ldr	r3, [r5, #0]
 800c39a:	6820      	ldr	r0, [r4, #0]
 800c39c:	1d19      	adds	r1, r3, #4
 800c39e:	6029      	str	r1, [r5, #0]
 800c3a0:	0601      	lsls	r1, r0, #24
 800c3a2:	d501      	bpl.n	800c3a8 <_printf_i+0xec>
 800c3a4:	681e      	ldr	r6, [r3, #0]
 800c3a6:	e002      	b.n	800c3ae <_printf_i+0xf2>
 800c3a8:	0646      	lsls	r6, r0, #25
 800c3aa:	d5fb      	bpl.n	800c3a4 <_printf_i+0xe8>
 800c3ac:	881e      	ldrh	r6, [r3, #0]
 800c3ae:	4854      	ldr	r0, [pc, #336]	; (800c500 <_printf_i+0x244>)
 800c3b0:	2f6f      	cmp	r7, #111	; 0x6f
 800c3b2:	bf0c      	ite	eq
 800c3b4:	2308      	moveq	r3, #8
 800c3b6:	230a      	movne	r3, #10
 800c3b8:	2100      	movs	r1, #0
 800c3ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c3be:	6865      	ldr	r5, [r4, #4]
 800c3c0:	60a5      	str	r5, [r4, #8]
 800c3c2:	2d00      	cmp	r5, #0
 800c3c4:	bfa2      	ittt	ge
 800c3c6:	6821      	ldrge	r1, [r4, #0]
 800c3c8:	f021 0104 	bicge.w	r1, r1, #4
 800c3cc:	6021      	strge	r1, [r4, #0]
 800c3ce:	b90e      	cbnz	r6, 800c3d4 <_printf_i+0x118>
 800c3d0:	2d00      	cmp	r5, #0
 800c3d2:	d04d      	beq.n	800c470 <_printf_i+0x1b4>
 800c3d4:	4615      	mov	r5, r2
 800c3d6:	fbb6 f1f3 	udiv	r1, r6, r3
 800c3da:	fb03 6711 	mls	r7, r3, r1, r6
 800c3de:	5dc7      	ldrb	r7, [r0, r7]
 800c3e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c3e4:	4637      	mov	r7, r6
 800c3e6:	42bb      	cmp	r3, r7
 800c3e8:	460e      	mov	r6, r1
 800c3ea:	d9f4      	bls.n	800c3d6 <_printf_i+0x11a>
 800c3ec:	2b08      	cmp	r3, #8
 800c3ee:	d10b      	bne.n	800c408 <_printf_i+0x14c>
 800c3f0:	6823      	ldr	r3, [r4, #0]
 800c3f2:	07de      	lsls	r6, r3, #31
 800c3f4:	d508      	bpl.n	800c408 <_printf_i+0x14c>
 800c3f6:	6923      	ldr	r3, [r4, #16]
 800c3f8:	6861      	ldr	r1, [r4, #4]
 800c3fa:	4299      	cmp	r1, r3
 800c3fc:	bfde      	ittt	le
 800c3fe:	2330      	movle	r3, #48	; 0x30
 800c400:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c404:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c408:	1b52      	subs	r2, r2, r5
 800c40a:	6122      	str	r2, [r4, #16]
 800c40c:	f8cd a000 	str.w	sl, [sp]
 800c410:	464b      	mov	r3, r9
 800c412:	aa03      	add	r2, sp, #12
 800c414:	4621      	mov	r1, r4
 800c416:	4640      	mov	r0, r8
 800c418:	f7ff fee2 	bl	800c1e0 <_printf_common>
 800c41c:	3001      	adds	r0, #1
 800c41e:	d14c      	bne.n	800c4ba <_printf_i+0x1fe>
 800c420:	f04f 30ff 	mov.w	r0, #4294967295
 800c424:	b004      	add	sp, #16
 800c426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c42a:	4835      	ldr	r0, [pc, #212]	; (800c500 <_printf_i+0x244>)
 800c42c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c430:	6829      	ldr	r1, [r5, #0]
 800c432:	6823      	ldr	r3, [r4, #0]
 800c434:	f851 6b04 	ldr.w	r6, [r1], #4
 800c438:	6029      	str	r1, [r5, #0]
 800c43a:	061d      	lsls	r5, r3, #24
 800c43c:	d514      	bpl.n	800c468 <_printf_i+0x1ac>
 800c43e:	07df      	lsls	r7, r3, #31
 800c440:	bf44      	itt	mi
 800c442:	f043 0320 	orrmi.w	r3, r3, #32
 800c446:	6023      	strmi	r3, [r4, #0]
 800c448:	b91e      	cbnz	r6, 800c452 <_printf_i+0x196>
 800c44a:	6823      	ldr	r3, [r4, #0]
 800c44c:	f023 0320 	bic.w	r3, r3, #32
 800c450:	6023      	str	r3, [r4, #0]
 800c452:	2310      	movs	r3, #16
 800c454:	e7b0      	b.n	800c3b8 <_printf_i+0xfc>
 800c456:	6823      	ldr	r3, [r4, #0]
 800c458:	f043 0320 	orr.w	r3, r3, #32
 800c45c:	6023      	str	r3, [r4, #0]
 800c45e:	2378      	movs	r3, #120	; 0x78
 800c460:	4828      	ldr	r0, [pc, #160]	; (800c504 <_printf_i+0x248>)
 800c462:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c466:	e7e3      	b.n	800c430 <_printf_i+0x174>
 800c468:	0659      	lsls	r1, r3, #25
 800c46a:	bf48      	it	mi
 800c46c:	b2b6      	uxthmi	r6, r6
 800c46e:	e7e6      	b.n	800c43e <_printf_i+0x182>
 800c470:	4615      	mov	r5, r2
 800c472:	e7bb      	b.n	800c3ec <_printf_i+0x130>
 800c474:	682b      	ldr	r3, [r5, #0]
 800c476:	6826      	ldr	r6, [r4, #0]
 800c478:	6961      	ldr	r1, [r4, #20]
 800c47a:	1d18      	adds	r0, r3, #4
 800c47c:	6028      	str	r0, [r5, #0]
 800c47e:	0635      	lsls	r5, r6, #24
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	d501      	bpl.n	800c488 <_printf_i+0x1cc>
 800c484:	6019      	str	r1, [r3, #0]
 800c486:	e002      	b.n	800c48e <_printf_i+0x1d2>
 800c488:	0670      	lsls	r0, r6, #25
 800c48a:	d5fb      	bpl.n	800c484 <_printf_i+0x1c8>
 800c48c:	8019      	strh	r1, [r3, #0]
 800c48e:	2300      	movs	r3, #0
 800c490:	6123      	str	r3, [r4, #16]
 800c492:	4615      	mov	r5, r2
 800c494:	e7ba      	b.n	800c40c <_printf_i+0x150>
 800c496:	682b      	ldr	r3, [r5, #0]
 800c498:	1d1a      	adds	r2, r3, #4
 800c49a:	602a      	str	r2, [r5, #0]
 800c49c:	681d      	ldr	r5, [r3, #0]
 800c49e:	6862      	ldr	r2, [r4, #4]
 800c4a0:	2100      	movs	r1, #0
 800c4a2:	4628      	mov	r0, r5
 800c4a4:	f7f3 fe94 	bl	80001d0 <memchr>
 800c4a8:	b108      	cbz	r0, 800c4ae <_printf_i+0x1f2>
 800c4aa:	1b40      	subs	r0, r0, r5
 800c4ac:	6060      	str	r0, [r4, #4]
 800c4ae:	6863      	ldr	r3, [r4, #4]
 800c4b0:	6123      	str	r3, [r4, #16]
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c4b8:	e7a8      	b.n	800c40c <_printf_i+0x150>
 800c4ba:	6923      	ldr	r3, [r4, #16]
 800c4bc:	462a      	mov	r2, r5
 800c4be:	4649      	mov	r1, r9
 800c4c0:	4640      	mov	r0, r8
 800c4c2:	47d0      	blx	sl
 800c4c4:	3001      	adds	r0, #1
 800c4c6:	d0ab      	beq.n	800c420 <_printf_i+0x164>
 800c4c8:	6823      	ldr	r3, [r4, #0]
 800c4ca:	079b      	lsls	r3, r3, #30
 800c4cc:	d413      	bmi.n	800c4f6 <_printf_i+0x23a>
 800c4ce:	68e0      	ldr	r0, [r4, #12]
 800c4d0:	9b03      	ldr	r3, [sp, #12]
 800c4d2:	4298      	cmp	r0, r3
 800c4d4:	bfb8      	it	lt
 800c4d6:	4618      	movlt	r0, r3
 800c4d8:	e7a4      	b.n	800c424 <_printf_i+0x168>
 800c4da:	2301      	movs	r3, #1
 800c4dc:	4632      	mov	r2, r6
 800c4de:	4649      	mov	r1, r9
 800c4e0:	4640      	mov	r0, r8
 800c4e2:	47d0      	blx	sl
 800c4e4:	3001      	adds	r0, #1
 800c4e6:	d09b      	beq.n	800c420 <_printf_i+0x164>
 800c4e8:	3501      	adds	r5, #1
 800c4ea:	68e3      	ldr	r3, [r4, #12]
 800c4ec:	9903      	ldr	r1, [sp, #12]
 800c4ee:	1a5b      	subs	r3, r3, r1
 800c4f0:	42ab      	cmp	r3, r5
 800c4f2:	dcf2      	bgt.n	800c4da <_printf_i+0x21e>
 800c4f4:	e7eb      	b.n	800c4ce <_printf_i+0x212>
 800c4f6:	2500      	movs	r5, #0
 800c4f8:	f104 0619 	add.w	r6, r4, #25
 800c4fc:	e7f5      	b.n	800c4ea <_printf_i+0x22e>
 800c4fe:	bf00      	nop
 800c500:	0800e765 	.word	0x0800e765
 800c504:	0800e776 	.word	0x0800e776

0800c508 <__retarget_lock_acquire_recursive>:
 800c508:	4770      	bx	lr

0800c50a <__retarget_lock_release_recursive>:
 800c50a:	4770      	bx	lr

0800c50c <memmove>:
 800c50c:	4288      	cmp	r0, r1
 800c50e:	b510      	push	{r4, lr}
 800c510:	eb01 0402 	add.w	r4, r1, r2
 800c514:	d902      	bls.n	800c51c <memmove+0x10>
 800c516:	4284      	cmp	r4, r0
 800c518:	4623      	mov	r3, r4
 800c51a:	d807      	bhi.n	800c52c <memmove+0x20>
 800c51c:	1e43      	subs	r3, r0, #1
 800c51e:	42a1      	cmp	r1, r4
 800c520:	d008      	beq.n	800c534 <memmove+0x28>
 800c522:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c526:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c52a:	e7f8      	b.n	800c51e <memmove+0x12>
 800c52c:	4402      	add	r2, r0
 800c52e:	4601      	mov	r1, r0
 800c530:	428a      	cmp	r2, r1
 800c532:	d100      	bne.n	800c536 <memmove+0x2a>
 800c534:	bd10      	pop	{r4, pc}
 800c536:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c53a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c53e:	e7f7      	b.n	800c530 <memmove+0x24>

0800c540 <_realloc_r>:
 800c540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c544:	4680      	mov	r8, r0
 800c546:	4614      	mov	r4, r2
 800c548:	460e      	mov	r6, r1
 800c54a:	b921      	cbnz	r1, 800c556 <_realloc_r+0x16>
 800c54c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c550:	4611      	mov	r1, r2
 800c552:	f7ff bc39 	b.w	800bdc8 <_malloc_r>
 800c556:	b92a      	cbnz	r2, 800c564 <_realloc_r+0x24>
 800c558:	f7ff fbca 	bl	800bcf0 <_free_r>
 800c55c:	4625      	mov	r5, r4
 800c55e:	4628      	mov	r0, r5
 800c560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c564:	f000 f81b 	bl	800c59e <_malloc_usable_size_r>
 800c568:	4284      	cmp	r4, r0
 800c56a:	4607      	mov	r7, r0
 800c56c:	d802      	bhi.n	800c574 <_realloc_r+0x34>
 800c56e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c572:	d812      	bhi.n	800c59a <_realloc_r+0x5a>
 800c574:	4621      	mov	r1, r4
 800c576:	4640      	mov	r0, r8
 800c578:	f7ff fc26 	bl	800bdc8 <_malloc_r>
 800c57c:	4605      	mov	r5, r0
 800c57e:	2800      	cmp	r0, #0
 800c580:	d0ed      	beq.n	800c55e <_realloc_r+0x1e>
 800c582:	42bc      	cmp	r4, r7
 800c584:	4622      	mov	r2, r4
 800c586:	4631      	mov	r1, r6
 800c588:	bf28      	it	cs
 800c58a:	463a      	movcs	r2, r7
 800c58c:	f7ff fb9a 	bl	800bcc4 <memcpy>
 800c590:	4631      	mov	r1, r6
 800c592:	4640      	mov	r0, r8
 800c594:	f7ff fbac 	bl	800bcf0 <_free_r>
 800c598:	e7e1      	b.n	800c55e <_realloc_r+0x1e>
 800c59a:	4635      	mov	r5, r6
 800c59c:	e7df      	b.n	800c55e <_realloc_r+0x1e>

0800c59e <_malloc_usable_size_r>:
 800c59e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5a2:	1f18      	subs	r0, r3, #4
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	bfbc      	itt	lt
 800c5a8:	580b      	ldrlt	r3, [r1, r0]
 800c5aa:	18c0      	addlt	r0, r0, r3
 800c5ac:	4770      	bx	lr
	...

0800c5b0 <_init>:
 800c5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5b2:	bf00      	nop
 800c5b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5b6:	bc08      	pop	{r3}
 800c5b8:	469e      	mov	lr, r3
 800c5ba:	4770      	bx	lr

0800c5bc <_fini>:
 800c5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5be:	bf00      	nop
 800c5c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5c2:	bc08      	pop	{r3}
 800c5c4:	469e      	mov	lr, r3
 800c5c6:	4770      	bx	lr
