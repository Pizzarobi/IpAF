
Erster_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c538  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002250  0800c6c8  0800c6c8  0001c6c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e918  0800e918  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800e918  0800e918  0001e918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e920  0800e920  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e920  0800e920  0001e920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e924  0800e924  0001e924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800e928  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          000051f4  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005288  20005288  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025631  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005371  00000000  00000000  000456f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f18  00000000  00000000  0004aa68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001d08  00000000  00000000  0004c980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027c46  00000000  00000000  0004e688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026232  00000000  00000000  000762ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df5f9  00000000  00000000  0009c500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017baf9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000087fc  00000000  00000000  0017bb4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c6b0 	.word	0x0800c6b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800c6b0 	.word	0x0800c6b0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <LCD_SetCursor>:
#include "fonts.h"
#include "display.h"
#include "cmsis_os.h"
#include "usb_host.h"

void LCD_SetCursor(uint16_t x, uint16_t y){
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	460a      	mov	r2, r1
 800057e:	80fb      	strh	r3, [r7, #6]
 8000580:	4613      	mov	r3, r2
 8000582:	80bb      	strh	r3, [r7, #4]
	LCD_WriteReg(0x004E, x); // Set x-pos
 8000584:	88fb      	ldrh	r3, [r7, #6]
 8000586:	4619      	mov	r1, r3
 8000588:	204e      	movs	r0, #78	; 0x4e
 800058a:	f000 f96f 	bl	800086c <LCD_WriteReg>
	LCD_WriteReg(0x004F, y); // Set y-pos
 800058e:	88bb      	ldrh	r3, [r7, #4]
 8000590:	4619      	mov	r1, r3
 8000592:	204f      	movs	r0, #79	; 0x4f
 8000594:	f000 f96a 	bl	800086c <LCD_WriteReg>
}
 8000598:	bf00      	nop
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}

080005a0 <LCD_DrawPixel>:

void LCD_DrawPixel(uint16_t color){
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	80fb      	strh	r3, [r7, #6]
	LCD_WriteReg(0x0022,color);
 80005aa:	88fb      	ldrh	r3, [r7, #6]
 80005ac:	4619      	mov	r1, r3
 80005ae:	2022      	movs	r0, #34	; 0x22
 80005b0:	f000 f95c 	bl	800086c <LCD_WriteReg>
}
 80005b4:	bf00      	nop
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <LCD_WriteLetter>:

void LCD_WriteLetter(uint16_t x, uint16_t y, uint16_t colorfg, uint16_t colorbg, char letter){
 80005bc:	b590      	push	{r4, r7, lr}
 80005be:	b087      	sub	sp, #28
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4604      	mov	r4, r0
 80005c4:	4608      	mov	r0, r1
 80005c6:	4611      	mov	r1, r2
 80005c8:	461a      	mov	r2, r3
 80005ca:	4623      	mov	r3, r4
 80005cc:	80fb      	strh	r3, [r7, #6]
 80005ce:	4603      	mov	r3, r0
 80005d0:	80bb      	strh	r3, [r7, #4]
 80005d2:	460b      	mov	r3, r1
 80005d4:	807b      	strh	r3, [r7, #2]
 80005d6:	4613      	mov	r3, r2
 80005d8:	803b      	strh	r3, [r7, #0]
	int offset = letter*16*2;
 80005da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80005de:	015b      	lsls	r3, r3, #5
 80005e0:	613b      	str	r3, [r7, #16]
	int i = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	617b      	str	r3, [r7, #20]
	uint16_t line = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	81fb      	strh	r3, [r7, #14]
	LCD_SetCursor(x,y);
 80005ea:	88ba      	ldrh	r2, [r7, #4]
 80005ec:	88fb      	ldrh	r3, [r7, #6]
 80005ee:	4611      	mov	r1, r2
 80005f0:	4618      	mov	r0, r3
 80005f2:	f7ff ffbf 	bl	8000574 <LCD_SetCursor>
	//printf("Ascii Code for %c: %d , %d\n",letter,letter,offset);
	for(i=offset; i<offset+16*2; i++){
 80005f6:	693b      	ldr	r3, [r7, #16]
 80005f8:	617b      	str	r3, [r7, #20]
 80005fa:	e024      	b.n	8000646 <LCD_WriteLetter+0x8a>
		LCD_SetCursor(x,y);
 80005fc:	88ba      	ldrh	r2, [r7, #4]
 80005fe:	88fb      	ldrh	r3, [r7, #6]
 8000600:	4611      	mov	r1, r2
 8000602:	4618      	mov	r0, r3
 8000604:	f7ff ffb6 	bl	8000574 <LCD_SetCursor>
		line = console_font_12x16[i] << 4 | console_font_12x16[i+1] >> 4;
 8000608:	4a14      	ldr	r2, [pc, #80]	; (800065c <LCD_WriteLetter+0xa0>)
 800060a:	697b      	ldr	r3, [r7, #20]
 800060c:	4413      	add	r3, r2
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	011b      	lsls	r3, r3, #4
 8000612:	b21a      	sxth	r2, r3
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	3301      	adds	r3, #1
 8000618:	4910      	ldr	r1, [pc, #64]	; (800065c <LCD_WriteLetter+0xa0>)
 800061a:	5ccb      	ldrb	r3, [r1, r3]
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	b2db      	uxtb	r3, r3
 8000620:	b21b      	sxth	r3, r3
 8000622:	4313      	orrs	r3, r2
 8000624:	b21b      	sxth	r3, r3
 8000626:	81fb      	strh	r3, [r7, #14]
		Bits2Pixel(line, colorfg, colorbg);
 8000628:	883a      	ldrh	r2, [r7, #0]
 800062a:	8879      	ldrh	r1, [r7, #2]
 800062c:	89fb      	ldrh	r3, [r7, #14]
 800062e:	4618      	mov	r0, r3
 8000630:	f000 f845 	bl	80006be <Bits2Pixel>
		y++;
 8000634:	88bb      	ldrh	r3, [r7, #4]
 8000636:	3301      	adds	r3, #1
 8000638:	80bb      	strh	r3, [r7, #4]
		i++;
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	3301      	adds	r3, #1
 800063e:	617b      	str	r3, [r7, #20]
	for(i=offset; i<offset+16*2; i++){
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	3301      	adds	r3, #1
 8000644:	617b      	str	r3, [r7, #20]
 8000646:	693b      	ldr	r3, [r7, #16]
 8000648:	331f      	adds	r3, #31
 800064a:	697a      	ldr	r2, [r7, #20]
 800064c:	429a      	cmp	r2, r3
 800064e:	ddd5      	ble.n	80005fc <LCD_WriteLetter+0x40>
	}
}
 8000650:	bf00      	nop
 8000652:	bf00      	nop
 8000654:	371c      	adds	r7, #28
 8000656:	46bd      	mov	sp, r7
 8000658:	bd90      	pop	{r4, r7, pc}
 800065a:	bf00      	nop
 800065c:	0800c7a8 	.word	0x0800c7a8

08000660 <LCD_WriteString>:

void LCD_WriteString(uint16_t x, uint16_t y, uint16_t colorfg, uint16_t colorbg, char* letStr){
 8000660:	b590      	push	{r4, r7, lr}
 8000662:	b087      	sub	sp, #28
 8000664:	af02      	add	r7, sp, #8
 8000666:	4604      	mov	r4, r0
 8000668:	4608      	mov	r0, r1
 800066a:	4611      	mov	r1, r2
 800066c:	461a      	mov	r2, r3
 800066e:	4623      	mov	r3, r4
 8000670:	80fb      	strh	r3, [r7, #6]
 8000672:	4603      	mov	r3, r0
 8000674:	80bb      	strh	r3, [r7, #4]
 8000676:	460b      	mov	r3, r1
 8000678:	807b      	strh	r3, [r7, #2]
 800067a:	4613      	mov	r3, r2
 800067c:	803b      	strh	r3, [r7, #0]
	int n = 0;
 800067e:	2300      	movs	r3, #0
 8000680:	60fb      	str	r3, [r7, #12]
	while(letStr[n] != 0){
 8000682:	e011      	b.n	80006a8 <LCD_WriteString+0x48>
		LCD_WriteLetter(x,y,colorfg,colorbg,letStr[n]);
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	6a3a      	ldr	r2, [r7, #32]
 8000688:	4413      	add	r3, r2
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	883c      	ldrh	r4, [r7, #0]
 800068e:	887a      	ldrh	r2, [r7, #2]
 8000690:	88b9      	ldrh	r1, [r7, #4]
 8000692:	88f8      	ldrh	r0, [r7, #6]
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	4623      	mov	r3, r4
 8000698:	f7ff ff90 	bl	80005bc <LCD_WriteLetter>
		x+=12;
 800069c:	88fb      	ldrh	r3, [r7, #6]
 800069e:	330c      	adds	r3, #12
 80006a0:	80fb      	strh	r3, [r7, #6]
		n++;
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	3301      	adds	r3, #1
 80006a6:	60fb      	str	r3, [r7, #12]
	while(letStr[n] != 0){
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	6a3a      	ldr	r2, [r7, #32]
 80006ac:	4413      	add	r3, r2
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d1e7      	bne.n	8000684 <LCD_WriteString+0x24>
	}
}
 80006b4:	bf00      	nop
 80006b6:	bf00      	nop
 80006b8:	3714      	adds	r7, #20
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd90      	pop	{r4, r7, pc}

080006be <Bits2Pixel>:

void Bits2Pixel(uint16_t line, uint16_t colorfg, uint16_t colorbg){
 80006be:	b580      	push	{r7, lr}
 80006c0:	b090      	sub	sp, #64	; 0x40
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	4603      	mov	r3, r0
 80006c6:	80fb      	strh	r3, [r7, #6]
 80006c8:	460b      	mov	r3, r1
 80006ca:	80bb      	strh	r3, [r7, #4]
 80006cc:	4613      	mov	r3, r2
 80006ce:	807b      	strh	r3, [r7, #2]
	int str[13];
	int n = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	63fb      	str	r3, [r7, #60]	; 0x3c
	while(n<12){
 80006d4:	e009      	b.n	80006ea <Bits2Pixel+0x2c>
		str[n] = 0;
 80006d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006d8:	009b      	lsls	r3, r3, #2
 80006da:	3340      	adds	r3, #64	; 0x40
 80006dc:	443b      	add	r3, r7
 80006de:	2200      	movs	r2, #0
 80006e0:	f843 2c38 	str.w	r2, [r3, #-56]
		n++;
 80006e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006e6:	3301      	adds	r3, #1
 80006e8:	63fb      	str	r3, [r7, #60]	; 0x3c
	while(n<12){
 80006ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006ec:	2b0b      	cmp	r3, #11
 80006ee:	ddf2      	ble.n	80006d6 <Bits2Pixel+0x18>
	}
	n = 11;
 80006f0:	230b      	movs	r3, #11
 80006f2:	63fb      	str	r3, [r7, #60]	; 0x3c
	while(line){
 80006f4:	e019      	b.n	800072a <Bits2Pixel+0x6c>
		if(line&1)
 80006f6:	88fb      	ldrh	r3, [r7, #6]
 80006f8:	f003 0301 	and.w	r3, r3, #1
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d007      	beq.n	8000710 <Bits2Pixel+0x52>
			str[n] = 1;
 8000700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000702:	009b      	lsls	r3, r3, #2
 8000704:	3340      	adds	r3, #64	; 0x40
 8000706:	443b      	add	r3, r7
 8000708:	2201      	movs	r2, #1
 800070a:	f843 2c38 	str.w	r2, [r3, #-56]
 800070e:	e006      	b.n	800071e <Bits2Pixel+0x60>
		else
			str[n] = 0;
 8000710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000712:	009b      	lsls	r3, r3, #2
 8000714:	3340      	adds	r3, #64	; 0x40
 8000716:	443b      	add	r3, r7
 8000718:	2200      	movs	r2, #0
 800071a:	f843 2c38 	str.w	r2, [r3, #-56]
		line >>=1;
 800071e:	88fb      	ldrh	r3, [r7, #6]
 8000720:	085b      	lsrs	r3, r3, #1
 8000722:	80fb      	strh	r3, [r7, #6]
		n--;
 8000724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000726:	3b01      	subs	r3, #1
 8000728:	63fb      	str	r3, [r7, #60]	; 0x3c
	while(line){
 800072a:	88fb      	ldrh	r3, [r7, #6]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d1e2      	bne.n	80006f6 <Bits2Pixel+0x38>
	}
	str[12]=0;
 8000730:	2300      	movs	r3, #0
 8000732:	63bb      	str	r3, [r7, #56]	; 0x38

	n = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	63fb      	str	r3, [r7, #60]	; 0x3c
	while(n<12){
 8000738:	e013      	b.n	8000762 <Bits2Pixel+0xa4>
		if(str[n]==0)
 800073a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	3340      	adds	r3, #64	; 0x40
 8000740:	443b      	add	r3, r7
 8000742:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d104      	bne.n	8000754 <Bits2Pixel+0x96>
			LCD_DrawPixel(colorfg);
 800074a:	88bb      	ldrh	r3, [r7, #4]
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff ff27 	bl	80005a0 <LCD_DrawPixel>
 8000752:	e003      	b.n	800075c <Bits2Pixel+0x9e>
		else
			LCD_DrawPixel(colorbg);
 8000754:	887b      	ldrh	r3, [r7, #2]
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff ff22 	bl	80005a0 <LCD_DrawPixel>
		n++;
 800075c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800075e:	3301      	adds	r3, #1
 8000760:	63fb      	str	r3, [r7, #60]	; 0x3c
	while(n<12){
 8000762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000764:	2b0b      	cmp	r3, #11
 8000766:	dde8      	ble.n	800073a <Bits2Pixel+0x7c>
//		if(line&1){
//			LCD_DrawPixel(0xFFFF);
//		}else {
//			LCD_DrawPixel(0xFFFF);
//		}
}
 8000768:	bf00      	nop
 800076a:	bf00      	nop
 800076c:	3740      	adds	r7, #64	; 0x40
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}

08000772 <LCD_ClearDisplay>:

void LCD_ClearDisplay(uint16_t color){
 8000772:	b580      	push	{r7, lr}
 8000774:	b084      	sub	sp, #16
 8000776:	af00      	add	r7, sp, #0
 8000778:	4603      	mov	r3, r0
 800077a:	80fb      	strh	r3, [r7, #6]
	int i = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	60fb      	str	r3, [r7, #12]
	LCD_SetCursor(0,0);
 8000780:	2100      	movs	r1, #0
 8000782:	2000      	movs	r0, #0
 8000784:	f7ff fef6 	bl	8000574 <LCD_SetCursor>

	while(i<76800){
 8000788:	e006      	b.n	8000798 <LCD_ClearDisplay+0x26>
		LCD_DrawPixel(color);
 800078a:	88fb      	ldrh	r3, [r7, #6]
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff ff07 	bl	80005a0 <LCD_DrawPixel>
		i++;
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	3301      	adds	r3, #1
 8000796:	60fb      	str	r3, [r7, #12]
	while(i<76800){
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 800079e:	dbf4      	blt.n	800078a <LCD_ClearDisplay+0x18>
	}
}
 80007a0:	bf00      	nop
 80007a2:	bf00      	nop
 80007a4:	3710      	adds	r7, #16
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
	...

080007ac <LCD_Output16BitWord>:

void  LCD_Output16BitWord(uint16_t data)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	80fb      	strh	r3, [r7, #6]
	GPIOD->ODR |= (data << 14); // 1er setzen
 80007b6:	4b2b      	ldr	r3, [pc, #172]	; (8000864 <LCD_Output16BitWord+0xb8>)
 80007b8:	695b      	ldr	r3, [r3, #20]
 80007ba:	88fa      	ldrh	r2, [r7, #6]
 80007bc:	0392      	lsls	r2, r2, #14
 80007be:	4611      	mov	r1, r2
 80007c0:	4a28      	ldr	r2, [pc, #160]	; (8000864 <LCD_Output16BitWord+0xb8>)
 80007c2:	430b      	orrs	r3, r1
 80007c4:	6153      	str	r3, [r2, #20]
    GPIOD->ODR &= (data << 14) | 0x3FFF; //0er setzen
 80007c6:	4b27      	ldr	r3, [pc, #156]	; (8000864 <LCD_Output16BitWord+0xb8>)
 80007c8:	695a      	ldr	r2, [r3, #20]
 80007ca:	88fb      	ldrh	r3, [r7, #6]
 80007cc:	039b      	lsls	r3, r3, #14
 80007ce:	ea6f 3393 	mvn.w	r3, r3, lsr #14
 80007d2:	ea6f 3383 	mvn.w	r3, r3, lsl #14
 80007d6:	4923      	ldr	r1, [pc, #140]	; (8000864 <LCD_Output16BitWord+0xb8>)
 80007d8:	4013      	ands	r3, r2
 80007da:	614b      	str	r3, [r1, #20]
    GPIOD->ODR |= ((data >> 5) & 0x0700);
 80007dc:	4b21      	ldr	r3, [pc, #132]	; (8000864 <LCD_Output16BitWord+0xb8>)
 80007de:	695a      	ldr	r2, [r3, #20]
 80007e0:	88fb      	ldrh	r3, [r7, #6]
 80007e2:	095b      	lsrs	r3, r3, #5
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80007ea:	491e      	ldr	r1, [pc, #120]	; (8000864 <LCD_Output16BitWord+0xb8>)
 80007ec:	4313      	orrs	r3, r2
 80007ee:	614b      	str	r3, [r1, #20]
    GPIOD->ODR &= ((data >> 5) & 0x0700) | ~(0x0700);
 80007f0:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <LCD_Output16BitWord+0xb8>)
 80007f2:	695b      	ldr	r3, [r3, #20]
 80007f4:	88fa      	ldrh	r2, [r7, #6]
 80007f6:	0952      	lsrs	r2, r2, #5
 80007f8:	b292      	uxth	r2, r2
 80007fa:	f462 62e0 	orn	r2, r2, #1792	; 0x700
 80007fe:	4611      	mov	r1, r2
 8000800:	4a18      	ldr	r2, [pc, #96]	; (8000864 <LCD_Output16BitWord+0xb8>)
 8000802:	400b      	ands	r3, r1
 8000804:	6153      	str	r3, [r2, #20]
    GPIOD->ODR |= (data >> 2) & 0x3;
 8000806:	4b17      	ldr	r3, [pc, #92]	; (8000864 <LCD_Output16BitWord+0xb8>)
 8000808:	695a      	ldr	r2, [r3, #20]
 800080a:	88fb      	ldrh	r3, [r7, #6]
 800080c:	089b      	lsrs	r3, r3, #2
 800080e:	b29b      	uxth	r3, r3
 8000810:	f003 0303 	and.w	r3, r3, #3
 8000814:	4913      	ldr	r1, [pc, #76]	; (8000864 <LCD_Output16BitWord+0xb8>)
 8000816:	4313      	orrs	r3, r2
 8000818:	614b      	str	r3, [r1, #20]
    GPIOD->ODR &= ((data >> 2) & 0x3) | ~(0x3);
 800081a:	4b12      	ldr	r3, [pc, #72]	; (8000864 <LCD_Output16BitWord+0xb8>)
 800081c:	695b      	ldr	r3, [r3, #20]
 800081e:	88fa      	ldrh	r2, [r7, #6]
 8000820:	0892      	lsrs	r2, r2, #2
 8000822:	b292      	uxth	r2, r2
 8000824:	f062 0203 	orn	r2, r2, #3
 8000828:	4611      	mov	r1, r2
 800082a:	4a0e      	ldr	r2, [pc, #56]	; (8000864 <LCD_Output16BitWord+0xb8>)
 800082c:	400b      	ands	r3, r1
 800082e:	6153      	str	r3, [r2, #20]

    GPIOE->ODR |= (data << 3) & ~(0x007F);
 8000830:	4b0d      	ldr	r3, [pc, #52]	; (8000868 <LCD_Output16BitWord+0xbc>)
 8000832:	695a      	ldr	r2, [r3, #20]
 8000834:	88fb      	ldrh	r3, [r7, #6]
 8000836:	00db      	lsls	r3, r3, #3
 8000838:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800083c:	490a      	ldr	r1, [pc, #40]	; (8000868 <LCD_Output16BitWord+0xbc>)
 800083e:	4313      	orrs	r3, r2
 8000840:	614b      	str	r3, [r1, #20]
    GPIOE->ODR &= ((data << 3) & ~(0x007F)) | 0x007F;
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <LCD_Output16BitWord+0xbc>)
 8000844:	695b      	ldr	r3, [r3, #20]
 8000846:	88fa      	ldrh	r2, [r7, #6]
 8000848:	00d2      	lsls	r2, r2, #3
 800084a:	f042 027f 	orr.w	r2, r2, #127	; 0x7f
 800084e:	4611      	mov	r1, r2
 8000850:	4a05      	ldr	r2, [pc, #20]	; (8000868 <LCD_Output16BitWord+0xbc>)
 8000852:	400b      	ands	r3, r1
 8000854:	6153      	str	r3, [r2, #20]
}
 8000856:	bf00      	nop
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	40020c00 	.word	0x40020c00
 8000868:	40021000 	.word	0x40021000

0800086c <LCD_WriteReg>:

void LCD_WriteReg(uint16_t command, uint16_t data){
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	460a      	mov	r2, r1
 8000876:	80fb      	strh	r3, [r7, #6]
 8000878:	4613      	mov	r3, r2
 800087a:	80bb      	strh	r3, [r7, #4]
	LCD_WriteCommand(command);
 800087c:	88fb      	ldrh	r3, [r7, #6]
 800087e:	4618      	mov	r0, r3
 8000880:	f000 f838 	bl	80008f4 <LCD_WriteCommand>
	LCD_WriteData(data);
 8000884:	88bb      	ldrh	r3, [r7, #4]
 8000886:	4618      	mov	r0, r3
 8000888:	f000 f804 	bl	8000894 <LCD_WriteData>
}
 800088c:	bf00      	nop
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <LCD_WriteData>:

void LCD_WriteData(uint16_t data){
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	80fb      	strh	r3, [r7, #6]
	GPIOD->ODR &= ~(0x80); // set PD7 ~CS to 0
 800089e:	4b13      	ldr	r3, [pc, #76]	; (80008ec <LCD_WriteData+0x58>)
 80008a0:	695b      	ldr	r3, [r3, #20]
 80008a2:	4a12      	ldr	r2, [pc, #72]	; (80008ec <LCD_WriteData+0x58>)
 80008a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80008a8:	6153      	str	r3, [r2, #20]
	GPIOE->ODR |= 0x8; // set PE3 (D/~C) to 1 (Data)
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <LCD_WriteData+0x5c>)
 80008ac:	695b      	ldr	r3, [r3, #20]
 80008ae:	4a10      	ldr	r2, [pc, #64]	; (80008f0 <LCD_WriteData+0x5c>)
 80008b0:	f043 0308 	orr.w	r3, r3, #8
 80008b4:	6153      	str	r3, [r2, #20]
	GPIOD->ODR &= ~(0x20); // Pushimpuls WR = 0
 80008b6:	4b0d      	ldr	r3, [pc, #52]	; (80008ec <LCD_WriteData+0x58>)
 80008b8:	695b      	ldr	r3, [r3, #20]
 80008ba:	4a0c      	ldr	r2, [pc, #48]	; (80008ec <LCD_WriteData+0x58>)
 80008bc:	f023 0320 	bic.w	r3, r3, #32
 80008c0:	6153      	str	r3, [r2, #20]
	LCD_Output16BitWord(data);
 80008c2:	88fb      	ldrh	r3, [r7, #6]
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff ff71 	bl	80007ac <LCD_Output16BitWord>
	GPIOD->ODR |= 0x20; // WR = 1
 80008ca:	4b08      	ldr	r3, [pc, #32]	; (80008ec <LCD_WriteData+0x58>)
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	4a07      	ldr	r2, [pc, #28]	; (80008ec <LCD_WriteData+0x58>)
 80008d0:	f043 0320 	orr.w	r3, r3, #32
 80008d4:	6153      	str	r3, [r2, #20]
	GPIOD->ODR |= 0x80; // Chipselect = 1
 80008d6:	4b05      	ldr	r3, [pc, #20]	; (80008ec <LCD_WriteData+0x58>)
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	4a04      	ldr	r2, [pc, #16]	; (80008ec <LCD_WriteData+0x58>)
 80008dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e0:	6153      	str	r3, [r2, #20]
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40020c00 	.word	0x40020c00
 80008f0:	40021000 	.word	0x40021000

080008f4 <LCD_WriteCommand>:

void LCD_WriteCommand(uint16_t data){
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	80fb      	strh	r3, [r7, #6]
	GPIOD->ODR &= ~(0x80); // set PD7 ~CS to 0
 80008fe:	4b13      	ldr	r3, [pc, #76]	; (800094c <LCD_WriteCommand+0x58>)
 8000900:	695b      	ldr	r3, [r3, #20]
 8000902:	4a12      	ldr	r2, [pc, #72]	; (800094c <LCD_WriteCommand+0x58>)
 8000904:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000908:	6153      	str	r3, [r2, #20]
	GPIOE->ODR &= ~(0x8); // set PE3 (D/~C) to 0 (Command)
 800090a:	4b11      	ldr	r3, [pc, #68]	; (8000950 <LCD_WriteCommand+0x5c>)
 800090c:	695b      	ldr	r3, [r3, #20]
 800090e:	4a10      	ldr	r2, [pc, #64]	; (8000950 <LCD_WriteCommand+0x5c>)
 8000910:	f023 0308 	bic.w	r3, r3, #8
 8000914:	6153      	str	r3, [r2, #20]
	GPIOD->ODR &= ~(0x20); // set WR PD5 = 0
 8000916:	4b0d      	ldr	r3, [pc, #52]	; (800094c <LCD_WriteCommand+0x58>)
 8000918:	695b      	ldr	r3, [r3, #20]
 800091a:	4a0c      	ldr	r2, [pc, #48]	; (800094c <LCD_WriteCommand+0x58>)
 800091c:	f023 0320 	bic.w	r3, r3, #32
 8000920:	6153      	str	r3, [r2, #20]
	LCD_Output16BitWord(data);
 8000922:	88fb      	ldrh	r3, [r7, #6]
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff ff41 	bl	80007ac <LCD_Output16BitWord>
	GPIOD->ODR |= 0x20; // set WR PD5 = 1
 800092a:	4b08      	ldr	r3, [pc, #32]	; (800094c <LCD_WriteCommand+0x58>)
 800092c:	695b      	ldr	r3, [r3, #20]
 800092e:	4a07      	ldr	r2, [pc, #28]	; (800094c <LCD_WriteCommand+0x58>)
 8000930:	f043 0320 	orr.w	r3, r3, #32
 8000934:	6153      	str	r3, [r2, #20]
	GPIOD->ODR |= 0x80; // set ~CS PD7 = 1
 8000936:	4b05      	ldr	r3, [pc, #20]	; (800094c <LCD_WriteCommand+0x58>)
 8000938:	695b      	ldr	r3, [r3, #20]
 800093a:	4a04      	ldr	r2, [pc, #16]	; (800094c <LCD_WriteCommand+0x58>)
 800093c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000940:	6153      	str	r3, [r2, #20]
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40020c00 	.word	0x40020c00
 8000950:	40021000 	.word	0x40021000

08000954 <LCD_Init>:

void LCD_Init (void){
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
	// Display-Reset
	GPIOD->ODR &= ~(0x8);
 8000958:	4b35      	ldr	r3, [pc, #212]	; (8000a30 <LCD_Init+0xdc>)
 800095a:	695b      	ldr	r3, [r3, #20]
 800095c:	4a34      	ldr	r2, [pc, #208]	; (8000a30 <LCD_Init+0xdc>)
 800095e:	f023 0308 	bic.w	r3, r3, #8
 8000962:	6153      	str	r3, [r2, #20]
	osDelay(pdMS_TO_TICKS(1));
 8000964:	2001      	movs	r0, #1
 8000966:	f007 ff1b 	bl	80087a0 <osDelay>
	GPIOD->ODR |= 0x8;
 800096a:	4b31      	ldr	r3, [pc, #196]	; (8000a30 <LCD_Init+0xdc>)
 800096c:	695b      	ldr	r3, [r3, #20]
 800096e:	4a30      	ldr	r2, [pc, #192]	; (8000a30 <LCD_Init+0xdc>)
 8000970:	f043 0308 	orr.w	r3, r3, #8
 8000974:	6153      	str	r3, [r2, #20]
	osDelay(pdMS_TO_TICKS(1));
 8000976:	2001      	movs	r0, #1
 8000978:	f007 ff12 	bl	80087a0 <osDelay>


	LCD_WriteReg(0x0010, 0x0001); /* Enter sleep mode */
 800097c:	2101      	movs	r1, #1
 800097e:	2010      	movs	r0, #16
 8000980:	f7ff ff74 	bl	800086c <LCD_WriteReg>
	LCD_WriteReg(0x001E, 0x00B2); /* Set initial power parameters. */
 8000984:	21b2      	movs	r1, #178	; 0xb2
 8000986:	201e      	movs	r0, #30
 8000988:	f7ff ff70 	bl	800086c <LCD_WriteReg>
	LCD_WriteReg(0x0028, 0x0006); /* Set initial power parameters. */
 800098c:	2106      	movs	r1, #6
 800098e:	2028      	movs	r0, #40	; 0x28
 8000990:	f7ff ff6c 	bl	800086c <LCD_WriteReg>
	LCD_WriteReg(0x0000, 0x0001); /* Start the oscillator.*/
 8000994:	2101      	movs	r1, #1
 8000996:	2000      	movs	r0, #0
 8000998:	f7ff ff68 	bl	800086c <LCD_WriteReg>
	LCD_WriteReg(0x0001, 0x72EF); /* Set pixel format and basic display orientation */
 800099c:	f247 21ef 	movw	r1, #29423	; 0x72ef
 80009a0:	2001      	movs	r0, #1
 80009a2:	f7ff ff63 	bl	800086c <LCD_WriteReg>
	LCD_WriteReg(0x0002, 0x0600);
 80009a6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80009aa:	2002      	movs	r0, #2
 80009ac:	f7ff ff5e 	bl	800086c <LCD_WriteReg>
	LCD_WriteReg(0x0010, 0x0000); /* Exit sleep mode.*/
 80009b0:	2100      	movs	r1, #0
 80009b2:	2010      	movs	r0, #16
 80009b4:	f7ff ff5a 	bl	800086c <LCD_WriteReg>
	//30ms warten weniger geht meist auch
	osDelay(pdMS_TO_TICKS(30));;
 80009b8:	201e      	movs	r0, #30
 80009ba:	f007 fef1 	bl	80087a0 <osDelay>

	LCD_WriteReg(0x0011, 0x6870); /* Configure pixel color format and MCU interface parameters.*/
 80009be:	f646 0170 	movw	r1, #26736	; 0x6870
 80009c2:	2011      	movs	r0, #17
 80009c4:	f7ff ff52 	bl	800086c <LCD_WriteReg>
	LCD_WriteReg(0x0012, 0x0999); /* Set analog parameters */
 80009c8:	f640 1199 	movw	r1, #2457	; 0x999
 80009cc:	2012      	movs	r0, #18
 80009ce:	f7ff ff4d 	bl	800086c <LCD_WriteReg>
	LCD_WriteReg(0x0026, 0x3800);
 80009d2:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 80009d6:	2026      	movs	r0, #38	; 0x26
 80009d8:	f7ff ff48 	bl	800086c <LCD_WriteReg>
	LCD_WriteReg(0x0007, 0x0033); /* Enable the display */
 80009dc:	2133      	movs	r1, #51	; 0x33
 80009de:	2007      	movs	r0, #7
 80009e0:	f7ff ff44 	bl	800086c <LCD_WriteReg>
	LCD_WriteReg(0x000C, 0x0005); /* Set VCIX2 voltage to 6.1V.*/
 80009e4:	2105      	movs	r1, #5
 80009e6:	200c      	movs	r0, #12
 80009e8:	f7ff ff40 	bl	800086c <LCD_WriteReg>
	LCD_WriteReg(0x000D, 0x000A); /* Configure Vlcd63 and VCOMl */
 80009ec:	210a      	movs	r1, #10
 80009ee:	200d      	movs	r0, #13
 80009f0:	f7ff ff3c 	bl	800086c <LCD_WriteReg>
	LCD_WriteReg(0x000E, 0x2E00);
 80009f4:	f44f 5138 	mov.w	r1, #11776	; 0x2e00
 80009f8:	200e      	movs	r0, #14
 80009fa:	f7ff ff37 	bl	800086c <LCD_WriteReg>
	LCD_WriteReg(0x0044, (240-1) << 8); /* Set the display size and ensure that the GRAM window
 80009fe:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 8000a02:	2044      	movs	r0, #68	; 0x44
 8000a04:	f7ff ff32 	bl	800086c <LCD_WriteReg>
	is set to allow access to the full display buffer.*/
	LCD_WriteReg(0x0045, 0x0000);
 8000a08:	2100      	movs	r1, #0
 8000a0a:	2045      	movs	r0, #69	; 0x45
 8000a0c:	f7ff ff2e 	bl	800086c <LCD_WriteReg>
	LCD_WriteReg(0x0046, 320-1);
 8000a10:	f240 113f 	movw	r1, #319	; 0x13f
 8000a14:	2046      	movs	r0, #70	; 0x46
 8000a16:	f7ff ff29 	bl	800086c <LCD_WriteReg>
	LCD_WriteReg(0x004E, 0x0000); /*Set cursor to 0,0 */
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	204e      	movs	r0, #78	; 0x4e
 8000a1e:	f7ff ff25 	bl	800086c <LCD_WriteReg>
	LCD_WriteReg(0x004F, 0x0000);
 8000a22:	2100      	movs	r1, #0
 8000a24:	204f      	movs	r0, #79	; 0x4f
 8000a26:	f7ff ff21 	bl	800086c <LCD_WriteReg>


	//GPIOD->ODR |= 0x2000; // PD13 = 1 Backlight anschalten
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40020c00 	.word	0x40020c00

08000a34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a38:	f000 fe40 	bl	80016bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a3c:	f000 f8de 	bl	8000bfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a40:	f000 fa10 	bl	8000e64 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a44:	f000 f944 	bl	8000cd0 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000a48:	f000 f970 	bl	8000d2c <MX_I2S3_Init>
  MX_SPI1_Init();
 8000a4c:	f000 f99e 	bl	8000d8c <MX_SPI1_Init>
  MX_TIM7_Init();
 8000a50:	f000 f9d2 	bl	8000df8 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

	// Peripheral GPIOD einschalten
	RCC->AHB1ENR |= 1<<3|1;
 8000a54:	4b4a      	ldr	r3, [pc, #296]	; (8000b80 <main+0x14c>)
 8000a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a58:	4a49      	ldr	r2, [pc, #292]	; (8000b80 <main+0x14c>)
 8000a5a:	f043 0309 	orr.w	r3, r3, #9
 8000a5e:	6313      	str	r3, [r2, #48]	; 0x30
	// Peripheral GPIOE einschalten
	RCC->AHB1ENR |= 1<<4|1;
 8000a60:	4b47      	ldr	r3, [pc, #284]	; (8000b80 <main+0x14c>)
 8000a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a64:	4a46      	ldr	r2, [pc, #280]	; (8000b80 <main+0x14c>)
 8000a66:	f043 0311 	orr.w	r3, r3, #17
 8000a6a:	6313      	str	r3, [r2, #48]	; 0x30

	// GPIO einrichten für Output
	GPIOD->MODER |= 0x55154545;
 8000a6c:	4b45      	ldr	r3, [pc, #276]	; (8000b84 <main+0x150>)
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	4944      	ldr	r1, [pc, #272]	; (8000b84 <main+0x150>)
 8000a72:	4b45      	ldr	r3, [pc, #276]	; (8000b88 <main+0x154>)
 8000a74:	4313      	orrs	r3, r2
 8000a76:	600b      	str	r3, [r1, #0]
	GPIOE->MODER |= 0x55554040;
 8000a78:	4b44      	ldr	r3, [pc, #272]	; (8000b8c <main+0x158>)
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	4943      	ldr	r1, [pc, #268]	; (8000b8c <main+0x158>)
 8000a7e:	4b44      	ldr	r3, [pc, #272]	; (8000b90 <main+0x15c>)
 8000a80:	4313      	orrs	r3, r2
 8000a82:	600b      	str	r3, [r1, #0]

	// Orange LED konfigurieren
	GPIOD->MODER |= 1<<24;
 8000a84:	4b3f      	ldr	r3, [pc, #252]	; (8000b84 <main+0x150>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a3e      	ldr	r2, [pc, #248]	; (8000b84 <main+0x150>)
 8000a8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a8e:	6013      	str	r3, [r2, #0]

	// Gruene LED (Port D12) ausschalten
	GPIOD->ODR &= ~(1<<12);
 8000a90:	4b3c      	ldr	r3, [pc, #240]	; (8000b84 <main+0x150>)
 8000a92:	695b      	ldr	r3, [r3, #20]
 8000a94:	4a3b      	ldr	r2, [pc, #236]	; (8000b84 <main+0x150>)
 8000a96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000a9a:	6153      	str	r3, [r2, #20]

	//Read auf 1
	GPIOD->MODER 	|= 1<<8;
 8000a9c:	4b39      	ldr	r3, [pc, #228]	; (8000b84 <main+0x150>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a38      	ldr	r2, [pc, #224]	; (8000b84 <main+0x150>)
 8000aa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aa6:	6013      	str	r3, [r2, #0]
	GPIOD->ODR		|= 1<<4;
 8000aa8:	4b36      	ldr	r3, [pc, #216]	; (8000b84 <main+0x150>)
 8000aaa:	695b      	ldr	r3, [r3, #20]
 8000aac:	4a35      	ldr	r2, [pc, #212]	; (8000b84 <main+0x150>)
 8000aae:	f043 0310 	orr.w	r3, r3, #16
 8000ab2:	6153      	str	r3, [r2, #20]

	// Hintergrundbeleuchtung
	GPIOD->MODER |= 1<<26;
 8000ab4:	4b33      	ldr	r3, [pc, #204]	; (8000b84 <main+0x150>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a32      	ldr	r2, [pc, #200]	; (8000b84 <main+0x150>)
 8000aba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000abe:	6013      	str	r3, [r2, #0]
	GPIOD->ODR |= 1<<13;
 8000ac0:	4b30      	ldr	r3, [pc, #192]	; (8000b84 <main+0x150>)
 8000ac2:	695b      	ldr	r3, [r3, #20]
 8000ac4:	4a2f      	ldr	r2, [pc, #188]	; (8000b84 <main+0x150>)
 8000ac6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000aca:	6153      	str	r3, [r2, #20]

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000acc:	f007 fd8c 	bl	80085e8 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of oneMs */
  oneMsHandle = osTimerNew(oneMsFunc, osTimerPeriodic, NULL, &oneMs_attributes);
 8000ad0:	4b30      	ldr	r3, [pc, #192]	; (8000b94 <main+0x160>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	4830      	ldr	r0, [pc, #192]	; (8000b98 <main+0x164>)
 8000ad8:	f007 fe92 	bl	8008800 <osTimerNew>
 8000adc:	4603      	mov	r3, r0
 8000ade:	4a2f      	ldr	r2, [pc, #188]	; (8000b9c <main+0x168>)
 8000ae0:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of logQueue */
  logQueueHandle = osMessageQueueNew (16, 40, &logQueue_attributes);
 8000ae2:	4a2f      	ldr	r2, [pc, #188]	; (8000ba0 <main+0x16c>)
 8000ae4:	2128      	movs	r1, #40	; 0x28
 8000ae6:	2010      	movs	r0, #16
 8000ae8:	f007 ff34 	bl	8008954 <osMessageQueueNew>
 8000aec:	4603      	mov	r3, r0
 8000aee:	4a2d      	ldr	r2, [pc, #180]	; (8000ba4 <main+0x170>)
 8000af0:	6013      	str	r3, [r2, #0]
  //Handle = xQueueCreate(16,sizeof(uint32_t));
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000af2:	4a2d      	ldr	r2, [pc, #180]	; (8000ba8 <main+0x174>)
 8000af4:	2100      	movs	r1, #0
 8000af6:	482d      	ldr	r0, [pc, #180]	; (8000bac <main+0x178>)
 8000af8:	f007 fdc0 	bl	800867c <osThreadNew>
 8000afc:	4603      	mov	r3, r0
 8000afe:	4a2c      	ldr	r2, [pc, #176]	; (8000bb0 <main+0x17c>)
 8000b00:	6013      	str	r3, [r2, #0]

  /* creation of task1ms */
  task1msHandle = osThreadNew(StartTask02, NULL, &task1ms_attributes);
 8000b02:	4a2c      	ldr	r2, [pc, #176]	; (8000bb4 <main+0x180>)
 8000b04:	2100      	movs	r1, #0
 8000b06:	482c      	ldr	r0, [pc, #176]	; (8000bb8 <main+0x184>)
 8000b08:	f007 fdb8 	bl	800867c <osThreadNew>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	4a2b      	ldr	r2, [pc, #172]	; (8000bbc <main+0x188>)
 8000b10:	6013      	str	r3, [r2, #0]

  /* creation of task10ms */
  task10msHandle = osThreadNew(StartTask03, NULL, &task10ms_attributes);
 8000b12:	4a2b      	ldr	r2, [pc, #172]	; (8000bc0 <main+0x18c>)
 8000b14:	2100      	movs	r1, #0
 8000b16:	482b      	ldr	r0, [pc, #172]	; (8000bc4 <main+0x190>)
 8000b18:	f007 fdb0 	bl	800867c <osThreadNew>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	4a2a      	ldr	r2, [pc, #168]	; (8000bc8 <main+0x194>)
 8000b20:	6013      	str	r3, [r2, #0]

  /* creation of producer01 */
  producer01Handle = osThreadNew(producer01task, NULL, &producer01_attributes);
 8000b22:	4a2a      	ldr	r2, [pc, #168]	; (8000bcc <main+0x198>)
 8000b24:	2100      	movs	r1, #0
 8000b26:	482a      	ldr	r0, [pc, #168]	; (8000bd0 <main+0x19c>)
 8000b28:	f007 fda8 	bl	800867c <osThreadNew>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	4a29      	ldr	r2, [pc, #164]	; (8000bd4 <main+0x1a0>)
 8000b30:	6013      	str	r3, [r2, #0]

  /* creation of consumer01 */
  consumer01Handle = osThreadNew(consumer01task, NULL, &consumer01_attributes);
 8000b32:	4a29      	ldr	r2, [pc, #164]	; (8000bd8 <main+0x1a4>)
 8000b34:	2100      	movs	r1, #0
 8000b36:	4829      	ldr	r0, [pc, #164]	; (8000bdc <main+0x1a8>)
 8000b38:	f007 fda0 	bl	800867c <osThreadNew>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	4a28      	ldr	r2, [pc, #160]	; (8000be0 <main+0x1ac>)
 8000b40:	6013      	str	r3, [r2, #0]

  /* creation of producer02 */
  producer02Handle = osThreadNew(producer02task, NULL, &producer02_attributes);
 8000b42:	4a28      	ldr	r2, [pc, #160]	; (8000be4 <main+0x1b0>)
 8000b44:	2100      	movs	r1, #0
 8000b46:	4828      	ldr	r0, [pc, #160]	; (8000be8 <main+0x1b4>)
 8000b48:	f007 fd98 	bl	800867c <osThreadNew>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	4a27      	ldr	r2, [pc, #156]	; (8000bec <main+0x1b8>)
 8000b50:	6013      	str	r3, [r2, #0]

  /* creation of producer03 */
  producer03Handle = osThreadNew(producer03task, NULL, &producer03_attributes);
 8000b52:	4a27      	ldr	r2, [pc, #156]	; (8000bf0 <main+0x1bc>)
 8000b54:	2100      	movs	r1, #0
 8000b56:	4827      	ldr	r0, [pc, #156]	; (8000bf4 <main+0x1c0>)
 8000b58:	f007 fd90 	bl	800867c <osThreadNew>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	4a26      	ldr	r2, [pc, #152]	; (8000bf8 <main+0x1c4>)
 8000b60:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  osTimerStart(oneMsHandle,pdMS_TO_TICKS(125));
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <main+0x168>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	217d      	movs	r1, #125	; 0x7d
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f007 fec5 	bl	80088f8 <osTimerStart>
  LCD_Init();
 8000b6e:	f7ff fef1 	bl	8000954 <LCD_Init>
  LCD_ClearDisplay(0xFFFF);
 8000b72:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000b76:	f7ff fdfc 	bl	8000772 <LCD_ClearDisplay>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000b7a:	f007 fd59 	bl	8008630 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //xTimerCreate("oneMsTimer", pdMS_TO_TICKS(1), pdTRUE, 0, prvOneMsTimer); /////////////////////////


  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <main+0x14a>
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40020c00 	.word	0x40020c00
 8000b88:	55154545 	.word	0x55154545
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	55554040 	.word	0x55554040
 8000b94:	0800e8bc 	.word	0x0800e8bc
 8000b98:	08001295 	.word	0x08001295
 8000b9c:	2000020c 	.word	0x2000020c
 8000ba0:	0800e8a4 	.word	0x0800e8a4
 8000ba4:	20000208 	.word	0x20000208
 8000ba8:	0800e7a8 	.word	0x0800e7a8
 8000bac:	08001061 	.word	0x08001061
 8000bb0:	200001ec 	.word	0x200001ec
 8000bb4:	0800e7cc 	.word	0x0800e7cc
 8000bb8:	080010bd 	.word	0x080010bd
 8000bbc:	200001f0 	.word	0x200001f0
 8000bc0:	0800e7f0 	.word	0x0800e7f0
 8000bc4:	080010cd 	.word	0x080010cd
 8000bc8:	200001f4 	.word	0x200001f4
 8000bcc:	0800e814 	.word	0x0800e814
 8000bd0:	080010dd 	.word	0x080010dd
 8000bd4:	200001f8 	.word	0x200001f8
 8000bd8:	0800e838 	.word	0x0800e838
 8000bdc:	08001131 	.word	0x08001131
 8000be0:	200001fc 	.word	0x200001fc
 8000be4:	0800e85c 	.word	0x0800e85c
 8000be8:	080011c5 	.word	0x080011c5
 8000bec:	20000200 	.word	0x20000200
 8000bf0:	0800e880 	.word	0x0800e880
 8000bf4:	08001285 	.word	0x08001285
 8000bf8:	20000204 	.word	0x20000204

08000bfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b094      	sub	sp, #80	; 0x50
 8000c00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c02:	f107 0320 	add.w	r3, r7, #32
 8000c06:	2230      	movs	r2, #48	; 0x30
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f00b f8e8 	bl	800bde0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c10:	f107 030c 	add.w	r3, r7, #12
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c20:	2300      	movs	r3, #0
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	4b28      	ldr	r3, [pc, #160]	; (8000cc8 <SystemClock_Config+0xcc>)
 8000c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c28:	4a27      	ldr	r2, [pc, #156]	; (8000cc8 <SystemClock_Config+0xcc>)
 8000c2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c30:	4b25      	ldr	r3, [pc, #148]	; (8000cc8 <SystemClock_Config+0xcc>)
 8000c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	4b22      	ldr	r3, [pc, #136]	; (8000ccc <SystemClock_Config+0xd0>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a21      	ldr	r2, [pc, #132]	; (8000ccc <SystemClock_Config+0xd0>)
 8000c46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c4a:	6013      	str	r3, [r2, #0]
 8000c4c:	4b1f      	ldr	r3, [pc, #124]	; (8000ccc <SystemClock_Config+0xd0>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c62:	2302      	movs	r3, #2
 8000c64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c6c:	2308      	movs	r3, #8
 8000c6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c70:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000c74:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c76:	2302      	movs	r3, #2
 8000c78:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c7a:	2307      	movs	r3, #7
 8000c7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c7e:	f107 0320 	add.w	r3, r7, #32
 8000c82:	4618      	mov	r0, r3
 8000c84:	f003 fa98 	bl	80041b8 <HAL_RCC_OscConfig>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000c8e:	f000 fb11 	bl	80012b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c92:	230f      	movs	r3, #15
 8000c94:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c96:	2302      	movs	r3, #2
 8000c98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c9e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ca2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ca4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000caa:	f107 030c 	add.w	r3, r7, #12
 8000cae:	2105      	movs	r1, #5
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f003 fcf9 	bl	80046a8 <HAL_RCC_ClockConfig>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000cbc:	f000 fafa 	bl	80012b4 <Error_Handler>
  }
}
 8000cc0:	bf00      	nop
 8000cc2:	3750      	adds	r7, #80	; 0x50
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40007000 	.word	0x40007000

08000cd0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cd4:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <MX_I2C1_Init+0x50>)
 8000cd6:	4a13      	ldr	r2, [pc, #76]	; (8000d24 <MX_I2C1_Init+0x54>)
 8000cd8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000cda:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <MX_I2C1_Init+0x50>)
 8000cdc:	4a12      	ldr	r2, [pc, #72]	; (8000d28 <MX_I2C1_Init+0x58>)
 8000cde:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ce0:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <MX_I2C1_Init+0x50>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <MX_I2C1_Init+0x50>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cec:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <MX_I2C1_Init+0x50>)
 8000cee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cf2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cf4:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <MX_I2C1_Init+0x50>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000cfa:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <MX_I2C1_Init+0x50>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <MX_I2C1_Init+0x50>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d06:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <MX_I2C1_Init+0x50>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d0c:	4804      	ldr	r0, [pc, #16]	; (8000d20 <MX_I2C1_Init+0x50>)
 8000d0e:	f002 fc6f 	bl	80035f0 <HAL_I2C_Init>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d18:	f000 facc 	bl	80012b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	200000b0 	.word	0x200000b0
 8000d24:	40005400 	.word	0x40005400
 8000d28:	000186a0 	.word	0x000186a0

08000d2c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000d30:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <MX_I2S3_Init+0x54>)
 8000d32:	4a14      	ldr	r2, [pc, #80]	; (8000d84 <MX_I2S3_Init+0x58>)
 8000d34:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000d36:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <MX_I2S3_Init+0x54>)
 8000d38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d3c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000d3e:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <MX_I2S3_Init+0x54>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000d44:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <MX_I2S3_Init+0x54>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000d4a:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <MX_I2S3_Init+0x54>)
 8000d4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d50:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000d52:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <MX_I2S3_Init+0x54>)
 8000d54:	4a0c      	ldr	r2, [pc, #48]	; (8000d88 <MX_I2S3_Init+0x5c>)
 8000d56:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000d58:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <MX_I2S3_Init+0x54>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000d5e:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <MX_I2S3_Init+0x54>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <MX_I2S3_Init+0x54>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000d6a:	4805      	ldr	r0, [pc, #20]	; (8000d80 <MX_I2S3_Init+0x54>)
 8000d6c:	f002 fd84 	bl	8003878 <HAL_I2S_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000d76:	f000 fa9d 	bl	80012b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000104 	.word	0x20000104
 8000d84:	40003c00 	.word	0x40003c00
 8000d88:	00017700 	.word	0x00017700

08000d8c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d90:	4b17      	ldr	r3, [pc, #92]	; (8000df0 <MX_SPI1_Init+0x64>)
 8000d92:	4a18      	ldr	r2, [pc, #96]	; (8000df4 <MX_SPI1_Init+0x68>)
 8000d94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d96:	4b16      	ldr	r3, [pc, #88]	; (8000df0 <MX_SPI1_Init+0x64>)
 8000d98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d9e:	4b14      	ldr	r3, [pc, #80]	; (8000df0 <MX_SPI1_Init+0x64>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000da4:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <MX_SPI1_Init+0x64>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000daa:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <MX_SPI1_Init+0x64>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000db0:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <MX_SPI1_Init+0x64>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000db6:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <MX_SPI1_Init+0x64>)
 8000db8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dbc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000dbe:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <MX_SPI1_Init+0x64>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dc4:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <MX_SPI1_Init+0x64>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dca:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <MX_SPI1_Init+0x64>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dd0:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <MX_SPI1_Init+0x64>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <MX_SPI1_Init+0x64>)
 8000dd8:	220a      	movs	r2, #10
 8000dda:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ddc:	4804      	ldr	r0, [pc, #16]	; (8000df0 <MX_SPI1_Init+0x64>)
 8000dde:	f003 ffaf 	bl	8004d40 <HAL_SPI_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000de8:	f000 fa64 	bl	80012b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	2000014c 	.word	0x2000014c
 8000df4:	40013000 	.word	0x40013000

08000df8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dfe:	463b      	mov	r3, r7
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000e06:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <MX_TIM7_Init+0x64>)
 8000e08:	4a15      	ldr	r2, [pc, #84]	; (8000e60 <MX_TIM7_Init+0x68>)
 8000e0a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 84;
 8000e0c:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <MX_TIM7_Init+0x64>)
 8000e0e:	2254      	movs	r2, #84	; 0x54
 8000e10:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e12:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <MX_TIM7_Init+0x64>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8000e18:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <MX_TIM7_Init+0x64>)
 8000e1a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e1e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e20:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <MX_TIM7_Init+0x64>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000e26:	480d      	ldr	r0, [pc, #52]	; (8000e5c <MX_TIM7_Init+0x64>)
 8000e28:	f004 f813 	bl	8004e52 <HAL_TIM_Base_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000e32:	f000 fa3f 	bl	80012b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e36:	2300      	movs	r3, #0
 8000e38:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000e3e:	463b      	mov	r3, r7
 8000e40:	4619      	mov	r1, r3
 8000e42:	4806      	ldr	r0, [pc, #24]	; (8000e5c <MX_TIM7_Init+0x64>)
 8000e44:	f004 f8f4 	bl	8005030 <HAL_TIMEx_MasterConfigSynchronization>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000e4e:	f000 fa31 	bl	80012b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	200001a4 	.word	0x200001a4
 8000e60:	40001400 	.word	0x40001400

08000e64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08c      	sub	sp, #48	; 0x30
 8000e68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6a:	f107 031c 	add.w	r3, r7, #28
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	60da      	str	r2, [r3, #12]
 8000e78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61bb      	str	r3, [r7, #24]
 8000e7e:	4b72      	ldr	r3, [pc, #456]	; (8001048 <MX_GPIO_Init+0x1e4>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	4a71      	ldr	r2, [pc, #452]	; (8001048 <MX_GPIO_Init+0x1e4>)
 8000e84:	f043 0310 	orr.w	r3, r3, #16
 8000e88:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8a:	4b6f      	ldr	r3, [pc, #444]	; (8001048 <MX_GPIO_Init+0x1e4>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	f003 0310 	and.w	r3, r3, #16
 8000e92:	61bb      	str	r3, [r7, #24]
 8000e94:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	617b      	str	r3, [r7, #20]
 8000e9a:	4b6b      	ldr	r3, [pc, #428]	; (8001048 <MX_GPIO_Init+0x1e4>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a6a      	ldr	r2, [pc, #424]	; (8001048 <MX_GPIO_Init+0x1e4>)
 8000ea0:	f043 0304 	orr.w	r3, r3, #4
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4b68      	ldr	r3, [pc, #416]	; (8001048 <MX_GPIO_Init+0x1e4>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f003 0304 	and.w	r3, r3, #4
 8000eae:	617b      	str	r3, [r7, #20]
 8000eb0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	4b64      	ldr	r3, [pc, #400]	; (8001048 <MX_GPIO_Init+0x1e4>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	4a63      	ldr	r2, [pc, #396]	; (8001048 <MX_GPIO_Init+0x1e4>)
 8000ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec2:	4b61      	ldr	r3, [pc, #388]	; (8001048 <MX_GPIO_Init+0x1e4>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eca:	613b      	str	r3, [r7, #16]
 8000ecc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	4b5d      	ldr	r3, [pc, #372]	; (8001048 <MX_GPIO_Init+0x1e4>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	4a5c      	ldr	r2, [pc, #368]	; (8001048 <MX_GPIO_Init+0x1e4>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ede:	4b5a      	ldr	r3, [pc, #360]	; (8001048 <MX_GPIO_Init+0x1e4>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	60bb      	str	r3, [r7, #8]
 8000eee:	4b56      	ldr	r3, [pc, #344]	; (8001048 <MX_GPIO_Init+0x1e4>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a55      	ldr	r2, [pc, #340]	; (8001048 <MX_GPIO_Init+0x1e4>)
 8000ef4:	f043 0302 	orr.w	r3, r3, #2
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b53      	ldr	r3, [pc, #332]	; (8001048 <MX_GPIO_Init+0x1e4>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0302 	and.w	r3, r3, #2
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	607b      	str	r3, [r7, #4]
 8000f0a:	4b4f      	ldr	r3, [pc, #316]	; (8001048 <MX_GPIO_Init+0x1e4>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a4e      	ldr	r2, [pc, #312]	; (8001048 <MX_GPIO_Init+0x1e4>)
 8000f10:	f043 0308 	orr.w	r3, r3, #8
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b4c      	ldr	r3, [pc, #304]	; (8001048 <MX_GPIO_Init+0x1e4>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0308 	and.w	r3, r3, #8
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2108      	movs	r1, #8
 8000f26:	4849      	ldr	r0, [pc, #292]	; (800104c <MX_GPIO_Init+0x1e8>)
 8000f28:	f000 ff24 	bl	8001d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	2101      	movs	r1, #1
 8000f30:	4847      	ldr	r0, [pc, #284]	; (8001050 <MX_GPIO_Init+0x1ec>)
 8000f32:	f000 ff1f 	bl	8001d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, green_led_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000f36:	2200      	movs	r2, #0
 8000f38:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000f3c:	4845      	ldr	r0, [pc, #276]	; (8001054 <MX_GPIO_Init+0x1f0>)
 8000f3e:	f000 ff19 	bl	8001d74 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000f42:	2308      	movs	r3, #8
 8000f44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f46:	2301      	movs	r3, #1
 8000f48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000f52:	f107 031c 	add.w	r3, r7, #28
 8000f56:	4619      	mov	r1, r3
 8000f58:	483c      	ldr	r0, [pc, #240]	; (800104c <MX_GPIO_Init+0x1e8>)
 8000f5a:	f000 fd57 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f62:	2301      	movs	r3, #1
 8000f64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f6e:	f107 031c 	add.w	r3, r7, #28
 8000f72:	4619      	mov	r1, r3
 8000f74:	4836      	ldr	r0, [pc, #216]	; (8001050 <MX_GPIO_Init+0x1ec>)
 8000f76:	f000 fd49 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000f7a:	2308      	movs	r3, #8
 8000f7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	2300      	movs	r3, #0
 8000f88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f8a:	2305      	movs	r3, #5
 8000f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000f8e:	f107 031c 	add.w	r3, r7, #28
 8000f92:	4619      	mov	r1, r3
 8000f94:	482e      	ldr	r0, [pc, #184]	; (8001050 <MX_GPIO_Init+0x1ec>)
 8000f96:	f000 fd39 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : blue_button_Pin */
  GPIO_InitStruct.Pin = blue_button_Pin;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f9e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000fa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(blue_button_GPIO_Port, &GPIO_InitStruct);
 8000fa8:	f107 031c 	add.w	r3, r7, #28
 8000fac:	4619      	mov	r1, r3
 8000fae:	482a      	ldr	r0, [pc, #168]	; (8001058 <MX_GPIO_Init+0x1f4>)
 8000fb0:	f000 fd2c 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000fb4:	2304      	movs	r3, #4
 8000fb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000fc0:	f107 031c 	add.w	r3, r7, #28
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4825      	ldr	r0, [pc, #148]	; (800105c <MX_GPIO_Init+0x1f8>)
 8000fc8:	f000 fd20 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000fcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fde:	2305      	movs	r3, #5
 8000fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000fe2:	f107 031c 	add.w	r3, r7, #28
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	481c      	ldr	r0, [pc, #112]	; (800105c <MX_GPIO_Init+0x1f8>)
 8000fea:	f000 fd0f 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : green_led_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = green_led_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000fee:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000ff2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001000:	f107 031c 	add.w	r3, r7, #28
 8001004:	4619      	mov	r1, r3
 8001006:	4813      	ldr	r0, [pc, #76]	; (8001054 <MX_GPIO_Init+0x1f0>)
 8001008:	f000 fd00 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800100c:	2320      	movs	r3, #32
 800100e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001010:	2300      	movs	r3, #0
 8001012:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001018:	f107 031c 	add.w	r3, r7, #28
 800101c:	4619      	mov	r1, r3
 800101e:	480d      	ldr	r0, [pc, #52]	; (8001054 <MX_GPIO_Init+0x1f0>)
 8001020:	f000 fcf4 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001024:	2302      	movs	r3, #2
 8001026:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001028:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800102c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001032:	f107 031c 	add.w	r3, r7, #28
 8001036:	4619      	mov	r1, r3
 8001038:	4804      	ldr	r0, [pc, #16]	; (800104c <MX_GPIO_Init+0x1e8>)
 800103a:	f000 fce7 	bl	8001a0c <HAL_GPIO_Init>

}
 800103e:	bf00      	nop
 8001040:	3730      	adds	r7, #48	; 0x30
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40023800 	.word	0x40023800
 800104c:	40021000 	.word	0x40021000
 8001050:	40020800 	.word	0x40020800
 8001054:	40020c00 	.word	0x40020c00
 8001058:	40020000 	.word	0x40020000
 800105c:	40020400 	.word	0x40020400

08001060 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001068:	f00a fb70 	bl	800b74c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
	if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)){
 800106c:	2101      	movs	r1, #1
 800106e:	4811      	ldr	r0, [pc, #68]	; (80010b4 <StartDefaultTask+0x54>)
 8001070:	f000 fe68 	bl	8001d44 <HAL_GPIO_ReadPin>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d012      	beq.n	80010a0 <StartDefaultTask+0x40>
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,GPIO_PIN_SET);
 800107a:	2201      	movs	r2, #1
 800107c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001080:	480d      	ldr	r0, [pc, #52]	; (80010b8 <StartDefaultTask+0x58>)
 8001082:	f000 fe77 	bl	8001d74 <HAL_GPIO_WritePin>
		osDelay(500);
 8001086:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800108a:	f007 fb89 	bl	80087a0 <osDelay>
		HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);
 800108e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001092:	4809      	ldr	r0, [pc, #36]	; (80010b8 <StartDefaultTask+0x58>)
 8001094:	f000 fe87 	bl	8001da6 <HAL_GPIO_TogglePin>
		osDelay(500);
 8001098:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800109c:	f007 fb80 	bl	80087a0 <osDelay>
	}
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,GPIO_PIN_RESET);
 80010a0:	2200      	movs	r2, #0
 80010a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010a6:	4804      	ldr	r0, [pc, #16]	; (80010b8 <StartDefaultTask+0x58>)
 80010a8:	f000 fe64 	bl	8001d74 <HAL_GPIO_WritePin>

    osDelay(1);
 80010ac:	2001      	movs	r0, #1
 80010ae:	f007 fb77 	bl	80087a0 <osDelay>
	if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)){
 80010b2:	e7db      	b.n	800106c <StartDefaultTask+0xc>
 80010b4:	40020000 	.word	0x40020000
 80010b8:	40020c00 	.word	0x40020c00

080010bc <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80010c4:	2001      	movs	r0, #1
 80010c6:	f007 fb6b 	bl	80087a0 <osDelay>
 80010ca:	e7fb      	b.n	80010c4 <StartTask02+0x8>

080010cc <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80010d4:	2001      	movs	r0, #1
 80010d6:	f007 fb63 	bl	80087a0 <osDelay>
 80010da:	e7fb      	b.n	80010d4 <StartTask03+0x8>

080010dc <producer01task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_producer01task */
void producer01task(void *argument)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08e      	sub	sp, #56	; 0x38
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN producer01task */
  int nr = 1;
 80010e4:	2301      	movs	r3, #1
 80010e6:	637b      	str	r3, [r7, #52]	; 0x34
  /* Infinite loop */
  for(;;)
  {
	  char message[40] = "";
 80010e8:	2300      	movs	r3, #0
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	f107 0310 	add.w	r3, r7, #16
 80010f0:	2224      	movs	r2, #36	; 0x24
 80010f2:	2100      	movs	r1, #0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f00a fe73 	bl	800bde0 <memset>
	  sprintf(message,"Uptime %ds",nr);
 80010fa:	f107 030c 	add.w	r3, r7, #12
 80010fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001100:	4909      	ldr	r1, [pc, #36]	; (8001128 <producer01task+0x4c>)
 8001102:	4618      	mov	r0, r3
 8001104:	f00a ff64 	bl	800bfd0 <siprintf>
	  nr++;
 8001108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800110a:	3301      	adds	r3, #1
 800110c:	637b      	str	r3, [r7, #52]	; 0x34
	  //xQueueSendToFront(logQueueHandle,&message);
	  //osMessagePut(logQueueHandle,(uint32_t)message,osWaitForever);
	  osMessageQueuePut(logQueueHandle, &message, 0U, 0U);
 800110e:	4b07      	ldr	r3, [pc, #28]	; (800112c <producer01task+0x50>)
 8001110:	6818      	ldr	r0, [r3, #0]
 8001112:	f107 010c 	add.w	r1, r7, #12
 8001116:	2300      	movs	r3, #0
 8001118:	2200      	movs	r2, #0
 800111a:	f007 fc8f 	bl	8008a3c <osMessageQueuePut>
	  osDelay(1000);
 800111e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001122:	f007 fb3d 	bl	80087a0 <osDelay>
  {
 8001126:	e7df      	b.n	80010e8 <producer01task+0xc>
 8001128:	0800c72c 	.word	0x0800c72c
 800112c:	20000208 	.word	0x20000208

08001130 <consumer01task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_consumer01task */
void consumer01task(void *argument)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b090      	sub	sp, #64	; 0x40
 8001134:	af02      	add	r7, sp, #8
 8001136:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN consumer01task */
  uint16_t currentLine = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	86fb      	strh	r3, [r7, #54]	; 0x36
	LCD_WriteString(0, 5, 0, 0xFFFF, "Log Messages:");
 800113c:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <consumer01task+0x8c>)
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001144:	2200      	movs	r2, #0
 8001146:	2105      	movs	r1, #5
 8001148:	2000      	movs	r0, #0
 800114a:	f7ff fa89 	bl	8000660 <LCD_WriteString>
	char message[40] = "";
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	f107 0310 	add.w	r3, r7, #16
 8001156:	2224      	movs	r2, #36	; 0x24
 8001158:	2100      	movs	r1, #0
 800115a:	4618      	mov	r0, r3
 800115c:	f00a fe40 	bl	800bde0 <memset>
  /* Infinite loop */
  for(;;)
  {
	  osMessageQueueGet(logQueueHandle, &message, NULL, osWaitForever);
 8001160:	4b17      	ldr	r3, [pc, #92]	; (80011c0 <consumer01task+0x90>)
 8001162:	6818      	ldr	r0, [r3, #0]
 8001164:	f107 010c 	add.w	r1, r7, #12
 8001168:	f04f 33ff 	mov.w	r3, #4294967295
 800116c:	2200      	movs	r2, #0
 800116e:	f007 fcc5 	bl	8008afc <osMessageQueueGet>
    if(currentLine>=13){LCD_ClearDisplay(0xFFFF); currentLine = 0;LCD_WriteString(0, 5, 0, 0xFFFF, "Log Messages:");}
 8001172:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001174:	2b0c      	cmp	r3, #12
 8001176:	d90e      	bls.n	8001196 <consumer01task+0x66>
 8001178:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800117c:	f7ff faf9 	bl	8000772 <LCD_ClearDisplay>
 8001180:	2300      	movs	r3, #0
 8001182:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001184:	4b0d      	ldr	r3, [pc, #52]	; (80011bc <consumer01task+0x8c>)
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800118c:	2200      	movs	r2, #0
 800118e:	2105      	movs	r1, #5
 8001190:	2000      	movs	r0, #0
 8001192:	f7ff fa65 	bl	8000660 <LCD_WriteString>
	  LCD_WriteString(5,21+currentLine*16, 0, 0xFFFF, message);
 8001196:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001198:	011b      	lsls	r3, r3, #4
 800119a:	b29b      	uxth	r3, r3
 800119c:	3315      	adds	r3, #21
 800119e:	b299      	uxth	r1, r3
 80011a0:	f107 030c 	add.w	r3, r7, #12
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011aa:	2200      	movs	r2, #0
 80011ac:	2005      	movs	r0, #5
 80011ae:	f7ff fa57 	bl	8000660 <LCD_WriteString>
	  currentLine++;
 80011b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80011b4:	3301      	adds	r3, #1
 80011b6:	86fb      	strh	r3, [r7, #54]	; 0x36
	  osMessageQueueGet(logQueueHandle, &message, NULL, osWaitForever);
 80011b8:	e7d2      	b.n	8001160 <consumer01task+0x30>
 80011ba:	bf00      	nop
 80011bc:	0800c738 	.word	0x0800c738
 80011c0:	20000208 	.word	0x20000208

080011c4 <producer02task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_producer02task */
void producer02task(void *argument)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08e      	sub	sp, #56	; 0x38
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN producer02task */
  // Log Message wenn Blauer Taster gedrückt wurde
  uint8_t pressed = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  char message[40] = "";
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	f107 0310 	add.w	r3, r7, #16
 80011da:	2224      	movs	r2, #36	; 0x24
 80011dc:	2100      	movs	r1, #0
 80011de:	4618      	mov	r0, r3
 80011e0:	f00a fdfe 	bl	800bde0 <memset>
  /* Infinite loop */
  for(;;)
  {
	  if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0) && pressed==0){
 80011e4:	2101      	movs	r1, #1
 80011e6:	4822      	ldr	r0, [pc, #136]	; (8001270 <producer02task+0xac>)
 80011e8:	f000 fdac 	bl	8001d44 <HAL_GPIO_ReadPin>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d019      	beq.n	8001226 <producer02task+0x62>
 80011f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d115      	bne.n	8001226 <producer02task+0x62>
		  pressed = 1;
 80011fa:	2301      	movs	r3, #1
 80011fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		  message[40] = "";
 8001200:	4b1c      	ldr	r3, [pc, #112]	; (8001274 <producer02task+0xb0>)
 8001202:	b2db      	uxtb	r3, r3
 8001204:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
		  sprintf(message,"Blauer Taster gedrueckt");
 8001208:	f107 030c 	add.w	r3, r7, #12
 800120c:	491a      	ldr	r1, [pc, #104]	; (8001278 <producer02task+0xb4>)
 800120e:	4618      	mov	r0, r3
 8001210:	f00a fede 	bl	800bfd0 <siprintf>
		  osMessageQueuePut(logQueueHandle,&message,0U,0U);
 8001214:	4b19      	ldr	r3, [pc, #100]	; (800127c <producer02task+0xb8>)
 8001216:	6818      	ldr	r0, [r3, #0]
 8001218:	f107 010c 	add.w	r1, r7, #12
 800121c:	2300      	movs	r3, #0
 800121e:	2200      	movs	r2, #0
 8001220:	f007 fc0c 	bl	8008a3c <osMessageQueuePut>
 8001224:	e01f      	b.n	8001266 <producer02task+0xa2>
	  }else if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==0 && pressed == 1){
 8001226:	2101      	movs	r1, #1
 8001228:	4811      	ldr	r0, [pc, #68]	; (8001270 <producer02task+0xac>)
 800122a:	f000 fd8b 	bl	8001d44 <HAL_GPIO_ReadPin>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d118      	bne.n	8001266 <producer02task+0xa2>
 8001234:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001238:	2b01      	cmp	r3, #1
 800123a:	d114      	bne.n	8001266 <producer02task+0xa2>
		  pressed = 0;
 800123c:	2300      	movs	r3, #0
 800123e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		  message[40] = "";
 8001242:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <producer02task+0xb0>)
 8001244:	b2db      	uxtb	r3, r3
 8001246:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
		  sprintf(message,"Blauer Taster losgelassen");
 800124a:	f107 030c 	add.w	r3, r7, #12
 800124e:	490c      	ldr	r1, [pc, #48]	; (8001280 <producer02task+0xbc>)
 8001250:	4618      	mov	r0, r3
 8001252:	f00a febd 	bl	800bfd0 <siprintf>
		  osMessageQueuePut(logQueueHandle,&message,0U,0U);
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <producer02task+0xb8>)
 8001258:	6818      	ldr	r0, [r3, #0]
 800125a:	f107 010c 	add.w	r1, r7, #12
 800125e:	2300      	movs	r3, #0
 8001260:	2200      	movs	r2, #0
 8001262:	f007 fbeb 	bl	8008a3c <osMessageQueuePut>
	  }
	osDelay(100);
 8001266:	2064      	movs	r0, #100	; 0x64
 8001268:	f007 fa9a 	bl	80087a0 <osDelay>
	  if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0) && pressed==0){
 800126c:	e7ba      	b.n	80011e4 <producer02task+0x20>
 800126e:	bf00      	nop
 8001270:	40020000 	.word	0x40020000
 8001274:	0800c748 	.word	0x0800c748
 8001278:	0800c74c 	.word	0x0800c74c
 800127c:	20000208 	.word	0x20000208
 8001280:	0800c764 	.word	0x0800c764

08001284 <producer03task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_producer03task */
void producer03task(void *argument)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN producer03task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800128c:	2001      	movs	r0, #1
 800128e:	f007 fa87 	bl	80087a0 <osDelay>
 8001292:	e7fb      	b.n	800128c <producer03task+0x8>

08001294 <oneMsFunc>:
  /* USER CODE END producer03task */
}

/* oneMsFunc function */
void oneMsFunc(void *argument)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
//		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13,GPIO_PIN_RESET);
//	}else if(counter >= 250){
//		counter = 0;
//	}

	HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_15);
 800129c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012a0:	4803      	ldr	r0, [pc, #12]	; (80012b0 <oneMsFunc+0x1c>)
 80012a2:	f000 fd80 	bl	8001da6 <HAL_GPIO_TogglePin>


  /* USER CODE END oneMsFunc */
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40020c00 	.word	0x40020c00

080012b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b8:	b672      	cpsid	i
}
 80012ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012bc:	e7fe      	b.n	80012bc <Error_Handler+0x8>
	...

080012c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	4b12      	ldr	r3, [pc, #72]	; (8001314 <HAL_MspInit+0x54>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ce:	4a11      	ldr	r2, [pc, #68]	; (8001314 <HAL_MspInit+0x54>)
 80012d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d4:	6453      	str	r3, [r2, #68]	; 0x44
 80012d6:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <HAL_MspInit+0x54>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	603b      	str	r3, [r7, #0]
 80012e6:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <HAL_MspInit+0x54>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	4a0a      	ldr	r2, [pc, #40]	; (8001314 <HAL_MspInit+0x54>)
 80012ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f0:	6413      	str	r3, [r2, #64]	; 0x40
 80012f2:	4b08      	ldr	r3, [pc, #32]	; (8001314 <HAL_MspInit+0x54>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fa:	603b      	str	r3, [r7, #0]
 80012fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012fe:	2200      	movs	r2, #0
 8001300:	210f      	movs	r1, #15
 8001302:	f06f 0001 	mvn.w	r0, #1
 8001306:	f000 fb4a 	bl	800199e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40023800 	.word	0x40023800

08001318 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08a      	sub	sp, #40	; 0x28
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a19      	ldr	r2, [pc, #100]	; (800139c <HAL_I2C_MspInit+0x84>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d12c      	bne.n	8001394 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <HAL_I2C_MspInit+0x88>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	4a17      	ldr	r2, [pc, #92]	; (80013a0 <HAL_I2C_MspInit+0x88>)
 8001344:	f043 0302 	orr.w	r3, r3, #2
 8001348:	6313      	str	r3, [r2, #48]	; 0x30
 800134a:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <HAL_I2C_MspInit+0x88>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	613b      	str	r3, [r7, #16]
 8001354:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001356:	f44f 7310 	mov.w	r3, #576	; 0x240
 800135a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800135c:	2312      	movs	r3, #18
 800135e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001360:	2301      	movs	r3, #1
 8001362:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001364:	2300      	movs	r3, #0
 8001366:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001368:	2304      	movs	r3, #4
 800136a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	4619      	mov	r1, r3
 8001372:	480c      	ldr	r0, [pc, #48]	; (80013a4 <HAL_I2C_MspInit+0x8c>)
 8001374:	f000 fb4a 	bl	8001a0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001378:	2300      	movs	r3, #0
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <HAL_I2C_MspInit+0x88>)
 800137e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001380:	4a07      	ldr	r2, [pc, #28]	; (80013a0 <HAL_I2C_MspInit+0x88>)
 8001382:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001386:	6413      	str	r3, [r2, #64]	; 0x40
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <HAL_I2C_MspInit+0x88>)
 800138a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001394:	bf00      	nop
 8001396:	3728      	adds	r7, #40	; 0x28
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40005400 	.word	0x40005400
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40020400 	.word	0x40020400

080013a8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08e      	sub	sp, #56	; 0x38
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a31      	ldr	r2, [pc, #196]	; (8001498 <HAL_I2S_MspInit+0xf0>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d15a      	bne.n	800148e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80013d8:	2301      	movs	r3, #1
 80013da:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80013dc:	23c0      	movs	r3, #192	; 0xc0
 80013de:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80013e0:	2302      	movs	r3, #2
 80013e2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	4618      	mov	r0, r3
 80013ea:	f003 fb69 	bl	8004ac0 <HAL_RCCEx_PeriphCLKConfig>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80013f4:	f7ff ff5e 	bl	80012b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80013f8:	2300      	movs	r3, #0
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	4b27      	ldr	r3, [pc, #156]	; (800149c <HAL_I2S_MspInit+0xf4>)
 80013fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001400:	4a26      	ldr	r2, [pc, #152]	; (800149c <HAL_I2S_MspInit+0xf4>)
 8001402:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001406:	6413      	str	r3, [r2, #64]	; 0x40
 8001408:	4b24      	ldr	r3, [pc, #144]	; (800149c <HAL_I2S_MspInit+0xf4>)
 800140a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001414:	2300      	movs	r3, #0
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	4b20      	ldr	r3, [pc, #128]	; (800149c <HAL_I2S_MspInit+0xf4>)
 800141a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141c:	4a1f      	ldr	r2, [pc, #124]	; (800149c <HAL_I2S_MspInit+0xf4>)
 800141e:	f043 0301 	orr.w	r3, r3, #1
 8001422:	6313      	str	r3, [r2, #48]	; 0x30
 8001424:	4b1d      	ldr	r3, [pc, #116]	; (800149c <HAL_I2S_MspInit+0xf4>)
 8001426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001430:	2300      	movs	r3, #0
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	4b19      	ldr	r3, [pc, #100]	; (800149c <HAL_I2S_MspInit+0xf4>)
 8001436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001438:	4a18      	ldr	r2, [pc, #96]	; (800149c <HAL_I2S_MspInit+0xf4>)
 800143a:	f043 0304 	orr.w	r3, r3, #4
 800143e:	6313      	str	r3, [r2, #48]	; 0x30
 8001440:	4b16      	ldr	r3, [pc, #88]	; (800149c <HAL_I2S_MspInit+0xf4>)
 8001442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001444:	f003 0304 	and.w	r3, r3, #4
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800144c:	2310      	movs	r3, #16
 800144e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001450:	2302      	movs	r3, #2
 8001452:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001458:	2300      	movs	r3, #0
 800145a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800145c:	2306      	movs	r3, #6
 800145e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001460:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001464:	4619      	mov	r1, r3
 8001466:	480e      	ldr	r0, [pc, #56]	; (80014a0 <HAL_I2S_MspInit+0xf8>)
 8001468:	f000 fad0 	bl	8001a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800146c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001472:	2302      	movs	r3, #2
 8001474:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147a:	2300      	movs	r3, #0
 800147c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800147e:	2306      	movs	r3, #6
 8001480:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001486:	4619      	mov	r1, r3
 8001488:	4806      	ldr	r0, [pc, #24]	; (80014a4 <HAL_I2S_MspInit+0xfc>)
 800148a:	f000 fabf 	bl	8001a0c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800148e:	bf00      	nop
 8001490:	3738      	adds	r7, #56	; 0x38
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40003c00 	.word	0x40003c00
 800149c:	40023800 	.word	0x40023800
 80014a0:	40020000 	.word	0x40020000
 80014a4:	40020800 	.word	0x40020800

080014a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08a      	sub	sp, #40	; 0x28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a19      	ldr	r2, [pc, #100]	; (800152c <HAL_SPI_MspInit+0x84>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d12b      	bne.n	8001522 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	4b18      	ldr	r3, [pc, #96]	; (8001530 <HAL_SPI_MspInit+0x88>)
 80014d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d2:	4a17      	ldr	r2, [pc, #92]	; (8001530 <HAL_SPI_MspInit+0x88>)
 80014d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014d8:	6453      	str	r3, [r2, #68]	; 0x44
 80014da:	4b15      	ldr	r3, [pc, #84]	; (8001530 <HAL_SPI_MspInit+0x88>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014e2:	613b      	str	r3, [r7, #16]
 80014e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	4b11      	ldr	r3, [pc, #68]	; (8001530 <HAL_SPI_MspInit+0x88>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	4a10      	ldr	r2, [pc, #64]	; (8001530 <HAL_SPI_MspInit+0x88>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6313      	str	r3, [r2, #48]	; 0x30
 80014f6:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <HAL_SPI_MspInit+0x88>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001502:	23e0      	movs	r3, #224	; 0xe0
 8001504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001506:	2302      	movs	r3, #2
 8001508:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150e:	2300      	movs	r3, #0
 8001510:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001512:	2305      	movs	r3, #5
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001516:	f107 0314 	add.w	r3, r7, #20
 800151a:	4619      	mov	r1, r3
 800151c:	4805      	ldr	r0, [pc, #20]	; (8001534 <HAL_SPI_MspInit+0x8c>)
 800151e:	f000 fa75 	bl	8001a0c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001522:	bf00      	nop
 8001524:	3728      	adds	r7, #40	; 0x28
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40013000 	.word	0x40013000
 8001530:	40023800 	.word	0x40023800
 8001534:	40020000 	.word	0x40020000

08001538 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a0b      	ldr	r2, [pc, #44]	; (8001574 <HAL_TIM_Base_MspInit+0x3c>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d10d      	bne.n	8001566 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <HAL_TIM_Base_MspInit+0x40>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	4a09      	ldr	r2, [pc, #36]	; (8001578 <HAL_TIM_Base_MspInit+0x40>)
 8001554:	f043 0320 	orr.w	r3, r3, #32
 8001558:	6413      	str	r3, [r2, #64]	; 0x40
 800155a:	4b07      	ldr	r3, [pc, #28]	; (8001578 <HAL_TIM_Base_MspInit+0x40>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	f003 0320 	and.w	r3, r3, #32
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001566:	bf00      	nop
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	40001400 	.word	0x40001400
 8001578:	40023800 	.word	0x40023800

0800157c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001580:	e7fe      	b.n	8001580 <NMI_Handler+0x4>

08001582 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001586:	e7fe      	b.n	8001586 <HardFault_Handler+0x4>

08001588 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800158c:	e7fe      	b.n	800158c <MemManage_Handler+0x4>

0800158e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001592:	e7fe      	b.n	8001592 <BusFault_Handler+0x4>

08001594 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001598:	e7fe      	b.n	8001598 <UsageFault_Handler+0x4>

0800159a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ac:	f000 f8d8 	bl	8001760 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80015b0:	f008 ffae 	bl	800a510 <xTaskGetSchedulerState>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d001      	beq.n	80015be <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80015ba:	f009 fe4d 	bl	800b258 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
	...

080015c4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80015c8:	4802      	ldr	r0, [pc, #8]	; (80015d4 <OTG_FS_IRQHandler+0x10>)
 80015ca:	f000 fe71 	bl	80022b0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20004f74 	.word	0x20004f74

080015d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015e0:	4a14      	ldr	r2, [pc, #80]	; (8001634 <_sbrk+0x5c>)
 80015e2:	4b15      	ldr	r3, [pc, #84]	; (8001638 <_sbrk+0x60>)
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015ec:	4b13      	ldr	r3, [pc, #76]	; (800163c <_sbrk+0x64>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d102      	bne.n	80015fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015f4:	4b11      	ldr	r3, [pc, #68]	; (800163c <_sbrk+0x64>)
 80015f6:	4a12      	ldr	r2, [pc, #72]	; (8001640 <_sbrk+0x68>)
 80015f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015fa:	4b10      	ldr	r3, [pc, #64]	; (800163c <_sbrk+0x64>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4413      	add	r3, r2
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	429a      	cmp	r2, r3
 8001606:	d207      	bcs.n	8001618 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001608:	f00a fba2 	bl	800bd50 <__errno>
 800160c:	4603      	mov	r3, r0
 800160e:	220c      	movs	r2, #12
 8001610:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001612:	f04f 33ff 	mov.w	r3, #4294967295
 8001616:	e009      	b.n	800162c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001618:	4b08      	ldr	r3, [pc, #32]	; (800163c <_sbrk+0x64>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800161e:	4b07      	ldr	r3, [pc, #28]	; (800163c <_sbrk+0x64>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4413      	add	r3, r2
 8001626:	4a05      	ldr	r2, [pc, #20]	; (800163c <_sbrk+0x64>)
 8001628:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800162a:	68fb      	ldr	r3, [r7, #12]
}
 800162c:	4618      	mov	r0, r3
 800162e:	3718      	adds	r7, #24
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20020000 	.word	0x20020000
 8001638:	00000400 	.word	0x00000400
 800163c:	20000210 	.word	0x20000210
 8001640:	20005288 	.word	0x20005288

08001644 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001648:	4b06      	ldr	r3, [pc, #24]	; (8001664 <SystemInit+0x20>)
 800164a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800164e:	4a05      	ldr	r2, [pc, #20]	; (8001664 <SystemInit+0x20>)
 8001650:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001654:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001668:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800166c:	480d      	ldr	r0, [pc, #52]	; (80016a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800166e:	490e      	ldr	r1, [pc, #56]	; (80016a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001670:	4a0e      	ldr	r2, [pc, #56]	; (80016ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001672:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001674:	e002      	b.n	800167c <LoopCopyDataInit>

08001676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800167a:	3304      	adds	r3, #4

0800167c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800167c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800167e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001680:	d3f9      	bcc.n	8001676 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001682:	4a0b      	ldr	r2, [pc, #44]	; (80016b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001684:	4c0b      	ldr	r4, [pc, #44]	; (80016b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001688:	e001      	b.n	800168e <LoopFillZerobss>

0800168a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800168a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800168c:	3204      	adds	r2, #4

0800168e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800168e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001690:	d3fb      	bcc.n	800168a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001692:	f7ff ffd7 	bl	8001644 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001696:	f00a fb61 	bl	800bd5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800169a:	f7ff f9cb 	bl	8000a34 <main>
  bx  lr    
 800169e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80016a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016a8:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80016ac:	0800e928 	.word	0x0800e928
  ldr r2, =_sbss
 80016b0:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80016b4:	20005288 	.word	0x20005288

080016b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016b8:	e7fe      	b.n	80016b8 <ADC_IRQHandler>
	...

080016bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016c0:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <HAL_Init+0x40>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a0d      	ldr	r2, [pc, #52]	; (80016fc <HAL_Init+0x40>)
 80016c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016cc:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <HAL_Init+0x40>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a0a      	ldr	r2, [pc, #40]	; (80016fc <HAL_Init+0x40>)
 80016d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016d8:	4b08      	ldr	r3, [pc, #32]	; (80016fc <HAL_Init+0x40>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a07      	ldr	r2, [pc, #28]	; (80016fc <HAL_Init+0x40>)
 80016de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016e4:	2003      	movs	r0, #3
 80016e6:	f000 f94f 	bl	8001988 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ea:	200f      	movs	r0, #15
 80016ec:	f000 f808 	bl	8001700 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016f0:	f7ff fde6 	bl	80012c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40023c00 	.word	0x40023c00

08001700 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001708:	4b12      	ldr	r3, [pc, #72]	; (8001754 <HAL_InitTick+0x54>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	4b12      	ldr	r3, [pc, #72]	; (8001758 <HAL_InitTick+0x58>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	4619      	mov	r1, r3
 8001712:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001716:	fbb3 f3f1 	udiv	r3, r3, r1
 800171a:	fbb2 f3f3 	udiv	r3, r2, r3
 800171e:	4618      	mov	r0, r3
 8001720:	f000 f967 	bl	80019f2 <HAL_SYSTICK_Config>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e00e      	b.n	800174c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b0f      	cmp	r3, #15
 8001732:	d80a      	bhi.n	800174a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001734:	2200      	movs	r2, #0
 8001736:	6879      	ldr	r1, [r7, #4]
 8001738:	f04f 30ff 	mov.w	r0, #4294967295
 800173c:	f000 f92f 	bl	800199e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001740:	4a06      	ldr	r2, [pc, #24]	; (800175c <HAL_InitTick+0x5c>)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001746:	2300      	movs	r3, #0
 8001748:	e000      	b.n	800174c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
}
 800174c:	4618      	mov	r0, r3
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20000000 	.word	0x20000000
 8001758:	20000008 	.word	0x20000008
 800175c:	20000004 	.word	0x20000004

08001760 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001764:	4b06      	ldr	r3, [pc, #24]	; (8001780 <HAL_IncTick+0x20>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	461a      	mov	r2, r3
 800176a:	4b06      	ldr	r3, [pc, #24]	; (8001784 <HAL_IncTick+0x24>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4413      	add	r3, r2
 8001770:	4a04      	ldr	r2, [pc, #16]	; (8001784 <HAL_IncTick+0x24>)
 8001772:	6013      	str	r3, [r2, #0]
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	20000008 	.word	0x20000008
 8001784:	20000214 	.word	0x20000214

08001788 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  return uwTick;
 800178c:	4b03      	ldr	r3, [pc, #12]	; (800179c <HAL_GetTick+0x14>)
 800178e:	681b      	ldr	r3, [r3, #0]
}
 8001790:	4618      	mov	r0, r3
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	20000214 	.word	0x20000214

080017a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017a8:	f7ff ffee 	bl	8001788 <HAL_GetTick>
 80017ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b8:	d005      	beq.n	80017c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ba:	4b0a      	ldr	r3, [pc, #40]	; (80017e4 <HAL_Delay+0x44>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	461a      	mov	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	4413      	add	r3, r2
 80017c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017c6:	bf00      	nop
 80017c8:	f7ff ffde 	bl	8001788 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d8f7      	bhi.n	80017c8 <HAL_Delay+0x28>
  {
  }
}
 80017d8:	bf00      	nop
 80017da:	bf00      	nop
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000008 	.word	0x20000008

080017e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f8:	4b0c      	ldr	r3, [pc, #48]	; (800182c <__NVIC_SetPriorityGrouping+0x44>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001804:	4013      	ands	r3, r2
 8001806:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001810:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001818:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800181a:	4a04      	ldr	r2, [pc, #16]	; (800182c <__NVIC_SetPriorityGrouping+0x44>)
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	60d3      	str	r3, [r2, #12]
}
 8001820:	bf00      	nop
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001834:	4b04      	ldr	r3, [pc, #16]	; (8001848 <__NVIC_GetPriorityGrouping+0x18>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	0a1b      	lsrs	r3, r3, #8
 800183a:	f003 0307 	and.w	r3, r3, #7
}
 800183e:	4618      	mov	r0, r3
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185a:	2b00      	cmp	r3, #0
 800185c:	db0b      	blt.n	8001876 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	f003 021f 	and.w	r2, r3, #31
 8001864:	4907      	ldr	r1, [pc, #28]	; (8001884 <__NVIC_EnableIRQ+0x38>)
 8001866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186a:	095b      	lsrs	r3, r3, #5
 800186c:	2001      	movs	r0, #1
 800186e:	fa00 f202 	lsl.w	r2, r0, r2
 8001872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	e000e100 	.word	0xe000e100

08001888 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	6039      	str	r1, [r7, #0]
 8001892:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001898:	2b00      	cmp	r3, #0
 800189a:	db0a      	blt.n	80018b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	490c      	ldr	r1, [pc, #48]	; (80018d4 <__NVIC_SetPriority+0x4c>)
 80018a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a6:	0112      	lsls	r2, r2, #4
 80018a8:	b2d2      	uxtb	r2, r2
 80018aa:	440b      	add	r3, r1
 80018ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018b0:	e00a      	b.n	80018c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	4908      	ldr	r1, [pc, #32]	; (80018d8 <__NVIC_SetPriority+0x50>)
 80018b8:	79fb      	ldrb	r3, [r7, #7]
 80018ba:	f003 030f 	and.w	r3, r3, #15
 80018be:	3b04      	subs	r3, #4
 80018c0:	0112      	lsls	r2, r2, #4
 80018c2:	b2d2      	uxtb	r2, r2
 80018c4:	440b      	add	r3, r1
 80018c6:	761a      	strb	r2, [r3, #24]
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	e000e100 	.word	0xe000e100
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018dc:	b480      	push	{r7}
 80018de:	b089      	sub	sp, #36	; 0x24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	f1c3 0307 	rsb	r3, r3, #7
 80018f6:	2b04      	cmp	r3, #4
 80018f8:	bf28      	it	cs
 80018fa:	2304      	movcs	r3, #4
 80018fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	3304      	adds	r3, #4
 8001902:	2b06      	cmp	r3, #6
 8001904:	d902      	bls.n	800190c <NVIC_EncodePriority+0x30>
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	3b03      	subs	r3, #3
 800190a:	e000      	b.n	800190e <NVIC_EncodePriority+0x32>
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001910:	f04f 32ff 	mov.w	r2, #4294967295
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43da      	mvns	r2, r3
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	401a      	ands	r2, r3
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001924:	f04f 31ff 	mov.w	r1, #4294967295
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	fa01 f303 	lsl.w	r3, r1, r3
 800192e:	43d9      	mvns	r1, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001934:	4313      	orrs	r3, r2
         );
}
 8001936:	4618      	mov	r0, r3
 8001938:	3724      	adds	r7, #36	; 0x24
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
	...

08001944 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3b01      	subs	r3, #1
 8001950:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001954:	d301      	bcc.n	800195a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001956:	2301      	movs	r3, #1
 8001958:	e00f      	b.n	800197a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800195a:	4a0a      	ldr	r2, [pc, #40]	; (8001984 <SysTick_Config+0x40>)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3b01      	subs	r3, #1
 8001960:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001962:	210f      	movs	r1, #15
 8001964:	f04f 30ff 	mov.w	r0, #4294967295
 8001968:	f7ff ff8e 	bl	8001888 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800196c:	4b05      	ldr	r3, [pc, #20]	; (8001984 <SysTick_Config+0x40>)
 800196e:	2200      	movs	r2, #0
 8001970:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001972:	4b04      	ldr	r3, [pc, #16]	; (8001984 <SysTick_Config+0x40>)
 8001974:	2207      	movs	r2, #7
 8001976:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	e000e010 	.word	0xe000e010

08001988 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7ff ff29 	bl	80017e8 <__NVIC_SetPriorityGrouping>
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800199e:	b580      	push	{r7, lr}
 80019a0:	b086      	sub	sp, #24
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	4603      	mov	r3, r0
 80019a6:	60b9      	str	r1, [r7, #8]
 80019a8:	607a      	str	r2, [r7, #4]
 80019aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019b0:	f7ff ff3e 	bl	8001830 <__NVIC_GetPriorityGrouping>
 80019b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	68b9      	ldr	r1, [r7, #8]
 80019ba:	6978      	ldr	r0, [r7, #20]
 80019bc:	f7ff ff8e 	bl	80018dc <NVIC_EncodePriority>
 80019c0:	4602      	mov	r2, r0
 80019c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019c6:	4611      	mov	r1, r2
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff ff5d 	bl	8001888 <__NVIC_SetPriority>
}
 80019ce:	bf00      	nop
 80019d0:	3718      	adds	r7, #24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b082      	sub	sp, #8
 80019da:	af00      	add	r7, sp, #0
 80019dc:	4603      	mov	r3, r0
 80019de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff ff31 	bl	800184c <__NVIC_EnableIRQ>
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b082      	sub	sp, #8
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff ffa2 	bl	8001944 <SysTick_Config>
 8001a00:	4603      	mov	r3, r0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
	...

08001a0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b089      	sub	sp, #36	; 0x24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a16:	2300      	movs	r3, #0
 8001a18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a22:	2300      	movs	r3, #0
 8001a24:	61fb      	str	r3, [r7, #28]
 8001a26:	e16b      	b.n	8001d00 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a28:	2201      	movs	r2, #1
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	f040 815a 	bne.w	8001cfa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f003 0303 	and.w	r3, r3, #3
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d005      	beq.n	8001a5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d130      	bne.n	8001ac0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	2203      	movs	r2, #3
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4013      	ands	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	68da      	ldr	r2, [r3, #12]
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a94:	2201      	movs	r2, #1
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	091b      	lsrs	r3, r3, #4
 8001aaa:	f003 0201 	and.w	r2, r3, #1
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 0303 	and.w	r3, r3, #3
 8001ac8:	2b03      	cmp	r3, #3
 8001aca:	d017      	beq.n	8001afc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	2203      	movs	r2, #3
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f003 0303 	and.w	r3, r3, #3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d123      	bne.n	8001b50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	08da      	lsrs	r2, r3, #3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3208      	adds	r2, #8
 8001b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	220f      	movs	r2, #15
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	43db      	mvns	r3, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	691a      	ldr	r2, [r3, #16]
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	08da      	lsrs	r2, r3, #3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	3208      	adds	r2, #8
 8001b4a:	69b9      	ldr	r1, [r7, #24]
 8001b4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	43db      	mvns	r3, r3
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4013      	ands	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 0203 	and.w	r2, r3, #3
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f000 80b4 	beq.w	8001cfa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	4b60      	ldr	r3, [pc, #384]	; (8001d18 <HAL_GPIO_Init+0x30c>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9a:	4a5f      	ldr	r2, [pc, #380]	; (8001d18 <HAL_GPIO_Init+0x30c>)
 8001b9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ba0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ba2:	4b5d      	ldr	r3, [pc, #372]	; (8001d18 <HAL_GPIO_Init+0x30c>)
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bae:	4a5b      	ldr	r2, [pc, #364]	; (8001d1c <HAL_GPIO_Init+0x310>)
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	089b      	lsrs	r3, r3, #2
 8001bb4:	3302      	adds	r3, #2
 8001bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	f003 0303 	and.w	r3, r3, #3
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	220f      	movs	r2, #15
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a52      	ldr	r2, [pc, #328]	; (8001d20 <HAL_GPIO_Init+0x314>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d02b      	beq.n	8001c32 <HAL_GPIO_Init+0x226>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a51      	ldr	r2, [pc, #324]	; (8001d24 <HAL_GPIO_Init+0x318>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d025      	beq.n	8001c2e <HAL_GPIO_Init+0x222>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a50      	ldr	r2, [pc, #320]	; (8001d28 <HAL_GPIO_Init+0x31c>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d01f      	beq.n	8001c2a <HAL_GPIO_Init+0x21e>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a4f      	ldr	r2, [pc, #316]	; (8001d2c <HAL_GPIO_Init+0x320>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d019      	beq.n	8001c26 <HAL_GPIO_Init+0x21a>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a4e      	ldr	r2, [pc, #312]	; (8001d30 <HAL_GPIO_Init+0x324>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d013      	beq.n	8001c22 <HAL_GPIO_Init+0x216>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a4d      	ldr	r2, [pc, #308]	; (8001d34 <HAL_GPIO_Init+0x328>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d00d      	beq.n	8001c1e <HAL_GPIO_Init+0x212>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a4c      	ldr	r2, [pc, #304]	; (8001d38 <HAL_GPIO_Init+0x32c>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d007      	beq.n	8001c1a <HAL_GPIO_Init+0x20e>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a4b      	ldr	r2, [pc, #300]	; (8001d3c <HAL_GPIO_Init+0x330>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d101      	bne.n	8001c16 <HAL_GPIO_Init+0x20a>
 8001c12:	2307      	movs	r3, #7
 8001c14:	e00e      	b.n	8001c34 <HAL_GPIO_Init+0x228>
 8001c16:	2308      	movs	r3, #8
 8001c18:	e00c      	b.n	8001c34 <HAL_GPIO_Init+0x228>
 8001c1a:	2306      	movs	r3, #6
 8001c1c:	e00a      	b.n	8001c34 <HAL_GPIO_Init+0x228>
 8001c1e:	2305      	movs	r3, #5
 8001c20:	e008      	b.n	8001c34 <HAL_GPIO_Init+0x228>
 8001c22:	2304      	movs	r3, #4
 8001c24:	e006      	b.n	8001c34 <HAL_GPIO_Init+0x228>
 8001c26:	2303      	movs	r3, #3
 8001c28:	e004      	b.n	8001c34 <HAL_GPIO_Init+0x228>
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	e002      	b.n	8001c34 <HAL_GPIO_Init+0x228>
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e000      	b.n	8001c34 <HAL_GPIO_Init+0x228>
 8001c32:	2300      	movs	r3, #0
 8001c34:	69fa      	ldr	r2, [r7, #28]
 8001c36:	f002 0203 	and.w	r2, r2, #3
 8001c3a:	0092      	lsls	r2, r2, #2
 8001c3c:	4093      	lsls	r3, r2
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c44:	4935      	ldr	r1, [pc, #212]	; (8001d1c <HAL_GPIO_Init+0x310>)
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	089b      	lsrs	r3, r3, #2
 8001c4a:	3302      	adds	r3, #2
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c52:	4b3b      	ldr	r3, [pc, #236]	; (8001d40 <HAL_GPIO_Init+0x334>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c76:	4a32      	ldr	r2, [pc, #200]	; (8001d40 <HAL_GPIO_Init+0x334>)
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c7c:	4b30      	ldr	r3, [pc, #192]	; (8001d40 <HAL_GPIO_Init+0x334>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	43db      	mvns	r3, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ca0:	4a27      	ldr	r2, [pc, #156]	; (8001d40 <HAL_GPIO_Init+0x334>)
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ca6:	4b26      	ldr	r3, [pc, #152]	; (8001d40 <HAL_GPIO_Init+0x334>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cca:	4a1d      	ldr	r2, [pc, #116]	; (8001d40 <HAL_GPIO_Init+0x334>)
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cd0:	4b1b      	ldr	r3, [pc, #108]	; (8001d40 <HAL_GPIO_Init+0x334>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d003      	beq.n	8001cf4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cf4:	4a12      	ldr	r2, [pc, #72]	; (8001d40 <HAL_GPIO_Init+0x334>)
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	61fb      	str	r3, [r7, #28]
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	2b0f      	cmp	r3, #15
 8001d04:	f67f ae90 	bls.w	8001a28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d08:	bf00      	nop
 8001d0a:	bf00      	nop
 8001d0c:	3724      	adds	r7, #36	; 0x24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	40013800 	.word	0x40013800
 8001d20:	40020000 	.word	0x40020000
 8001d24:	40020400 	.word	0x40020400
 8001d28:	40020800 	.word	0x40020800
 8001d2c:	40020c00 	.word	0x40020c00
 8001d30:	40021000 	.word	0x40021000
 8001d34:	40021400 	.word	0x40021400
 8001d38:	40021800 	.word	0x40021800
 8001d3c:	40021c00 	.word	0x40021c00
 8001d40:	40013c00 	.word	0x40013c00

08001d44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	691a      	ldr	r2, [r3, #16]
 8001d54:	887b      	ldrh	r3, [r7, #2]
 8001d56:	4013      	ands	r3, r2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d002      	beq.n	8001d62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	73fb      	strb	r3, [r7, #15]
 8001d60:	e001      	b.n	8001d66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d62:	2300      	movs	r3, #0
 8001d64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	807b      	strh	r3, [r7, #2]
 8001d80:	4613      	mov	r3, r2
 8001d82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d84:	787b      	ldrb	r3, [r7, #1]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d8a:	887a      	ldrh	r2, [r7, #2]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d90:	e003      	b.n	8001d9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d92:	887b      	ldrh	r3, [r7, #2]
 8001d94:	041a      	lsls	r2, r3, #16
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	619a      	str	r2, [r3, #24]
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b085      	sub	sp, #20
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
 8001dae:	460b      	mov	r3, r1
 8001db0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001db8:	887a      	ldrh	r2, [r7, #2]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	041a      	lsls	r2, r3, #16
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	43d9      	mvns	r1, r3
 8001dc4:	887b      	ldrh	r3, [r7, #2]
 8001dc6:	400b      	ands	r3, r1
 8001dc8:	431a      	orrs	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	619a      	str	r2, [r3, #24]
}
 8001dce:	bf00      	nop
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001dda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ddc:	b08f      	sub	sp, #60	; 0x3c
 8001dde:	af0a      	add	r7, sp, #40	; 0x28
 8001de0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e054      	b.n	8001e96 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d106      	bne.n	8001e0c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f009 fcf4 	bl	800b7f4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2203      	movs	r2, #3
 8001e10:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d102      	bne.n	8001e26 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f003 f9ee 	bl	800520c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	603b      	str	r3, [r7, #0]
 8001e36:	687e      	ldr	r6, [r7, #4]
 8001e38:	466d      	mov	r5, sp
 8001e3a:	f106 0410 	add.w	r4, r6, #16
 8001e3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e4a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e4e:	1d33      	adds	r3, r6, #4
 8001e50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e52:	6838      	ldr	r0, [r7, #0]
 8001e54:	f003 f968 	bl	8005128 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f003 f9e5 	bl	800522e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	603b      	str	r3, [r7, #0]
 8001e6a:	687e      	ldr	r6, [r7, #4]
 8001e6c:	466d      	mov	r5, sp
 8001e6e:	f106 0410 	add.w	r4, r6, #16
 8001e72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e7a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e7e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e82:	1d33      	adds	r3, r6, #4
 8001e84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e86:	6838      	ldr	r0, [r7, #0]
 8001e88:	f003 fb6e 	bl	8005568 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3714      	adds	r7, #20
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e9e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001e9e:	b590      	push	{r4, r7, lr}
 8001ea0:	b089      	sub	sp, #36	; 0x24
 8001ea2:	af04      	add	r7, sp, #16
 8001ea4:	6078      	str	r0, [r7, #4]
 8001ea6:	4608      	mov	r0, r1
 8001ea8:	4611      	mov	r1, r2
 8001eaa:	461a      	mov	r2, r3
 8001eac:	4603      	mov	r3, r0
 8001eae:	70fb      	strb	r3, [r7, #3]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	70bb      	strb	r3, [r7, #2]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d101      	bne.n	8001ec6 <HAL_HCD_HC_Init+0x28>
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	e076      	b.n	8001fb4 <HAL_HCD_HC_Init+0x116>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001ece:	78fb      	ldrb	r3, [r7, #3]
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	212c      	movs	r1, #44	; 0x2c
 8001ed4:	fb01 f303 	mul.w	r3, r1, r3
 8001ed8:	4413      	add	r3, r2
 8001eda:	333d      	adds	r3, #61	; 0x3d
 8001edc:	2200      	movs	r2, #0
 8001ede:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001ee0:	78fb      	ldrb	r3, [r7, #3]
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	212c      	movs	r1, #44	; 0x2c
 8001ee6:	fb01 f303 	mul.w	r3, r1, r3
 8001eea:	4413      	add	r3, r2
 8001eec:	3338      	adds	r3, #56	; 0x38
 8001eee:	787a      	ldrb	r2, [r7, #1]
 8001ef0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001ef2:	78fb      	ldrb	r3, [r7, #3]
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	212c      	movs	r1, #44	; 0x2c
 8001ef8:	fb01 f303 	mul.w	r3, r1, r3
 8001efc:	4413      	add	r3, r2
 8001efe:	3340      	adds	r3, #64	; 0x40
 8001f00:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001f02:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001f04:	78fb      	ldrb	r3, [r7, #3]
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	212c      	movs	r1, #44	; 0x2c
 8001f0a:	fb01 f303 	mul.w	r3, r1, r3
 8001f0e:	4413      	add	r3, r2
 8001f10:	3339      	adds	r3, #57	; 0x39
 8001f12:	78fa      	ldrb	r2, [r7, #3]
 8001f14:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001f16:	78fb      	ldrb	r3, [r7, #3]
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	212c      	movs	r1, #44	; 0x2c
 8001f1c:	fb01 f303 	mul.w	r3, r1, r3
 8001f20:	4413      	add	r3, r2
 8001f22:	333f      	adds	r3, #63	; 0x3f
 8001f24:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001f28:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001f2a:	78fb      	ldrb	r3, [r7, #3]
 8001f2c:	78ba      	ldrb	r2, [r7, #2]
 8001f2e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f32:	b2d0      	uxtb	r0, r2
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	212c      	movs	r1, #44	; 0x2c
 8001f38:	fb01 f303 	mul.w	r3, r1, r3
 8001f3c:	4413      	add	r3, r2
 8001f3e:	333a      	adds	r3, #58	; 0x3a
 8001f40:	4602      	mov	r2, r0
 8001f42:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001f44:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	da09      	bge.n	8001f60 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001f4c:	78fb      	ldrb	r3, [r7, #3]
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	212c      	movs	r1, #44	; 0x2c
 8001f52:	fb01 f303 	mul.w	r3, r1, r3
 8001f56:	4413      	add	r3, r2
 8001f58:	333b      	adds	r3, #59	; 0x3b
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	701a      	strb	r2, [r3, #0]
 8001f5e:	e008      	b.n	8001f72 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001f60:	78fb      	ldrb	r3, [r7, #3]
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	212c      	movs	r1, #44	; 0x2c
 8001f66:	fb01 f303 	mul.w	r3, r1, r3
 8001f6a:	4413      	add	r3, r2
 8001f6c:	333b      	adds	r3, #59	; 0x3b
 8001f6e:	2200      	movs	r2, #0
 8001f70:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001f72:	78fb      	ldrb	r3, [r7, #3]
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	212c      	movs	r1, #44	; 0x2c
 8001f78:	fb01 f303 	mul.w	r3, r1, r3
 8001f7c:	4413      	add	r3, r2
 8001f7e:	333c      	adds	r3, #60	; 0x3c
 8001f80:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001f84:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6818      	ldr	r0, [r3, #0]
 8001f8a:	787c      	ldrb	r4, [r7, #1]
 8001f8c:	78ba      	ldrb	r2, [r7, #2]
 8001f8e:	78f9      	ldrb	r1, [r7, #3]
 8001f90:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001f92:	9302      	str	r3, [sp, #8]
 8001f94:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001f98:	9301      	str	r3, [sp, #4]
 8001f9a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	4623      	mov	r3, r4
 8001fa2:	f003 fc67 	bl	8005874 <USB_HC_Init>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3714      	adds	r7, #20
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd90      	pop	{r4, r7, pc}

08001fbc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d101      	bne.n	8001fda <HAL_HCD_HC_Halt+0x1e>
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	e00f      	b.n	8001ffa <HAL_HCD_HC_Halt+0x3e>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	78fa      	ldrb	r2, [r7, #3]
 8001fe8:	4611      	mov	r1, r2
 8001fea:	4618      	mov	r0, r3
 8001fec:	f003 feb7 	bl	8005d5e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
	...

08002004 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	4608      	mov	r0, r1
 800200e:	4611      	mov	r1, r2
 8002010:	461a      	mov	r2, r3
 8002012:	4603      	mov	r3, r0
 8002014:	70fb      	strb	r3, [r7, #3]
 8002016:	460b      	mov	r3, r1
 8002018:	70bb      	strb	r3, [r7, #2]
 800201a:	4613      	mov	r3, r2
 800201c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800201e:	78fb      	ldrb	r3, [r7, #3]
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	212c      	movs	r1, #44	; 0x2c
 8002024:	fb01 f303 	mul.w	r3, r1, r3
 8002028:	4413      	add	r3, r2
 800202a:	333b      	adds	r3, #59	; 0x3b
 800202c:	78ba      	ldrb	r2, [r7, #2]
 800202e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002030:	78fb      	ldrb	r3, [r7, #3]
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	212c      	movs	r1, #44	; 0x2c
 8002036:	fb01 f303 	mul.w	r3, r1, r3
 800203a:	4413      	add	r3, r2
 800203c:	333f      	adds	r3, #63	; 0x3f
 800203e:	787a      	ldrb	r2, [r7, #1]
 8002040:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002042:	7c3b      	ldrb	r3, [r7, #16]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d112      	bne.n	800206e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002048:	78fb      	ldrb	r3, [r7, #3]
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	212c      	movs	r1, #44	; 0x2c
 800204e:	fb01 f303 	mul.w	r3, r1, r3
 8002052:	4413      	add	r3, r2
 8002054:	3342      	adds	r3, #66	; 0x42
 8002056:	2203      	movs	r2, #3
 8002058:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800205a:	78fb      	ldrb	r3, [r7, #3]
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	212c      	movs	r1, #44	; 0x2c
 8002060:	fb01 f303 	mul.w	r3, r1, r3
 8002064:	4413      	add	r3, r2
 8002066:	333d      	adds	r3, #61	; 0x3d
 8002068:	7f3a      	ldrb	r2, [r7, #28]
 800206a:	701a      	strb	r2, [r3, #0]
 800206c:	e008      	b.n	8002080 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800206e:	78fb      	ldrb	r3, [r7, #3]
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	212c      	movs	r1, #44	; 0x2c
 8002074:	fb01 f303 	mul.w	r3, r1, r3
 8002078:	4413      	add	r3, r2
 800207a:	3342      	adds	r3, #66	; 0x42
 800207c:	2202      	movs	r2, #2
 800207e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002080:	787b      	ldrb	r3, [r7, #1]
 8002082:	2b03      	cmp	r3, #3
 8002084:	f200 80c6 	bhi.w	8002214 <HAL_HCD_HC_SubmitRequest+0x210>
 8002088:	a201      	add	r2, pc, #4	; (adr r2, 8002090 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800208a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800208e:	bf00      	nop
 8002090:	080020a1 	.word	0x080020a1
 8002094:	08002201 	.word	0x08002201
 8002098:	08002105 	.word	0x08002105
 800209c:	08002183 	.word	0x08002183
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80020a0:	7c3b      	ldrb	r3, [r7, #16]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	f040 80b8 	bne.w	8002218 <HAL_HCD_HC_SubmitRequest+0x214>
 80020a8:	78bb      	ldrb	r3, [r7, #2]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f040 80b4 	bne.w	8002218 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80020b0:	8b3b      	ldrh	r3, [r7, #24]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d108      	bne.n	80020c8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80020b6:	78fb      	ldrb	r3, [r7, #3]
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	212c      	movs	r1, #44	; 0x2c
 80020bc:	fb01 f303 	mul.w	r3, r1, r3
 80020c0:	4413      	add	r3, r2
 80020c2:	3355      	adds	r3, #85	; 0x55
 80020c4:	2201      	movs	r2, #1
 80020c6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80020c8:	78fb      	ldrb	r3, [r7, #3]
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	212c      	movs	r1, #44	; 0x2c
 80020ce:	fb01 f303 	mul.w	r3, r1, r3
 80020d2:	4413      	add	r3, r2
 80020d4:	3355      	adds	r3, #85	; 0x55
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d109      	bne.n	80020f0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020dc:	78fb      	ldrb	r3, [r7, #3]
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	212c      	movs	r1, #44	; 0x2c
 80020e2:	fb01 f303 	mul.w	r3, r1, r3
 80020e6:	4413      	add	r3, r2
 80020e8:	3342      	adds	r3, #66	; 0x42
 80020ea:	2200      	movs	r2, #0
 80020ec:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80020ee:	e093      	b.n	8002218 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020f0:	78fb      	ldrb	r3, [r7, #3]
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	212c      	movs	r1, #44	; 0x2c
 80020f6:	fb01 f303 	mul.w	r3, r1, r3
 80020fa:	4413      	add	r3, r2
 80020fc:	3342      	adds	r3, #66	; 0x42
 80020fe:	2202      	movs	r2, #2
 8002100:	701a      	strb	r2, [r3, #0]
      break;
 8002102:	e089      	b.n	8002218 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002104:	78bb      	ldrb	r3, [r7, #2]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d11d      	bne.n	8002146 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800210a:	78fb      	ldrb	r3, [r7, #3]
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	212c      	movs	r1, #44	; 0x2c
 8002110:	fb01 f303 	mul.w	r3, r1, r3
 8002114:	4413      	add	r3, r2
 8002116:	3355      	adds	r3, #85	; 0x55
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d109      	bne.n	8002132 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800211e:	78fb      	ldrb	r3, [r7, #3]
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	212c      	movs	r1, #44	; 0x2c
 8002124:	fb01 f303 	mul.w	r3, r1, r3
 8002128:	4413      	add	r3, r2
 800212a:	3342      	adds	r3, #66	; 0x42
 800212c:	2200      	movs	r2, #0
 800212e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002130:	e073      	b.n	800221a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002132:	78fb      	ldrb	r3, [r7, #3]
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	212c      	movs	r1, #44	; 0x2c
 8002138:	fb01 f303 	mul.w	r3, r1, r3
 800213c:	4413      	add	r3, r2
 800213e:	3342      	adds	r3, #66	; 0x42
 8002140:	2202      	movs	r2, #2
 8002142:	701a      	strb	r2, [r3, #0]
      break;
 8002144:	e069      	b.n	800221a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002146:	78fb      	ldrb	r3, [r7, #3]
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	212c      	movs	r1, #44	; 0x2c
 800214c:	fb01 f303 	mul.w	r3, r1, r3
 8002150:	4413      	add	r3, r2
 8002152:	3354      	adds	r3, #84	; 0x54
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d109      	bne.n	800216e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800215a:	78fb      	ldrb	r3, [r7, #3]
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	212c      	movs	r1, #44	; 0x2c
 8002160:	fb01 f303 	mul.w	r3, r1, r3
 8002164:	4413      	add	r3, r2
 8002166:	3342      	adds	r3, #66	; 0x42
 8002168:	2200      	movs	r2, #0
 800216a:	701a      	strb	r2, [r3, #0]
      break;
 800216c:	e055      	b.n	800221a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800216e:	78fb      	ldrb	r3, [r7, #3]
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	212c      	movs	r1, #44	; 0x2c
 8002174:	fb01 f303 	mul.w	r3, r1, r3
 8002178:	4413      	add	r3, r2
 800217a:	3342      	adds	r3, #66	; 0x42
 800217c:	2202      	movs	r2, #2
 800217e:	701a      	strb	r2, [r3, #0]
      break;
 8002180:	e04b      	b.n	800221a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002182:	78bb      	ldrb	r3, [r7, #2]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d11d      	bne.n	80021c4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002188:	78fb      	ldrb	r3, [r7, #3]
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	212c      	movs	r1, #44	; 0x2c
 800218e:	fb01 f303 	mul.w	r3, r1, r3
 8002192:	4413      	add	r3, r2
 8002194:	3355      	adds	r3, #85	; 0x55
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d109      	bne.n	80021b0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800219c:	78fb      	ldrb	r3, [r7, #3]
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	212c      	movs	r1, #44	; 0x2c
 80021a2:	fb01 f303 	mul.w	r3, r1, r3
 80021a6:	4413      	add	r3, r2
 80021a8:	3342      	adds	r3, #66	; 0x42
 80021aa:	2200      	movs	r2, #0
 80021ac:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80021ae:	e034      	b.n	800221a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021b0:	78fb      	ldrb	r3, [r7, #3]
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	212c      	movs	r1, #44	; 0x2c
 80021b6:	fb01 f303 	mul.w	r3, r1, r3
 80021ba:	4413      	add	r3, r2
 80021bc:	3342      	adds	r3, #66	; 0x42
 80021be:	2202      	movs	r2, #2
 80021c0:	701a      	strb	r2, [r3, #0]
      break;
 80021c2:	e02a      	b.n	800221a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80021c4:	78fb      	ldrb	r3, [r7, #3]
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	212c      	movs	r1, #44	; 0x2c
 80021ca:	fb01 f303 	mul.w	r3, r1, r3
 80021ce:	4413      	add	r3, r2
 80021d0:	3354      	adds	r3, #84	; 0x54
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d109      	bne.n	80021ec <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021d8:	78fb      	ldrb	r3, [r7, #3]
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	212c      	movs	r1, #44	; 0x2c
 80021de:	fb01 f303 	mul.w	r3, r1, r3
 80021e2:	4413      	add	r3, r2
 80021e4:	3342      	adds	r3, #66	; 0x42
 80021e6:	2200      	movs	r2, #0
 80021e8:	701a      	strb	r2, [r3, #0]
      break;
 80021ea:	e016      	b.n	800221a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021ec:	78fb      	ldrb	r3, [r7, #3]
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	212c      	movs	r1, #44	; 0x2c
 80021f2:	fb01 f303 	mul.w	r3, r1, r3
 80021f6:	4413      	add	r3, r2
 80021f8:	3342      	adds	r3, #66	; 0x42
 80021fa:	2202      	movs	r2, #2
 80021fc:	701a      	strb	r2, [r3, #0]
      break;
 80021fe:	e00c      	b.n	800221a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002200:	78fb      	ldrb	r3, [r7, #3]
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	212c      	movs	r1, #44	; 0x2c
 8002206:	fb01 f303 	mul.w	r3, r1, r3
 800220a:	4413      	add	r3, r2
 800220c:	3342      	adds	r3, #66	; 0x42
 800220e:	2200      	movs	r2, #0
 8002210:	701a      	strb	r2, [r3, #0]
      break;
 8002212:	e002      	b.n	800221a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002214:	bf00      	nop
 8002216:	e000      	b.n	800221a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002218:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800221a:	78fb      	ldrb	r3, [r7, #3]
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	212c      	movs	r1, #44	; 0x2c
 8002220:	fb01 f303 	mul.w	r3, r1, r3
 8002224:	4413      	add	r3, r2
 8002226:	3344      	adds	r3, #68	; 0x44
 8002228:	697a      	ldr	r2, [r7, #20]
 800222a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800222c:	78fb      	ldrb	r3, [r7, #3]
 800222e:	8b3a      	ldrh	r2, [r7, #24]
 8002230:	6879      	ldr	r1, [r7, #4]
 8002232:	202c      	movs	r0, #44	; 0x2c
 8002234:	fb00 f303 	mul.w	r3, r0, r3
 8002238:	440b      	add	r3, r1
 800223a:	334c      	adds	r3, #76	; 0x4c
 800223c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800223e:	78fb      	ldrb	r3, [r7, #3]
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	212c      	movs	r1, #44	; 0x2c
 8002244:	fb01 f303 	mul.w	r3, r1, r3
 8002248:	4413      	add	r3, r2
 800224a:	3360      	adds	r3, #96	; 0x60
 800224c:	2200      	movs	r2, #0
 800224e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002250:	78fb      	ldrb	r3, [r7, #3]
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	212c      	movs	r1, #44	; 0x2c
 8002256:	fb01 f303 	mul.w	r3, r1, r3
 800225a:	4413      	add	r3, r2
 800225c:	3350      	adds	r3, #80	; 0x50
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002262:	78fb      	ldrb	r3, [r7, #3]
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	212c      	movs	r1, #44	; 0x2c
 8002268:	fb01 f303 	mul.w	r3, r1, r3
 800226c:	4413      	add	r3, r2
 800226e:	3339      	adds	r3, #57	; 0x39
 8002270:	78fa      	ldrb	r2, [r7, #3]
 8002272:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002274:	78fb      	ldrb	r3, [r7, #3]
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	212c      	movs	r1, #44	; 0x2c
 800227a:	fb01 f303 	mul.w	r3, r1, r3
 800227e:	4413      	add	r3, r2
 8002280:	3361      	adds	r3, #97	; 0x61
 8002282:	2200      	movs	r2, #0
 8002284:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6818      	ldr	r0, [r3, #0]
 800228a:	78fb      	ldrb	r3, [r7, #3]
 800228c:	222c      	movs	r2, #44	; 0x2c
 800228e:	fb02 f303 	mul.w	r3, r2, r3
 8002292:	3338      	adds	r3, #56	; 0x38
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	18d1      	adds	r1, r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	b2db      	uxtb	r3, r3
 800229e:	461a      	mov	r2, r3
 80022a0:	f003 fc0a 	bl	8005ab8 <USB_HC_StartXfer>
 80022a4:	4603      	mov	r3, r0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop

080022b0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f003 f90b 	bl	80054e2 <USB_GetMode>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	f040 80f6 	bne.w	80024c0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	f003 f8ef 	bl	80054bc <USB_ReadInterrupts>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 80ec 	beq.w	80024be <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f003 f8e6 	bl	80054bc <USB_ReadInterrupts>
 80022f0:	4603      	mov	r3, r0
 80022f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80022fa:	d104      	bne.n	8002306 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002304:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f003 f8d6 	bl	80054bc <USB_ReadInterrupts>
 8002310:	4603      	mov	r3, r0
 8002312:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002316:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800231a:	d104      	bne.n	8002326 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002324:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f003 f8c6 	bl	80054bc <USB_ReadInterrupts>
 8002330:	4603      	mov	r3, r0
 8002332:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002336:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800233a:	d104      	bne.n	8002346 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002344:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f003 f8b6 	bl	80054bc <USB_ReadInterrupts>
 8002350:	4603      	mov	r3, r0
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b02      	cmp	r3, #2
 8002358:	d103      	bne.n	8002362 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2202      	movs	r2, #2
 8002360:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f003 f8a8 	bl	80054bc <USB_ReadInterrupts>
 800236c:	4603      	mov	r3, r0
 800236e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002372:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002376:	d11c      	bne.n	80023b2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002380:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b00      	cmp	r3, #0
 8002390:	d10f      	bne.n	80023b2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002392:	2110      	movs	r1, #16
 8002394:	6938      	ldr	r0, [r7, #16]
 8002396:	f002 ff97 	bl	80052c8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800239a:	6938      	ldr	r0, [r7, #16]
 800239c:	f002 ffc8 	bl	8005330 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2101      	movs	r1, #1
 80023a6:	4618      	mov	r0, r3
 80023a8:	f003 f99e 	bl	80056e8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f009 fa9f 	bl	800b8f0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f003 f880 	bl	80054bc <USB_ReadInterrupts>
 80023bc:	4603      	mov	r3, r0
 80023be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023c6:	d102      	bne.n	80023ce <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f001 f89e 	bl	800350a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f003 f872 	bl	80054bc <USB_ReadInterrupts>
 80023d8:	4603      	mov	r3, r0
 80023da:	f003 0308 	and.w	r3, r3, #8
 80023de:	2b08      	cmp	r3, #8
 80023e0:	d106      	bne.n	80023f0 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f009 fa68 	bl	800b8b8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2208      	movs	r2, #8
 80023ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f003 f861 	bl	80054bc <USB_ReadInterrupts>
 80023fa:	4603      	mov	r3, r0
 80023fc:	f003 0310 	and.w	r3, r3, #16
 8002400:	2b10      	cmp	r3, #16
 8002402:	d101      	bne.n	8002408 <HAL_HCD_IRQHandler+0x158>
 8002404:	2301      	movs	r3, #1
 8002406:	e000      	b.n	800240a <HAL_HCD_IRQHandler+0x15a>
 8002408:	2300      	movs	r3, #0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d012      	beq.n	8002434 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	699a      	ldr	r2, [r3, #24]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f022 0210 	bic.w	r2, r2, #16
 800241c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 ffa1 	bl	8003366 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	699a      	ldr	r2, [r3, #24]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f042 0210 	orr.w	r2, r2, #16
 8002432:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4618      	mov	r0, r3
 800243a:	f003 f83f 	bl	80054bc <USB_ReadInterrupts>
 800243e:	4603      	mov	r3, r0
 8002440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002444:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002448:	d13a      	bne.n	80024c0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f003 fc74 	bl	8005d3c <USB_HC_ReadInterrupt>
 8002454:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002456:	2300      	movs	r3, #0
 8002458:	617b      	str	r3, [r7, #20]
 800245a:	e025      	b.n	80024a8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	f003 030f 	and.w	r3, r3, #15
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	fa22 f303 	lsr.w	r3, r2, r3
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	2b00      	cmp	r3, #0
 800246e:	d018      	beq.n	80024a2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	015a      	lsls	r2, r3, #5
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4413      	add	r3, r2
 8002478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002482:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002486:	d106      	bne.n	8002496 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	b2db      	uxtb	r3, r3
 800248c:	4619      	mov	r1, r3
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 f8ab 	bl	80025ea <HCD_HC_IN_IRQHandler>
 8002494:	e005      	b.n	80024a2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	b2db      	uxtb	r3, r3
 800249a:	4619      	mov	r1, r3
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f000 fbf9 	bl	8002c94 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	3301      	adds	r3, #1
 80024a6:	617b      	str	r3, [r7, #20]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d3d4      	bcc.n	800245c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024ba:	615a      	str	r2, [r3, #20]
 80024bc:	e000      	b.n	80024c0 <HAL_HCD_IRQHandler+0x210>
      return;
 80024be:	bf00      	nop
    }
  }
}
 80024c0:	3718      	adds	r7, #24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b082      	sub	sp, #8
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d101      	bne.n	80024dc <HAL_HCD_Start+0x16>
 80024d8:	2302      	movs	r3, #2
 80024da:	e013      	b.n	8002504 <HAL_HCD_Start+0x3e>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2101      	movs	r1, #1
 80024ea:	4618      	mov	r0, r3
 80024ec:	f003 f960 	bl	80057b0 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f002 fe78 	bl	80051ea <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3708      	adds	r7, #8
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800251a:	2b01      	cmp	r3, #1
 800251c:	d101      	bne.n	8002522 <HAL_HCD_Stop+0x16>
 800251e:	2302      	movs	r3, #2
 8002520:	e00d      	b.n	800253e <HAL_HCD_Stop+0x32>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f003 fd4e 	bl	8005fd0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b082      	sub	sp, #8
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f003 f902 	bl	800575c <USB_ResetPort>
 8002558:	4603      	mov	r3, r0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002562:	b480      	push	{r7}
 8002564:	b083      	sub	sp, #12
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
 800256a:	460b      	mov	r3, r1
 800256c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800256e:	78fb      	ldrb	r3, [r7, #3]
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	212c      	movs	r1, #44	; 0x2c
 8002574:	fb01 f303 	mul.w	r3, r1, r3
 8002578:	4413      	add	r3, r2
 800257a:	3360      	adds	r3, #96	; 0x60
 800257c:	781b      	ldrb	r3, [r3, #0]
}
 800257e:	4618      	mov	r0, r3
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800258a:	b480      	push	{r7}
 800258c:	b083      	sub	sp, #12
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
 8002592:	460b      	mov	r3, r1
 8002594:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002596:	78fb      	ldrb	r3, [r7, #3]
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	212c      	movs	r1, #44	; 0x2c
 800259c:	fb01 f303 	mul.w	r3, r1, r3
 80025a0:	4413      	add	r3, r2
 80025a2:	3350      	adds	r3, #80	; 0x50
 80025a4:	681b      	ldr	r3, [r3, #0]
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b082      	sub	sp, #8
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f003 f946 	bl	8005850 <USB_GetCurrentFrame>
 80025c4:	4603      	mov	r3, r0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b082      	sub	sp, #8
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f003 f921 	bl	8005822 <USB_GetHostSpeed>
 80025e0:	4603      	mov	r3, r0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b086      	sub	sp, #24
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
 80025f2:	460b      	mov	r3, r1
 80025f4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002600:	78fb      	ldrb	r3, [r7, #3]
 8002602:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	015a      	lsls	r2, r3, #5
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	4413      	add	r3, r2
 800260c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 0304 	and.w	r3, r3, #4
 8002616:	2b04      	cmp	r3, #4
 8002618:	d11a      	bne.n	8002650 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	015a      	lsls	r2, r3, #5
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	4413      	add	r3, r2
 8002622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002626:	461a      	mov	r2, r3
 8002628:	2304      	movs	r3, #4
 800262a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	212c      	movs	r1, #44	; 0x2c
 8002632:	fb01 f303 	mul.w	r3, r1, r3
 8002636:	4413      	add	r3, r2
 8002638:	3361      	adds	r3, #97	; 0x61
 800263a:	2206      	movs	r2, #6
 800263c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	b2d2      	uxtb	r2, r2
 8002646:	4611      	mov	r1, r2
 8002648:	4618      	mov	r0, r3
 800264a:	f003 fb88 	bl	8005d5e <USB_HC_Halt>
 800264e:	e0af      	b.n	80027b0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	015a      	lsls	r2, r3, #5
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	4413      	add	r3, r2
 8002658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002666:	d11b      	bne.n	80026a0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	015a      	lsls	r2, r3, #5
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4413      	add	r3, r2
 8002670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002674:	461a      	mov	r2, r3
 8002676:	f44f 7380 	mov.w	r3, #256	; 0x100
 800267a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	212c      	movs	r1, #44	; 0x2c
 8002682:	fb01 f303 	mul.w	r3, r1, r3
 8002686:	4413      	add	r3, r2
 8002688:	3361      	adds	r3, #97	; 0x61
 800268a:	2207      	movs	r2, #7
 800268c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	4611      	mov	r1, r2
 8002698:	4618      	mov	r0, r3
 800269a:	f003 fb60 	bl	8005d5e <USB_HC_Halt>
 800269e:	e087      	b.n	80027b0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	015a      	lsls	r2, r3, #5
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	4413      	add	r3, r2
 80026a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 0320 	and.w	r3, r3, #32
 80026b2:	2b20      	cmp	r3, #32
 80026b4:	d109      	bne.n	80026ca <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	015a      	lsls	r2, r3, #5
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	4413      	add	r3, r2
 80026be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c2:	461a      	mov	r2, r3
 80026c4:	2320      	movs	r3, #32
 80026c6:	6093      	str	r3, [r2, #8]
 80026c8:	e072      	b.n	80027b0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	015a      	lsls	r2, r3, #5
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	4413      	add	r3, r2
 80026d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f003 0308 	and.w	r3, r3, #8
 80026dc:	2b08      	cmp	r3, #8
 80026de:	d11a      	bne.n	8002716 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	015a      	lsls	r2, r3, #5
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	4413      	add	r3, r2
 80026e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ec:	461a      	mov	r2, r3
 80026ee:	2308      	movs	r3, #8
 80026f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	212c      	movs	r1, #44	; 0x2c
 80026f8:	fb01 f303 	mul.w	r3, r1, r3
 80026fc:	4413      	add	r3, r2
 80026fe:	3361      	adds	r3, #97	; 0x61
 8002700:	2205      	movs	r2, #5
 8002702:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	4611      	mov	r1, r2
 800270e:	4618      	mov	r0, r3
 8002710:	f003 fb25 	bl	8005d5e <USB_HC_Halt>
 8002714:	e04c      	b.n	80027b0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	015a      	lsls	r2, r3, #5
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	4413      	add	r3, r2
 800271e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002728:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800272c:	d11b      	bne.n	8002766 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	015a      	lsls	r2, r3, #5
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	4413      	add	r3, r2
 8002736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800273a:	461a      	mov	r2, r3
 800273c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002740:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	212c      	movs	r1, #44	; 0x2c
 8002748:	fb01 f303 	mul.w	r3, r1, r3
 800274c:	4413      	add	r3, r2
 800274e:	3361      	adds	r3, #97	; 0x61
 8002750:	2208      	movs	r2, #8
 8002752:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68fa      	ldr	r2, [r7, #12]
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	4611      	mov	r1, r2
 800275e:	4618      	mov	r0, r3
 8002760:	f003 fafd 	bl	8005d5e <USB_HC_Halt>
 8002764:	e024      	b.n	80027b0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	015a      	lsls	r2, r3, #5
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4413      	add	r3, r2
 800276e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002778:	2b80      	cmp	r3, #128	; 0x80
 800277a:	d119      	bne.n	80027b0 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	015a      	lsls	r2, r3, #5
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	4413      	add	r3, r2
 8002784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002788:	461a      	mov	r2, r3
 800278a:	2380      	movs	r3, #128	; 0x80
 800278c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	212c      	movs	r1, #44	; 0x2c
 8002794:	fb01 f303 	mul.w	r3, r1, r3
 8002798:	4413      	add	r3, r2
 800279a:	3361      	adds	r3, #97	; 0x61
 800279c:	2206      	movs	r2, #6
 800279e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	b2d2      	uxtb	r2, r2
 80027a8:	4611      	mov	r1, r2
 80027aa:	4618      	mov	r0, r3
 80027ac:	f003 fad7 	bl	8005d5e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	015a      	lsls	r2, r3, #5
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	4413      	add	r3, r2
 80027b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027c6:	d112      	bne.n	80027ee <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	4611      	mov	r1, r2
 80027d2:	4618      	mov	r0, r3
 80027d4:	f003 fac3 	bl	8005d5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	015a      	lsls	r2, r3, #5
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	4413      	add	r3, r2
 80027e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e4:	461a      	mov	r2, r3
 80027e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027ea:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80027ec:	e24e      	b.n	8002c8c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	015a      	lsls	r2, r3, #5
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	4413      	add	r3, r2
 80027f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	2b01      	cmp	r3, #1
 8002802:	f040 80df 	bne.w	80029c4 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d019      	beq.n	8002842 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	212c      	movs	r1, #44	; 0x2c
 8002814:	fb01 f303 	mul.w	r3, r1, r3
 8002818:	4413      	add	r3, r2
 800281a:	3348      	adds	r3, #72	; 0x48
 800281c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	0159      	lsls	r1, r3, #5
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	440b      	add	r3, r1
 8002826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002830:	1ad2      	subs	r2, r2, r3
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	202c      	movs	r0, #44	; 0x2c
 8002838:	fb00 f303 	mul.w	r3, r0, r3
 800283c:	440b      	add	r3, r1
 800283e:	3350      	adds	r3, #80	; 0x50
 8002840:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	212c      	movs	r1, #44	; 0x2c
 8002848:	fb01 f303 	mul.w	r3, r1, r3
 800284c:	4413      	add	r3, r2
 800284e:	3361      	adds	r3, #97	; 0x61
 8002850:	2201      	movs	r2, #1
 8002852:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	212c      	movs	r1, #44	; 0x2c
 800285a:	fb01 f303 	mul.w	r3, r1, r3
 800285e:	4413      	add	r3, r2
 8002860:	335c      	adds	r3, #92	; 0x5c
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	015a      	lsls	r2, r3, #5
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	4413      	add	r3, r2
 800286e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002872:	461a      	mov	r2, r3
 8002874:	2301      	movs	r3, #1
 8002876:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	212c      	movs	r1, #44	; 0x2c
 800287e:	fb01 f303 	mul.w	r3, r1, r3
 8002882:	4413      	add	r3, r2
 8002884:	333f      	adds	r3, #63	; 0x3f
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d009      	beq.n	80028a0 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	212c      	movs	r1, #44	; 0x2c
 8002892:	fb01 f303 	mul.w	r3, r1, r3
 8002896:	4413      	add	r3, r2
 8002898:	333f      	adds	r3, #63	; 0x3f
 800289a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800289c:	2b02      	cmp	r3, #2
 800289e:	d111      	bne.n	80028c4 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	4611      	mov	r1, r2
 80028aa:	4618      	mov	r0, r3
 80028ac:	f003 fa57 	bl	8005d5e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	015a      	lsls	r2, r3, #5
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	4413      	add	r3, r2
 80028b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028bc:	461a      	mov	r2, r3
 80028be:	2310      	movs	r3, #16
 80028c0:	6093      	str	r3, [r2, #8]
 80028c2:	e03a      	b.n	800293a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	212c      	movs	r1, #44	; 0x2c
 80028ca:	fb01 f303 	mul.w	r3, r1, r3
 80028ce:	4413      	add	r3, r2
 80028d0:	333f      	adds	r3, #63	; 0x3f
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	2b03      	cmp	r3, #3
 80028d6:	d009      	beq.n	80028ec <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	212c      	movs	r1, #44	; 0x2c
 80028de:	fb01 f303 	mul.w	r3, r1, r3
 80028e2:	4413      	add	r3, r2
 80028e4:	333f      	adds	r3, #63	; 0x3f
 80028e6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d126      	bne.n	800293a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	015a      	lsls	r2, r3, #5
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	4413      	add	r3, r2
 80028f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	0151      	lsls	r1, r2, #5
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	440a      	add	r2, r1
 8002902:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002906:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800290a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	212c      	movs	r1, #44	; 0x2c
 8002912:	fb01 f303 	mul.w	r3, r1, r3
 8002916:	4413      	add	r3, r2
 8002918:	3360      	adds	r3, #96	; 0x60
 800291a:	2201      	movs	r2, #1
 800291c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	b2d9      	uxtb	r1, r3
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	202c      	movs	r0, #44	; 0x2c
 8002928:	fb00 f303 	mul.w	r3, r0, r3
 800292c:	4413      	add	r3, r2
 800292e:	3360      	adds	r3, #96	; 0x60
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	461a      	mov	r2, r3
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f008 ffe9 	bl	800b90c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d12b      	bne.n	800299a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	212c      	movs	r1, #44	; 0x2c
 8002948:	fb01 f303 	mul.w	r3, r1, r3
 800294c:	4413      	add	r3, r2
 800294e:	3348      	adds	r3, #72	; 0x48
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	202c      	movs	r0, #44	; 0x2c
 8002958:	fb00 f202 	mul.w	r2, r0, r2
 800295c:	440a      	add	r2, r1
 800295e:	3240      	adds	r2, #64	; 0x40
 8002960:	8812      	ldrh	r2, [r2, #0]
 8002962:	fbb3 f3f2 	udiv	r3, r3, r2
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b00      	cmp	r3, #0
 800296c:	f000 818e 	beq.w	8002c8c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	212c      	movs	r1, #44	; 0x2c
 8002976:	fb01 f303 	mul.w	r3, r1, r3
 800297a:	4413      	add	r3, r2
 800297c:	3354      	adds	r3, #84	; 0x54
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	f083 0301 	eor.w	r3, r3, #1
 8002984:	b2d8      	uxtb	r0, r3
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	212c      	movs	r1, #44	; 0x2c
 800298c:	fb01 f303 	mul.w	r3, r1, r3
 8002990:	4413      	add	r3, r2
 8002992:	3354      	adds	r3, #84	; 0x54
 8002994:	4602      	mov	r2, r0
 8002996:	701a      	strb	r2, [r3, #0]
}
 8002998:	e178      	b.n	8002c8c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	212c      	movs	r1, #44	; 0x2c
 80029a0:	fb01 f303 	mul.w	r3, r1, r3
 80029a4:	4413      	add	r3, r2
 80029a6:	3354      	adds	r3, #84	; 0x54
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	f083 0301 	eor.w	r3, r3, #1
 80029ae:	b2d8      	uxtb	r0, r3
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	212c      	movs	r1, #44	; 0x2c
 80029b6:	fb01 f303 	mul.w	r3, r1, r3
 80029ba:	4413      	add	r3, r2
 80029bc:	3354      	adds	r3, #84	; 0x54
 80029be:	4602      	mov	r2, r0
 80029c0:	701a      	strb	r2, [r3, #0]
}
 80029c2:	e163      	b.n	8002c8c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	015a      	lsls	r2, r3, #5
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	4413      	add	r3, r2
 80029cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	f040 80f6 	bne.w	8002bc8 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	212c      	movs	r1, #44	; 0x2c
 80029e2:	fb01 f303 	mul.w	r3, r1, r3
 80029e6:	4413      	add	r3, r2
 80029e8:	3361      	adds	r3, #97	; 0x61
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d109      	bne.n	8002a04 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	212c      	movs	r1, #44	; 0x2c
 80029f6:	fb01 f303 	mul.w	r3, r1, r3
 80029fa:	4413      	add	r3, r2
 80029fc:	3360      	adds	r3, #96	; 0x60
 80029fe:	2201      	movs	r2, #1
 8002a00:	701a      	strb	r2, [r3, #0]
 8002a02:	e0c9      	b.n	8002b98 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	212c      	movs	r1, #44	; 0x2c
 8002a0a:	fb01 f303 	mul.w	r3, r1, r3
 8002a0e:	4413      	add	r3, r2
 8002a10:	3361      	adds	r3, #97	; 0x61
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b05      	cmp	r3, #5
 8002a16:	d109      	bne.n	8002a2c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	212c      	movs	r1, #44	; 0x2c
 8002a1e:	fb01 f303 	mul.w	r3, r1, r3
 8002a22:	4413      	add	r3, r2
 8002a24:	3360      	adds	r3, #96	; 0x60
 8002a26:	2205      	movs	r2, #5
 8002a28:	701a      	strb	r2, [r3, #0]
 8002a2a:	e0b5      	b.n	8002b98 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	212c      	movs	r1, #44	; 0x2c
 8002a32:	fb01 f303 	mul.w	r3, r1, r3
 8002a36:	4413      	add	r3, r2
 8002a38:	3361      	adds	r3, #97	; 0x61
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b06      	cmp	r3, #6
 8002a3e:	d009      	beq.n	8002a54 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	212c      	movs	r1, #44	; 0x2c
 8002a46:	fb01 f303 	mul.w	r3, r1, r3
 8002a4a:	4413      	add	r3, r2
 8002a4c:	3361      	adds	r3, #97	; 0x61
 8002a4e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a50:	2b08      	cmp	r3, #8
 8002a52:	d150      	bne.n	8002af6 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	212c      	movs	r1, #44	; 0x2c
 8002a5a:	fb01 f303 	mul.w	r3, r1, r3
 8002a5e:	4413      	add	r3, r2
 8002a60:	335c      	adds	r3, #92	; 0x5c
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	1c5a      	adds	r2, r3, #1
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	202c      	movs	r0, #44	; 0x2c
 8002a6c:	fb00 f303 	mul.w	r3, r0, r3
 8002a70:	440b      	add	r3, r1
 8002a72:	335c      	adds	r3, #92	; 0x5c
 8002a74:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	212c      	movs	r1, #44	; 0x2c
 8002a7c:	fb01 f303 	mul.w	r3, r1, r3
 8002a80:	4413      	add	r3, r2
 8002a82:	335c      	adds	r3, #92	; 0x5c
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d912      	bls.n	8002ab0 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	212c      	movs	r1, #44	; 0x2c
 8002a90:	fb01 f303 	mul.w	r3, r1, r3
 8002a94:	4413      	add	r3, r2
 8002a96:	335c      	adds	r3, #92	; 0x5c
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	212c      	movs	r1, #44	; 0x2c
 8002aa2:	fb01 f303 	mul.w	r3, r1, r3
 8002aa6:	4413      	add	r3, r2
 8002aa8:	3360      	adds	r3, #96	; 0x60
 8002aaa:	2204      	movs	r2, #4
 8002aac:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002aae:	e073      	b.n	8002b98 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	212c      	movs	r1, #44	; 0x2c
 8002ab6:	fb01 f303 	mul.w	r3, r1, r3
 8002aba:	4413      	add	r3, r2
 8002abc:	3360      	adds	r3, #96	; 0x60
 8002abe:	2202      	movs	r2, #2
 8002ac0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	015a      	lsls	r2, r3, #5
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	4413      	add	r3, r2
 8002aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ad8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ae0:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	015a      	lsls	r2, r3, #5
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	4413      	add	r3, r2
 8002aea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aee:	461a      	mov	r2, r3
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002af4:	e050      	b.n	8002b98 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	212c      	movs	r1, #44	; 0x2c
 8002afc:	fb01 f303 	mul.w	r3, r1, r3
 8002b00:	4413      	add	r3, r2
 8002b02:	3361      	adds	r3, #97	; 0x61
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	2b03      	cmp	r3, #3
 8002b08:	d122      	bne.n	8002b50 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	212c      	movs	r1, #44	; 0x2c
 8002b10:	fb01 f303 	mul.w	r3, r1, r3
 8002b14:	4413      	add	r3, r2
 8002b16:	3360      	adds	r3, #96	; 0x60
 8002b18:	2202      	movs	r2, #2
 8002b1a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	015a      	lsls	r2, r3, #5
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	4413      	add	r3, r2
 8002b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b32:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b3a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	015a      	lsls	r2, r3, #5
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	4413      	add	r3, r2
 8002b44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b48:	461a      	mov	r2, r3
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	6013      	str	r3, [r2, #0]
 8002b4e:	e023      	b.n	8002b98 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	212c      	movs	r1, #44	; 0x2c
 8002b56:	fb01 f303 	mul.w	r3, r1, r3
 8002b5a:	4413      	add	r3, r2
 8002b5c:	3361      	adds	r3, #97	; 0x61
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b07      	cmp	r3, #7
 8002b62:	d119      	bne.n	8002b98 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	212c      	movs	r1, #44	; 0x2c
 8002b6a:	fb01 f303 	mul.w	r3, r1, r3
 8002b6e:	4413      	add	r3, r2
 8002b70:	335c      	adds	r3, #92	; 0x5c
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	1c5a      	adds	r2, r3, #1
 8002b76:	6879      	ldr	r1, [r7, #4]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	202c      	movs	r0, #44	; 0x2c
 8002b7c:	fb00 f303 	mul.w	r3, r0, r3
 8002b80:	440b      	add	r3, r1
 8002b82:	335c      	adds	r3, #92	; 0x5c
 8002b84:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	212c      	movs	r1, #44	; 0x2c
 8002b8c:	fb01 f303 	mul.w	r3, r1, r3
 8002b90:	4413      	add	r3, r2
 8002b92:	3360      	adds	r3, #96	; 0x60
 8002b94:	2204      	movs	r2, #4
 8002b96:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	015a      	lsls	r2, r3, #5
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	b2d9      	uxtb	r1, r3
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	202c      	movs	r0, #44	; 0x2c
 8002bb4:	fb00 f303 	mul.w	r3, r0, r3
 8002bb8:	4413      	add	r3, r2
 8002bba:	3360      	adds	r3, #96	; 0x60
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f008 fea3 	bl	800b90c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002bc6:	e061      	b.n	8002c8c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	015a      	lsls	r2, r3, #5
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	4413      	add	r3, r2
 8002bd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f003 0310 	and.w	r3, r3, #16
 8002bda:	2b10      	cmp	r3, #16
 8002bdc:	d156      	bne.n	8002c8c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	212c      	movs	r1, #44	; 0x2c
 8002be4:	fb01 f303 	mul.w	r3, r1, r3
 8002be8:	4413      	add	r3, r2
 8002bea:	333f      	adds	r3, #63	; 0x3f
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	2b03      	cmp	r3, #3
 8002bf0:	d111      	bne.n	8002c16 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	212c      	movs	r1, #44	; 0x2c
 8002bf8:	fb01 f303 	mul.w	r3, r1, r3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	335c      	adds	r3, #92	; 0x5c
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	4611      	mov	r1, r2
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f003 f8a5 	bl	8005d5e <USB_HC_Halt>
 8002c14:	e031      	b.n	8002c7a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	212c      	movs	r1, #44	; 0x2c
 8002c1c:	fb01 f303 	mul.w	r3, r1, r3
 8002c20:	4413      	add	r3, r2
 8002c22:	333f      	adds	r3, #63	; 0x3f
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d009      	beq.n	8002c3e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	212c      	movs	r1, #44	; 0x2c
 8002c30:	fb01 f303 	mul.w	r3, r1, r3
 8002c34:	4413      	add	r3, r2
 8002c36:	333f      	adds	r3, #63	; 0x3f
 8002c38:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d11d      	bne.n	8002c7a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	212c      	movs	r1, #44	; 0x2c
 8002c44:	fb01 f303 	mul.w	r3, r1, r3
 8002c48:	4413      	add	r3, r2
 8002c4a:	335c      	adds	r3, #92	; 0x5c
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d110      	bne.n	8002c7a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	212c      	movs	r1, #44	; 0x2c
 8002c5e:	fb01 f303 	mul.w	r3, r1, r3
 8002c62:	4413      	add	r3, r2
 8002c64:	3361      	adds	r3, #97	; 0x61
 8002c66:	2203      	movs	r2, #3
 8002c68:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	b2d2      	uxtb	r2, r2
 8002c72:	4611      	mov	r1, r2
 8002c74:	4618      	mov	r0, r3
 8002c76:	f003 f872 	bl	8005d5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	015a      	lsls	r2, r3, #5
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	4413      	add	r3, r2
 8002c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c86:	461a      	mov	r2, r3
 8002c88:	2310      	movs	r3, #16
 8002c8a:	6093      	str	r3, [r2, #8]
}
 8002c8c:	bf00      	nop
 8002c8e:	3718      	adds	r7, #24
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b088      	sub	sp, #32
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002caa:	78fb      	ldrb	r3, [r7, #3]
 8002cac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	015a      	lsls	r2, r3, #5
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	2b04      	cmp	r3, #4
 8002cc2:	d11a      	bne.n	8002cfa <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	015a      	lsls	r2, r3, #5
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	4413      	add	r3, r2
 8002ccc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	2304      	movs	r3, #4
 8002cd4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	212c      	movs	r1, #44	; 0x2c
 8002cdc:	fb01 f303 	mul.w	r3, r1, r3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	3361      	adds	r3, #97	; 0x61
 8002ce4:	2206      	movs	r2, #6
 8002ce6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	697a      	ldr	r2, [r7, #20]
 8002cee:	b2d2      	uxtb	r2, r2
 8002cf0:	4611      	mov	r1, r2
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f003 f833 	bl	8005d5e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002cf8:	e331      	b.n	800335e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	015a      	lsls	r2, r3, #5
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	4413      	add	r3, r2
 8002d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f003 0320 	and.w	r3, r3, #32
 8002d0c:	2b20      	cmp	r3, #32
 8002d0e:	d12e      	bne.n	8002d6e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	015a      	lsls	r2, r3, #5
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	4413      	add	r3, r2
 8002d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	2320      	movs	r3, #32
 8002d20:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	212c      	movs	r1, #44	; 0x2c
 8002d28:	fb01 f303 	mul.w	r3, r1, r3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	333d      	adds	r3, #61	; 0x3d
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	f040 8313 	bne.w	800335e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	212c      	movs	r1, #44	; 0x2c
 8002d3e:	fb01 f303 	mul.w	r3, r1, r3
 8002d42:	4413      	add	r3, r2
 8002d44:	333d      	adds	r3, #61	; 0x3d
 8002d46:	2200      	movs	r2, #0
 8002d48:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	212c      	movs	r1, #44	; 0x2c
 8002d50:	fb01 f303 	mul.w	r3, r1, r3
 8002d54:	4413      	add	r3, r2
 8002d56:	3360      	adds	r3, #96	; 0x60
 8002d58:	2202      	movs	r2, #2
 8002d5a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	697a      	ldr	r2, [r7, #20]
 8002d62:	b2d2      	uxtb	r2, r2
 8002d64:	4611      	mov	r1, r2
 8002d66:	4618      	mov	r0, r3
 8002d68:	f002 fff9 	bl	8005d5e <USB_HC_Halt>
}
 8002d6c:	e2f7      	b.n	800335e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	015a      	lsls	r2, r3, #5
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	4413      	add	r3, r2
 8002d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d84:	d112      	bne.n	8002dac <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	015a      	lsls	r2, r3, #5
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d92:	461a      	mov	r2, r3
 8002d94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d98:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	b2d2      	uxtb	r2, r2
 8002da2:	4611      	mov	r1, r2
 8002da4:	4618      	mov	r0, r3
 8002da6:	f002 ffda 	bl	8005d5e <USB_HC_Halt>
}
 8002daa:	e2d8      	b.n	800335e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	015a      	lsls	r2, r3, #5
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	4413      	add	r3, r2
 8002db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d140      	bne.n	8002e44 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	212c      	movs	r1, #44	; 0x2c
 8002dc8:	fb01 f303 	mul.w	r3, r1, r3
 8002dcc:	4413      	add	r3, r2
 8002dce:	335c      	adds	r3, #92	; 0x5c
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	015a      	lsls	r2, r3, #5
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	4413      	add	r3, r2
 8002ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de6:	2b40      	cmp	r3, #64	; 0x40
 8002de8:	d111      	bne.n	8002e0e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	212c      	movs	r1, #44	; 0x2c
 8002df0:	fb01 f303 	mul.w	r3, r1, r3
 8002df4:	4413      	add	r3, r2
 8002df6:	333d      	adds	r3, #61	; 0x3d
 8002df8:	2201      	movs	r2, #1
 8002dfa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	015a      	lsls	r2, r3, #5
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	4413      	add	r3, r2
 8002e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e08:	461a      	mov	r2, r3
 8002e0a:	2340      	movs	r3, #64	; 0x40
 8002e0c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	015a      	lsls	r2, r3, #5
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	4413      	add	r3, r2
 8002e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	212c      	movs	r1, #44	; 0x2c
 8002e26:	fb01 f303 	mul.w	r3, r1, r3
 8002e2a:	4413      	add	r3, r2
 8002e2c:	3361      	adds	r3, #97	; 0x61
 8002e2e:	2201      	movs	r2, #1
 8002e30:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	b2d2      	uxtb	r2, r2
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f002 ff8e 	bl	8005d5e <USB_HC_Halt>
}
 8002e42:	e28c      	b.n	800335e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	015a      	lsls	r2, r3, #5
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e56:	2b40      	cmp	r3, #64	; 0x40
 8002e58:	d12c      	bne.n	8002eb4 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	212c      	movs	r1, #44	; 0x2c
 8002e60:	fb01 f303 	mul.w	r3, r1, r3
 8002e64:	4413      	add	r3, r2
 8002e66:	3361      	adds	r3, #97	; 0x61
 8002e68:	2204      	movs	r2, #4
 8002e6a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	212c      	movs	r1, #44	; 0x2c
 8002e72:	fb01 f303 	mul.w	r3, r1, r3
 8002e76:	4413      	add	r3, r2
 8002e78:	333d      	adds	r3, #61	; 0x3d
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	212c      	movs	r1, #44	; 0x2c
 8002e84:	fb01 f303 	mul.w	r3, r1, r3
 8002e88:	4413      	add	r3, r2
 8002e8a:	335c      	adds	r3, #92	; 0x5c
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	4611      	mov	r1, r2
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f002 ff5f 	bl	8005d5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	015a      	lsls	r2, r3, #5
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eac:	461a      	mov	r2, r3
 8002eae:	2340      	movs	r3, #64	; 0x40
 8002eb0:	6093      	str	r3, [r2, #8]
}
 8002eb2:	e254      	b.n	800335e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	015a      	lsls	r2, r3, #5
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	4413      	add	r3, r2
 8002ebc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f003 0308 	and.w	r3, r3, #8
 8002ec6:	2b08      	cmp	r3, #8
 8002ec8:	d11a      	bne.n	8002f00 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	015a      	lsls	r2, r3, #5
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	2308      	movs	r3, #8
 8002eda:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	212c      	movs	r1, #44	; 0x2c
 8002ee2:	fb01 f303 	mul.w	r3, r1, r3
 8002ee6:	4413      	add	r3, r2
 8002ee8:	3361      	adds	r3, #97	; 0x61
 8002eea:	2205      	movs	r2, #5
 8002eec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	b2d2      	uxtb	r2, r2
 8002ef6:	4611      	mov	r1, r2
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f002 ff30 	bl	8005d5e <USB_HC_Halt>
}
 8002efe:	e22e      	b.n	800335e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	015a      	lsls	r2, r3, #5
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	4413      	add	r3, r2
 8002f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 0310 	and.w	r3, r3, #16
 8002f12:	2b10      	cmp	r3, #16
 8002f14:	d140      	bne.n	8002f98 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	212c      	movs	r1, #44	; 0x2c
 8002f1c:	fb01 f303 	mul.w	r3, r1, r3
 8002f20:	4413      	add	r3, r2
 8002f22:	335c      	adds	r3, #92	; 0x5c
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	212c      	movs	r1, #44	; 0x2c
 8002f2e:	fb01 f303 	mul.w	r3, r1, r3
 8002f32:	4413      	add	r3, r2
 8002f34:	3361      	adds	r3, #97	; 0x61
 8002f36:	2203      	movs	r2, #3
 8002f38:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	212c      	movs	r1, #44	; 0x2c
 8002f40:	fb01 f303 	mul.w	r3, r1, r3
 8002f44:	4413      	add	r3, r2
 8002f46:	333d      	adds	r3, #61	; 0x3d
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d112      	bne.n	8002f74 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	212c      	movs	r1, #44	; 0x2c
 8002f54:	fb01 f303 	mul.w	r3, r1, r3
 8002f58:	4413      	add	r3, r2
 8002f5a:	333c      	adds	r3, #60	; 0x3c
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d108      	bne.n	8002f74 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	212c      	movs	r1, #44	; 0x2c
 8002f68:	fb01 f303 	mul.w	r3, r1, r3
 8002f6c:	4413      	add	r3, r2
 8002f6e:	333d      	adds	r3, #61	; 0x3d
 8002f70:	2201      	movs	r2, #1
 8002f72:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	b2d2      	uxtb	r2, r2
 8002f7c:	4611      	mov	r1, r2
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f002 feed 	bl	8005d5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	015a      	lsls	r2, r3, #5
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f90:	461a      	mov	r2, r3
 8002f92:	2310      	movs	r3, #16
 8002f94:	6093      	str	r3, [r2, #8]
}
 8002f96:	e1e2      	b.n	800335e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	015a      	lsls	r2, r3, #5
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002faa:	2b80      	cmp	r3, #128	; 0x80
 8002fac:	d164      	bne.n	8003078 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d111      	bne.n	8002fda <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	212c      	movs	r1, #44	; 0x2c
 8002fbc:	fb01 f303 	mul.w	r3, r1, r3
 8002fc0:	4413      	add	r3, r2
 8002fc2:	3361      	adds	r3, #97	; 0x61
 8002fc4:	2206      	movs	r2, #6
 8002fc6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	b2d2      	uxtb	r2, r2
 8002fd0:	4611      	mov	r1, r2
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f002 fec3 	bl	8005d5e <USB_HC_Halt>
 8002fd8:	e044      	b.n	8003064 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	212c      	movs	r1, #44	; 0x2c
 8002fe0:	fb01 f303 	mul.w	r3, r1, r3
 8002fe4:	4413      	add	r3, r2
 8002fe6:	335c      	adds	r3, #92	; 0x5c
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	1c5a      	adds	r2, r3, #1
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	202c      	movs	r0, #44	; 0x2c
 8002ff2:	fb00 f303 	mul.w	r3, r0, r3
 8002ff6:	440b      	add	r3, r1
 8002ff8:	335c      	adds	r3, #92	; 0x5c
 8002ffa:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	212c      	movs	r1, #44	; 0x2c
 8003002:	fb01 f303 	mul.w	r3, r1, r3
 8003006:	4413      	add	r3, r2
 8003008:	335c      	adds	r3, #92	; 0x5c
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2b02      	cmp	r3, #2
 800300e:	d920      	bls.n	8003052 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	212c      	movs	r1, #44	; 0x2c
 8003016:	fb01 f303 	mul.w	r3, r1, r3
 800301a:	4413      	add	r3, r2
 800301c:	335c      	adds	r3, #92	; 0x5c
 800301e:	2200      	movs	r2, #0
 8003020:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	212c      	movs	r1, #44	; 0x2c
 8003028:	fb01 f303 	mul.w	r3, r1, r3
 800302c:	4413      	add	r3, r2
 800302e:	3360      	adds	r3, #96	; 0x60
 8003030:	2204      	movs	r2, #4
 8003032:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	b2d9      	uxtb	r1, r3
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	202c      	movs	r0, #44	; 0x2c
 800303e:	fb00 f303 	mul.w	r3, r0, r3
 8003042:	4413      	add	r3, r2
 8003044:	3360      	adds	r3, #96	; 0x60
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	461a      	mov	r2, r3
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f008 fc5e 	bl	800b90c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003050:	e008      	b.n	8003064 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	212c      	movs	r1, #44	; 0x2c
 8003058:	fb01 f303 	mul.w	r3, r1, r3
 800305c:	4413      	add	r3, r2
 800305e:	3360      	adds	r3, #96	; 0x60
 8003060:	2202      	movs	r2, #2
 8003062:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	015a      	lsls	r2, r3, #5
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	4413      	add	r3, r2
 800306c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003070:	461a      	mov	r2, r3
 8003072:	2380      	movs	r3, #128	; 0x80
 8003074:	6093      	str	r3, [r2, #8]
}
 8003076:	e172      	b.n	800335e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	015a      	lsls	r2, r3, #5
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	4413      	add	r3, r2
 8003080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800308a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800308e:	d11b      	bne.n	80030c8 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	212c      	movs	r1, #44	; 0x2c
 8003096:	fb01 f303 	mul.w	r3, r1, r3
 800309a:	4413      	add	r3, r2
 800309c:	3361      	adds	r3, #97	; 0x61
 800309e:	2208      	movs	r2, #8
 80030a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	4611      	mov	r1, r2
 80030ac:	4618      	mov	r0, r3
 80030ae:	f002 fe56 	bl	8005d5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	015a      	lsls	r2, r3, #5
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	4413      	add	r3, r2
 80030ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030be:	461a      	mov	r2, r3
 80030c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030c4:	6093      	str	r3, [r2, #8]
}
 80030c6:	e14a      	b.n	800335e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	015a      	lsls	r2, r3, #5
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	4413      	add	r3, r2
 80030d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b02      	cmp	r3, #2
 80030dc:	f040 813f 	bne.w	800335e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	212c      	movs	r1, #44	; 0x2c
 80030e6:	fb01 f303 	mul.w	r3, r1, r3
 80030ea:	4413      	add	r3, r2
 80030ec:	3361      	adds	r3, #97	; 0x61
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d17d      	bne.n	80031f0 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	212c      	movs	r1, #44	; 0x2c
 80030fa:	fb01 f303 	mul.w	r3, r1, r3
 80030fe:	4413      	add	r3, r2
 8003100:	3360      	adds	r3, #96	; 0x60
 8003102:	2201      	movs	r2, #1
 8003104:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	212c      	movs	r1, #44	; 0x2c
 800310c:	fb01 f303 	mul.w	r3, r1, r3
 8003110:	4413      	add	r3, r2
 8003112:	333f      	adds	r3, #63	; 0x3f
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	2b02      	cmp	r3, #2
 8003118:	d00a      	beq.n	8003130 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	212c      	movs	r1, #44	; 0x2c
 8003120:	fb01 f303 	mul.w	r3, r1, r3
 8003124:	4413      	add	r3, r2
 8003126:	333f      	adds	r3, #63	; 0x3f
 8003128:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800312a:	2b03      	cmp	r3, #3
 800312c:	f040 8100 	bne.w	8003330 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d113      	bne.n	8003160 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	212c      	movs	r1, #44	; 0x2c
 800313e:	fb01 f303 	mul.w	r3, r1, r3
 8003142:	4413      	add	r3, r2
 8003144:	3355      	adds	r3, #85	; 0x55
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	f083 0301 	eor.w	r3, r3, #1
 800314c:	b2d8      	uxtb	r0, r3
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	212c      	movs	r1, #44	; 0x2c
 8003154:	fb01 f303 	mul.w	r3, r1, r3
 8003158:	4413      	add	r3, r2
 800315a:	3355      	adds	r3, #85	; 0x55
 800315c:	4602      	mov	r2, r0
 800315e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	2b01      	cmp	r3, #1
 8003166:	f040 80e3 	bne.w	8003330 <HCD_HC_OUT_IRQHandler+0x69c>
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	212c      	movs	r1, #44	; 0x2c
 8003170:	fb01 f303 	mul.w	r3, r1, r3
 8003174:	4413      	add	r3, r2
 8003176:	334c      	adds	r3, #76	; 0x4c
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	f000 80d8 	beq.w	8003330 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	212c      	movs	r1, #44	; 0x2c
 8003186:	fb01 f303 	mul.w	r3, r1, r3
 800318a:	4413      	add	r3, r2
 800318c:	334c      	adds	r3, #76	; 0x4c
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	202c      	movs	r0, #44	; 0x2c
 8003196:	fb00 f202 	mul.w	r2, r0, r2
 800319a:	440a      	add	r2, r1
 800319c:	3240      	adds	r2, #64	; 0x40
 800319e:	8812      	ldrh	r2, [r2, #0]
 80031a0:	4413      	add	r3, r2
 80031a2:	3b01      	subs	r3, #1
 80031a4:	6879      	ldr	r1, [r7, #4]
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	202c      	movs	r0, #44	; 0x2c
 80031aa:	fb00 f202 	mul.w	r2, r0, r2
 80031ae:	440a      	add	r2, r1
 80031b0:	3240      	adds	r2, #64	; 0x40
 80031b2:	8812      	ldrh	r2, [r2, #0]
 80031b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80031b8:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 80b5 	beq.w	8003330 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	212c      	movs	r1, #44	; 0x2c
 80031cc:	fb01 f303 	mul.w	r3, r1, r3
 80031d0:	4413      	add	r3, r2
 80031d2:	3355      	adds	r3, #85	; 0x55
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	f083 0301 	eor.w	r3, r3, #1
 80031da:	b2d8      	uxtb	r0, r3
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	212c      	movs	r1, #44	; 0x2c
 80031e2:	fb01 f303 	mul.w	r3, r1, r3
 80031e6:	4413      	add	r3, r2
 80031e8:	3355      	adds	r3, #85	; 0x55
 80031ea:	4602      	mov	r2, r0
 80031ec:	701a      	strb	r2, [r3, #0]
 80031ee:	e09f      	b.n	8003330 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	212c      	movs	r1, #44	; 0x2c
 80031f6:	fb01 f303 	mul.w	r3, r1, r3
 80031fa:	4413      	add	r3, r2
 80031fc:	3361      	adds	r3, #97	; 0x61
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	2b03      	cmp	r3, #3
 8003202:	d109      	bne.n	8003218 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	212c      	movs	r1, #44	; 0x2c
 800320a:	fb01 f303 	mul.w	r3, r1, r3
 800320e:	4413      	add	r3, r2
 8003210:	3360      	adds	r3, #96	; 0x60
 8003212:	2202      	movs	r2, #2
 8003214:	701a      	strb	r2, [r3, #0]
 8003216:	e08b      	b.n	8003330 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	212c      	movs	r1, #44	; 0x2c
 800321e:	fb01 f303 	mul.w	r3, r1, r3
 8003222:	4413      	add	r3, r2
 8003224:	3361      	adds	r3, #97	; 0x61
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	2b04      	cmp	r3, #4
 800322a:	d109      	bne.n	8003240 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	212c      	movs	r1, #44	; 0x2c
 8003232:	fb01 f303 	mul.w	r3, r1, r3
 8003236:	4413      	add	r3, r2
 8003238:	3360      	adds	r3, #96	; 0x60
 800323a:	2202      	movs	r2, #2
 800323c:	701a      	strb	r2, [r3, #0]
 800323e:	e077      	b.n	8003330 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	212c      	movs	r1, #44	; 0x2c
 8003246:	fb01 f303 	mul.w	r3, r1, r3
 800324a:	4413      	add	r3, r2
 800324c:	3361      	adds	r3, #97	; 0x61
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	2b05      	cmp	r3, #5
 8003252:	d109      	bne.n	8003268 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	212c      	movs	r1, #44	; 0x2c
 800325a:	fb01 f303 	mul.w	r3, r1, r3
 800325e:	4413      	add	r3, r2
 8003260:	3360      	adds	r3, #96	; 0x60
 8003262:	2205      	movs	r2, #5
 8003264:	701a      	strb	r2, [r3, #0]
 8003266:	e063      	b.n	8003330 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	212c      	movs	r1, #44	; 0x2c
 800326e:	fb01 f303 	mul.w	r3, r1, r3
 8003272:	4413      	add	r3, r2
 8003274:	3361      	adds	r3, #97	; 0x61
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	2b06      	cmp	r3, #6
 800327a:	d009      	beq.n	8003290 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	212c      	movs	r1, #44	; 0x2c
 8003282:	fb01 f303 	mul.w	r3, r1, r3
 8003286:	4413      	add	r3, r2
 8003288:	3361      	adds	r3, #97	; 0x61
 800328a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800328c:	2b08      	cmp	r3, #8
 800328e:	d14f      	bne.n	8003330 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	212c      	movs	r1, #44	; 0x2c
 8003296:	fb01 f303 	mul.w	r3, r1, r3
 800329a:	4413      	add	r3, r2
 800329c:	335c      	adds	r3, #92	; 0x5c
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	1c5a      	adds	r2, r3, #1
 80032a2:	6879      	ldr	r1, [r7, #4]
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	202c      	movs	r0, #44	; 0x2c
 80032a8:	fb00 f303 	mul.w	r3, r0, r3
 80032ac:	440b      	add	r3, r1
 80032ae:	335c      	adds	r3, #92	; 0x5c
 80032b0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	212c      	movs	r1, #44	; 0x2c
 80032b8:	fb01 f303 	mul.w	r3, r1, r3
 80032bc:	4413      	add	r3, r2
 80032be:	335c      	adds	r3, #92	; 0x5c
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d912      	bls.n	80032ec <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	212c      	movs	r1, #44	; 0x2c
 80032cc:	fb01 f303 	mul.w	r3, r1, r3
 80032d0:	4413      	add	r3, r2
 80032d2:	335c      	adds	r3, #92	; 0x5c
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	212c      	movs	r1, #44	; 0x2c
 80032de:	fb01 f303 	mul.w	r3, r1, r3
 80032e2:	4413      	add	r3, r2
 80032e4:	3360      	adds	r3, #96	; 0x60
 80032e6:	2204      	movs	r2, #4
 80032e8:	701a      	strb	r2, [r3, #0]
 80032ea:	e021      	b.n	8003330 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	212c      	movs	r1, #44	; 0x2c
 80032f2:	fb01 f303 	mul.w	r3, r1, r3
 80032f6:	4413      	add	r3, r2
 80032f8:	3360      	adds	r3, #96	; 0x60
 80032fa:	2202      	movs	r2, #2
 80032fc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	015a      	lsls	r2, r3, #5
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	4413      	add	r3, r2
 8003306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003314:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800331c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	015a      	lsls	r2, r3, #5
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	4413      	add	r3, r2
 8003326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800332a:	461a      	mov	r2, r3
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	015a      	lsls	r2, r3, #5
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	4413      	add	r3, r2
 8003338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800333c:	461a      	mov	r2, r3
 800333e:	2302      	movs	r3, #2
 8003340:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	b2d9      	uxtb	r1, r3
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	202c      	movs	r0, #44	; 0x2c
 800334c:	fb00 f303 	mul.w	r3, r0, r3
 8003350:	4413      	add	r3, r2
 8003352:	3360      	adds	r3, #96	; 0x60
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	461a      	mov	r2, r3
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f008 fad7 	bl	800b90c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800335e:	bf00      	nop
 8003360:	3720      	adds	r7, #32
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b08a      	sub	sp, #40	; 0x28
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003376:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	f003 030f 	and.w	r3, r3, #15
 8003386:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	0c5b      	lsrs	r3, r3, #17
 800338c:	f003 030f 	and.w	r3, r3, #15
 8003390:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	091b      	lsrs	r3, r3, #4
 8003396:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800339a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d004      	beq.n	80033ac <HCD_RXQLVL_IRQHandler+0x46>
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	2b05      	cmp	r3, #5
 80033a6:	f000 80a9 	beq.w	80034fc <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80033aa:	e0aa      	b.n	8003502 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f000 80a6 	beq.w	8003500 <HCD_RXQLVL_IRQHandler+0x19a>
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	212c      	movs	r1, #44	; 0x2c
 80033ba:	fb01 f303 	mul.w	r3, r1, r3
 80033be:	4413      	add	r3, r2
 80033c0:	3344      	adds	r3, #68	; 0x44
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 809b 	beq.w	8003500 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	212c      	movs	r1, #44	; 0x2c
 80033d0:	fb01 f303 	mul.w	r3, r1, r3
 80033d4:	4413      	add	r3, r2
 80033d6:	3350      	adds	r3, #80	; 0x50
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	441a      	add	r2, r3
 80033de:	6879      	ldr	r1, [r7, #4]
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	202c      	movs	r0, #44	; 0x2c
 80033e4:	fb00 f303 	mul.w	r3, r0, r3
 80033e8:	440b      	add	r3, r1
 80033ea:	334c      	adds	r3, #76	; 0x4c
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d87a      	bhi.n	80034e8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6818      	ldr	r0, [r3, #0]
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	212c      	movs	r1, #44	; 0x2c
 80033fc:	fb01 f303 	mul.w	r3, r1, r3
 8003400:	4413      	add	r3, r2
 8003402:	3344      	adds	r3, #68	; 0x44
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	b292      	uxth	r2, r2
 800340a:	4619      	mov	r1, r3
 800340c:	f001 fffe 	bl	800540c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	212c      	movs	r1, #44	; 0x2c
 8003416:	fb01 f303 	mul.w	r3, r1, r3
 800341a:	4413      	add	r3, r2
 800341c:	3344      	adds	r3, #68	; 0x44
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	441a      	add	r2, r3
 8003424:	6879      	ldr	r1, [r7, #4]
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	202c      	movs	r0, #44	; 0x2c
 800342a:	fb00 f303 	mul.w	r3, r0, r3
 800342e:	440b      	add	r3, r1
 8003430:	3344      	adds	r3, #68	; 0x44
 8003432:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	212c      	movs	r1, #44	; 0x2c
 800343a:	fb01 f303 	mul.w	r3, r1, r3
 800343e:	4413      	add	r3, r2
 8003440:	3350      	adds	r3, #80	; 0x50
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	441a      	add	r2, r3
 8003448:	6879      	ldr	r1, [r7, #4]
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	202c      	movs	r0, #44	; 0x2c
 800344e:	fb00 f303 	mul.w	r3, r0, r3
 8003452:	440b      	add	r3, r1
 8003454:	3350      	adds	r3, #80	; 0x50
 8003456:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	015a      	lsls	r2, r3, #5
 800345c:	6a3b      	ldr	r3, [r7, #32]
 800345e:	4413      	add	r3, r2
 8003460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	0cdb      	lsrs	r3, r3, #19
 8003468:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800346c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	212c      	movs	r1, #44	; 0x2c
 8003474:	fb01 f303 	mul.w	r3, r1, r3
 8003478:	4413      	add	r3, r2
 800347a:	3340      	adds	r3, #64	; 0x40
 800347c:	881b      	ldrh	r3, [r3, #0]
 800347e:	461a      	mov	r2, r3
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	4293      	cmp	r3, r2
 8003484:	d13c      	bne.n	8003500 <HCD_RXQLVL_IRQHandler+0x19a>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d039      	beq.n	8003500 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	015a      	lsls	r2, r3, #5
 8003490:	6a3b      	ldr	r3, [r7, #32]
 8003492:	4413      	add	r3, r2
 8003494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80034a2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80034aa:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	015a      	lsls	r2, r3, #5
 80034b0:	6a3b      	ldr	r3, [r7, #32]
 80034b2:	4413      	add	r3, r2
 80034b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034b8:	461a      	mov	r2, r3
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	212c      	movs	r1, #44	; 0x2c
 80034c4:	fb01 f303 	mul.w	r3, r1, r3
 80034c8:	4413      	add	r3, r2
 80034ca:	3354      	adds	r3, #84	; 0x54
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	f083 0301 	eor.w	r3, r3, #1
 80034d2:	b2d8      	uxtb	r0, r3
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	212c      	movs	r1, #44	; 0x2c
 80034da:	fb01 f303 	mul.w	r3, r1, r3
 80034de:	4413      	add	r3, r2
 80034e0:	3354      	adds	r3, #84	; 0x54
 80034e2:	4602      	mov	r2, r0
 80034e4:	701a      	strb	r2, [r3, #0]
      break;
 80034e6:	e00b      	b.n	8003500 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	212c      	movs	r1, #44	; 0x2c
 80034ee:	fb01 f303 	mul.w	r3, r1, r3
 80034f2:	4413      	add	r3, r2
 80034f4:	3360      	adds	r3, #96	; 0x60
 80034f6:	2204      	movs	r2, #4
 80034f8:	701a      	strb	r2, [r3, #0]
      break;
 80034fa:	e001      	b.n	8003500 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80034fc:	bf00      	nop
 80034fe:	e000      	b.n	8003502 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003500:	bf00      	nop
  }
}
 8003502:	bf00      	nop
 8003504:	3728      	adds	r7, #40	; 0x28
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b086      	sub	sp, #24
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003536:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b02      	cmp	r3, #2
 8003540:	d10b      	bne.n	800355a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	2b01      	cmp	r3, #1
 800354a:	d102      	bne.n	8003552 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f008 f9c1 	bl	800b8d4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	f043 0302 	orr.w	r3, r3, #2
 8003558:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f003 0308 	and.w	r3, r3, #8
 8003560:	2b08      	cmp	r3, #8
 8003562:	d132      	bne.n	80035ca <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	f043 0308 	orr.w	r3, r3, #8
 800356a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f003 0304 	and.w	r3, r3, #4
 8003572:	2b04      	cmp	r3, #4
 8003574:	d126      	bne.n	80035c4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	2b02      	cmp	r3, #2
 800357c:	d113      	bne.n	80035a6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003584:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003588:	d106      	bne.n	8003598 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2102      	movs	r1, #2
 8003590:	4618      	mov	r0, r3
 8003592:	f002 f8a9 	bl	80056e8 <USB_InitFSLSPClkSel>
 8003596:	e011      	b.n	80035bc <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2101      	movs	r1, #1
 800359e:	4618      	mov	r0, r3
 80035a0:	f002 f8a2 	bl	80056e8 <USB_InitFSLSPClkSel>
 80035a4:	e00a      	b.n	80035bc <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d106      	bne.n	80035bc <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035b4:	461a      	mov	r2, r3
 80035b6:	f64e 2360 	movw	r3, #60000	; 0xea60
 80035ba:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f008 f9b7 	bl	800b930 <HAL_HCD_PortEnabled_Callback>
 80035c2:	e002      	b.n	80035ca <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f008 f9c1 	bl	800b94c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f003 0320 	and.w	r3, r3, #32
 80035d0:	2b20      	cmp	r3, #32
 80035d2:	d103      	bne.n	80035dc <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	f043 0320 	orr.w	r3, r3, #32
 80035da:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80035e2:	461a      	mov	r2, r3
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	6013      	str	r3, [r2, #0]
}
 80035e8:	bf00      	nop
 80035ea:	3718      	adds	r7, #24
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d101      	bne.n	8003602 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e12b      	b.n	800385a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d106      	bne.n	800361c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7fd fe7e 	bl	8001318 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2224      	movs	r2, #36	; 0x24
 8003620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 0201 	bic.w	r2, r2, #1
 8003632:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003642:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003652:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003654:	f001 fa20 	bl	8004a98 <HAL_RCC_GetPCLK1Freq>
 8003658:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	4a81      	ldr	r2, [pc, #516]	; (8003864 <HAL_I2C_Init+0x274>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d807      	bhi.n	8003674 <HAL_I2C_Init+0x84>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	4a80      	ldr	r2, [pc, #512]	; (8003868 <HAL_I2C_Init+0x278>)
 8003668:	4293      	cmp	r3, r2
 800366a:	bf94      	ite	ls
 800366c:	2301      	movls	r3, #1
 800366e:	2300      	movhi	r3, #0
 8003670:	b2db      	uxtb	r3, r3
 8003672:	e006      	b.n	8003682 <HAL_I2C_Init+0x92>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	4a7d      	ldr	r2, [pc, #500]	; (800386c <HAL_I2C_Init+0x27c>)
 8003678:	4293      	cmp	r3, r2
 800367a:	bf94      	ite	ls
 800367c:	2301      	movls	r3, #1
 800367e:	2300      	movhi	r3, #0
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e0e7      	b.n	800385a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	4a78      	ldr	r2, [pc, #480]	; (8003870 <HAL_I2C_Init+0x280>)
 800368e:	fba2 2303 	umull	r2, r3, r2, r3
 8003692:	0c9b      	lsrs	r3, r3, #18
 8003694:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68ba      	ldr	r2, [r7, #8]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	4a6a      	ldr	r2, [pc, #424]	; (8003864 <HAL_I2C_Init+0x274>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d802      	bhi.n	80036c4 <HAL_I2C_Init+0xd4>
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	3301      	adds	r3, #1
 80036c2:	e009      	b.n	80036d8 <HAL_I2C_Init+0xe8>
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80036ca:	fb02 f303 	mul.w	r3, r2, r3
 80036ce:	4a69      	ldr	r2, [pc, #420]	; (8003874 <HAL_I2C_Init+0x284>)
 80036d0:	fba2 2303 	umull	r2, r3, r2, r3
 80036d4:	099b      	lsrs	r3, r3, #6
 80036d6:	3301      	adds	r3, #1
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	6812      	ldr	r2, [r2, #0]
 80036dc:	430b      	orrs	r3, r1
 80036de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80036ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	495c      	ldr	r1, [pc, #368]	; (8003864 <HAL_I2C_Init+0x274>)
 80036f4:	428b      	cmp	r3, r1
 80036f6:	d819      	bhi.n	800372c <HAL_I2C_Init+0x13c>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	1e59      	subs	r1, r3, #1
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	fbb1 f3f3 	udiv	r3, r1, r3
 8003706:	1c59      	adds	r1, r3, #1
 8003708:	f640 73fc 	movw	r3, #4092	; 0xffc
 800370c:	400b      	ands	r3, r1
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00a      	beq.n	8003728 <HAL_I2C_Init+0x138>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	1e59      	subs	r1, r3, #1
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003720:	3301      	adds	r3, #1
 8003722:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003726:	e051      	b.n	80037cc <HAL_I2C_Init+0x1dc>
 8003728:	2304      	movs	r3, #4
 800372a:	e04f      	b.n	80037cc <HAL_I2C_Init+0x1dc>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d111      	bne.n	8003758 <HAL_I2C_Init+0x168>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	1e58      	subs	r0, r3, #1
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6859      	ldr	r1, [r3, #4]
 800373c:	460b      	mov	r3, r1
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	440b      	add	r3, r1
 8003742:	fbb0 f3f3 	udiv	r3, r0, r3
 8003746:	3301      	adds	r3, #1
 8003748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800374c:	2b00      	cmp	r3, #0
 800374e:	bf0c      	ite	eq
 8003750:	2301      	moveq	r3, #1
 8003752:	2300      	movne	r3, #0
 8003754:	b2db      	uxtb	r3, r3
 8003756:	e012      	b.n	800377e <HAL_I2C_Init+0x18e>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	1e58      	subs	r0, r3, #1
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6859      	ldr	r1, [r3, #4]
 8003760:	460b      	mov	r3, r1
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	440b      	add	r3, r1
 8003766:	0099      	lsls	r1, r3, #2
 8003768:	440b      	add	r3, r1
 800376a:	fbb0 f3f3 	udiv	r3, r0, r3
 800376e:	3301      	adds	r3, #1
 8003770:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003774:	2b00      	cmp	r3, #0
 8003776:	bf0c      	ite	eq
 8003778:	2301      	moveq	r3, #1
 800377a:	2300      	movne	r3, #0
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <HAL_I2C_Init+0x196>
 8003782:	2301      	movs	r3, #1
 8003784:	e022      	b.n	80037cc <HAL_I2C_Init+0x1dc>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10e      	bne.n	80037ac <HAL_I2C_Init+0x1bc>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	1e58      	subs	r0, r3, #1
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6859      	ldr	r1, [r3, #4]
 8003796:	460b      	mov	r3, r1
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	440b      	add	r3, r1
 800379c:	fbb0 f3f3 	udiv	r3, r0, r3
 80037a0:	3301      	adds	r3, #1
 80037a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037aa:	e00f      	b.n	80037cc <HAL_I2C_Init+0x1dc>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	1e58      	subs	r0, r3, #1
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6859      	ldr	r1, [r3, #4]
 80037b4:	460b      	mov	r3, r1
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	440b      	add	r3, r1
 80037ba:	0099      	lsls	r1, r3, #2
 80037bc:	440b      	add	r3, r1
 80037be:	fbb0 f3f3 	udiv	r3, r0, r3
 80037c2:	3301      	adds	r3, #1
 80037c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037cc:	6879      	ldr	r1, [r7, #4]
 80037ce:	6809      	ldr	r1, [r1, #0]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	69da      	ldr	r2, [r3, #28]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	431a      	orrs	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80037fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	6911      	ldr	r1, [r2, #16]
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	68d2      	ldr	r2, [r2, #12]
 8003806:	4311      	orrs	r1, r2
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	6812      	ldr	r2, [r2, #0]
 800380c:	430b      	orrs	r3, r1
 800380e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	695a      	ldr	r2, [r3, #20]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	431a      	orrs	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	430a      	orrs	r2, r1
 800382a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f042 0201 	orr.w	r2, r2, #1
 800383a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2220      	movs	r2, #32
 8003846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	000186a0 	.word	0x000186a0
 8003868:	001e847f 	.word	0x001e847f
 800386c:	003d08ff 	.word	0x003d08ff
 8003870:	431bde83 	.word	0x431bde83
 8003874:	10624dd3 	.word	0x10624dd3

08003878 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b088      	sub	sp, #32
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e128      	b.n	8003adc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d109      	bne.n	80038aa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a90      	ldr	r2, [pc, #576]	; (8003ae4 <HAL_I2S_Init+0x26c>)
 80038a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f7fd fd7f 	bl	80013a8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2202      	movs	r2, #2
 80038ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	69db      	ldr	r3, [r3, #28]
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6812      	ldr	r2, [r2, #0]
 80038bc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80038c0:	f023 030f 	bic.w	r3, r3, #15
 80038c4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2202      	movs	r2, #2
 80038cc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d060      	beq.n	8003998 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d102      	bne.n	80038e4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80038de:	2310      	movs	r3, #16
 80038e0:	617b      	str	r3, [r7, #20]
 80038e2:	e001      	b.n	80038e8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80038e4:	2320      	movs	r3, #32
 80038e6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	2b20      	cmp	r3, #32
 80038ee:	d802      	bhi.n	80038f6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	005b      	lsls	r3, r3, #1
 80038f4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80038f6:	2001      	movs	r0, #1
 80038f8:	f001 f9c4 	bl	8004c84 <HAL_RCCEx_GetPeriphCLKFreq>
 80038fc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003906:	d125      	bne.n	8003954 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d010      	beq.n	8003932 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	fbb2 f2f3 	udiv	r2, r2, r3
 800391a:	4613      	mov	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4413      	add	r3, r2
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	461a      	mov	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	fbb2 f3f3 	udiv	r3, r2, r3
 800392c:	3305      	adds	r3, #5
 800392e:	613b      	str	r3, [r7, #16]
 8003930:	e01f      	b.n	8003972 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	fbb2 f2f3 	udiv	r2, r2, r3
 800393c:	4613      	mov	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4413      	add	r3, r2
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	461a      	mov	r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	fbb2 f3f3 	udiv	r3, r2, r3
 800394e:	3305      	adds	r3, #5
 8003950:	613b      	str	r3, [r7, #16]
 8003952:	e00e      	b.n	8003972 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	fbb2 f2f3 	udiv	r2, r2, r3
 800395c:	4613      	mov	r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	4413      	add	r3, r2
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	461a      	mov	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	fbb2 f3f3 	udiv	r3, r2, r3
 800396e:	3305      	adds	r3, #5
 8003970:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	4a5c      	ldr	r2, [pc, #368]	; (8003ae8 <HAL_I2S_Init+0x270>)
 8003976:	fba2 2303 	umull	r2, r3, r2, r3
 800397a:	08db      	lsrs	r3, r3, #3
 800397c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	085b      	lsrs	r3, r3, #1
 800398e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	021b      	lsls	r3, r3, #8
 8003994:	61bb      	str	r3, [r7, #24]
 8003996:	e003      	b.n	80039a0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003998:	2302      	movs	r3, #2
 800399a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800399c:	2300      	movs	r3, #0
 800399e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d902      	bls.n	80039ac <HAL_I2S_Init+0x134>
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	2bff      	cmp	r3, #255	; 0xff
 80039aa:	d907      	bls.n	80039bc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b0:	f043 0210 	orr.w	r2, r3, #16
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e08f      	b.n	8003adc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	691a      	ldr	r2, [r3, #16]
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	ea42 0103 	orr.w	r1, r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	69fa      	ldr	r2, [r7, #28]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80039da:	f023 030f 	bic.w	r3, r3, #15
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	6851      	ldr	r1, [r2, #4]
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	6892      	ldr	r2, [r2, #8]
 80039e6:	4311      	orrs	r1, r2
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	68d2      	ldr	r2, [r2, #12]
 80039ec:	4311      	orrs	r1, r2
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	6992      	ldr	r2, [r2, #24]
 80039f2:	430a      	orrs	r2, r1
 80039f4:	431a      	orrs	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039fe:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d161      	bne.n	8003acc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a38      	ldr	r2, [pc, #224]	; (8003aec <HAL_I2S_Init+0x274>)
 8003a0c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a37      	ldr	r2, [pc, #220]	; (8003af0 <HAL_I2S_Init+0x278>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d101      	bne.n	8003a1c <HAL_I2S_Init+0x1a4>
 8003a18:	4b36      	ldr	r3, [pc, #216]	; (8003af4 <HAL_I2S_Init+0x27c>)
 8003a1a:	e001      	b.n	8003a20 <HAL_I2S_Init+0x1a8>
 8003a1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a20:	69db      	ldr	r3, [r3, #28]
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	6812      	ldr	r2, [r2, #0]
 8003a26:	4932      	ldr	r1, [pc, #200]	; (8003af0 <HAL_I2S_Init+0x278>)
 8003a28:	428a      	cmp	r2, r1
 8003a2a:	d101      	bne.n	8003a30 <HAL_I2S_Init+0x1b8>
 8003a2c:	4a31      	ldr	r2, [pc, #196]	; (8003af4 <HAL_I2S_Init+0x27c>)
 8003a2e:	e001      	b.n	8003a34 <HAL_I2S_Init+0x1bc>
 8003a30:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003a34:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003a38:	f023 030f 	bic.w	r3, r3, #15
 8003a3c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a2b      	ldr	r2, [pc, #172]	; (8003af0 <HAL_I2S_Init+0x278>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d101      	bne.n	8003a4c <HAL_I2S_Init+0x1d4>
 8003a48:	4b2a      	ldr	r3, [pc, #168]	; (8003af4 <HAL_I2S_Init+0x27c>)
 8003a4a:	e001      	b.n	8003a50 <HAL_I2S_Init+0x1d8>
 8003a4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a50:	2202      	movs	r2, #2
 8003a52:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a25      	ldr	r2, [pc, #148]	; (8003af0 <HAL_I2S_Init+0x278>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d101      	bne.n	8003a62 <HAL_I2S_Init+0x1ea>
 8003a5e:	4b25      	ldr	r3, [pc, #148]	; (8003af4 <HAL_I2S_Init+0x27c>)
 8003a60:	e001      	b.n	8003a66 <HAL_I2S_Init+0x1ee>
 8003a62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a66:	69db      	ldr	r3, [r3, #28]
 8003a68:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a72:	d003      	beq.n	8003a7c <HAL_I2S_Init+0x204>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d103      	bne.n	8003a84 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003a7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a80:	613b      	str	r3, [r7, #16]
 8003a82:	e001      	b.n	8003a88 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003a84:	2300      	movs	r3, #0
 8003a86:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003a92:	4313      	orrs	r3, r2
 8003a94:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	897b      	ldrh	r3, [r7, #10]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003ab4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a0d      	ldr	r2, [pc, #52]	; (8003af0 <HAL_I2S_Init+0x278>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d101      	bne.n	8003ac4 <HAL_I2S_Init+0x24c>
 8003ac0:	4b0c      	ldr	r3, [pc, #48]	; (8003af4 <HAL_I2S_Init+0x27c>)
 8003ac2:	e001      	b.n	8003ac8 <HAL_I2S_Init+0x250>
 8003ac4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ac8:	897a      	ldrh	r2, [r7, #10]
 8003aca:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3720      	adds	r7, #32
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	08003bef 	.word	0x08003bef
 8003ae8:	cccccccd 	.word	0xcccccccd
 8003aec:	08003d05 	.word	0x08003d05
 8003af0:	40003800 	.word	0x40003800
 8003af4:	40003400 	.word	0x40003400

08003af8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b40:	881a      	ldrh	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4c:	1c9a      	adds	r2, r3, #2
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d10e      	bne.n	8003b88 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	685a      	ldr	r2, [r3, #4]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b78:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7ff ffb8 	bl	8003af8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003b88:	bf00      	nop
 8003b8a:	3708      	adds	r7, #8
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68da      	ldr	r2, [r3, #12]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba2:	b292      	uxth	r2, r2
 8003ba4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003baa:	1c9a      	adds	r2, r3, #2
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10e      	bne.n	8003be6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	685a      	ldr	r2, [r3, #4]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bd6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f7ff ff93 	bl	8003b0c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003be6:	bf00      	nop
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b086      	sub	sp, #24
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b04      	cmp	r3, #4
 8003c08:	d13a      	bne.n	8003c80 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d109      	bne.n	8003c28 <I2S_IRQHandler+0x3a>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c1e:	2b40      	cmp	r3, #64	; 0x40
 8003c20:	d102      	bne.n	8003c28 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f7ff ffb4 	bl	8003b90 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c2e:	2b40      	cmp	r3, #64	; 0x40
 8003c30:	d126      	bne.n	8003c80 <I2S_IRQHandler+0x92>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f003 0320 	and.w	r3, r3, #32
 8003c3c:	2b20      	cmp	r3, #32
 8003c3e:	d11f      	bne.n	8003c80 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c4e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003c50:	2300      	movs	r3, #0
 8003c52:	613b      	str	r3, [r7, #16]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	613b      	str	r3, [r7, #16]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	613b      	str	r3, [r7, #16]
 8003c64:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c72:	f043 0202 	orr.w	r2, r3, #2
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7ff ff50 	bl	8003b20 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b03      	cmp	r3, #3
 8003c8a:	d136      	bne.n	8003cfa <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d109      	bne.n	8003caa <I2S_IRQHandler+0xbc>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ca0:	2b80      	cmp	r3, #128	; 0x80
 8003ca2:	d102      	bne.n	8003caa <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f7ff ff45 	bl	8003b34 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	f003 0308 	and.w	r3, r3, #8
 8003cb0:	2b08      	cmp	r3, #8
 8003cb2:	d122      	bne.n	8003cfa <I2S_IRQHandler+0x10c>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f003 0320 	and.w	r3, r3, #32
 8003cbe:	2b20      	cmp	r3, #32
 8003cc0:	d11b      	bne.n	8003cfa <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685a      	ldr	r2, [r3, #4]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003cd0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60fb      	str	r3, [r7, #12]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	60fb      	str	r3, [r7, #12]
 8003cde:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cec:	f043 0204 	orr.w	r2, r3, #4
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f7ff ff13 	bl	8003b20 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003cfa:	bf00      	nop
 8003cfc:	3718      	adds	r7, #24
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
	...

08003d04 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b088      	sub	sp, #32
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a92      	ldr	r2, [pc, #584]	; (8003f64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d101      	bne.n	8003d22 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003d1e:	4b92      	ldr	r3, [pc, #584]	; (8003f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d20:	e001      	b.n	8003d26 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003d22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a8b      	ldr	r2, [pc, #556]	; (8003f64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d101      	bne.n	8003d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003d3c:	4b8a      	ldr	r3, [pc, #552]	; (8003f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d3e:	e001      	b.n	8003d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003d40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d50:	d004      	beq.n	8003d5c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f040 8099 	bne.w	8003e8e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d107      	bne.n	8003d76 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d002      	beq.n	8003d76 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 f925 	bl	8003fc0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	f003 0301 	and.w	r3, r3, #1
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d107      	bne.n	8003d90 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d002      	beq.n	8003d90 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 f9c8 	bl	8004120 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d96:	2b40      	cmp	r3, #64	; 0x40
 8003d98:	d13a      	bne.n	8003e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	f003 0320 	and.w	r3, r3, #32
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d035      	beq.n	8003e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a6e      	ldr	r2, [pc, #440]	; (8003f64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d101      	bne.n	8003db2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003dae:	4b6e      	ldr	r3, [pc, #440]	; (8003f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003db0:	e001      	b.n	8003db6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003db2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4969      	ldr	r1, [pc, #420]	; (8003f64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dbe:	428b      	cmp	r3, r1
 8003dc0:	d101      	bne.n	8003dc6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003dc2:	4b69      	ldr	r3, [pc, #420]	; (8003f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003dc4:	e001      	b.n	8003dca <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003dc6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003dce:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685a      	ldr	r2, [r3, #4]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003dde:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003de0:	2300      	movs	r3, #0
 8003de2:	60fb      	str	r3, [r7, #12]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	60fb      	str	r3, [r7, #12]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	60fb      	str	r3, [r7, #12]
 8003df4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e02:	f043 0202 	orr.w	r2, r3, #2
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f7ff fe88 	bl	8003b20 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	f003 0308 	and.w	r3, r3, #8
 8003e16:	2b08      	cmp	r3, #8
 8003e18:	f040 80c3 	bne.w	8003fa2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	f003 0320 	and.w	r3, r3, #32
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f000 80bd 	beq.w	8003fa2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e36:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a49      	ldr	r2, [pc, #292]	; (8003f64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d101      	bne.n	8003e46 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003e42:	4b49      	ldr	r3, [pc, #292]	; (8003f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e44:	e001      	b.n	8003e4a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003e46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e4a:	685a      	ldr	r2, [r3, #4]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4944      	ldr	r1, [pc, #272]	; (8003f64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e52:	428b      	cmp	r3, r1
 8003e54:	d101      	bne.n	8003e5a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003e56:	4b44      	ldr	r3, [pc, #272]	; (8003f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e58:	e001      	b.n	8003e5e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003e5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e5e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e62:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003e64:	2300      	movs	r3, #0
 8003e66:	60bb      	str	r3, [r7, #8]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	60bb      	str	r3, [r7, #8]
 8003e70:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2201      	movs	r2, #1
 8003e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7e:	f043 0204 	orr.w	r2, r3, #4
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f7ff fe4a 	bl	8003b20 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e8c:	e089      	b.n	8003fa2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d107      	bne.n	8003ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d002      	beq.n	8003ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 f8be 	bl	8004024 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d107      	bne.n	8003ec2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d002      	beq.n	8003ec2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 f8fd 	bl	80040bc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec8:	2b40      	cmp	r3, #64	; 0x40
 8003eca:	d12f      	bne.n	8003f2c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	f003 0320 	and.w	r3, r3, #32
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d02a      	beq.n	8003f2c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ee4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a1e      	ldr	r2, [pc, #120]	; (8003f64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d101      	bne.n	8003ef4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003ef0:	4b1d      	ldr	r3, [pc, #116]	; (8003f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ef2:	e001      	b.n	8003ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003ef4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4919      	ldr	r1, [pc, #100]	; (8003f64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f00:	428b      	cmp	r3, r1
 8003f02:	d101      	bne.n	8003f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003f04:	4b18      	ldr	r3, [pc, #96]	; (8003f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f06:	e001      	b.n	8003f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003f08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f0c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f10:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f1e:	f043 0202 	orr.w	r2, r3, #2
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f7ff fdfa 	bl	8003b20 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	f003 0308 	and.w	r3, r3, #8
 8003f32:	2b08      	cmp	r3, #8
 8003f34:	d136      	bne.n	8003fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	f003 0320 	and.w	r3, r3, #32
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d031      	beq.n	8003fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a07      	ldr	r2, [pc, #28]	; (8003f64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d101      	bne.n	8003f4e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003f4a:	4b07      	ldr	r3, [pc, #28]	; (8003f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f4c:	e001      	b.n	8003f52 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003f4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4902      	ldr	r1, [pc, #8]	; (8003f64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f5a:	428b      	cmp	r3, r1
 8003f5c:	d106      	bne.n	8003f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003f5e:	4b02      	ldr	r3, [pc, #8]	; (8003f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f60:	e006      	b.n	8003f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003f62:	bf00      	nop
 8003f64:	40003800 	.word	0x40003800
 8003f68:	40003400 	.word	0x40003400
 8003f6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f70:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f74:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f84:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f92:	f043 0204 	orr.w	r2, r3, #4
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f7ff fdc0 	bl	8003b20 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003fa0:	e000      	b.n	8003fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fa2:	bf00      	nop
}
 8003fa4:	bf00      	nop
 8003fa6:	3720      	adds	r7, #32
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fcc:	1c99      	adds	r1, r3, #2
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	6251      	str	r1, [r2, #36]	; 0x24
 8003fd2:	881a      	ldrh	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d113      	bne.n	800401a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004000:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004006:	b29b      	uxth	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	d106      	bne.n	800401a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f7ff ffc9 	bl	8003fac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800401a:	bf00      	nop
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
	...

08004024 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004030:	1c99      	adds	r1, r3, #2
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	6251      	str	r1, [r2, #36]	; 0x24
 8004036:	8819      	ldrh	r1, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a1d      	ldr	r2, [pc, #116]	; (80040b4 <I2SEx_TxISR_I2SExt+0x90>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d101      	bne.n	8004046 <I2SEx_TxISR_I2SExt+0x22>
 8004042:	4b1d      	ldr	r3, [pc, #116]	; (80040b8 <I2SEx_TxISR_I2SExt+0x94>)
 8004044:	e001      	b.n	800404a <I2SEx_TxISR_I2SExt+0x26>
 8004046:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800404a:	460a      	mov	r2, r1
 800404c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004052:	b29b      	uxth	r3, r3
 8004054:	3b01      	subs	r3, #1
 8004056:	b29a      	uxth	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004060:	b29b      	uxth	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d121      	bne.n	80040aa <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a12      	ldr	r2, [pc, #72]	; (80040b4 <I2SEx_TxISR_I2SExt+0x90>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d101      	bne.n	8004074 <I2SEx_TxISR_I2SExt+0x50>
 8004070:	4b11      	ldr	r3, [pc, #68]	; (80040b8 <I2SEx_TxISR_I2SExt+0x94>)
 8004072:	e001      	b.n	8004078 <I2SEx_TxISR_I2SExt+0x54>
 8004074:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	490d      	ldr	r1, [pc, #52]	; (80040b4 <I2SEx_TxISR_I2SExt+0x90>)
 8004080:	428b      	cmp	r3, r1
 8004082:	d101      	bne.n	8004088 <I2SEx_TxISR_I2SExt+0x64>
 8004084:	4b0c      	ldr	r3, [pc, #48]	; (80040b8 <I2SEx_TxISR_I2SExt+0x94>)
 8004086:	e001      	b.n	800408c <I2SEx_TxISR_I2SExt+0x68>
 8004088:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800408c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004090:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004096:	b29b      	uxth	r3, r3
 8004098:	2b00      	cmp	r3, #0
 800409a:	d106      	bne.n	80040aa <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f7ff ff81 	bl	8003fac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040aa:	bf00      	nop
 80040ac:	3708      	adds	r7, #8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	40003800 	.word	0x40003800
 80040b8:	40003400 	.word	0x40003400

080040bc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68d8      	ldr	r0, [r3, #12]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ce:	1c99      	adds	r1, r3, #2
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80040d4:	b282      	uxth	r2, r0
 80040d6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040dc:	b29b      	uxth	r3, r3
 80040de:	3b01      	subs	r3, #1
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d113      	bne.n	8004118 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040fe:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004104:	b29b      	uxth	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	d106      	bne.n	8004118 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f7ff ff4a 	bl	8003fac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004118:	bf00      	nop
 800411a:	3708      	adds	r7, #8
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a20      	ldr	r2, [pc, #128]	; (80041b0 <I2SEx_RxISR_I2SExt+0x90>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d101      	bne.n	8004136 <I2SEx_RxISR_I2SExt+0x16>
 8004132:	4b20      	ldr	r3, [pc, #128]	; (80041b4 <I2SEx_RxISR_I2SExt+0x94>)
 8004134:	e001      	b.n	800413a <I2SEx_RxISR_I2SExt+0x1a>
 8004136:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800413a:	68d8      	ldr	r0, [r3, #12]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004140:	1c99      	adds	r1, r3, #2
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004146:	b282      	uxth	r2, r0
 8004148:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800414e:	b29b      	uxth	r3, r3
 8004150:	3b01      	subs	r3, #1
 8004152:	b29a      	uxth	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800415c:	b29b      	uxth	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d121      	bne.n	80041a6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a12      	ldr	r2, [pc, #72]	; (80041b0 <I2SEx_RxISR_I2SExt+0x90>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d101      	bne.n	8004170 <I2SEx_RxISR_I2SExt+0x50>
 800416c:	4b11      	ldr	r3, [pc, #68]	; (80041b4 <I2SEx_RxISR_I2SExt+0x94>)
 800416e:	e001      	b.n	8004174 <I2SEx_RxISR_I2SExt+0x54>
 8004170:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004174:	685a      	ldr	r2, [r3, #4]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	490d      	ldr	r1, [pc, #52]	; (80041b0 <I2SEx_RxISR_I2SExt+0x90>)
 800417c:	428b      	cmp	r3, r1
 800417e:	d101      	bne.n	8004184 <I2SEx_RxISR_I2SExt+0x64>
 8004180:	4b0c      	ldr	r3, [pc, #48]	; (80041b4 <I2SEx_RxISR_I2SExt+0x94>)
 8004182:	e001      	b.n	8004188 <I2SEx_RxISR_I2SExt+0x68>
 8004184:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004188:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800418c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004192:	b29b      	uxth	r3, r3
 8004194:	2b00      	cmp	r3, #0
 8004196:	d106      	bne.n	80041a6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7ff ff03 	bl	8003fac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041a6:	bf00      	nop
 80041a8:	3708      	adds	r7, #8
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	40003800 	.word	0x40003800
 80041b4:	40003400 	.word	0x40003400

080041b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d101      	bne.n	80041ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e267      	b.n	800469a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d075      	beq.n	80042c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041d6:	4b88      	ldr	r3, [pc, #544]	; (80043f8 <HAL_RCC_OscConfig+0x240>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f003 030c 	and.w	r3, r3, #12
 80041de:	2b04      	cmp	r3, #4
 80041e0:	d00c      	beq.n	80041fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041e2:	4b85      	ldr	r3, [pc, #532]	; (80043f8 <HAL_RCC_OscConfig+0x240>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041ea:	2b08      	cmp	r3, #8
 80041ec:	d112      	bne.n	8004214 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041ee:	4b82      	ldr	r3, [pc, #520]	; (80043f8 <HAL_RCC_OscConfig+0x240>)
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041fa:	d10b      	bne.n	8004214 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041fc:	4b7e      	ldr	r3, [pc, #504]	; (80043f8 <HAL_RCC_OscConfig+0x240>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d05b      	beq.n	80042c0 <HAL_RCC_OscConfig+0x108>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d157      	bne.n	80042c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e242      	b.n	800469a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800421c:	d106      	bne.n	800422c <HAL_RCC_OscConfig+0x74>
 800421e:	4b76      	ldr	r3, [pc, #472]	; (80043f8 <HAL_RCC_OscConfig+0x240>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a75      	ldr	r2, [pc, #468]	; (80043f8 <HAL_RCC_OscConfig+0x240>)
 8004224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004228:	6013      	str	r3, [r2, #0]
 800422a:	e01d      	b.n	8004268 <HAL_RCC_OscConfig+0xb0>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004234:	d10c      	bne.n	8004250 <HAL_RCC_OscConfig+0x98>
 8004236:	4b70      	ldr	r3, [pc, #448]	; (80043f8 <HAL_RCC_OscConfig+0x240>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a6f      	ldr	r2, [pc, #444]	; (80043f8 <HAL_RCC_OscConfig+0x240>)
 800423c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004240:	6013      	str	r3, [r2, #0]
 8004242:	4b6d      	ldr	r3, [pc, #436]	; (80043f8 <HAL_RCC_OscConfig+0x240>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a6c      	ldr	r2, [pc, #432]	; (80043f8 <HAL_RCC_OscConfig+0x240>)
 8004248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800424c:	6013      	str	r3, [r2, #0]
 800424e:	e00b      	b.n	8004268 <HAL_RCC_OscConfig+0xb0>
 8004250:	4b69      	ldr	r3, [pc, #420]	; (80043f8 <HAL_RCC_OscConfig+0x240>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a68      	ldr	r2, [pc, #416]	; (80043f8 <HAL_RCC_OscConfig+0x240>)
 8004256:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800425a:	6013      	str	r3, [r2, #0]
 800425c:	4b66      	ldr	r3, [pc, #408]	; (80043f8 <HAL_RCC_OscConfig+0x240>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a65      	ldr	r2, [pc, #404]	; (80043f8 <HAL_RCC_OscConfig+0x240>)
 8004262:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004266:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d013      	beq.n	8004298 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004270:	f7fd fa8a 	bl	8001788 <HAL_GetTick>
 8004274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004276:	e008      	b.n	800428a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004278:	f7fd fa86 	bl	8001788 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b64      	cmp	r3, #100	; 0x64
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e207      	b.n	800469a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800428a:	4b5b      	ldr	r3, [pc, #364]	; (80043f8 <HAL_RCC_OscConfig+0x240>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d0f0      	beq.n	8004278 <HAL_RCC_OscConfig+0xc0>
 8004296:	e014      	b.n	80042c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004298:	f7fd fa76 	bl	8001788 <HAL_GetTick>
 800429c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800429e:	e008      	b.n	80042b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042a0:	f7fd fa72 	bl	8001788 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b64      	cmp	r3, #100	; 0x64
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e1f3      	b.n	800469a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042b2:	4b51      	ldr	r3, [pc, #324]	; (80043f8 <HAL_RCC_OscConfig+0x240>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1f0      	bne.n	80042a0 <HAL_RCC_OscConfig+0xe8>
 80042be:	e000      	b.n	80042c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d063      	beq.n	8004396 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042ce:	4b4a      	ldr	r3, [pc, #296]	; (80043f8 <HAL_RCC_OscConfig+0x240>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f003 030c 	and.w	r3, r3, #12
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00b      	beq.n	80042f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042da:	4b47      	ldr	r3, [pc, #284]	; (80043f8 <HAL_RCC_OscConfig+0x240>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042e2:	2b08      	cmp	r3, #8
 80042e4:	d11c      	bne.n	8004320 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042e6:	4b44      	ldr	r3, [pc, #272]	; (80043f8 <HAL_RCC_OscConfig+0x240>)
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d116      	bne.n	8004320 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042f2:	4b41      	ldr	r3, [pc, #260]	; (80043f8 <HAL_RCC_OscConfig+0x240>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d005      	beq.n	800430a <HAL_RCC_OscConfig+0x152>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d001      	beq.n	800430a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e1c7      	b.n	800469a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800430a:	4b3b      	ldr	r3, [pc, #236]	; (80043f8 <HAL_RCC_OscConfig+0x240>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	4937      	ldr	r1, [pc, #220]	; (80043f8 <HAL_RCC_OscConfig+0x240>)
 800431a:	4313      	orrs	r3, r2
 800431c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800431e:	e03a      	b.n	8004396 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d020      	beq.n	800436a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004328:	4b34      	ldr	r3, [pc, #208]	; (80043fc <HAL_RCC_OscConfig+0x244>)
 800432a:	2201      	movs	r2, #1
 800432c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800432e:	f7fd fa2b 	bl	8001788 <HAL_GetTick>
 8004332:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004334:	e008      	b.n	8004348 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004336:	f7fd fa27 	bl	8001788 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	2b02      	cmp	r3, #2
 8004342:	d901      	bls.n	8004348 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e1a8      	b.n	800469a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004348:	4b2b      	ldr	r3, [pc, #172]	; (80043f8 <HAL_RCC_OscConfig+0x240>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d0f0      	beq.n	8004336 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004354:	4b28      	ldr	r3, [pc, #160]	; (80043f8 <HAL_RCC_OscConfig+0x240>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	00db      	lsls	r3, r3, #3
 8004362:	4925      	ldr	r1, [pc, #148]	; (80043f8 <HAL_RCC_OscConfig+0x240>)
 8004364:	4313      	orrs	r3, r2
 8004366:	600b      	str	r3, [r1, #0]
 8004368:	e015      	b.n	8004396 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800436a:	4b24      	ldr	r3, [pc, #144]	; (80043fc <HAL_RCC_OscConfig+0x244>)
 800436c:	2200      	movs	r2, #0
 800436e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004370:	f7fd fa0a 	bl	8001788 <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004376:	e008      	b.n	800438a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004378:	f7fd fa06 	bl	8001788 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b02      	cmp	r3, #2
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e187      	b.n	800469a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800438a:	4b1b      	ldr	r3, [pc, #108]	; (80043f8 <HAL_RCC_OscConfig+0x240>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1f0      	bne.n	8004378 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0308 	and.w	r3, r3, #8
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d036      	beq.n	8004410 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d016      	beq.n	80043d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043aa:	4b15      	ldr	r3, [pc, #84]	; (8004400 <HAL_RCC_OscConfig+0x248>)
 80043ac:	2201      	movs	r2, #1
 80043ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b0:	f7fd f9ea 	bl	8001788 <HAL_GetTick>
 80043b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043b6:	e008      	b.n	80043ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043b8:	f7fd f9e6 	bl	8001788 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d901      	bls.n	80043ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e167      	b.n	800469a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ca:	4b0b      	ldr	r3, [pc, #44]	; (80043f8 <HAL_RCC_OscConfig+0x240>)
 80043cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d0f0      	beq.n	80043b8 <HAL_RCC_OscConfig+0x200>
 80043d6:	e01b      	b.n	8004410 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043d8:	4b09      	ldr	r3, [pc, #36]	; (8004400 <HAL_RCC_OscConfig+0x248>)
 80043da:	2200      	movs	r2, #0
 80043dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043de:	f7fd f9d3 	bl	8001788 <HAL_GetTick>
 80043e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043e4:	e00e      	b.n	8004404 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043e6:	f7fd f9cf 	bl	8001788 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d907      	bls.n	8004404 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e150      	b.n	800469a <HAL_RCC_OscConfig+0x4e2>
 80043f8:	40023800 	.word	0x40023800
 80043fc:	42470000 	.word	0x42470000
 8004400:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004404:	4b88      	ldr	r3, [pc, #544]	; (8004628 <HAL_RCC_OscConfig+0x470>)
 8004406:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004408:	f003 0302 	and.w	r3, r3, #2
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1ea      	bne.n	80043e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0304 	and.w	r3, r3, #4
 8004418:	2b00      	cmp	r3, #0
 800441a:	f000 8097 	beq.w	800454c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800441e:	2300      	movs	r3, #0
 8004420:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004422:	4b81      	ldr	r3, [pc, #516]	; (8004628 <HAL_RCC_OscConfig+0x470>)
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10f      	bne.n	800444e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800442e:	2300      	movs	r3, #0
 8004430:	60bb      	str	r3, [r7, #8]
 8004432:	4b7d      	ldr	r3, [pc, #500]	; (8004628 <HAL_RCC_OscConfig+0x470>)
 8004434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004436:	4a7c      	ldr	r2, [pc, #496]	; (8004628 <HAL_RCC_OscConfig+0x470>)
 8004438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800443c:	6413      	str	r3, [r2, #64]	; 0x40
 800443e:	4b7a      	ldr	r3, [pc, #488]	; (8004628 <HAL_RCC_OscConfig+0x470>)
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004446:	60bb      	str	r3, [r7, #8]
 8004448:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800444a:	2301      	movs	r3, #1
 800444c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800444e:	4b77      	ldr	r3, [pc, #476]	; (800462c <HAL_RCC_OscConfig+0x474>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004456:	2b00      	cmp	r3, #0
 8004458:	d118      	bne.n	800448c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800445a:	4b74      	ldr	r3, [pc, #464]	; (800462c <HAL_RCC_OscConfig+0x474>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a73      	ldr	r2, [pc, #460]	; (800462c <HAL_RCC_OscConfig+0x474>)
 8004460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004464:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004466:	f7fd f98f 	bl	8001788 <HAL_GetTick>
 800446a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800446c:	e008      	b.n	8004480 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800446e:	f7fd f98b 	bl	8001788 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	2b02      	cmp	r3, #2
 800447a:	d901      	bls.n	8004480 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e10c      	b.n	800469a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004480:	4b6a      	ldr	r3, [pc, #424]	; (800462c <HAL_RCC_OscConfig+0x474>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004488:	2b00      	cmp	r3, #0
 800448a:	d0f0      	beq.n	800446e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d106      	bne.n	80044a2 <HAL_RCC_OscConfig+0x2ea>
 8004494:	4b64      	ldr	r3, [pc, #400]	; (8004628 <HAL_RCC_OscConfig+0x470>)
 8004496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004498:	4a63      	ldr	r2, [pc, #396]	; (8004628 <HAL_RCC_OscConfig+0x470>)
 800449a:	f043 0301 	orr.w	r3, r3, #1
 800449e:	6713      	str	r3, [r2, #112]	; 0x70
 80044a0:	e01c      	b.n	80044dc <HAL_RCC_OscConfig+0x324>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	2b05      	cmp	r3, #5
 80044a8:	d10c      	bne.n	80044c4 <HAL_RCC_OscConfig+0x30c>
 80044aa:	4b5f      	ldr	r3, [pc, #380]	; (8004628 <HAL_RCC_OscConfig+0x470>)
 80044ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ae:	4a5e      	ldr	r2, [pc, #376]	; (8004628 <HAL_RCC_OscConfig+0x470>)
 80044b0:	f043 0304 	orr.w	r3, r3, #4
 80044b4:	6713      	str	r3, [r2, #112]	; 0x70
 80044b6:	4b5c      	ldr	r3, [pc, #368]	; (8004628 <HAL_RCC_OscConfig+0x470>)
 80044b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ba:	4a5b      	ldr	r2, [pc, #364]	; (8004628 <HAL_RCC_OscConfig+0x470>)
 80044bc:	f043 0301 	orr.w	r3, r3, #1
 80044c0:	6713      	str	r3, [r2, #112]	; 0x70
 80044c2:	e00b      	b.n	80044dc <HAL_RCC_OscConfig+0x324>
 80044c4:	4b58      	ldr	r3, [pc, #352]	; (8004628 <HAL_RCC_OscConfig+0x470>)
 80044c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c8:	4a57      	ldr	r2, [pc, #348]	; (8004628 <HAL_RCC_OscConfig+0x470>)
 80044ca:	f023 0301 	bic.w	r3, r3, #1
 80044ce:	6713      	str	r3, [r2, #112]	; 0x70
 80044d0:	4b55      	ldr	r3, [pc, #340]	; (8004628 <HAL_RCC_OscConfig+0x470>)
 80044d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d4:	4a54      	ldr	r2, [pc, #336]	; (8004628 <HAL_RCC_OscConfig+0x470>)
 80044d6:	f023 0304 	bic.w	r3, r3, #4
 80044da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d015      	beq.n	8004510 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044e4:	f7fd f950 	bl	8001788 <HAL_GetTick>
 80044e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ea:	e00a      	b.n	8004502 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044ec:	f7fd f94c 	bl	8001788 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e0cb      	b.n	800469a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004502:	4b49      	ldr	r3, [pc, #292]	; (8004628 <HAL_RCC_OscConfig+0x470>)
 8004504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d0ee      	beq.n	80044ec <HAL_RCC_OscConfig+0x334>
 800450e:	e014      	b.n	800453a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004510:	f7fd f93a 	bl	8001788 <HAL_GetTick>
 8004514:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004516:	e00a      	b.n	800452e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004518:	f7fd f936 	bl	8001788 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	f241 3288 	movw	r2, #5000	; 0x1388
 8004526:	4293      	cmp	r3, r2
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e0b5      	b.n	800469a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800452e:	4b3e      	ldr	r3, [pc, #248]	; (8004628 <HAL_RCC_OscConfig+0x470>)
 8004530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1ee      	bne.n	8004518 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800453a:	7dfb      	ldrb	r3, [r7, #23]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d105      	bne.n	800454c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004540:	4b39      	ldr	r3, [pc, #228]	; (8004628 <HAL_RCC_OscConfig+0x470>)
 8004542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004544:	4a38      	ldr	r2, [pc, #224]	; (8004628 <HAL_RCC_OscConfig+0x470>)
 8004546:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800454a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	2b00      	cmp	r3, #0
 8004552:	f000 80a1 	beq.w	8004698 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004556:	4b34      	ldr	r3, [pc, #208]	; (8004628 <HAL_RCC_OscConfig+0x470>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f003 030c 	and.w	r3, r3, #12
 800455e:	2b08      	cmp	r3, #8
 8004560:	d05c      	beq.n	800461c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	2b02      	cmp	r3, #2
 8004568:	d141      	bne.n	80045ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800456a:	4b31      	ldr	r3, [pc, #196]	; (8004630 <HAL_RCC_OscConfig+0x478>)
 800456c:	2200      	movs	r2, #0
 800456e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004570:	f7fd f90a 	bl	8001788 <HAL_GetTick>
 8004574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004576:	e008      	b.n	800458a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004578:	f7fd f906 	bl	8001788 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b02      	cmp	r3, #2
 8004584:	d901      	bls.n	800458a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e087      	b.n	800469a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800458a:	4b27      	ldr	r3, [pc, #156]	; (8004628 <HAL_RCC_OscConfig+0x470>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1f0      	bne.n	8004578 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	69da      	ldr	r2, [r3, #28]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	431a      	orrs	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a4:	019b      	lsls	r3, r3, #6
 80045a6:	431a      	orrs	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ac:	085b      	lsrs	r3, r3, #1
 80045ae:	3b01      	subs	r3, #1
 80045b0:	041b      	lsls	r3, r3, #16
 80045b2:	431a      	orrs	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b8:	061b      	lsls	r3, r3, #24
 80045ba:	491b      	ldr	r1, [pc, #108]	; (8004628 <HAL_RCC_OscConfig+0x470>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045c0:	4b1b      	ldr	r3, [pc, #108]	; (8004630 <HAL_RCC_OscConfig+0x478>)
 80045c2:	2201      	movs	r2, #1
 80045c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c6:	f7fd f8df 	bl	8001788 <HAL_GetTick>
 80045ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045cc:	e008      	b.n	80045e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045ce:	f7fd f8db 	bl	8001788 <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d901      	bls.n	80045e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e05c      	b.n	800469a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045e0:	4b11      	ldr	r3, [pc, #68]	; (8004628 <HAL_RCC_OscConfig+0x470>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d0f0      	beq.n	80045ce <HAL_RCC_OscConfig+0x416>
 80045ec:	e054      	b.n	8004698 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ee:	4b10      	ldr	r3, [pc, #64]	; (8004630 <HAL_RCC_OscConfig+0x478>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f4:	f7fd f8c8 	bl	8001788 <HAL_GetTick>
 80045f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045fa:	e008      	b.n	800460e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045fc:	f7fd f8c4 	bl	8001788 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b02      	cmp	r3, #2
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e045      	b.n	800469a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800460e:	4b06      	ldr	r3, [pc, #24]	; (8004628 <HAL_RCC_OscConfig+0x470>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1f0      	bne.n	80045fc <HAL_RCC_OscConfig+0x444>
 800461a:	e03d      	b.n	8004698 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d107      	bne.n	8004634 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e038      	b.n	800469a <HAL_RCC_OscConfig+0x4e2>
 8004628:	40023800 	.word	0x40023800
 800462c:	40007000 	.word	0x40007000
 8004630:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004634:	4b1b      	ldr	r3, [pc, #108]	; (80046a4 <HAL_RCC_OscConfig+0x4ec>)
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d028      	beq.n	8004694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800464c:	429a      	cmp	r2, r3
 800464e:	d121      	bne.n	8004694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800465a:	429a      	cmp	r2, r3
 800465c:	d11a      	bne.n	8004694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004664:	4013      	ands	r3, r2
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800466a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800466c:	4293      	cmp	r3, r2
 800466e:	d111      	bne.n	8004694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467a:	085b      	lsrs	r3, r3, #1
 800467c:	3b01      	subs	r3, #1
 800467e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004680:	429a      	cmp	r2, r3
 8004682:	d107      	bne.n	8004694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004690:	429a      	cmp	r2, r3
 8004692:	d001      	beq.n	8004698 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e000      	b.n	800469a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3718      	adds	r7, #24
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	40023800 	.word	0x40023800

080046a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d101      	bne.n	80046bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e0cc      	b.n	8004856 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046bc:	4b68      	ldr	r3, [pc, #416]	; (8004860 <HAL_RCC_ClockConfig+0x1b8>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0307 	and.w	r3, r3, #7
 80046c4:	683a      	ldr	r2, [r7, #0]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d90c      	bls.n	80046e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ca:	4b65      	ldr	r3, [pc, #404]	; (8004860 <HAL_RCC_ClockConfig+0x1b8>)
 80046cc:	683a      	ldr	r2, [r7, #0]
 80046ce:	b2d2      	uxtb	r2, r2
 80046d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046d2:	4b63      	ldr	r3, [pc, #396]	; (8004860 <HAL_RCC_ClockConfig+0x1b8>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0307 	and.w	r3, r3, #7
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d001      	beq.n	80046e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e0b8      	b.n	8004856 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d020      	beq.n	8004732 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d005      	beq.n	8004708 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046fc:	4b59      	ldr	r3, [pc, #356]	; (8004864 <HAL_RCC_ClockConfig+0x1bc>)
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	4a58      	ldr	r2, [pc, #352]	; (8004864 <HAL_RCC_ClockConfig+0x1bc>)
 8004702:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004706:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0308 	and.w	r3, r3, #8
 8004710:	2b00      	cmp	r3, #0
 8004712:	d005      	beq.n	8004720 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004714:	4b53      	ldr	r3, [pc, #332]	; (8004864 <HAL_RCC_ClockConfig+0x1bc>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	4a52      	ldr	r2, [pc, #328]	; (8004864 <HAL_RCC_ClockConfig+0x1bc>)
 800471a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800471e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004720:	4b50      	ldr	r3, [pc, #320]	; (8004864 <HAL_RCC_ClockConfig+0x1bc>)
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	494d      	ldr	r1, [pc, #308]	; (8004864 <HAL_RCC_ClockConfig+0x1bc>)
 800472e:	4313      	orrs	r3, r2
 8004730:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	2b00      	cmp	r3, #0
 800473c:	d044      	beq.n	80047c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d107      	bne.n	8004756 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004746:	4b47      	ldr	r3, [pc, #284]	; (8004864 <HAL_RCC_ClockConfig+0x1bc>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d119      	bne.n	8004786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e07f      	b.n	8004856 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	2b02      	cmp	r3, #2
 800475c:	d003      	beq.n	8004766 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004762:	2b03      	cmp	r3, #3
 8004764:	d107      	bne.n	8004776 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004766:	4b3f      	ldr	r3, [pc, #252]	; (8004864 <HAL_RCC_ClockConfig+0x1bc>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d109      	bne.n	8004786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e06f      	b.n	8004856 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004776:	4b3b      	ldr	r3, [pc, #236]	; (8004864 <HAL_RCC_ClockConfig+0x1bc>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d101      	bne.n	8004786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e067      	b.n	8004856 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004786:	4b37      	ldr	r3, [pc, #220]	; (8004864 <HAL_RCC_ClockConfig+0x1bc>)
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f023 0203 	bic.w	r2, r3, #3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	4934      	ldr	r1, [pc, #208]	; (8004864 <HAL_RCC_ClockConfig+0x1bc>)
 8004794:	4313      	orrs	r3, r2
 8004796:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004798:	f7fc fff6 	bl	8001788 <HAL_GetTick>
 800479c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800479e:	e00a      	b.n	80047b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047a0:	f7fc fff2 	bl	8001788 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d901      	bls.n	80047b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e04f      	b.n	8004856 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047b6:	4b2b      	ldr	r3, [pc, #172]	; (8004864 <HAL_RCC_ClockConfig+0x1bc>)
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f003 020c 	and.w	r2, r3, #12
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d1eb      	bne.n	80047a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047c8:	4b25      	ldr	r3, [pc, #148]	; (8004860 <HAL_RCC_ClockConfig+0x1b8>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0307 	and.w	r3, r3, #7
 80047d0:	683a      	ldr	r2, [r7, #0]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d20c      	bcs.n	80047f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047d6:	4b22      	ldr	r3, [pc, #136]	; (8004860 <HAL_RCC_ClockConfig+0x1b8>)
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	b2d2      	uxtb	r2, r2
 80047dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047de:	4b20      	ldr	r3, [pc, #128]	; (8004860 <HAL_RCC_ClockConfig+0x1b8>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0307 	and.w	r3, r3, #7
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d001      	beq.n	80047f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e032      	b.n	8004856 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0304 	and.w	r3, r3, #4
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d008      	beq.n	800480e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047fc:	4b19      	ldr	r3, [pc, #100]	; (8004864 <HAL_RCC_ClockConfig+0x1bc>)
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	4916      	ldr	r1, [pc, #88]	; (8004864 <HAL_RCC_ClockConfig+0x1bc>)
 800480a:	4313      	orrs	r3, r2
 800480c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0308 	and.w	r3, r3, #8
 8004816:	2b00      	cmp	r3, #0
 8004818:	d009      	beq.n	800482e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800481a:	4b12      	ldr	r3, [pc, #72]	; (8004864 <HAL_RCC_ClockConfig+0x1bc>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	00db      	lsls	r3, r3, #3
 8004828:	490e      	ldr	r1, [pc, #56]	; (8004864 <HAL_RCC_ClockConfig+0x1bc>)
 800482a:	4313      	orrs	r3, r2
 800482c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800482e:	f000 f821 	bl	8004874 <HAL_RCC_GetSysClockFreq>
 8004832:	4602      	mov	r2, r0
 8004834:	4b0b      	ldr	r3, [pc, #44]	; (8004864 <HAL_RCC_ClockConfig+0x1bc>)
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	091b      	lsrs	r3, r3, #4
 800483a:	f003 030f 	and.w	r3, r3, #15
 800483e:	490a      	ldr	r1, [pc, #40]	; (8004868 <HAL_RCC_ClockConfig+0x1c0>)
 8004840:	5ccb      	ldrb	r3, [r1, r3]
 8004842:	fa22 f303 	lsr.w	r3, r2, r3
 8004846:	4a09      	ldr	r2, [pc, #36]	; (800486c <HAL_RCC_ClockConfig+0x1c4>)
 8004848:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800484a:	4b09      	ldr	r3, [pc, #36]	; (8004870 <HAL_RCC_ClockConfig+0x1c8>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4618      	mov	r0, r3
 8004850:	f7fc ff56 	bl	8001700 <HAL_InitTick>

  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	40023c00 	.word	0x40023c00
 8004864:	40023800 	.word	0x40023800
 8004868:	0800e8cc 	.word	0x0800e8cc
 800486c:	20000000 	.word	0x20000000
 8004870:	20000004 	.word	0x20000004

08004874 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004874:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004878:	b094      	sub	sp, #80	; 0x50
 800487a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800487c:	2300      	movs	r3, #0
 800487e:	647b      	str	r3, [r7, #68]	; 0x44
 8004880:	2300      	movs	r3, #0
 8004882:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004884:	2300      	movs	r3, #0
 8004886:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004888:	2300      	movs	r3, #0
 800488a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800488c:	4b79      	ldr	r3, [pc, #484]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x200>)
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f003 030c 	and.w	r3, r3, #12
 8004894:	2b08      	cmp	r3, #8
 8004896:	d00d      	beq.n	80048b4 <HAL_RCC_GetSysClockFreq+0x40>
 8004898:	2b08      	cmp	r3, #8
 800489a:	f200 80e1 	bhi.w	8004a60 <HAL_RCC_GetSysClockFreq+0x1ec>
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d002      	beq.n	80048a8 <HAL_RCC_GetSysClockFreq+0x34>
 80048a2:	2b04      	cmp	r3, #4
 80048a4:	d003      	beq.n	80048ae <HAL_RCC_GetSysClockFreq+0x3a>
 80048a6:	e0db      	b.n	8004a60 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048a8:	4b73      	ldr	r3, [pc, #460]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x204>)
 80048aa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80048ac:	e0db      	b.n	8004a66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048ae:	4b73      	ldr	r3, [pc, #460]	; (8004a7c <HAL_RCC_GetSysClockFreq+0x208>)
 80048b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048b2:	e0d8      	b.n	8004a66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048b4:	4b6f      	ldr	r3, [pc, #444]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x200>)
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048bc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048be:	4b6d      	ldr	r3, [pc, #436]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x200>)
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d063      	beq.n	8004992 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048ca:	4b6a      	ldr	r3, [pc, #424]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x200>)
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	099b      	lsrs	r3, r3, #6
 80048d0:	2200      	movs	r2, #0
 80048d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80048d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80048d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048dc:	633b      	str	r3, [r7, #48]	; 0x30
 80048de:	2300      	movs	r3, #0
 80048e0:	637b      	str	r3, [r7, #52]	; 0x34
 80048e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80048e6:	4622      	mov	r2, r4
 80048e8:	462b      	mov	r3, r5
 80048ea:	f04f 0000 	mov.w	r0, #0
 80048ee:	f04f 0100 	mov.w	r1, #0
 80048f2:	0159      	lsls	r1, r3, #5
 80048f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048f8:	0150      	lsls	r0, r2, #5
 80048fa:	4602      	mov	r2, r0
 80048fc:	460b      	mov	r3, r1
 80048fe:	4621      	mov	r1, r4
 8004900:	1a51      	subs	r1, r2, r1
 8004902:	6139      	str	r1, [r7, #16]
 8004904:	4629      	mov	r1, r5
 8004906:	eb63 0301 	sbc.w	r3, r3, r1
 800490a:	617b      	str	r3, [r7, #20]
 800490c:	f04f 0200 	mov.w	r2, #0
 8004910:	f04f 0300 	mov.w	r3, #0
 8004914:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004918:	4659      	mov	r1, fp
 800491a:	018b      	lsls	r3, r1, #6
 800491c:	4651      	mov	r1, sl
 800491e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004922:	4651      	mov	r1, sl
 8004924:	018a      	lsls	r2, r1, #6
 8004926:	4651      	mov	r1, sl
 8004928:	ebb2 0801 	subs.w	r8, r2, r1
 800492c:	4659      	mov	r1, fp
 800492e:	eb63 0901 	sbc.w	r9, r3, r1
 8004932:	f04f 0200 	mov.w	r2, #0
 8004936:	f04f 0300 	mov.w	r3, #0
 800493a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800493e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004942:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004946:	4690      	mov	r8, r2
 8004948:	4699      	mov	r9, r3
 800494a:	4623      	mov	r3, r4
 800494c:	eb18 0303 	adds.w	r3, r8, r3
 8004950:	60bb      	str	r3, [r7, #8]
 8004952:	462b      	mov	r3, r5
 8004954:	eb49 0303 	adc.w	r3, r9, r3
 8004958:	60fb      	str	r3, [r7, #12]
 800495a:	f04f 0200 	mov.w	r2, #0
 800495e:	f04f 0300 	mov.w	r3, #0
 8004962:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004966:	4629      	mov	r1, r5
 8004968:	024b      	lsls	r3, r1, #9
 800496a:	4621      	mov	r1, r4
 800496c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004970:	4621      	mov	r1, r4
 8004972:	024a      	lsls	r2, r1, #9
 8004974:	4610      	mov	r0, r2
 8004976:	4619      	mov	r1, r3
 8004978:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800497a:	2200      	movs	r2, #0
 800497c:	62bb      	str	r3, [r7, #40]	; 0x28
 800497e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004980:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004984:	f7fb fc74 	bl	8000270 <__aeabi_uldivmod>
 8004988:	4602      	mov	r2, r0
 800498a:	460b      	mov	r3, r1
 800498c:	4613      	mov	r3, r2
 800498e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004990:	e058      	b.n	8004a44 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004992:	4b38      	ldr	r3, [pc, #224]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x200>)
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	099b      	lsrs	r3, r3, #6
 8004998:	2200      	movs	r2, #0
 800499a:	4618      	mov	r0, r3
 800499c:	4611      	mov	r1, r2
 800499e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80049a2:	623b      	str	r3, [r7, #32]
 80049a4:	2300      	movs	r3, #0
 80049a6:	627b      	str	r3, [r7, #36]	; 0x24
 80049a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80049ac:	4642      	mov	r2, r8
 80049ae:	464b      	mov	r3, r9
 80049b0:	f04f 0000 	mov.w	r0, #0
 80049b4:	f04f 0100 	mov.w	r1, #0
 80049b8:	0159      	lsls	r1, r3, #5
 80049ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049be:	0150      	lsls	r0, r2, #5
 80049c0:	4602      	mov	r2, r0
 80049c2:	460b      	mov	r3, r1
 80049c4:	4641      	mov	r1, r8
 80049c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80049ca:	4649      	mov	r1, r9
 80049cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80049d0:	f04f 0200 	mov.w	r2, #0
 80049d4:	f04f 0300 	mov.w	r3, #0
 80049d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80049dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80049e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80049e4:	ebb2 040a 	subs.w	r4, r2, sl
 80049e8:	eb63 050b 	sbc.w	r5, r3, fp
 80049ec:	f04f 0200 	mov.w	r2, #0
 80049f0:	f04f 0300 	mov.w	r3, #0
 80049f4:	00eb      	lsls	r3, r5, #3
 80049f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049fa:	00e2      	lsls	r2, r4, #3
 80049fc:	4614      	mov	r4, r2
 80049fe:	461d      	mov	r5, r3
 8004a00:	4643      	mov	r3, r8
 8004a02:	18e3      	adds	r3, r4, r3
 8004a04:	603b      	str	r3, [r7, #0]
 8004a06:	464b      	mov	r3, r9
 8004a08:	eb45 0303 	adc.w	r3, r5, r3
 8004a0c:	607b      	str	r3, [r7, #4]
 8004a0e:	f04f 0200 	mov.w	r2, #0
 8004a12:	f04f 0300 	mov.w	r3, #0
 8004a16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a1a:	4629      	mov	r1, r5
 8004a1c:	028b      	lsls	r3, r1, #10
 8004a1e:	4621      	mov	r1, r4
 8004a20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a24:	4621      	mov	r1, r4
 8004a26:	028a      	lsls	r2, r1, #10
 8004a28:	4610      	mov	r0, r2
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a2e:	2200      	movs	r2, #0
 8004a30:	61bb      	str	r3, [r7, #24]
 8004a32:	61fa      	str	r2, [r7, #28]
 8004a34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a38:	f7fb fc1a 	bl	8000270 <__aeabi_uldivmod>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	460b      	mov	r3, r1
 8004a40:	4613      	mov	r3, r2
 8004a42:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a44:	4b0b      	ldr	r3, [pc, #44]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	0c1b      	lsrs	r3, r3, #16
 8004a4a:	f003 0303 	and.w	r3, r3, #3
 8004a4e:	3301      	adds	r3, #1
 8004a50:	005b      	lsls	r3, r3, #1
 8004a52:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004a54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a5e:	e002      	b.n	8004a66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a60:	4b05      	ldr	r3, [pc, #20]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a62:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3750      	adds	r7, #80	; 0x50
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a72:	bf00      	nop
 8004a74:	40023800 	.word	0x40023800
 8004a78:	00f42400 	.word	0x00f42400
 8004a7c:	007a1200 	.word	0x007a1200

08004a80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a80:	b480      	push	{r7}
 8004a82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a84:	4b03      	ldr	r3, [pc, #12]	; (8004a94 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a86:	681b      	ldr	r3, [r3, #0]
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	20000000 	.word	0x20000000

08004a98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a9c:	f7ff fff0 	bl	8004a80 <HAL_RCC_GetHCLKFreq>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	4b05      	ldr	r3, [pc, #20]	; (8004ab8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	0a9b      	lsrs	r3, r3, #10
 8004aa8:	f003 0307 	and.w	r3, r3, #7
 8004aac:	4903      	ldr	r1, [pc, #12]	; (8004abc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004aae:	5ccb      	ldrb	r3, [r1, r3]
 8004ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	40023800 	.word	0x40023800
 8004abc:	0800e8dc 	.word	0x0800e8dc

08004ac0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004acc:	2300      	movs	r3, #0
 8004ace:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0301 	and.w	r3, r3, #1
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d105      	bne.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d035      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ae8:	4b62      	ldr	r3, [pc, #392]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004aee:	f7fc fe4b 	bl	8001788 <HAL_GetTick>
 8004af2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004af4:	e008      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004af6:	f7fc fe47 	bl	8001788 <HAL_GetTick>
 8004afa:	4602      	mov	r2, r0
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d901      	bls.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e0b0      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b08:	4b5b      	ldr	r3, [pc, #364]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1f0      	bne.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	019a      	lsls	r2, r3, #6
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	071b      	lsls	r3, r3, #28
 8004b20:	4955      	ldr	r1, [pc, #340]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b28:	4b52      	ldr	r3, [pc, #328]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b2e:	f7fc fe2b 	bl	8001788 <HAL_GetTick>
 8004b32:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b34:	e008      	b.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b36:	f7fc fe27 	bl	8001788 <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d901      	bls.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e090      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b48:	4b4b      	ldr	r3, [pc, #300]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d0f0      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0302 	and.w	r3, r3, #2
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f000 8083 	beq.w	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b62:	2300      	movs	r3, #0
 8004b64:	60fb      	str	r3, [r7, #12]
 8004b66:	4b44      	ldr	r3, [pc, #272]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6a:	4a43      	ldr	r2, [pc, #268]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b70:	6413      	str	r3, [r2, #64]	; 0x40
 8004b72:	4b41      	ldr	r3, [pc, #260]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b7a:	60fb      	str	r3, [r7, #12]
 8004b7c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004b7e:	4b3f      	ldr	r3, [pc, #252]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a3e      	ldr	r2, [pc, #248]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b88:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b8a:	f7fc fdfd 	bl	8001788 <HAL_GetTick>
 8004b8e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b90:	e008      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004b92:	f7fc fdf9 	bl	8001788 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d901      	bls.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e062      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ba4:	4b35      	ldr	r3, [pc, #212]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d0f0      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004bb0:	4b31      	ldr	r3, [pc, #196]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bb8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d02f      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d028      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bce:	4b2a      	ldr	r3, [pc, #168]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bd6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004bd8:	4b29      	ldr	r3, [pc, #164]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004bda:	2201      	movs	r2, #1
 8004bdc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004bde:	4b28      	ldr	r3, [pc, #160]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004be0:	2200      	movs	r2, #0
 8004be2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004be4:	4a24      	ldr	r2, [pc, #144]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004bea:	4b23      	ldr	r3, [pc, #140]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d114      	bne.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004bf6:	f7fc fdc7 	bl	8001788 <HAL_GetTick>
 8004bfa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bfc:	e00a      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bfe:	f7fc fdc3 	bl	8001788 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d901      	bls.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e02a      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c14:	4b18      	ldr	r3, [pc, #96]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c18:	f003 0302 	and.w	r3, r3, #2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d0ee      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c2c:	d10d      	bne.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004c2e:	4b12      	ldr	r3, [pc, #72]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004c3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c42:	490d      	ldr	r1, [pc, #52]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	608b      	str	r3, [r1, #8]
 8004c48:	e005      	b.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004c4a:	4b0b      	ldr	r3, [pc, #44]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	4a0a      	ldr	r2, [pc, #40]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c50:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004c54:	6093      	str	r3, [r2, #8]
 8004c56:	4b08      	ldr	r3, [pc, #32]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c62:	4905      	ldr	r1, [pc, #20]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3718      	adds	r7, #24
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	42470068 	.word	0x42470068
 8004c78:	40023800 	.word	0x40023800
 8004c7c:	40007000 	.word	0x40007000
 8004c80:	42470e40 	.word	0x42470e40

08004c84 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b087      	sub	sp, #28
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004c90:	2300      	movs	r3, #0
 8004c92:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004c94:	2300      	movs	r3, #0
 8004c96:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d13e      	bne.n	8004d20 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004ca2:	4b23      	ldr	r3, [pc, #140]	; (8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004caa:	60fb      	str	r3, [r7, #12]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d005      	beq.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d12f      	bne.n	8004d18 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004cb8:	4b1e      	ldr	r3, [pc, #120]	; (8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004cba:	617b      	str	r3, [r7, #20]
          break;
 8004cbc:	e02f      	b.n	8004d1e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004cbe:	4b1c      	ldr	r3, [pc, #112]	; (8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cca:	d108      	bne.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004ccc:	4b18      	ldr	r3, [pc, #96]	; (8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cd4:	4a18      	ldr	r2, [pc, #96]	; (8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cda:	613b      	str	r3, [r7, #16]
 8004cdc:	e007      	b.n	8004cee <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004cde:	4b14      	ldr	r3, [pc, #80]	; (8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ce6:	4a15      	ldr	r2, [pc, #84]	; (8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cec:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004cee:	4b10      	ldr	r3, [pc, #64]	; (8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004cf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cf4:	099b      	lsrs	r3, r3, #6
 8004cf6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	fb02 f303 	mul.w	r3, r2, r3
 8004d00:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004d02:	4b0b      	ldr	r3, [pc, #44]	; (8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d08:	0f1b      	lsrs	r3, r3, #28
 8004d0a:	f003 0307 	and.w	r3, r3, #7
 8004d0e:	68ba      	ldr	r2, [r7, #8]
 8004d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d14:	617b      	str	r3, [r7, #20]
          break;
 8004d16:	e002      	b.n	8004d1e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	617b      	str	r3, [r7, #20]
          break;
 8004d1c:	bf00      	nop
        }
      }
      break;
 8004d1e:	bf00      	nop
    }
  }
  return frequency;
 8004d20:	697b      	ldr	r3, [r7, #20]
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	371c      	adds	r7, #28
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	40023800 	.word	0x40023800
 8004d34:	00bb8000 	.word	0x00bb8000
 8004d38:	007a1200 	.word	0x007a1200
 8004d3c:	00f42400 	.word	0x00f42400

08004d40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d101      	bne.n	8004d52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e07b      	b.n	8004e4a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d108      	bne.n	8004d6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d62:	d009      	beq.n	8004d78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	61da      	str	r2, [r3, #28]
 8004d6a:	e005      	b.n	8004d78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d106      	bne.n	8004d98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f7fc fb88 	bl	80014a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004dc0:	431a      	orrs	r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dca:	431a      	orrs	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	f003 0302 	and.w	r3, r3, #2
 8004dd4:	431a      	orrs	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	431a      	orrs	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004de8:	431a      	orrs	r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	69db      	ldr	r3, [r3, #28]
 8004dee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004df2:	431a      	orrs	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a1b      	ldr	r3, [r3, #32]
 8004df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dfc:	ea42 0103 	orr.w	r1, r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e04:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	0c1b      	lsrs	r3, r3, #16
 8004e16:	f003 0104 	and.w	r1, r3, #4
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1e:	f003 0210 	and.w	r2, r3, #16
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	430a      	orrs	r2, r1
 8004e28:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	69da      	ldr	r2, [r3, #28]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e38:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3708      	adds	r7, #8
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b082      	sub	sp, #8
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e041      	b.n	8004ee8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d106      	bne.n	8004e7e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f7fc fb5d 	bl	8001538 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2202      	movs	r2, #2
 8004e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	3304      	adds	r3, #4
 8004e8e:	4619      	mov	r1, r3
 8004e90:	4610      	mov	r0, r2
 8004e92:	f000 f82d 	bl	8004ef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3708      	adds	r7, #8
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a40      	ldr	r2, [pc, #256]	; (8005004 <TIM_Base_SetConfig+0x114>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d013      	beq.n	8004f30 <TIM_Base_SetConfig+0x40>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f0e:	d00f      	beq.n	8004f30 <TIM_Base_SetConfig+0x40>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a3d      	ldr	r2, [pc, #244]	; (8005008 <TIM_Base_SetConfig+0x118>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d00b      	beq.n	8004f30 <TIM_Base_SetConfig+0x40>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a3c      	ldr	r2, [pc, #240]	; (800500c <TIM_Base_SetConfig+0x11c>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d007      	beq.n	8004f30 <TIM_Base_SetConfig+0x40>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a3b      	ldr	r2, [pc, #236]	; (8005010 <TIM_Base_SetConfig+0x120>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d003      	beq.n	8004f30 <TIM_Base_SetConfig+0x40>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a3a      	ldr	r2, [pc, #232]	; (8005014 <TIM_Base_SetConfig+0x124>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d108      	bne.n	8004f42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a2f      	ldr	r2, [pc, #188]	; (8005004 <TIM_Base_SetConfig+0x114>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d02b      	beq.n	8004fa2 <TIM_Base_SetConfig+0xb2>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f50:	d027      	beq.n	8004fa2 <TIM_Base_SetConfig+0xb2>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a2c      	ldr	r2, [pc, #176]	; (8005008 <TIM_Base_SetConfig+0x118>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d023      	beq.n	8004fa2 <TIM_Base_SetConfig+0xb2>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a2b      	ldr	r2, [pc, #172]	; (800500c <TIM_Base_SetConfig+0x11c>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d01f      	beq.n	8004fa2 <TIM_Base_SetConfig+0xb2>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a2a      	ldr	r2, [pc, #168]	; (8005010 <TIM_Base_SetConfig+0x120>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d01b      	beq.n	8004fa2 <TIM_Base_SetConfig+0xb2>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a29      	ldr	r2, [pc, #164]	; (8005014 <TIM_Base_SetConfig+0x124>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d017      	beq.n	8004fa2 <TIM_Base_SetConfig+0xb2>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a28      	ldr	r2, [pc, #160]	; (8005018 <TIM_Base_SetConfig+0x128>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d013      	beq.n	8004fa2 <TIM_Base_SetConfig+0xb2>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a27      	ldr	r2, [pc, #156]	; (800501c <TIM_Base_SetConfig+0x12c>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d00f      	beq.n	8004fa2 <TIM_Base_SetConfig+0xb2>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a26      	ldr	r2, [pc, #152]	; (8005020 <TIM_Base_SetConfig+0x130>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d00b      	beq.n	8004fa2 <TIM_Base_SetConfig+0xb2>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a25      	ldr	r2, [pc, #148]	; (8005024 <TIM_Base_SetConfig+0x134>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d007      	beq.n	8004fa2 <TIM_Base_SetConfig+0xb2>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a24      	ldr	r2, [pc, #144]	; (8005028 <TIM_Base_SetConfig+0x138>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d003      	beq.n	8004fa2 <TIM_Base_SetConfig+0xb2>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a23      	ldr	r2, [pc, #140]	; (800502c <TIM_Base_SetConfig+0x13c>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d108      	bne.n	8004fb4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	689a      	ldr	r2, [r3, #8]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a0a      	ldr	r2, [pc, #40]	; (8005004 <TIM_Base_SetConfig+0x114>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d003      	beq.n	8004fe8 <TIM_Base_SetConfig+0xf8>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a0c      	ldr	r2, [pc, #48]	; (8005014 <TIM_Base_SetConfig+0x124>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d103      	bne.n	8004ff0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	691a      	ldr	r2, [r3, #16]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	615a      	str	r2, [r3, #20]
}
 8004ff6:	bf00      	nop
 8004ff8:	3714      	adds	r7, #20
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	40010000 	.word	0x40010000
 8005008:	40000400 	.word	0x40000400
 800500c:	40000800 	.word	0x40000800
 8005010:	40000c00 	.word	0x40000c00
 8005014:	40010400 	.word	0x40010400
 8005018:	40014000 	.word	0x40014000
 800501c:	40014400 	.word	0x40014400
 8005020:	40014800 	.word	0x40014800
 8005024:	40001800 	.word	0x40001800
 8005028:	40001c00 	.word	0x40001c00
 800502c:	40002000 	.word	0x40002000

08005030 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005040:	2b01      	cmp	r3, #1
 8005042:	d101      	bne.n	8005048 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005044:	2302      	movs	r3, #2
 8005046:	e05a      	b.n	80050fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2202      	movs	r2, #2
 8005054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800506e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	4313      	orrs	r3, r2
 8005078:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a21      	ldr	r2, [pc, #132]	; (800510c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d022      	beq.n	80050d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005094:	d01d      	beq.n	80050d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a1d      	ldr	r2, [pc, #116]	; (8005110 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d018      	beq.n	80050d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a1b      	ldr	r2, [pc, #108]	; (8005114 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d013      	beq.n	80050d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a1a      	ldr	r2, [pc, #104]	; (8005118 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d00e      	beq.n	80050d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a18      	ldr	r2, [pc, #96]	; (800511c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d009      	beq.n	80050d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a17      	ldr	r2, [pc, #92]	; (8005120 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d004      	beq.n	80050d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a15      	ldr	r2, [pc, #84]	; (8005124 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d10c      	bne.n	80050ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	68ba      	ldr	r2, [r7, #8]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3714      	adds	r7, #20
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	40010000 	.word	0x40010000
 8005110:	40000400 	.word	0x40000400
 8005114:	40000800 	.word	0x40000800
 8005118:	40000c00 	.word	0x40000c00
 800511c:	40010400 	.word	0x40010400
 8005120:	40014000 	.word	0x40014000
 8005124:	40001800 	.word	0x40001800

08005128 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005128:	b084      	sub	sp, #16
 800512a:	b580      	push	{r7, lr}
 800512c:	b084      	sub	sp, #16
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
 8005132:	f107 001c 	add.w	r0, r7, #28
 8005136:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800513a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513c:	2b01      	cmp	r3, #1
 800513e:	d122      	bne.n	8005186 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005144:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005154:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005168:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800516a:	2b01      	cmp	r3, #1
 800516c:	d105      	bne.n	800517a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f9c0 	bl	8005500 <USB_CoreReset>
 8005180:	4603      	mov	r3, r0
 8005182:	73fb      	strb	r3, [r7, #15]
 8005184:	e01a      	b.n	80051bc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f9b4 	bl	8005500 <USB_CoreReset>
 8005198:	4603      	mov	r3, r0
 800519a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800519c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d106      	bne.n	80051b0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	639a      	str	r2, [r3, #56]	; 0x38
 80051ae:	e005      	b.n	80051bc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80051bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d10b      	bne.n	80051da <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f043 0206 	orr.w	r2, r3, #6
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f043 0220 	orr.w	r2, r3, #32
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80051da:	7bfb      	ldrb	r3, [r7, #15]
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3710      	adds	r7, #16
 80051e0:	46bd      	mov	sp, r7
 80051e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051e6:	b004      	add	sp, #16
 80051e8:	4770      	bx	lr

080051ea <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80051ea:	b480      	push	{r7}
 80051ec:	b083      	sub	sp, #12
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f043 0201 	orr.w	r2, r3, #1
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f023 0201 	bic.w	r2, r3, #1
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	370c      	adds	r7, #12
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr

0800522e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b084      	sub	sp, #16
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
 8005236:	460b      	mov	r3, r1
 8005238:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800523a:	2300      	movs	r3, #0
 800523c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800524a:	78fb      	ldrb	r3, [r7, #3]
 800524c:	2b01      	cmp	r3, #1
 800524e:	d115      	bne.n	800527c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800525c:	2001      	movs	r0, #1
 800525e:	f7fc fa9f 	bl	80017a0 <HAL_Delay>
      ms++;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	3301      	adds	r3, #1
 8005266:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 f93a 	bl	80054e2 <USB_GetMode>
 800526e:	4603      	mov	r3, r0
 8005270:	2b01      	cmp	r3, #1
 8005272:	d01e      	beq.n	80052b2 <USB_SetCurrentMode+0x84>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2b31      	cmp	r3, #49	; 0x31
 8005278:	d9f0      	bls.n	800525c <USB_SetCurrentMode+0x2e>
 800527a:	e01a      	b.n	80052b2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800527c:	78fb      	ldrb	r3, [r7, #3]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d115      	bne.n	80052ae <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800528e:	2001      	movs	r0, #1
 8005290:	f7fc fa86 	bl	80017a0 <HAL_Delay>
      ms++;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	3301      	adds	r3, #1
 8005298:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 f921 	bl	80054e2 <USB_GetMode>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d005      	beq.n	80052b2 <USB_SetCurrentMode+0x84>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2b31      	cmp	r3, #49	; 0x31
 80052aa:	d9f0      	bls.n	800528e <USB_SetCurrentMode+0x60>
 80052ac:	e001      	b.n	80052b2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e005      	b.n	80052be <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2b32      	cmp	r3, #50	; 0x32
 80052b6:	d101      	bne.n	80052bc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e000      	b.n	80052be <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
	...

080052c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b085      	sub	sp, #20
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80052d2:	2300      	movs	r3, #0
 80052d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	3301      	adds	r3, #1
 80052da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	4a13      	ldr	r2, [pc, #76]	; (800532c <USB_FlushTxFifo+0x64>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d901      	bls.n	80052e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	e01b      	b.n	8005320 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	daf2      	bge.n	80052d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80052f0:	2300      	movs	r3, #0
 80052f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	019b      	lsls	r3, r3, #6
 80052f8:	f043 0220 	orr.w	r2, r3, #32
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	3301      	adds	r3, #1
 8005304:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	4a08      	ldr	r2, [pc, #32]	; (800532c <USB_FlushTxFifo+0x64>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d901      	bls.n	8005312 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e006      	b.n	8005320 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	f003 0320 	and.w	r3, r3, #32
 800531a:	2b20      	cmp	r3, #32
 800531c:	d0f0      	beq.n	8005300 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	3714      	adds	r7, #20
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr
 800532c:	00030d40 	.word	0x00030d40

08005330 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005338:	2300      	movs	r3, #0
 800533a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	3301      	adds	r3, #1
 8005340:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	4a11      	ldr	r2, [pc, #68]	; (800538c <USB_FlushRxFifo+0x5c>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d901      	bls.n	800534e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e018      	b.n	8005380 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	2b00      	cmp	r3, #0
 8005354:	daf2      	bge.n	800533c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005356:	2300      	movs	r3, #0
 8005358:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2210      	movs	r2, #16
 800535e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	3301      	adds	r3, #1
 8005364:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	4a08      	ldr	r2, [pc, #32]	; (800538c <USB_FlushRxFifo+0x5c>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d901      	bls.n	8005372 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e006      	b.n	8005380 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	f003 0310 	and.w	r3, r3, #16
 800537a:	2b10      	cmp	r3, #16
 800537c:	d0f0      	beq.n	8005360 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3714      	adds	r7, #20
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr
 800538c:	00030d40 	.word	0x00030d40

08005390 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005390:	b480      	push	{r7}
 8005392:	b089      	sub	sp, #36	; 0x24
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	4611      	mov	r1, r2
 800539c:	461a      	mov	r2, r3
 800539e:	460b      	mov	r3, r1
 80053a0:	71fb      	strb	r3, [r7, #7]
 80053a2:	4613      	mov	r3, r2
 80053a4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80053ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d123      	bne.n	80053fe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80053b6:	88bb      	ldrh	r3, [r7, #4]
 80053b8:	3303      	adds	r3, #3
 80053ba:	089b      	lsrs	r3, r3, #2
 80053bc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80053be:	2300      	movs	r3, #0
 80053c0:	61bb      	str	r3, [r7, #24]
 80053c2:	e018      	b.n	80053f6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80053c4:	79fb      	ldrb	r3, [r7, #7]
 80053c6:	031a      	lsls	r2, r3, #12
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	4413      	add	r3, r2
 80053cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053d0:	461a      	mov	r2, r3
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	3301      	adds	r3, #1
 80053dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	3301      	adds	r3, #1
 80053e2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	3301      	adds	r3, #1
 80053e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	3301      	adds	r3, #1
 80053ee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	3301      	adds	r3, #1
 80053f4:	61bb      	str	r3, [r7, #24]
 80053f6:	69ba      	ldr	r2, [r7, #24]
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d3e2      	bcc.n	80053c4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3724      	adds	r7, #36	; 0x24
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800540c:	b480      	push	{r7}
 800540e:	b08b      	sub	sp, #44	; 0x2c
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	4613      	mov	r3, r2
 8005418:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005422:	88fb      	ldrh	r3, [r7, #6]
 8005424:	089b      	lsrs	r3, r3, #2
 8005426:	b29b      	uxth	r3, r3
 8005428:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800542a:	88fb      	ldrh	r3, [r7, #6]
 800542c:	f003 0303 	and.w	r3, r3, #3
 8005430:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005432:	2300      	movs	r3, #0
 8005434:	623b      	str	r3, [r7, #32]
 8005436:	e014      	b.n	8005462 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005442:	601a      	str	r2, [r3, #0]
    pDest++;
 8005444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005446:	3301      	adds	r3, #1
 8005448:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544c:	3301      	adds	r3, #1
 800544e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005452:	3301      	adds	r3, #1
 8005454:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005458:	3301      	adds	r3, #1
 800545a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800545c:	6a3b      	ldr	r3, [r7, #32]
 800545e:	3301      	adds	r3, #1
 8005460:	623b      	str	r3, [r7, #32]
 8005462:	6a3a      	ldr	r2, [r7, #32]
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	429a      	cmp	r2, r3
 8005468:	d3e6      	bcc.n	8005438 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800546a:	8bfb      	ldrh	r3, [r7, #30]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d01e      	beq.n	80054ae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005470:	2300      	movs	r3, #0
 8005472:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800547a:	461a      	mov	r2, r3
 800547c:	f107 0310 	add.w	r3, r7, #16
 8005480:	6812      	ldr	r2, [r2, #0]
 8005482:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005484:	693a      	ldr	r2, [r7, #16]
 8005486:	6a3b      	ldr	r3, [r7, #32]
 8005488:	b2db      	uxtb	r3, r3
 800548a:	00db      	lsls	r3, r3, #3
 800548c:	fa22 f303 	lsr.w	r3, r2, r3
 8005490:	b2da      	uxtb	r2, r3
 8005492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005494:	701a      	strb	r2, [r3, #0]
      i++;
 8005496:	6a3b      	ldr	r3, [r7, #32]
 8005498:	3301      	adds	r3, #1
 800549a:	623b      	str	r3, [r7, #32]
      pDest++;
 800549c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549e:	3301      	adds	r3, #1
 80054a0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80054a2:	8bfb      	ldrh	r3, [r7, #30]
 80054a4:	3b01      	subs	r3, #1
 80054a6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80054a8:	8bfb      	ldrh	r3, [r7, #30]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1ea      	bne.n	8005484 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80054ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	372c      	adds	r7, #44	; 0x2c
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80054bc:	b480      	push	{r7}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	695b      	ldr	r3, [r3, #20]
 80054c8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	4013      	ands	r3, r2
 80054d2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80054d4:	68fb      	ldr	r3, [r7, #12]
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3714      	adds	r7, #20
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr

080054e2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80054e2:	b480      	push	{r7}
 80054e4:	b083      	sub	sp, #12
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	f003 0301 	and.w	r3, r3, #1
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	370c      	adds	r7, #12
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
	...

08005500 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005508:	2300      	movs	r3, #0
 800550a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	3301      	adds	r3, #1
 8005510:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	4a13      	ldr	r2, [pc, #76]	; (8005564 <USB_CoreReset+0x64>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d901      	bls.n	800551e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e01b      	b.n	8005556 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	2b00      	cmp	r3, #0
 8005524:	daf2      	bge.n	800550c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005526:	2300      	movs	r3, #0
 8005528:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	f043 0201 	orr.w	r2, r3, #1
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	3301      	adds	r3, #1
 800553a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	4a09      	ldr	r2, [pc, #36]	; (8005564 <USB_CoreReset+0x64>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d901      	bls.n	8005548 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	e006      	b.n	8005556 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	f003 0301 	and.w	r3, r3, #1
 8005550:	2b01      	cmp	r3, #1
 8005552:	d0f0      	beq.n	8005536 <USB_CoreReset+0x36>

  return HAL_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3714      	adds	r7, #20
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	00030d40 	.word	0x00030d40

08005568 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005568:	b084      	sub	sp, #16
 800556a:	b580      	push	{r7, lr}
 800556c:	b086      	sub	sp, #24
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
 8005572:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005576:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800557a:	2300      	movs	r3, #0
 800557c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005588:	461a      	mov	r2, r3
 800558a:	2300      	movs	r3, #0
 800558c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005592:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055aa:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d018      	beq.n	80055f0 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80055be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d10a      	bne.n	80055da <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055d2:	f043 0304 	orr.w	r3, r3, #4
 80055d6:	6013      	str	r3, [r2, #0]
 80055d8:	e014      	b.n	8005604 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055e8:	f023 0304 	bic.w	r3, r3, #4
 80055ec:	6013      	str	r3, [r2, #0]
 80055ee:	e009      	b.n	8005604 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055fe:	f023 0304 	bic.w	r3, r3, #4
 8005602:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005604:	2110      	movs	r1, #16
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f7ff fe5e 	bl	80052c8 <USB_FlushTxFifo>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d001      	beq.n	8005616 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f7ff fe8a 	bl	8005330 <USB_FlushRxFifo>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d001      	beq.n	8005626 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005626:	2300      	movs	r3, #0
 8005628:	613b      	str	r3, [r7, #16]
 800562a:	e015      	b.n	8005658 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	015a      	lsls	r2, r3, #5
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	4413      	add	r3, r2
 8005634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005638:	461a      	mov	r2, r3
 800563a:	f04f 33ff 	mov.w	r3, #4294967295
 800563e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	015a      	lsls	r2, r3, #5
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	4413      	add	r3, r2
 8005648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800564c:	461a      	mov	r2, r3
 800564e:	2300      	movs	r3, #0
 8005650:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	3301      	adds	r3, #1
 8005656:	613b      	str	r3, [r7, #16]
 8005658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	429a      	cmp	r2, r3
 800565e:	d3e5      	bcc.n	800562c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f04f 32ff 	mov.w	r2, #4294967295
 800566c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00b      	beq.n	8005692 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005680:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a13      	ldr	r2, [pc, #76]	; (80056d4 <USB_HostInit+0x16c>)
 8005686:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a13      	ldr	r2, [pc, #76]	; (80056d8 <USB_HostInit+0x170>)
 800568c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005690:	e009      	b.n	80056a6 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2280      	movs	r2, #128	; 0x80
 8005696:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a10      	ldr	r2, [pc, #64]	; (80056dc <USB_HostInit+0x174>)
 800569c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a0f      	ldr	r2, [pc, #60]	; (80056e0 <USB_HostInit+0x178>)
 80056a2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80056a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d105      	bne.n	80056b8 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	f043 0210 	orr.w	r2, r3, #16
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	699a      	ldr	r2, [r3, #24]
 80056bc:	4b09      	ldr	r3, [pc, #36]	; (80056e4 <USB_HostInit+0x17c>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80056c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3718      	adds	r7, #24
 80056ca:	46bd      	mov	sp, r7
 80056cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056d0:	b004      	add	sp, #16
 80056d2:	4770      	bx	lr
 80056d4:	01000200 	.word	0x01000200
 80056d8:	00e00300 	.word	0x00e00300
 80056dc:	00600080 	.word	0x00600080
 80056e0:	004000e0 	.word	0x004000e0
 80056e4:	a3200008 	.word	0xa3200008

080056e8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	460b      	mov	r3, r1
 80056f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005706:	f023 0303 	bic.w	r3, r3, #3
 800570a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	78fb      	ldrb	r3, [r7, #3]
 8005716:	f003 0303 	and.w	r3, r3, #3
 800571a:	68f9      	ldr	r1, [r7, #12]
 800571c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005720:	4313      	orrs	r3, r2
 8005722:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005724:	78fb      	ldrb	r3, [r7, #3]
 8005726:	2b01      	cmp	r3, #1
 8005728:	d107      	bne.n	800573a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005730:	461a      	mov	r2, r3
 8005732:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005736:	6053      	str	r3, [r2, #4]
 8005738:	e009      	b.n	800574e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800573a:	78fb      	ldrb	r3, [r7, #3]
 800573c:	2b02      	cmp	r3, #2
 800573e:	d106      	bne.n	800574e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005746:	461a      	mov	r2, r3
 8005748:	f241 7370 	movw	r3, #6000	; 0x1770
 800574c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	4618      	mov	r0, r3
 8005752:	3714      	adds	r7, #20
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005768:	2300      	movs	r3, #0
 800576a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800577c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005786:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800578a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800578c:	2064      	movs	r0, #100	; 0x64
 800578e:	f7fc f807 	bl	80017a0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800579a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800579e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80057a0:	200a      	movs	r0, #10
 80057a2:	f7fb fffd 	bl	80017a0 <HAL_Delay>

  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3710      	adds	r7, #16
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	460b      	mov	r3, r1
 80057ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80057c0:	2300      	movs	r3, #0
 80057c2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80057d4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d109      	bne.n	80057f4 <USB_DriveVbus+0x44>
 80057e0:	78fb      	ldrb	r3, [r7, #3]
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d106      	bne.n	80057f4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80057ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80057f2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057fe:	d109      	bne.n	8005814 <USB_DriveVbus+0x64>
 8005800:	78fb      	ldrb	r3, [r7, #3]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d106      	bne.n	8005814 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800580e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005812:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3714      	adds	r7, #20
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr

08005822 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005822:	b480      	push	{r7}
 8005824:	b085      	sub	sp, #20
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800582e:	2300      	movs	r3, #0
 8005830:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	0c5b      	lsrs	r3, r3, #17
 8005840:	f003 0303 	and.w	r3, r3, #3
}
 8005844:	4618      	mov	r0, r3
 8005846:	3714      	adds	r7, #20
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	b29b      	uxth	r3, r3
}
 8005866:	4618      	mov	r0, r3
 8005868:	3714      	adds	r7, #20
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
	...

08005874 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b088      	sub	sp, #32
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	4608      	mov	r0, r1
 800587e:	4611      	mov	r1, r2
 8005880:	461a      	mov	r2, r3
 8005882:	4603      	mov	r3, r0
 8005884:	70fb      	strb	r3, [r7, #3]
 8005886:	460b      	mov	r3, r1
 8005888:	70bb      	strb	r3, [r7, #2]
 800588a:	4613      	mov	r3, r2
 800588c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800588e:	2300      	movs	r3, #0
 8005890:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005896:	78fb      	ldrb	r3, [r7, #3]
 8005898:	015a      	lsls	r2, r3, #5
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	4413      	add	r3, r2
 800589e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058a2:	461a      	mov	r2, r3
 80058a4:	f04f 33ff 	mov.w	r3, #4294967295
 80058a8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80058aa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80058ae:	2b03      	cmp	r3, #3
 80058b0:	d87e      	bhi.n	80059b0 <USB_HC_Init+0x13c>
 80058b2:	a201      	add	r2, pc, #4	; (adr r2, 80058b8 <USB_HC_Init+0x44>)
 80058b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b8:	080058c9 	.word	0x080058c9
 80058bc:	08005973 	.word	0x08005973
 80058c0:	080058c9 	.word	0x080058c9
 80058c4:	08005935 	.word	0x08005935
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80058c8:	78fb      	ldrb	r3, [r7, #3]
 80058ca:	015a      	lsls	r2, r3, #5
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	4413      	add	r3, r2
 80058d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058d4:	461a      	mov	r2, r3
 80058d6:	f240 439d 	movw	r3, #1181	; 0x49d
 80058da:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80058dc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	da10      	bge.n	8005906 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80058e4:	78fb      	ldrb	r3, [r7, #3]
 80058e6:	015a      	lsls	r2, r3, #5
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	4413      	add	r3, r2
 80058ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	78fa      	ldrb	r2, [r7, #3]
 80058f4:	0151      	lsls	r1, r2, #5
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	440a      	add	r2, r1
 80058fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005902:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005904:	e057      	b.n	80059b6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800590a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800590e:	2b00      	cmp	r3, #0
 8005910:	d051      	beq.n	80059b6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005912:	78fb      	ldrb	r3, [r7, #3]
 8005914:	015a      	lsls	r2, r3, #5
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	4413      	add	r3, r2
 800591a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	78fa      	ldrb	r2, [r7, #3]
 8005922:	0151      	lsls	r1, r2, #5
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	440a      	add	r2, r1
 8005928:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800592c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005930:	60d3      	str	r3, [r2, #12]
      break;
 8005932:	e040      	b.n	80059b6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005934:	78fb      	ldrb	r3, [r7, #3]
 8005936:	015a      	lsls	r2, r3, #5
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	4413      	add	r3, r2
 800593c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005940:	461a      	mov	r2, r3
 8005942:	f240 639d 	movw	r3, #1693	; 0x69d
 8005946:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005948:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800594c:	2b00      	cmp	r3, #0
 800594e:	da34      	bge.n	80059ba <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005950:	78fb      	ldrb	r3, [r7, #3]
 8005952:	015a      	lsls	r2, r3, #5
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	4413      	add	r3, r2
 8005958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	78fa      	ldrb	r2, [r7, #3]
 8005960:	0151      	lsls	r1, r2, #5
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	440a      	add	r2, r1
 8005966:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800596a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800596e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005970:	e023      	b.n	80059ba <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005972:	78fb      	ldrb	r3, [r7, #3]
 8005974:	015a      	lsls	r2, r3, #5
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	4413      	add	r3, r2
 800597a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800597e:	461a      	mov	r2, r3
 8005980:	f240 2325 	movw	r3, #549	; 0x225
 8005984:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005986:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800598a:	2b00      	cmp	r3, #0
 800598c:	da17      	bge.n	80059be <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800598e:	78fb      	ldrb	r3, [r7, #3]
 8005990:	015a      	lsls	r2, r3, #5
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	4413      	add	r3, r2
 8005996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	78fa      	ldrb	r2, [r7, #3]
 800599e:	0151      	lsls	r1, r2, #5
 80059a0:	693a      	ldr	r2, [r7, #16]
 80059a2:	440a      	add	r2, r1
 80059a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059a8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80059ac:	60d3      	str	r3, [r2, #12]
      }
      break;
 80059ae:	e006      	b.n	80059be <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	77fb      	strb	r3, [r7, #31]
      break;
 80059b4:	e004      	b.n	80059c0 <USB_HC_Init+0x14c>
      break;
 80059b6:	bf00      	nop
 80059b8:	e002      	b.n	80059c0 <USB_HC_Init+0x14c>
      break;
 80059ba:	bf00      	nop
 80059bc:	e000      	b.n	80059c0 <USB_HC_Init+0x14c>
      break;
 80059be:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80059c0:	78fb      	ldrb	r3, [r7, #3]
 80059c2:	015a      	lsls	r2, r3, #5
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	4413      	add	r3, r2
 80059c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	78fa      	ldrb	r2, [r7, #3]
 80059d0:	0151      	lsls	r1, r2, #5
 80059d2:	693a      	ldr	r2, [r7, #16]
 80059d4:	440a      	add	r2, r1
 80059d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059da:	f043 0302 	orr.w	r3, r3, #2
 80059de:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059e6:	699a      	ldr	r2, [r3, #24]
 80059e8:	78fb      	ldrb	r3, [r7, #3]
 80059ea:	f003 030f 	and.w	r3, r3, #15
 80059ee:	2101      	movs	r1, #1
 80059f0:	fa01 f303 	lsl.w	r3, r1, r3
 80059f4:	6939      	ldr	r1, [r7, #16]
 80059f6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80059fa:	4313      	orrs	r3, r2
 80059fc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005a0a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	da03      	bge.n	8005a1a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005a12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a16:	61bb      	str	r3, [r7, #24]
 8005a18:	e001      	b.n	8005a1e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f7ff feff 	bl	8005822 <USB_GetHostSpeed>
 8005a24:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005a26:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d106      	bne.n	8005a3c <USB_HC_Init+0x1c8>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d003      	beq.n	8005a3c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005a34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a38:	617b      	str	r3, [r7, #20]
 8005a3a:	e001      	b.n	8005a40 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005a40:	787b      	ldrb	r3, [r7, #1]
 8005a42:	059b      	lsls	r3, r3, #22
 8005a44:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005a48:	78bb      	ldrb	r3, [r7, #2]
 8005a4a:	02db      	lsls	r3, r3, #11
 8005a4c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005a50:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005a52:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005a56:	049b      	lsls	r3, r3, #18
 8005a58:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005a5c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005a5e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005a60:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005a64:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005a6a:	78fb      	ldrb	r3, [r7, #3]
 8005a6c:	0159      	lsls	r1, r3, #5
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	440b      	add	r3, r1
 8005a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a76:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005a7c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005a7e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005a82:	2b03      	cmp	r3, #3
 8005a84:	d003      	beq.n	8005a8e <USB_HC_Init+0x21a>
 8005a86:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d10f      	bne.n	8005aae <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005a8e:	78fb      	ldrb	r3, [r7, #3]
 8005a90:	015a      	lsls	r2, r3, #5
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	4413      	add	r3, r2
 8005a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	78fa      	ldrb	r2, [r7, #3]
 8005a9e:	0151      	lsls	r1, r2, #5
 8005aa0:	693a      	ldr	r2, [r7, #16]
 8005aa2:	440a      	add	r2, r1
 8005aa4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005aa8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005aac:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005aae:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3720      	adds	r7, #32
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b08c      	sub	sp, #48	; 0x30
 8005abc:	af02      	add	r7, sp, #8
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	785b      	ldrb	r3, [r3, #1]
 8005ace:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005ad0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ad4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d02d      	beq.n	8005b3e <USB_HC_StartXfer+0x86>
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	791b      	ldrb	r3, [r3, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d129      	bne.n	8005b3e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005aea:	79fb      	ldrb	r3, [r7, #7]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d117      	bne.n	8005b20 <USB_HC_StartXfer+0x68>
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	79db      	ldrb	r3, [r3, #7]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d003      	beq.n	8005b00 <USB_HC_StartXfer+0x48>
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	79db      	ldrb	r3, [r3, #7]
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d10f      	bne.n	8005b20 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	015a      	lsls	r2, r3, #5
 8005b04:	6a3b      	ldr	r3, [r7, #32]
 8005b06:	4413      	add	r3, r2
 8005b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	69fa      	ldr	r2, [r7, #28]
 8005b10:	0151      	lsls	r1, r2, #5
 8005b12:	6a3a      	ldr	r2, [r7, #32]
 8005b14:	440a      	add	r2, r1
 8005b16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b1e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005b20:	79fb      	ldrb	r3, [r7, #7]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d10b      	bne.n	8005b3e <USB_HC_StartXfer+0x86>
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	795b      	ldrb	r3, [r3, #5]
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d107      	bne.n	8005b3e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	785b      	ldrb	r3, [r3, #1]
 8005b32:	4619      	mov	r1, r3
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f000 fa0f 	bl	8005f58 <USB_DoPing>
      return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	e0f8      	b.n	8005d30 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d018      	beq.n	8005b78 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	68ba      	ldr	r2, [r7, #8]
 8005b4c:	8912      	ldrh	r2, [r2, #8]
 8005b4e:	4413      	add	r3, r2
 8005b50:	3b01      	subs	r3, #1
 8005b52:	68ba      	ldr	r2, [r7, #8]
 8005b54:	8912      	ldrh	r2, [r2, #8]
 8005b56:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b5a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005b5c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005b5e:	8b7b      	ldrh	r3, [r7, #26]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d90b      	bls.n	8005b7c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005b64:	8b7b      	ldrh	r3, [r7, #26]
 8005b66:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005b68:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005b6a:	68ba      	ldr	r2, [r7, #8]
 8005b6c:	8912      	ldrh	r2, [r2, #8]
 8005b6e:	fb03 f202 	mul.w	r2, r3, r2
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	611a      	str	r2, [r3, #16]
 8005b76:	e001      	b.n	8005b7c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	78db      	ldrb	r3, [r3, #3]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d007      	beq.n	8005b94 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005b84:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005b86:	68ba      	ldr	r2, [r7, #8]
 8005b88:	8912      	ldrh	r2, [r2, #8]
 8005b8a:	fb03 f202 	mul.w	r2, r3, r2
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	611a      	str	r2, [r3, #16]
 8005b92:	e003      	b.n	8005b9c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	695a      	ldr	r2, [r3, #20]
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005ba4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ba6:	04d9      	lsls	r1, r3, #19
 8005ba8:	4b63      	ldr	r3, [pc, #396]	; (8005d38 <USB_HC_StartXfer+0x280>)
 8005baa:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005bac:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	7a9b      	ldrb	r3, [r3, #10]
 8005bb2:	075b      	lsls	r3, r3, #29
 8005bb4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005bb8:	69f9      	ldr	r1, [r7, #28]
 8005bba:	0148      	lsls	r0, r1, #5
 8005bbc:	6a39      	ldr	r1, [r7, #32]
 8005bbe:	4401      	add	r1, r0
 8005bc0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005bc4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005bc6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005bc8:	79fb      	ldrb	r3, [r7, #7]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d009      	beq.n	8005be2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	68d9      	ldr	r1, [r3, #12]
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	015a      	lsls	r2, r3, #5
 8005bd6:	6a3b      	ldr	r3, [r7, #32]
 8005bd8:	4413      	add	r3, r2
 8005bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bde:	460a      	mov	r2, r1
 8005be0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005be2:	6a3b      	ldr	r3, [r7, #32]
 8005be4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f003 0301 	and.w	r3, r3, #1
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	bf0c      	ite	eq
 8005bf2:	2301      	moveq	r3, #1
 8005bf4:	2300      	movne	r3, #0
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	015a      	lsls	r2, r3, #5
 8005bfe:	6a3b      	ldr	r3, [r7, #32]
 8005c00:	4413      	add	r3, r2
 8005c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	69fa      	ldr	r2, [r7, #28]
 8005c0a:	0151      	lsls	r1, r2, #5
 8005c0c:	6a3a      	ldr	r2, [r7, #32]
 8005c0e:	440a      	add	r2, r1
 8005c10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c14:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005c18:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	015a      	lsls	r2, r3, #5
 8005c1e:	6a3b      	ldr	r3, [r7, #32]
 8005c20:	4413      	add	r3, r2
 8005c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	7e7b      	ldrb	r3, [r7, #25]
 8005c2a:	075b      	lsls	r3, r3, #29
 8005c2c:	69f9      	ldr	r1, [r7, #28]
 8005c2e:	0148      	lsls	r0, r1, #5
 8005c30:	6a39      	ldr	r1, [r7, #32]
 8005c32:	4401      	add	r1, r0
 8005c34:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	015a      	lsls	r2, r3, #5
 8005c40:	6a3b      	ldr	r3, [r7, #32]
 8005c42:	4413      	add	r3, r2
 8005c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c52:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	78db      	ldrb	r3, [r3, #3]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d004      	beq.n	8005c66 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c62:	613b      	str	r3, [r7, #16]
 8005c64:	e003      	b.n	8005c6e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c6c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c74:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	015a      	lsls	r2, r3, #5
 8005c7a:	6a3b      	ldr	r3, [r7, #32]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c82:	461a      	mov	r2, r3
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005c88:	79fb      	ldrb	r3, [r7, #7]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d001      	beq.n	8005c92 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	e04e      	b.n	8005d30 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	78db      	ldrb	r3, [r3, #3]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d149      	bne.n	8005d2e <USB_HC_StartXfer+0x276>
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d045      	beq.n	8005d2e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	79db      	ldrb	r3, [r3, #7]
 8005ca6:	2b03      	cmp	r3, #3
 8005ca8:	d830      	bhi.n	8005d0c <USB_HC_StartXfer+0x254>
 8005caa:	a201      	add	r2, pc, #4	; (adr r2, 8005cb0 <USB_HC_StartXfer+0x1f8>)
 8005cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb0:	08005cc1 	.word	0x08005cc1
 8005cb4:	08005ce5 	.word	0x08005ce5
 8005cb8:	08005cc1 	.word	0x08005cc1
 8005cbc:	08005ce5 	.word	0x08005ce5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	695b      	ldr	r3, [r3, #20]
 8005cc4:	3303      	adds	r3, #3
 8005cc6:	089b      	lsrs	r3, r3, #2
 8005cc8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005cca:	8afa      	ldrh	r2, [r7, #22]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d91c      	bls.n	8005d10 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	699b      	ldr	r3, [r3, #24]
 8005cda:	f043 0220 	orr.w	r2, r3, #32
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	619a      	str	r2, [r3, #24]
        }
        break;
 8005ce2:	e015      	b.n	8005d10 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	695b      	ldr	r3, [r3, #20]
 8005ce8:	3303      	adds	r3, #3
 8005cea:	089b      	lsrs	r3, r3, #2
 8005cec:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005cee:	8afa      	ldrh	r2, [r7, #22]
 8005cf0:	6a3b      	ldr	r3, [r7, #32]
 8005cf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d90a      	bls.n	8005d14 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	699b      	ldr	r3, [r3, #24]
 8005d02:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	619a      	str	r2, [r3, #24]
        }
        break;
 8005d0a:	e003      	b.n	8005d14 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005d0c:	bf00      	nop
 8005d0e:	e002      	b.n	8005d16 <USB_HC_StartXfer+0x25e>
        break;
 8005d10:	bf00      	nop
 8005d12:	e000      	b.n	8005d16 <USB_HC_StartXfer+0x25e>
        break;
 8005d14:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	68d9      	ldr	r1, [r3, #12]
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	785a      	ldrb	r2, [r3, #1]
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	2000      	movs	r0, #0
 8005d26:	9000      	str	r0, [sp, #0]
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	f7ff fb31 	bl	8005390 <USB_WritePacket>
  }

  return HAL_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3728      	adds	r7, #40	; 0x28
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	1ff80000 	.word	0x1ff80000

08005d3c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d4e:	695b      	ldr	r3, [r3, #20]
 8005d50:	b29b      	uxth	r3, r3
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3714      	adds	r7, #20
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr

08005d5e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005d5e:	b480      	push	{r7}
 8005d60:	b089      	sub	sp, #36	; 0x24
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
 8005d66:	460b      	mov	r3, r1
 8005d68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005d6e:	78fb      	ldrb	r3, [r7, #3]
 8005d70:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005d72:	2300      	movs	r3, #0
 8005d74:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	015a      	lsls	r2, r3, #5
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	0c9b      	lsrs	r3, r3, #18
 8005d86:	f003 0303 	and.w	r3, r3, #3
 8005d8a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	015a      	lsls	r2, r3, #5
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	4413      	add	r3, r2
 8005d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	0fdb      	lsrs	r3, r3, #31
 8005d9c:	f003 0301 	and.w	r3, r3, #1
 8005da0:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f003 0320 	and.w	r3, r3, #32
 8005daa:	2b20      	cmp	r3, #32
 8005dac:	d104      	bne.n	8005db8 <USB_HC_Halt+0x5a>
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d101      	bne.n	8005db8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005db4:	2300      	movs	r3, #0
 8005db6:	e0c8      	b.n	8005f4a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d002      	beq.n	8005dc4 <USB_HC_Halt+0x66>
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d163      	bne.n	8005e8c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	015a      	lsls	r2, r3, #5
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	4413      	add	r3, r2
 8005dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	69ba      	ldr	r2, [r7, #24]
 8005dd4:	0151      	lsls	r1, r2, #5
 8005dd6:	69fa      	ldr	r2, [r7, #28]
 8005dd8:	440a      	add	r2, r1
 8005dda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dde:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005de2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	f003 0320 	and.w	r3, r3, #32
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	f040 80ab 	bne.w	8005f48 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d133      	bne.n	8005e66 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	015a      	lsls	r2, r3, #5
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	4413      	add	r3, r2
 8005e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	69ba      	ldr	r2, [r7, #24]
 8005e0e:	0151      	lsls	r1, r2, #5
 8005e10:	69fa      	ldr	r2, [r7, #28]
 8005e12:	440a      	add	r2, r1
 8005e14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e1c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	015a      	lsls	r2, r3, #5
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	4413      	add	r3, r2
 8005e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	69ba      	ldr	r2, [r7, #24]
 8005e2e:	0151      	lsls	r1, r2, #5
 8005e30:	69fa      	ldr	r2, [r7, #28]
 8005e32:	440a      	add	r2, r1
 8005e34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e3c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	3301      	adds	r3, #1
 8005e42:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e4a:	d81d      	bhi.n	8005e88 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	015a      	lsls	r2, r3, #5
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	4413      	add	r3, r2
 8005e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e62:	d0ec      	beq.n	8005e3e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005e64:	e070      	b.n	8005f48 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	015a      	lsls	r2, r3, #5
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	69ba      	ldr	r2, [r7, #24]
 8005e76:	0151      	lsls	r1, r2, #5
 8005e78:	69fa      	ldr	r2, [r7, #28]
 8005e7a:	440a      	add	r2, r1
 8005e7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e84:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005e86:	e05f      	b.n	8005f48 <USB_HC_Halt+0x1ea>
            break;
 8005e88:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005e8a:	e05d      	b.n	8005f48 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	015a      	lsls	r2, r3, #5
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	4413      	add	r3, r2
 8005e94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	69ba      	ldr	r2, [r7, #24]
 8005e9c:	0151      	lsls	r1, r2, #5
 8005e9e:	69fa      	ldr	r2, [r7, #28]
 8005ea0:	440a      	add	r2, r1
 8005ea2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ea6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005eaa:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d133      	bne.n	8005f24 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	015a      	lsls	r2, r3, #5
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	69ba      	ldr	r2, [r7, #24]
 8005ecc:	0151      	lsls	r1, r2, #5
 8005ece:	69fa      	ldr	r2, [r7, #28]
 8005ed0:	440a      	add	r2, r1
 8005ed2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ed6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005eda:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	015a      	lsls	r2, r3, #5
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	69ba      	ldr	r2, [r7, #24]
 8005eec:	0151      	lsls	r1, r2, #5
 8005eee:	69fa      	ldr	r2, [r7, #28]
 8005ef0:	440a      	add	r2, r1
 8005ef2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ef6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005efa:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	3301      	adds	r3, #1
 8005f00:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f08:	d81d      	bhi.n	8005f46 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	015a      	lsls	r2, r3, #5
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	4413      	add	r3, r2
 8005f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f20:	d0ec      	beq.n	8005efc <USB_HC_Halt+0x19e>
 8005f22:	e011      	b.n	8005f48 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	015a      	lsls	r2, r3, #5
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	69ba      	ldr	r2, [r7, #24]
 8005f34:	0151      	lsls	r1, r2, #5
 8005f36:	69fa      	ldr	r2, [r7, #28]
 8005f38:	440a      	add	r2, r1
 8005f3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f42:	6013      	str	r3, [r2, #0]
 8005f44:	e000      	b.n	8005f48 <USB_HC_Halt+0x1ea>
          break;
 8005f46:	bf00      	nop
    }
  }

  return HAL_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3724      	adds	r7, #36	; 0x24
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
	...

08005f58 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b087      	sub	sp, #28
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	460b      	mov	r3, r1
 8005f62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005f68:	78fb      	ldrb	r3, [r7, #3]
 8005f6a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	04da      	lsls	r2, r3, #19
 8005f74:	4b15      	ldr	r3, [pc, #84]	; (8005fcc <USB_DoPing+0x74>)
 8005f76:	4013      	ands	r3, r2
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	0151      	lsls	r1, r2, #5
 8005f7c:	697a      	ldr	r2, [r7, #20]
 8005f7e:	440a      	add	r2, r1
 8005f80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f88:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	015a      	lsls	r2, r3, #5
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	4413      	add	r3, r2
 8005f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005fa0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005fa8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	015a      	lsls	r2, r3, #5
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	371c      	adds	r7, #28
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr
 8005fca:	bf00      	nop
 8005fcc:	1ff80000 	.word	0x1ff80000

08005fd0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b088      	sub	sp, #32
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f7ff f911 	bl	800520c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005fea:	2110      	movs	r1, #16
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f7ff f96b 	bl	80052c8 <USB_FlushTxFifo>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d001      	beq.n	8005ffc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f7ff f997 	bl	8005330 <USB_FlushRxFifo>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d001      	beq.n	800600c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800600c:	2300      	movs	r3, #0
 800600e:	61bb      	str	r3, [r7, #24]
 8006010:	e01f      	b.n	8006052 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	015a      	lsls	r2, r3, #5
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	4413      	add	r3, r2
 800601a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006028:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006030:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006038:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	015a      	lsls	r2, r3, #5
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	4413      	add	r3, r2
 8006042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006046:	461a      	mov	r2, r3
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	3301      	adds	r3, #1
 8006050:	61bb      	str	r3, [r7, #24]
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	2b0f      	cmp	r3, #15
 8006056:	d9dc      	bls.n	8006012 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006058:	2300      	movs	r3, #0
 800605a:	61bb      	str	r3, [r7, #24]
 800605c:	e034      	b.n	80060c8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	015a      	lsls	r2, r3, #5
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	4413      	add	r3, r2
 8006066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006074:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800607c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006084:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	015a      	lsls	r2, r3, #5
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	4413      	add	r3, r2
 800608e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006092:	461a      	mov	r2, r3
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	3301      	adds	r3, #1
 800609c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060a4:	d80c      	bhi.n	80060c0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	015a      	lsls	r2, r3, #5
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	4413      	add	r3, r2
 80060ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060bc:	d0ec      	beq.n	8006098 <USB_StopHost+0xc8>
 80060be:	e000      	b.n	80060c2 <USB_StopHost+0xf2>
        break;
 80060c0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	3301      	adds	r3, #1
 80060c6:	61bb      	str	r3, [r7, #24]
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	2b0f      	cmp	r3, #15
 80060cc:	d9c7      	bls.n	800605e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060d4:	461a      	mov	r2, r3
 80060d6:	f04f 33ff 	mov.w	r3, #4294967295
 80060da:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f04f 32ff 	mov.w	r2, #4294967295
 80060e2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f7ff f880 	bl	80051ea <USB_EnableGlobalInt>

  return ret;
 80060ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3720      	adds	r7, #32
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80060f4:	b590      	push	{r4, r7, lr}
 80060f6:	b089      	sub	sp, #36	; 0x24
 80060f8:	af04      	add	r7, sp, #16
 80060fa:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80060fc:	2301      	movs	r3, #1
 80060fe:	2202      	movs	r2, #2
 8006100:	2102      	movs	r1, #2
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 fcb2 	bl	8006a6c <USBH_FindInterface>
 8006108:	4603      	mov	r3, r0
 800610a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800610c:	7bfb      	ldrb	r3, [r7, #15]
 800610e:	2bff      	cmp	r3, #255	; 0xff
 8006110:	d002      	beq.n	8006118 <USBH_CDC_InterfaceInit+0x24>
 8006112:	7bfb      	ldrb	r3, [r7, #15]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d901      	bls.n	800611c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006118:	2302      	movs	r3, #2
 800611a:	e13d      	b.n	8006398 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800611c:	7bfb      	ldrb	r3, [r7, #15]
 800611e:	4619      	mov	r1, r3
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 fc87 	bl	8006a34 <USBH_SelectInterface>
 8006126:	4603      	mov	r3, r0
 8006128:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800612a:	7bbb      	ldrb	r3, [r7, #14]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d001      	beq.n	8006134 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006130:	2302      	movs	r3, #2
 8006132:	e131      	b.n	8006398 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800613a:	2050      	movs	r0, #80	; 0x50
 800613c:	f005 fe32 	bl	800bda4 <malloc>
 8006140:	4603      	mov	r3, r0
 8006142:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800614a:	69db      	ldr	r3, [r3, #28]
 800614c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d101      	bne.n	8006158 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006154:	2302      	movs	r3, #2
 8006156:	e11f      	b.n	8006398 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006158:	2250      	movs	r2, #80	; 0x50
 800615a:	2100      	movs	r1, #0
 800615c:	68b8      	ldr	r0, [r7, #8]
 800615e:	f005 fe3f 	bl	800bde0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006162:	7bfb      	ldrb	r3, [r7, #15]
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	211a      	movs	r1, #26
 8006168:	fb01 f303 	mul.w	r3, r1, r3
 800616c:	4413      	add	r3, r2
 800616e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	b25b      	sxtb	r3, r3
 8006176:	2b00      	cmp	r3, #0
 8006178:	da15      	bge.n	80061a6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800617a:	7bfb      	ldrb	r3, [r7, #15]
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	211a      	movs	r1, #26
 8006180:	fb01 f303 	mul.w	r3, r1, r3
 8006184:	4413      	add	r3, r2
 8006186:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800618a:	781a      	ldrb	r2, [r3, #0]
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006190:	7bfb      	ldrb	r3, [r7, #15]
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	211a      	movs	r1, #26
 8006196:	fb01 f303 	mul.w	r3, r1, r3
 800619a:	4413      	add	r3, r2
 800619c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80061a0:	881a      	ldrh	r2, [r3, #0]
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	785b      	ldrb	r3, [r3, #1]
 80061aa:	4619      	mov	r1, r3
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f002 f984 	bl	80084ba <USBH_AllocPipe>
 80061b2:	4603      	mov	r3, r0
 80061b4:	461a      	mov	r2, r3
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	7819      	ldrb	r1, [r3, #0]
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	7858      	ldrb	r0, [r3, #1]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80061ce:	68ba      	ldr	r2, [r7, #8]
 80061d0:	8952      	ldrh	r2, [r2, #10]
 80061d2:	9202      	str	r2, [sp, #8]
 80061d4:	2203      	movs	r2, #3
 80061d6:	9201      	str	r2, [sp, #4]
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	4623      	mov	r3, r4
 80061dc:	4602      	mov	r2, r0
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f002 f93c 	bl	800845c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	2200      	movs	r2, #0
 80061ea:	4619      	mov	r1, r3
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f005 fd2b 	bl	800bc48 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80061f2:	2300      	movs	r3, #0
 80061f4:	2200      	movs	r2, #0
 80061f6:	210a      	movs	r1, #10
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 fc37 	bl	8006a6c <USBH_FindInterface>
 80061fe:	4603      	mov	r3, r0
 8006200:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006202:	7bfb      	ldrb	r3, [r7, #15]
 8006204:	2bff      	cmp	r3, #255	; 0xff
 8006206:	d002      	beq.n	800620e <USBH_CDC_InterfaceInit+0x11a>
 8006208:	7bfb      	ldrb	r3, [r7, #15]
 800620a:	2b01      	cmp	r3, #1
 800620c:	d901      	bls.n	8006212 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800620e:	2302      	movs	r3, #2
 8006210:	e0c2      	b.n	8006398 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006212:	7bfb      	ldrb	r3, [r7, #15]
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	211a      	movs	r1, #26
 8006218:	fb01 f303 	mul.w	r3, r1, r3
 800621c:	4413      	add	r3, r2
 800621e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	b25b      	sxtb	r3, r3
 8006226:	2b00      	cmp	r3, #0
 8006228:	da16      	bge.n	8006258 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800622a:	7bfb      	ldrb	r3, [r7, #15]
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	211a      	movs	r1, #26
 8006230:	fb01 f303 	mul.w	r3, r1, r3
 8006234:	4413      	add	r3, r2
 8006236:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800623a:	781a      	ldrb	r2, [r3, #0]
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006240:	7bfb      	ldrb	r3, [r7, #15]
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	211a      	movs	r1, #26
 8006246:	fb01 f303 	mul.w	r3, r1, r3
 800624a:	4413      	add	r3, r2
 800624c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006250:	881a      	ldrh	r2, [r3, #0]
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	835a      	strh	r2, [r3, #26]
 8006256:	e015      	b.n	8006284 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006258:	7bfb      	ldrb	r3, [r7, #15]
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	211a      	movs	r1, #26
 800625e:	fb01 f303 	mul.w	r3, r1, r3
 8006262:	4413      	add	r3, r2
 8006264:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006268:	781a      	ldrb	r2, [r3, #0]
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800626e:	7bfb      	ldrb	r3, [r7, #15]
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	211a      	movs	r1, #26
 8006274:	fb01 f303 	mul.w	r3, r1, r3
 8006278:	4413      	add	r3, r2
 800627a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800627e:	881a      	ldrh	r2, [r3, #0]
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006284:	7bfb      	ldrb	r3, [r7, #15]
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	211a      	movs	r1, #26
 800628a:	fb01 f303 	mul.w	r3, r1, r3
 800628e:	4413      	add	r3, r2
 8006290:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	b25b      	sxtb	r3, r3
 8006298:	2b00      	cmp	r3, #0
 800629a:	da16      	bge.n	80062ca <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800629c:	7bfb      	ldrb	r3, [r7, #15]
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	211a      	movs	r1, #26
 80062a2:	fb01 f303 	mul.w	r3, r1, r3
 80062a6:	4413      	add	r3, r2
 80062a8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80062ac:	781a      	ldrb	r2, [r3, #0]
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80062b2:	7bfb      	ldrb	r3, [r7, #15]
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	211a      	movs	r1, #26
 80062b8:	fb01 f303 	mul.w	r3, r1, r3
 80062bc:	4413      	add	r3, r2
 80062be:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80062c2:	881a      	ldrh	r2, [r3, #0]
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	835a      	strh	r2, [r3, #26]
 80062c8:	e015      	b.n	80062f6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80062ca:	7bfb      	ldrb	r3, [r7, #15]
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	211a      	movs	r1, #26
 80062d0:	fb01 f303 	mul.w	r3, r1, r3
 80062d4:	4413      	add	r3, r2
 80062d6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80062da:	781a      	ldrb	r2, [r3, #0]
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80062e0:	7bfb      	ldrb	r3, [r7, #15]
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	211a      	movs	r1, #26
 80062e6:	fb01 f303 	mul.w	r3, r1, r3
 80062ea:	4413      	add	r3, r2
 80062ec:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80062f0:	881a      	ldrh	r2, [r3, #0]
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	7b9b      	ldrb	r3, [r3, #14]
 80062fa:	4619      	mov	r1, r3
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f002 f8dc 	bl	80084ba <USBH_AllocPipe>
 8006302:	4603      	mov	r3, r0
 8006304:	461a      	mov	r2, r3
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	7bdb      	ldrb	r3, [r3, #15]
 800630e:	4619      	mov	r1, r3
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f002 f8d2 	bl	80084ba <USBH_AllocPipe>
 8006316:	4603      	mov	r3, r0
 8006318:	461a      	mov	r2, r3
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	7b59      	ldrb	r1, [r3, #13]
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	7b98      	ldrb	r0, [r3, #14]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006332:	68ba      	ldr	r2, [r7, #8]
 8006334:	8b12      	ldrh	r2, [r2, #24]
 8006336:	9202      	str	r2, [sp, #8]
 8006338:	2202      	movs	r2, #2
 800633a:	9201      	str	r2, [sp, #4]
 800633c:	9300      	str	r3, [sp, #0]
 800633e:	4623      	mov	r3, r4
 8006340:	4602      	mov	r2, r0
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f002 f88a 	bl	800845c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	7b19      	ldrb	r1, [r3, #12]
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	7bd8      	ldrb	r0, [r3, #15]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800635c:	68ba      	ldr	r2, [r7, #8]
 800635e:	8b52      	ldrh	r2, [r2, #26]
 8006360:	9202      	str	r2, [sp, #8]
 8006362:	2202      	movs	r2, #2
 8006364:	9201      	str	r2, [sp, #4]
 8006366:	9300      	str	r3, [sp, #0]
 8006368:	4623      	mov	r3, r4
 800636a:	4602      	mov	r2, r0
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f002 f875 	bl	800845c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	7b5b      	ldrb	r3, [r3, #13]
 800637e:	2200      	movs	r2, #0
 8006380:	4619      	mov	r1, r3
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f005 fc60 	bl	800bc48 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	7b1b      	ldrb	r3, [r3, #12]
 800638c:	2200      	movs	r2, #0
 800638e:	4619      	mov	r1, r3
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f005 fc59 	bl	800bc48 <USBH_LL_SetToggle>

  return USBH_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3714      	adds	r7, #20
 800639c:	46bd      	mov	sp, r7
 800639e:	bd90      	pop	{r4, r7, pc}

080063a0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063ae:	69db      	ldr	r3, [r3, #28]
 80063b0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d00e      	beq.n	80063d8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	4619      	mov	r1, r3
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f002 f86a 	bl	800849a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	4619      	mov	r1, r3
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f002 f895 	bl	80084fc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	7b1b      	ldrb	r3, [r3, #12]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00e      	beq.n	80063fe <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	7b1b      	ldrb	r3, [r3, #12]
 80063e4:	4619      	mov	r1, r3
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f002 f857 	bl	800849a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	7b1b      	ldrb	r3, [r3, #12]
 80063f0:	4619      	mov	r1, r3
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f002 f882 	bl	80084fc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2200      	movs	r2, #0
 80063fc:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	7b5b      	ldrb	r3, [r3, #13]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00e      	beq.n	8006424 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	7b5b      	ldrb	r3, [r3, #13]
 800640a:	4619      	mov	r1, r3
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f002 f844 	bl	800849a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	7b5b      	ldrb	r3, [r3, #13]
 8006416:	4619      	mov	r1, r3
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f002 f86f 	bl	80084fc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2200      	movs	r2, #0
 8006422:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800642a:	69db      	ldr	r3, [r3, #28]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00b      	beq.n	8006448 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006436:	69db      	ldr	r3, [r3, #28]
 8006438:	4618      	mov	r0, r3
 800643a:	f005 fcbb 	bl	800bdb4 <free>
    phost->pActiveClass->pData = 0U;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006444:	2200      	movs	r2, #0
 8006446:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	3710      	adds	r7, #16
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006452:	b580      	push	{r7, lr}
 8006454:	b084      	sub	sp, #16
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006460:	69db      	ldr	r3, [r3, #28]
 8006462:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	3340      	adds	r3, #64	; 0x40
 8006468:	4619      	mov	r1, r3
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 f8b1 	bl	80065d2 <GetLineCoding>
 8006470:	4603      	mov	r3, r0
 8006472:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006474:	7afb      	ldrb	r3, [r7, #11]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d105      	bne.n	8006486 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006480:	2102      	movs	r1, #2
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006486:	7afb      	ldrb	r3, [r7, #11]
}
 8006488:	4618      	mov	r0, r3
 800648a:	3710      	adds	r7, #16
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006498:	2301      	movs	r3, #1
 800649a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800649c:	2300      	movs	r3, #0
 800649e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064a6:	69db      	ldr	r3, [r3, #28]
 80064a8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80064b0:	2b04      	cmp	r3, #4
 80064b2:	d877      	bhi.n	80065a4 <USBH_CDC_Process+0x114>
 80064b4:	a201      	add	r2, pc, #4	; (adr r2, 80064bc <USBH_CDC_Process+0x2c>)
 80064b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ba:	bf00      	nop
 80064bc:	080064d1 	.word	0x080064d1
 80064c0:	080064d7 	.word	0x080064d7
 80064c4:	08006507 	.word	0x08006507
 80064c8:	0800657b 	.word	0x0800657b
 80064cc:	08006589 	.word	0x08006589
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80064d0:	2300      	movs	r3, #0
 80064d2:	73fb      	strb	r3, [r7, #15]
      break;
 80064d4:	e06d      	b.n	80065b2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064da:	4619      	mov	r1, r3
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 f897 	bl	8006610 <SetLineCoding>
 80064e2:	4603      	mov	r3, r0
 80064e4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80064e6:	7bbb      	ldrb	r3, [r7, #14]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d104      	bne.n	80064f6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	2202      	movs	r2, #2
 80064f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80064f4:	e058      	b.n	80065a8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80064f6:	7bbb      	ldrb	r3, [r7, #14]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d055      	beq.n	80065a8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	2204      	movs	r2, #4
 8006500:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006504:	e050      	b.n	80065a8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	3340      	adds	r3, #64	; 0x40
 800650a:	4619      	mov	r1, r3
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 f860 	bl	80065d2 <GetLineCoding>
 8006512:	4603      	mov	r3, r0
 8006514:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006516:	7bbb      	ldrb	r3, [r7, #14]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d126      	bne.n	800656a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800652e:	791b      	ldrb	r3, [r3, #4]
 8006530:	429a      	cmp	r2, r3
 8006532:	d13b      	bne.n	80065ac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800653e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006540:	429a      	cmp	r2, r3
 8006542:	d133      	bne.n	80065ac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800654e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006550:	429a      	cmp	r2, r3
 8006552:	d12b      	bne.n	80065ac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800655c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800655e:	429a      	cmp	r2, r3
 8006560:	d124      	bne.n	80065ac <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 f982 	bl	800686c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006568:	e020      	b.n	80065ac <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800656a:	7bbb      	ldrb	r3, [r7, #14]
 800656c:	2b01      	cmp	r3, #1
 800656e:	d01d      	beq.n	80065ac <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	2204      	movs	r2, #4
 8006574:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006578:	e018      	b.n	80065ac <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 f867 	bl	800664e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 f8f6 	bl	8006772 <CDC_ProcessReception>
      break;
 8006586:	e014      	b.n	80065b2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006588:	2100      	movs	r1, #0
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f001 f957 	bl	800783e <USBH_ClrFeature>
 8006590:	4603      	mov	r3, r0
 8006592:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006594:	7bbb      	ldrb	r3, [r7, #14]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d10a      	bne.n	80065b0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80065a2:	e005      	b.n	80065b0 <USBH_CDC_Process+0x120>

    default:
      break;
 80065a4:	bf00      	nop
 80065a6:	e004      	b.n	80065b2 <USBH_CDC_Process+0x122>
      break;
 80065a8:	bf00      	nop
 80065aa:	e002      	b.n	80065b2 <USBH_CDC_Process+0x122>
      break;
 80065ac:	bf00      	nop
 80065ae:	e000      	b.n	80065b2 <USBH_CDC_Process+0x122>
      break;
 80065b0:	bf00      	nop

  }

  return status;
 80065b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3710      	adds	r7, #16
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	370c      	adds	r7, #12
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr

080065d2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80065d2:	b580      	push	{r7, lr}
 80065d4:	b082      	sub	sp, #8
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
 80065da:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	22a1      	movs	r2, #161	; 0xa1
 80065e0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2221      	movs	r2, #33	; 0x21
 80065e6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2207      	movs	r2, #7
 80065f8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	2207      	movs	r2, #7
 80065fe:	4619      	mov	r1, r3
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f001 fbe9 	bl	8007dd8 <USBH_CtlReq>
 8006606:	4603      	mov	r3, r0
}
 8006608:	4618      	mov	r0, r3
 800660a:	3708      	adds	r7, #8
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2221      	movs	r2, #33	; 0x21
 800661e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2220      	movs	r2, #32
 8006624:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2207      	movs	r2, #7
 8006636:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	2207      	movs	r2, #7
 800663c:	4619      	mov	r1, r3
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f001 fbca 	bl	8007dd8 <USBH_CtlReq>
 8006644:	4603      	mov	r3, r0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3708      	adds	r7, #8
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800664e:	b580      	push	{r7, lr}
 8006650:	b086      	sub	sp, #24
 8006652:	af02      	add	r7, sp, #8
 8006654:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800665c:	69db      	ldr	r3, [r3, #28]
 800665e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006660:	2300      	movs	r3, #0
 8006662:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800666a:	2b01      	cmp	r3, #1
 800666c:	d002      	beq.n	8006674 <CDC_ProcessTransmission+0x26>
 800666e:	2b02      	cmp	r3, #2
 8006670:	d023      	beq.n	80066ba <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006672:	e07a      	b.n	800676a <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	8b12      	ldrh	r2, [r2, #24]
 800667c:	4293      	cmp	r3, r2
 800667e:	d90b      	bls.n	8006698 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	69d9      	ldr	r1, [r3, #28]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	8b1a      	ldrh	r2, [r3, #24]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	7b5b      	ldrb	r3, [r3, #13]
 800668c:	2001      	movs	r0, #1
 800668e:	9000      	str	r0, [sp, #0]
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f001 fea0 	bl	80083d6 <USBH_BulkSendData>
 8006696:	e00b      	b.n	80066b0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80066a0:	b29a      	uxth	r2, r3
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	7b5b      	ldrb	r3, [r3, #13]
 80066a6:	2001      	movs	r0, #1
 80066a8:	9000      	str	r0, [sp, #0]
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f001 fe93 	bl	80083d6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2202      	movs	r2, #2
 80066b4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80066b8:	e057      	b.n	800676a <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	7b5b      	ldrb	r3, [r3, #13]
 80066be:	4619      	mov	r1, r3
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f005 fa97 	bl	800bbf4 <USBH_LL_GetURBState>
 80066c6:	4603      	mov	r3, r0
 80066c8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80066ca:	7afb      	ldrb	r3, [r7, #11]
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d136      	bne.n	800673e <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	8b12      	ldrh	r2, [r2, #24]
 80066d8:	4293      	cmp	r3, r2
 80066da:	d90e      	bls.n	80066fa <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	8b12      	ldrh	r2, [r2, #24]
 80066e4:	1a9a      	subs	r2, r3, r2
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	69db      	ldr	r3, [r3, #28]
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	8b12      	ldrh	r2, [r2, #24]
 80066f2:	441a      	add	r2, r3
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	61da      	str	r2, [r3, #28]
 80066f8:	e002      	b.n	8006700 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006704:	2b00      	cmp	r3, #0
 8006706:	d004      	beq.n	8006712 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8006710:	e006      	b.n	8006720 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 f892 	bl	8006844 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2204      	movs	r2, #4
 8006724:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006734:	2300      	movs	r3, #0
 8006736:	2200      	movs	r2, #0
 8006738:	f002 f980 	bl	8008a3c <osMessageQueuePut>
      break;
 800673c:	e014      	b.n	8006768 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800673e:	7afb      	ldrb	r3, [r7, #11]
 8006740:	2b02      	cmp	r3, #2
 8006742:	d111      	bne.n	8006768 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2204      	movs	r2, #4
 8006750:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006760:	2300      	movs	r3, #0
 8006762:	2200      	movs	r2, #0
 8006764:	f002 f96a 	bl	8008a3c <osMessageQueuePut>
      break;
 8006768:	bf00      	nop
  }
}
 800676a:	bf00      	nop
 800676c:	3710      	adds	r7, #16
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}

08006772 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006772:	b580      	push	{r7, lr}
 8006774:	b086      	sub	sp, #24
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006780:	69db      	ldr	r3, [r3, #28]
 8006782:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006784:	2300      	movs	r3, #0
 8006786:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800678e:	2b03      	cmp	r3, #3
 8006790:	d002      	beq.n	8006798 <CDC_ProcessReception+0x26>
 8006792:	2b04      	cmp	r3, #4
 8006794:	d00e      	beq.n	80067b4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006796:	e051      	b.n	800683c <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	6a19      	ldr	r1, [r3, #32]
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	8b5a      	ldrh	r2, [r3, #26]
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	7b1b      	ldrb	r3, [r3, #12]
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f001 fe3b 	bl	8008420 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	2204      	movs	r2, #4
 80067ae:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80067b2:	e043      	b.n	800683c <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	7b1b      	ldrb	r3, [r3, #12]
 80067b8:	4619      	mov	r1, r3
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f005 fa1a 	bl	800bbf4 <USBH_LL_GetURBState>
 80067c0:	4603      	mov	r3, r0
 80067c2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80067c4:	7cfb      	ldrb	r3, [r7, #19]
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d137      	bne.n	800683a <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	7b1b      	ldrb	r3, [r3, #12]
 80067ce:	4619      	mov	r1, r3
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f005 f97d 	bl	800bad0 <USBH_LL_GetLastXferSize>
 80067d6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	429a      	cmp	r2, r3
 80067e0:	d016      	beq.n	8006810 <CDC_ProcessReception+0x9e>
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	8b5b      	ldrh	r3, [r3, #26]
 80067e6:	461a      	mov	r2, r3
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d910      	bls.n	8006810 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	1ad2      	subs	r2, r2, r3
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	6a1a      	ldr	r2, [r3, #32]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	441a      	add	r2, r3
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	2203      	movs	r2, #3
 800680a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800680e:	e006      	b.n	800681e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	2200      	movs	r2, #0
 8006814:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f000 f81d 	bl	8006858 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2204      	movs	r2, #4
 8006822:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006832:	2300      	movs	r3, #0
 8006834:	2200      	movs	r2, #0
 8006836:	f002 f901 	bl	8008a3c <osMessageQueuePut>
      break;
 800683a:	bf00      	nop
  }
}
 800683c:	bf00      	nop
 800683e:	3718      	adds	r7, #24
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006860:	bf00      	nop
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006874:	bf00      	nop
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	4613      	mov	r3, r2
 800688c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d101      	bne.n	8006898 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006894:	2302      	movs	r3, #2
 8006896:	e044      	b.n	8006922 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	79fa      	ldrb	r2, [r7, #7]
 800689c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80068b0:	68f8      	ldr	r0, [r7, #12]
 80068b2:	f000 f841 	bl	8006938 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d003      	beq.n	80068e4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	68ba      	ldr	r2, [r7, #8]
 80068e0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 80068e4:	2200      	movs	r2, #0
 80068e6:	2104      	movs	r1, #4
 80068e8:	2010      	movs	r0, #16
 80068ea:	f002 f833 	bl	8008954 <osMessageQueueNew>
 80068ee:	4602      	mov	r2, r0
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 80068f6:	4b0d      	ldr	r3, [pc, #52]	; (800692c <USBH_Init+0xac>)
 80068f8:	4a0d      	ldr	r2, [pc, #52]	; (8006930 <USBH_Init+0xb0>)
 80068fa:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 80068fc:	4b0b      	ldr	r3, [pc, #44]	; (800692c <USBH_Init+0xac>)
 80068fe:	2280      	movs	r2, #128	; 0x80
 8006900:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 8006902:	4b0a      	ldr	r3, [pc, #40]	; (800692c <USBH_Init+0xac>)
 8006904:	2218      	movs	r2, #24
 8006906:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8006908:	4a08      	ldr	r2, [pc, #32]	; (800692c <USBH_Init+0xac>)
 800690a:	68f9      	ldr	r1, [r7, #12]
 800690c:	4809      	ldr	r0, [pc, #36]	; (8006934 <USBH_Init+0xb4>)
 800690e:	f001 feb5 	bl	800867c <osThreadNew>
 8006912:	4602      	mov	r2, r0
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800691a:	68f8      	ldr	r0, [r7, #12]
 800691c:	f005 f824 	bl	800b968 <USBH_LL_Init>

  return USBH_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3710      	adds	r7, #16
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	20000218 	.word	0x20000218
 8006930:	0800c784 	.word	0x0800c784
 8006934:	080075b5 	.word	0x080075b5

08006938 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006940:	2300      	movs	r3, #0
 8006942:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006944:	2300      	movs	r3, #0
 8006946:	60fb      	str	r3, [r7, #12]
 8006948:	e009      	b.n	800695e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	33e0      	adds	r3, #224	; 0xe0
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	4413      	add	r3, r2
 8006954:	2200      	movs	r2, #0
 8006956:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	3301      	adds	r3, #1
 800695c:	60fb      	str	r3, [r7, #12]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2b0f      	cmp	r3, #15
 8006962:	d9f2      	bls.n	800694a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006964:	2300      	movs	r3, #0
 8006966:	60fb      	str	r3, [r7, #12]
 8006968:	e009      	b.n	800697e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	4413      	add	r3, r2
 8006970:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006974:	2200      	movs	r2, #0
 8006976:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	3301      	adds	r3, #1
 800697c:	60fb      	str	r3, [r7, #12]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006984:	d3f1      	bcc.n	800696a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2201      	movs	r2, #1
 8006996:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2240      	movs	r2, #64	; 0x40
 80069aa:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2201      	movs	r2, #1
 80069be:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80069d2:	2300      	movs	r3, #0
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3714      	adds	r7, #20
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80069ea:	2300      	movs	r3, #0
 80069ec:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d016      	beq.n	8006a22 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d10e      	bne.n	8006a1c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006a04:	1c59      	adds	r1, r3, #1
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	33de      	adds	r3, #222	; 0xde
 8006a10:	6839      	ldr	r1, [r7, #0]
 8006a12:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006a16:	2300      	movs	r3, #0
 8006a18:	73fb      	strb	r3, [r7, #15]
 8006a1a:	e004      	b.n	8006a26 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006a1c:	2302      	movs	r3, #2
 8006a1e:	73fb      	strb	r3, [r7, #15]
 8006a20:	e001      	b.n	8006a26 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006a22:	2302      	movs	r3, #2
 8006a24:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3714      	adds	r7, #20
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr

08006a34 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b085      	sub	sp, #20
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006a40:	2300      	movs	r3, #0
 8006a42:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006a4a:	78fa      	ldrb	r2, [r7, #3]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d204      	bcs.n	8006a5a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	78fa      	ldrb	r2, [r7, #3]
 8006a54:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006a58:	e001      	b.n	8006a5e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006a5a:	2302      	movs	r3, #2
 8006a5c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3714      	adds	r7, #20
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b087      	sub	sp, #28
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	4608      	mov	r0, r1
 8006a76:	4611      	mov	r1, r2
 8006a78:	461a      	mov	r2, r3
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	70fb      	strb	r3, [r7, #3]
 8006a7e:	460b      	mov	r3, r1
 8006a80:	70bb      	strb	r3, [r7, #2]
 8006a82:	4613      	mov	r3, r2
 8006a84:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006a86:	2300      	movs	r3, #0
 8006a88:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006a94:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006a96:	e025      	b.n	8006ae4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006a98:	7dfb      	ldrb	r3, [r7, #23]
 8006a9a:	221a      	movs	r2, #26
 8006a9c:	fb02 f303 	mul.w	r3, r2, r3
 8006aa0:	3308      	adds	r3, #8
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	4413      	add	r3, r2
 8006aa6:	3302      	adds	r3, #2
 8006aa8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	795b      	ldrb	r3, [r3, #5]
 8006aae:	78fa      	ldrb	r2, [r7, #3]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d002      	beq.n	8006aba <USBH_FindInterface+0x4e>
 8006ab4:	78fb      	ldrb	r3, [r7, #3]
 8006ab6:	2bff      	cmp	r3, #255	; 0xff
 8006ab8:	d111      	bne.n	8006ade <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006abe:	78ba      	ldrb	r2, [r7, #2]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d002      	beq.n	8006aca <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006ac4:	78bb      	ldrb	r3, [r7, #2]
 8006ac6:	2bff      	cmp	r3, #255	; 0xff
 8006ac8:	d109      	bne.n	8006ade <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006ace:	787a      	ldrb	r2, [r7, #1]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d002      	beq.n	8006ada <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006ad4:	787b      	ldrb	r3, [r7, #1]
 8006ad6:	2bff      	cmp	r3, #255	; 0xff
 8006ad8:	d101      	bne.n	8006ade <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006ada:	7dfb      	ldrb	r3, [r7, #23]
 8006adc:	e006      	b.n	8006aec <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006ade:	7dfb      	ldrb	r3, [r7, #23]
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006ae4:	7dfb      	ldrb	r3, [r7, #23]
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d9d6      	bls.n	8006a98 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006aea:	23ff      	movs	r3, #255	; 0xff
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	371c      	adds	r7, #28
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f004 ff6d 	bl	800b9e0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006b06:	2101      	movs	r1, #1
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f005 f886 	bl	800bc1a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006b0e:	2300      	movs	r3, #0
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3708      	adds	r7, #8
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b088      	sub	sp, #32
 8006b1c:	af04      	add	r7, sp, #16
 8006b1e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006b20:	2302      	movs	r3, #2
 8006b22:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006b24:	2300      	movs	r3, #0
 8006b26:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d102      	bne.n	8006b3a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2203      	movs	r2, #3
 8006b38:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	2b0b      	cmp	r3, #11
 8006b42:	f200 8247 	bhi.w	8006fd4 <USBH_Process+0x4bc>
 8006b46:	a201      	add	r2, pc, #4	; (adr r2, 8006b4c <USBH_Process+0x34>)
 8006b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b4c:	08006b7d 	.word	0x08006b7d
 8006b50:	08006bcb 	.word	0x08006bcb
 8006b54:	08006c4f 	.word	0x08006c4f
 8006b58:	08006f53 	.word	0x08006f53
 8006b5c:	08006fd5 	.word	0x08006fd5
 8006b60:	08006d0f 	.word	0x08006d0f
 8006b64:	08006edd 	.word	0x08006edd
 8006b68:	08006d61 	.word	0x08006d61
 8006b6c:	08006d9d 	.word	0x08006d9d
 8006b70:	08006dd7 	.word	0x08006dd7
 8006b74:	08006e35 	.word	0x08006e35
 8006b78:	08006f3b 	.word	0x08006f3b
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	f000 8227 	beq.w	8006fd8 <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006b90:	20c8      	movs	r0, #200	; 0xc8
 8006b92:	f005 f889 	bl	800bca8 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f004 ff7f 	bl	800ba9a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f001 ff3a 	bl	8008a3c <osMessageQueuePut>
#endif
#endif
      }
      break;
 8006bc8:	e206      	b.n	8006fd8 <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d107      	bne.n	8006be4 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2202      	movs	r2, #2
 8006be0:	701a      	strb	r2, [r3, #0]
 8006be2:	e025      	b.n	8006c30 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006bea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006bee:	d914      	bls.n	8006c1a <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	b2da      	uxtb	r2, r3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006c06:	2b03      	cmp	r3, #3
 8006c08:	d903      	bls.n	8006c12 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	220d      	movs	r2, #13
 8006c0e:	701a      	strb	r2, [r3, #0]
 8006c10:	e00e      	b.n	8006c30 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	701a      	strb	r2, [r3, #0]
 8006c18:	e00a      	b.n	8006c30 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006c20:	f103 020a 	add.w	r2, r3, #10
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006c2a:	200a      	movs	r0, #10
 8006c2c:	f005 f83c 	bl	800bca8 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006c44:	2300      	movs	r3, #0
 8006c46:	2200      	movs	r2, #0
 8006c48:	f001 fef8 	bl	8008a3c <osMessageQueuePut>
#endif
#endif
      break;
 8006c4c:	e1cb      	b.n	8006fe6 <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d005      	beq.n	8006c64 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c5e:	2104      	movs	r1, #4
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006c64:	2064      	movs	r0, #100	; 0x64
 8006c66:	f005 f81f 	bl	800bca8 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f004 feee 	bl	800ba4c <USBH_LL_GetSpeed>
 8006c70:	4603      	mov	r3, r0
 8006c72:	461a      	mov	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2205      	movs	r2, #5
 8006c7e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006c80:	2100      	movs	r1, #0
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f001 fc19 	bl	80084ba <USBH_AllocPipe>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006c90:	2180      	movs	r1, #128	; 0x80
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f001 fc11 	bl	80084ba <USBH_AllocPipe>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	7919      	ldrb	r1, [r3, #4]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006cb4:	b292      	uxth	r2, r2
 8006cb6:	9202      	str	r2, [sp, #8]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	9201      	str	r2, [sp, #4]
 8006cbc:	9300      	str	r3, [sp, #0]
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	2280      	movs	r2, #128	; 0x80
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f001 fbca 	bl	800845c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	7959      	ldrb	r1, [r3, #5]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006cdc:	b292      	uxth	r2, r2
 8006cde:	9202      	str	r2, [sp, #8]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	9201      	str	r2, [sp, #4]
 8006ce4:	9300      	str	r3, [sp, #0]
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2200      	movs	r2, #0
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f001 fbb6 	bl	800845c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006d04:	2300      	movs	r3, #0
 8006d06:	2200      	movs	r2, #0
 8006d08:	f001 fe98 	bl	8008a3c <osMessageQueuePut>
#endif
#endif
      break;
 8006d0c:	e16b      	b.n	8006fe6 <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 f96e 	bl	8006ff0 <USBH_HandleEnum>
 8006d14:	4603      	mov	r3, r0
 8006d16:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006d18:	7bbb      	ldrb	r3, [r7, #14]
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f040 815d 	bne.w	8006fdc <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d103      	bne.n	8006d3c <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2208      	movs	r2, #8
 8006d38:	701a      	strb	r2, [r3, #0]
 8006d3a:	e002      	b.n	8006d42 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2207      	movs	r2, #7
 8006d40:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2205      	movs	r2, #5
 8006d46:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006d56:	2300      	movs	r3, #0
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f001 fe6f 	bl	8008a3c <osMessageQueuePut>
#endif
#endif
      }
      break;
 8006d5e:	e13d      	b.n	8006fdc <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	f000 813a 	beq.w	8006fe0 <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006d72:	2101      	movs	r1, #1
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2208      	movs	r2, #8
 8006d7c:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2205      	movs	r2, #5
 8006d82:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006d92:	2300      	movs	r3, #0
 8006d94:	2200      	movs	r2, #0
 8006d96:	f001 fe51 	bl	8008a3c <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 8006d9a:	e121      	b.n	8006fe0 <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	4619      	mov	r1, r3
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 fd02 	bl	80077b0 <USBH_SetCfg>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d102      	bne.n	8006db8 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2209      	movs	r2, #9
 8006db6:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006dcc:	2300      	movs	r3, #0
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f001 fe34 	bl	8008a3c <osMessageQueuePut>
#endif
#endif
      break;
 8006dd4:	e107      	b.n	8006fe6 <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006ddc:	f003 0320 	and.w	r3, r3, #32
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d015      	beq.n	8006e10 <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006de4:	2101      	movs	r1, #1
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 fd05 	bl	80077f6 <USBH_SetFeature>
 8006dec:	4603      	mov	r3, r0
 8006dee:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006df0:	7bbb      	ldrb	r3, [r7, #14]
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d103      	bne.n	8006e00 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	220a      	movs	r2, #10
 8006dfc:	701a      	strb	r2, [r3, #0]
 8006dfe:	e00a      	b.n	8006e16 <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 8006e00:	7bbb      	ldrb	r3, [r7, #14]
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	2b03      	cmp	r3, #3
 8006e06:	d106      	bne.n	8006e16 <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	220a      	movs	r2, #10
 8006e0c:	701a      	strb	r2, [r3, #0]
 8006e0e:	e002      	b.n	8006e16 <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	220a      	movs	r2, #10
 8006e14:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f001 fe05 	bl	8008a3c <osMessageQueuePut>
#endif
#endif
      break;
 8006e32:	e0d8      	b.n	8006fe6 <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d03f      	beq.n	8006ebe <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006e46:	2300      	movs	r3, #0
 8006e48:	73fb      	strb	r3, [r7, #15]
 8006e4a:	e016      	b.n	8006e7a <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006e4c:	7bfa      	ldrb	r2, [r7, #15]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	32de      	adds	r2, #222	; 0xde
 8006e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e56:	791a      	ldrb	r2, [r3, #4]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d108      	bne.n	8006e74 <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006e62:	7bfa      	ldrb	r2, [r7, #15]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	32de      	adds	r2, #222	; 0xde
 8006e68:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006e72:	e005      	b.n	8006e80 <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006e74:	7bfb      	ldrb	r3, [r7, #15]
 8006e76:	3301      	adds	r3, #1
 8006e78:	73fb      	strb	r3, [r7, #15]
 8006e7a:	7bfb      	ldrb	r3, [r7, #15]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d0e5      	beq.n	8006e4c <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d016      	beq.n	8006eb8 <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	4798      	blx	r3
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d109      	bne.n	8006eb0 <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2206      	movs	r2, #6
 8006ea0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ea8:	2103      	movs	r1, #3
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	4798      	blx	r3
 8006eae:	e006      	b.n	8006ebe <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	220d      	movs	r2, #13
 8006eb4:	701a      	strb	r2, [r3, #0]
 8006eb6:	e002      	b.n	8006ebe <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	220d      	movs	r2, #13
 8006ebc:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2205      	movs	r2, #5
 8006ec2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f001 fdb1 	bl	8008a3c <osMessageQueuePut>
#endif
#endif
      break;
 8006eda:	e084      	b.n	8006fe6 <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d017      	beq.n	8006f16 <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	4798      	blx	r3
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006ef6:	7bbb      	ldrb	r3, [r7, #14]
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d103      	bne.n	8006f06 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	220b      	movs	r2, #11
 8006f02:	701a      	strb	r2, [r3, #0]
 8006f04:	e00a      	b.n	8006f1c <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 8006f06:	7bbb      	ldrb	r3, [r7, #14]
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d106      	bne.n	8006f1c <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	220d      	movs	r2, #13
 8006f12:	701a      	strb	r2, [r3, #0]
 8006f14:	e002      	b.n	8006f1c <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	220d      	movs	r2, #13
 8006f1a:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2205      	movs	r2, #5
 8006f20:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006f30:	2300      	movs	r3, #0
 8006f32:	2200      	movs	r2, #0
 8006f34:	f001 fd82 	bl	8008a3c <osMessageQueuePut>
#endif
#endif
      break;
 8006f38:	e055      	b.n	8006fe6 <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d04f      	beq.n	8006fe4 <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f4a:	695b      	ldr	r3, [r3, #20]
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	4798      	blx	r3
      }
      break;
 8006f50:	e048      	b.n	8006fe4 <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f7ff fcec 	bl	8006938 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d009      	beq.n	8006f7e <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d005      	beq.n	8006f94 <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f8e:	2105      	movs	r1, #5
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d107      	bne.n	8006fb0 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f7ff fda5 	bl	8006af8 <USBH_Start>
 8006fae:	e002      	b.n	8006fb6 <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f004 fd15 	bl	800b9e0 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2201      	movs	r2, #1
 8006fba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006fca:	2300      	movs	r3, #0
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f001 fd35 	bl	8008a3c <osMessageQueuePut>
#endif
#endif
      break;
 8006fd2:	e008      	b.n	8006fe6 <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 8006fd4:	bf00      	nop
 8006fd6:	e006      	b.n	8006fe6 <USBH_Process+0x4ce>
      break;
 8006fd8:	bf00      	nop
 8006fda:	e004      	b.n	8006fe6 <USBH_Process+0x4ce>
      break;
 8006fdc:	bf00      	nop
 8006fde:	e002      	b.n	8006fe6 <USBH_Process+0x4ce>
    break;
 8006fe0:	bf00      	nop
 8006fe2:	e000      	b.n	8006fe6 <USBH_Process+0x4ce>
      break;
 8006fe4:	bf00      	nop
  }
  return USBH_OK;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3710      	adds	r7, #16
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b088      	sub	sp, #32
 8006ff4:	af04      	add	r7, sp, #16
 8006ff6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	785b      	ldrb	r3, [r3, #1]
 8007004:	2b07      	cmp	r3, #7
 8007006:	f200 8208 	bhi.w	800741a <USBH_HandleEnum+0x42a>
 800700a:	a201      	add	r2, pc, #4	; (adr r2, 8007010 <USBH_HandleEnum+0x20>)
 800700c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007010:	08007031 	.word	0x08007031
 8007014:	080070ef 	.word	0x080070ef
 8007018:	08007159 	.word	0x08007159
 800701c:	080071e7 	.word	0x080071e7
 8007020:	08007251 	.word	0x08007251
 8007024:	080072c1 	.word	0x080072c1
 8007028:	0800735d 	.word	0x0800735d
 800702c:	080073db 	.word	0x080073db
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007030:	2108      	movs	r1, #8
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 faec 	bl	8007610 <USBH_Get_DevDesc>
 8007038:	4603      	mov	r3, r0
 800703a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800703c:	7bbb      	ldrb	r3, [r7, #14]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d130      	bne.n	80070a4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	7919      	ldrb	r1, [r3, #4]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007066:	b292      	uxth	r2, r2
 8007068:	9202      	str	r2, [sp, #8]
 800706a:	2200      	movs	r2, #0
 800706c:	9201      	str	r2, [sp, #4]
 800706e:	9300      	str	r3, [sp, #0]
 8007070:	4603      	mov	r3, r0
 8007072:	2280      	movs	r2, #128	; 0x80
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f001 f9f1 	bl	800845c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	7959      	ldrb	r1, [r3, #5]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800708e:	b292      	uxth	r2, r2
 8007090:	9202      	str	r2, [sp, #8]
 8007092:	2200      	movs	r2, #0
 8007094:	9201      	str	r2, [sp, #4]
 8007096:	9300      	str	r3, [sp, #0]
 8007098:	4603      	mov	r3, r0
 800709a:	2200      	movs	r2, #0
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f001 f9dd 	bl	800845c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80070a2:	e1bc      	b.n	800741e <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80070a4:	7bbb      	ldrb	r3, [r7, #14]
 80070a6:	2b03      	cmp	r3, #3
 80070a8:	f040 81b9 	bne.w	800741e <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80070b2:	3301      	adds	r3, #1
 80070b4:	b2da      	uxtb	r2, r3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80070c2:	2b03      	cmp	r3, #3
 80070c4:	d903      	bls.n	80070ce <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	220d      	movs	r2, #13
 80070ca:	701a      	strb	r2, [r3, #0]
      break;
 80070cc:	e1a7      	b.n	800741e <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	795b      	ldrb	r3, [r3, #5]
 80070d2:	4619      	mov	r1, r3
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f001 fa11 	bl	80084fc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	791b      	ldrb	r3, [r3, #4]
 80070de:	4619      	mov	r1, r3
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f001 fa0b 	bl	80084fc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	701a      	strb	r2, [r3, #0]
      break;
 80070ec:	e197      	b.n	800741e <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80070ee:	2112      	movs	r1, #18
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 fa8d 	bl	8007610 <USBH_Get_DevDesc>
 80070f6:	4603      	mov	r3, r0
 80070f8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80070fa:	7bbb      	ldrb	r3, [r7, #14]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d103      	bne.n	8007108 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2202      	movs	r2, #2
 8007104:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007106:	e18c      	b.n	8007422 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007108:	7bbb      	ldrb	r3, [r7, #14]
 800710a:	2b03      	cmp	r3, #3
 800710c:	f040 8189 	bne.w	8007422 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007116:	3301      	adds	r3, #1
 8007118:	b2da      	uxtb	r2, r3
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007126:	2b03      	cmp	r3, #3
 8007128:	d903      	bls.n	8007132 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	220d      	movs	r2, #13
 800712e:	701a      	strb	r2, [r3, #0]
      break;
 8007130:	e177      	b.n	8007422 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	795b      	ldrb	r3, [r3, #5]
 8007136:	4619      	mov	r1, r3
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f001 f9df 	bl	80084fc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	791b      	ldrb	r3, [r3, #4]
 8007142:	4619      	mov	r1, r3
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f001 f9d9 	bl	80084fc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	701a      	strb	r2, [r3, #0]
      break;
 8007156:	e164      	b.n	8007422 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007158:	2101      	movs	r1, #1
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 fb04 	bl	8007768 <USBH_SetAddress>
 8007160:	4603      	mov	r3, r0
 8007162:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007164:	7bbb      	ldrb	r3, [r7, #14]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d132      	bne.n	80071d0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800716a:	2002      	movs	r0, #2
 800716c:	f004 fd9c 	bl	800bca8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2203      	movs	r2, #3
 800717c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	7919      	ldrb	r1, [r3, #4]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007192:	b292      	uxth	r2, r2
 8007194:	9202      	str	r2, [sp, #8]
 8007196:	2200      	movs	r2, #0
 8007198:	9201      	str	r2, [sp, #4]
 800719a:	9300      	str	r3, [sp, #0]
 800719c:	4603      	mov	r3, r0
 800719e:	2280      	movs	r2, #128	; 0x80
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f001 f95b 	bl	800845c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	7959      	ldrb	r1, [r3, #5]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80071ba:	b292      	uxth	r2, r2
 80071bc:	9202      	str	r2, [sp, #8]
 80071be:	2200      	movs	r2, #0
 80071c0:	9201      	str	r2, [sp, #4]
 80071c2:	9300      	str	r3, [sp, #0]
 80071c4:	4603      	mov	r3, r0
 80071c6:	2200      	movs	r2, #0
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f001 f947 	bl	800845c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80071ce:	e12a      	b.n	8007426 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80071d0:	7bbb      	ldrb	r3, [r7, #14]
 80071d2:	2b03      	cmp	r3, #3
 80071d4:	f040 8127 	bne.w	8007426 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	220d      	movs	r2, #13
 80071dc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	705a      	strb	r2, [r3, #1]
      break;
 80071e4:	e11f      	b.n	8007426 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80071e6:	2109      	movs	r1, #9
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 fa39 	bl	8007660 <USBH_Get_CfgDesc>
 80071ee:	4603      	mov	r3, r0
 80071f0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80071f2:	7bbb      	ldrb	r3, [r7, #14]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d103      	bne.n	8007200 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2204      	movs	r2, #4
 80071fc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80071fe:	e114      	b.n	800742a <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007200:	7bbb      	ldrb	r3, [r7, #14]
 8007202:	2b03      	cmp	r3, #3
 8007204:	f040 8111 	bne.w	800742a <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800720e:	3301      	adds	r3, #1
 8007210:	b2da      	uxtb	r2, r3
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800721e:	2b03      	cmp	r3, #3
 8007220:	d903      	bls.n	800722a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	220d      	movs	r2, #13
 8007226:	701a      	strb	r2, [r3, #0]
      break;
 8007228:	e0ff      	b.n	800742a <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	795b      	ldrb	r3, [r3, #5]
 800722e:	4619      	mov	r1, r3
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f001 f963 	bl	80084fc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	791b      	ldrb	r3, [r3, #4]
 800723a:	4619      	mov	r1, r3
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f001 f95d 	bl	80084fc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	701a      	strb	r2, [r3, #0]
      break;
 800724e:	e0ec      	b.n	800742a <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007256:	4619      	mov	r1, r3
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 fa01 	bl	8007660 <USBH_Get_CfgDesc>
 800725e:	4603      	mov	r3, r0
 8007260:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007262:	7bbb      	ldrb	r3, [r7, #14]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d103      	bne.n	8007270 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2205      	movs	r2, #5
 800726c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800726e:	e0de      	b.n	800742e <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007270:	7bbb      	ldrb	r3, [r7, #14]
 8007272:	2b03      	cmp	r3, #3
 8007274:	f040 80db 	bne.w	800742e <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800727e:	3301      	adds	r3, #1
 8007280:	b2da      	uxtb	r2, r3
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800728e:	2b03      	cmp	r3, #3
 8007290:	d903      	bls.n	800729a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	220d      	movs	r2, #13
 8007296:	701a      	strb	r2, [r3, #0]
      break;
 8007298:	e0c9      	b.n	800742e <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	795b      	ldrb	r3, [r3, #5]
 800729e:	4619      	mov	r1, r3
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f001 f92b 	bl	80084fc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	791b      	ldrb	r3, [r3, #4]
 80072aa:	4619      	mov	r1, r3
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f001 f925 	bl	80084fc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2200      	movs	r2, #0
 80072b6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	701a      	strb	r2, [r3, #0]
      break;
 80072be:	e0b6      	b.n	800742e <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d036      	beq.n	8007338 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80072d6:	23ff      	movs	r3, #255	; 0xff
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 f9e5 	bl	80076a8 <USBH_Get_StringDesc>
 80072de:	4603      	mov	r3, r0
 80072e0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80072e2:	7bbb      	ldrb	r3, [r7, #14]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d111      	bne.n	800730c <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2206      	movs	r2, #6
 80072ec:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2205      	movs	r2, #5
 80072f2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007302:	2300      	movs	r3, #0
 8007304:	2200      	movs	r2, #0
 8007306:	f001 fb99 	bl	8008a3c <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800730a:	e092      	b.n	8007432 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800730c:	7bbb      	ldrb	r3, [r7, #14]
 800730e:	2b03      	cmp	r3, #3
 8007310:	f040 808f 	bne.w	8007432 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2206      	movs	r2, #6
 8007318:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2205      	movs	r2, #5
 800731e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800732e:	2300      	movs	r3, #0
 8007330:	2200      	movs	r2, #0
 8007332:	f001 fb83 	bl	8008a3c <osMessageQueuePut>
      break;
 8007336:	e07c      	b.n	8007432 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2206      	movs	r2, #6
 800733c:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2205      	movs	r2, #5
 8007342:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007352:	2300      	movs	r3, #0
 8007354:	2200      	movs	r2, #0
 8007356:	f001 fb71 	bl	8008a3c <osMessageQueuePut>
      break;
 800735a:	e06a      	b.n	8007432 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007362:	2b00      	cmp	r3, #0
 8007364:	d027      	beq.n	80073b6 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007372:	23ff      	movs	r3, #255	; 0xff
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 f997 	bl	80076a8 <USBH_Get_StringDesc>
 800737a:	4603      	mov	r3, r0
 800737c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800737e:	7bbb      	ldrb	r3, [r7, #14]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d103      	bne.n	800738c <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2207      	movs	r2, #7
 8007388:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800738a:	e054      	b.n	8007436 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800738c:	7bbb      	ldrb	r3, [r7, #14]
 800738e:	2b03      	cmp	r3, #3
 8007390:	d151      	bne.n	8007436 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2207      	movs	r2, #7
 8007396:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2205      	movs	r2, #5
 800739c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80073ac:	2300      	movs	r3, #0
 80073ae:	2200      	movs	r2, #0
 80073b0:	f001 fb44 	bl	8008a3c <osMessageQueuePut>
      break;
 80073b4:	e03f      	b.n	8007436 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2207      	movs	r2, #7
 80073ba:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2205      	movs	r2, #5
 80073c0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80073d0:	2300      	movs	r3, #0
 80073d2:	2200      	movs	r2, #0
 80073d4:	f001 fb32 	bl	8008a3c <osMessageQueuePut>
      break;
 80073d8:	e02d      	b.n	8007436 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d017      	beq.n	8007414 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80073f0:	23ff      	movs	r3, #255	; 0xff
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 f958 	bl	80076a8 <USBH_Get_StringDesc>
 80073f8:	4603      	mov	r3, r0
 80073fa:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80073fc:	7bbb      	ldrb	r3, [r7, #14]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d102      	bne.n	8007408 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007402:	2300      	movs	r3, #0
 8007404:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007406:	e018      	b.n	800743a <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007408:	7bbb      	ldrb	r3, [r7, #14]
 800740a:	2b03      	cmp	r3, #3
 800740c:	d115      	bne.n	800743a <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800740e:	2300      	movs	r3, #0
 8007410:	73fb      	strb	r3, [r7, #15]
      break;
 8007412:	e012      	b.n	800743a <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8007414:	2300      	movs	r3, #0
 8007416:	73fb      	strb	r3, [r7, #15]
      break;
 8007418:	e00f      	b.n	800743a <USBH_HandleEnum+0x44a>

    default:
      break;
 800741a:	bf00      	nop
 800741c:	e00e      	b.n	800743c <USBH_HandleEnum+0x44c>
      break;
 800741e:	bf00      	nop
 8007420:	e00c      	b.n	800743c <USBH_HandleEnum+0x44c>
      break;
 8007422:	bf00      	nop
 8007424:	e00a      	b.n	800743c <USBH_HandleEnum+0x44c>
      break;
 8007426:	bf00      	nop
 8007428:	e008      	b.n	800743c <USBH_HandleEnum+0x44c>
      break;
 800742a:	bf00      	nop
 800742c:	e006      	b.n	800743c <USBH_HandleEnum+0x44c>
      break;
 800742e:	bf00      	nop
 8007430:	e004      	b.n	800743c <USBH_HandleEnum+0x44c>
      break;
 8007432:	bf00      	nop
 8007434:	e002      	b.n	800743c <USBH_HandleEnum+0x44c>
      break;
 8007436:	bf00      	nop
 8007438:	e000      	b.n	800743c <USBH_HandleEnum+0x44c>
      break;
 800743a:	bf00      	nop
  }
  return Status;
 800743c:	7bfb      	ldrb	r3, [r7, #15]
}
 800743e:	4618      	mov	r0, r3
 8007440:	3710      	adds	r7, #16
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop

08007448 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	683a      	ldr	r2, [r7, #0]
 8007456:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800745a:	bf00      	nop
 800745c:	370c      	adds	r7, #12
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr

08007466 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b082      	sub	sp, #8
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007474:	1c5a      	adds	r2, r3, #1
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 f804 	bl	800748a <USBH_HandleSof>
}
 8007482:	bf00      	nop
 8007484:	3708      	adds	r7, #8
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b082      	sub	sp, #8
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	b2db      	uxtb	r3, r3
 8007498:	2b0b      	cmp	r3, #11
 800749a:	d10a      	bne.n	80074b2 <USBH_HandleSof+0x28>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d005      	beq.n	80074b2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074ac:	699b      	ldr	r3, [r3, #24]
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	4798      	blx	r3
  }
}
 80074b2:	bf00      	nop
 80074b4:	3708      	adds	r7, #8
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}

080074ba <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b082      	sub	sp, #8
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2201      	movs	r2, #1
 80074c6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2201      	movs	r2, #1
 80074ce:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80074de:	2300      	movs	r3, #0
 80074e0:	2200      	movs	r2, #0
 80074e2:	f001 faab 	bl	8008a3c <osMessageQueuePut>
#endif
#endif

  return;
 80074e6:	bf00      	nop
}
 80074e8:	3708      	adds	r7, #8
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}

080074ee <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80074ee:	b480      	push	{r7}
 80074f0:	b083      	sub	sp, #12
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80074fe:	bf00      	nop
}
 8007500:	370c      	adds	r7, #12
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr

0800750a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b082      	sub	sp, #8
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2201      	movs	r2, #1
 8007516:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2201      	movs	r2, #1
 800752e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800753e:	2300      	movs	r3, #0
 8007540:	2200      	movs	r2, #0
 8007542:	f001 fa7b 	bl	8008a3c <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8007546:	2300      	movs	r3, #0
}
 8007548:	4618      	mov	r0, r3
 800754a:	3708      	adds	r7, #8
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2201      	movs	r2, #1
 800755c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f004 fa50 	bl	800ba16 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	791b      	ldrb	r3, [r3, #4]
 800757a:	4619      	mov	r1, r3
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 ffbd 	bl	80084fc <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	795b      	ldrb	r3, [r3, #5]
 8007586:	4619      	mov	r1, r3
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 ffb7 	bl	80084fc <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2201      	movs	r2, #1
 8007592:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80075a2:	2300      	movs	r3, #0
 80075a4:	2200      	movs	r2, #0
 80075a6:	f001 fa49 	bl	8008a3c <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3708      	adds	r7, #8
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 80075c8:	f04f 33ff 	mov.w	r3, #4294967295
 80075cc:	2200      	movs	r2, #0
 80075ce:	f001 fa95 	bl	8008afc <osMessageQueueGet>
 80075d2:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d1f0      	bne.n	80075bc <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f7ff fa9c 	bl	8006b18 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 80075e0:	e7ec      	b.n	80075bc <USBH_Process_OS+0x8>

080075e2 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 80075e2:	b580      	push	{r7, lr}
 80075e4:	b082      	sub	sp, #8
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2201      	movs	r2, #1
 80075ee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80075fe:	2300      	movs	r3, #0
 8007600:	2200      	movs	r2, #0
 8007602:	f001 fa1b 	bl	8008a3c <osMessageQueuePut>
#endif

  return USBH_OK;
 8007606:	2300      	movs	r3, #0
}
 8007608:	4618      	mov	r0, r3
 800760a:	3708      	adds	r7, #8
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b086      	sub	sp, #24
 8007614:	af02      	add	r7, sp, #8
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	460b      	mov	r3, r1
 800761a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007622:	78fb      	ldrb	r3, [r7, #3]
 8007624:	b29b      	uxth	r3, r3
 8007626:	9300      	str	r3, [sp, #0]
 8007628:	4613      	mov	r3, r2
 800762a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800762e:	2100      	movs	r1, #0
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 f864 	bl	80076fe <USBH_GetDescriptor>
 8007636:	4603      	mov	r3, r0
 8007638:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800763a:	7bfb      	ldrb	r3, [r7, #15]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d10a      	bne.n	8007656 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800764c:	78fa      	ldrb	r2, [r7, #3]
 800764e:	b292      	uxth	r2, r2
 8007650:	4619      	mov	r1, r3
 8007652:	f000 f918 	bl	8007886 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007656:	7bfb      	ldrb	r3, [r7, #15]
}
 8007658:	4618      	mov	r0, r3
 800765a:	3710      	adds	r7, #16
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007660:	b580      	push	{r7, lr}
 8007662:	b086      	sub	sp, #24
 8007664:	af02      	add	r7, sp, #8
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	460b      	mov	r3, r1
 800766a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	331c      	adds	r3, #28
 8007670:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007672:	887b      	ldrh	r3, [r7, #2]
 8007674:	9300      	str	r3, [sp, #0]
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	f44f 7200 	mov.w	r2, #512	; 0x200
 800767c:	2100      	movs	r1, #0
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 f83d 	bl	80076fe <USBH_GetDescriptor>
 8007684:	4603      	mov	r3, r0
 8007686:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007688:	7bfb      	ldrb	r3, [r7, #15]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d107      	bne.n	800769e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800768e:	887b      	ldrh	r3, [r7, #2]
 8007690:	461a      	mov	r2, r3
 8007692:	68b9      	ldr	r1, [r7, #8]
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 f987 	bl	80079a8 <USBH_ParseCfgDesc>
 800769a:	4603      	mov	r3, r0
 800769c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800769e:	7bfb      	ldrb	r3, [r7, #15]
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3710      	adds	r7, #16
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b088      	sub	sp, #32
 80076ac:	af02      	add	r7, sp, #8
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	607a      	str	r2, [r7, #4]
 80076b2:	461a      	mov	r2, r3
 80076b4:	460b      	mov	r3, r1
 80076b6:	72fb      	strb	r3, [r7, #11]
 80076b8:	4613      	mov	r3, r2
 80076ba:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80076bc:	7afb      	ldrb	r3, [r7, #11]
 80076be:	b29b      	uxth	r3, r3
 80076c0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80076c4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80076cc:	893b      	ldrh	r3, [r7, #8]
 80076ce:	9300      	str	r3, [sp, #0]
 80076d0:	460b      	mov	r3, r1
 80076d2:	2100      	movs	r1, #0
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f000 f812 	bl	80076fe <USBH_GetDescriptor>
 80076da:	4603      	mov	r3, r0
 80076dc:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80076de:	7dfb      	ldrb	r3, [r7, #23]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d107      	bne.n	80076f4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80076ea:	893a      	ldrh	r2, [r7, #8]
 80076ec:	6879      	ldr	r1, [r7, #4]
 80076ee:	4618      	mov	r0, r3
 80076f0:	f000 fb24 	bl	8007d3c <USBH_ParseStringDesc>
  }

  return status;
 80076f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3718      	adds	r7, #24
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}

080076fe <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80076fe:	b580      	push	{r7, lr}
 8007700:	b084      	sub	sp, #16
 8007702:	af00      	add	r7, sp, #0
 8007704:	60f8      	str	r0, [r7, #12]
 8007706:	607b      	str	r3, [r7, #4]
 8007708:	460b      	mov	r3, r1
 800770a:	72fb      	strb	r3, [r7, #11]
 800770c:	4613      	mov	r3, r2
 800770e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	789b      	ldrb	r3, [r3, #2]
 8007714:	2b01      	cmp	r3, #1
 8007716:	d11c      	bne.n	8007752 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007718:	7afb      	ldrb	r3, [r7, #11]
 800771a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800771e:	b2da      	uxtb	r2, r3
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2206      	movs	r2, #6
 8007728:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	893a      	ldrh	r2, [r7, #8]
 800772e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007730:	893b      	ldrh	r3, [r7, #8]
 8007732:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007736:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800773a:	d104      	bne.n	8007746 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f240 4209 	movw	r2, #1033	; 0x409
 8007742:	829a      	strh	r2, [r3, #20]
 8007744:	e002      	b.n	800774c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2200      	movs	r2, #0
 800774a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	8b3a      	ldrh	r2, [r7, #24]
 8007750:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007752:	8b3b      	ldrh	r3, [r7, #24]
 8007754:	461a      	mov	r2, r3
 8007756:	6879      	ldr	r1, [r7, #4]
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f000 fb3d 	bl	8007dd8 <USBH_CtlReq>
 800775e:	4603      	mov	r3, r0
}
 8007760:	4618      	mov	r0, r3
 8007762:	3710      	adds	r7, #16
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	460b      	mov	r3, r1
 8007772:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	789b      	ldrb	r3, [r3, #2]
 8007778:	2b01      	cmp	r3, #1
 800777a:	d10f      	bne.n	800779c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2205      	movs	r2, #5
 8007786:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007788:	78fb      	ldrb	r3, [r7, #3]
 800778a:	b29a      	uxth	r2, r3
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800779c:	2200      	movs	r2, #0
 800779e:	2100      	movs	r1, #0
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 fb19 	bl	8007dd8 <USBH_CtlReq>
 80077a6:	4603      	mov	r3, r0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3708      	adds	r7, #8
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	460b      	mov	r3, r1
 80077ba:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	789b      	ldrb	r3, [r3, #2]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d10e      	bne.n	80077e2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2200      	movs	r2, #0
 80077c8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2209      	movs	r2, #9
 80077ce:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	887a      	ldrh	r2, [r7, #2]
 80077d4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80077e2:	2200      	movs	r2, #0
 80077e4:	2100      	movs	r1, #0
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 faf6 	bl	8007dd8 <USBH_CtlReq>
 80077ec:	4603      	mov	r3, r0
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3708      	adds	r7, #8
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}

080077f6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80077f6:	b580      	push	{r7, lr}
 80077f8:	b082      	sub	sp, #8
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
 80077fe:	460b      	mov	r3, r1
 8007800:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	789b      	ldrb	r3, [r3, #2]
 8007806:	2b01      	cmp	r3, #1
 8007808:	d10f      	bne.n	800782a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2203      	movs	r2, #3
 8007814:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007816:	78fb      	ldrb	r3, [r7, #3]
 8007818:	b29a      	uxth	r2, r3
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2200      	movs	r2, #0
 8007822:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800782a:	2200      	movs	r2, #0
 800782c:	2100      	movs	r1, #0
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 fad2 	bl	8007dd8 <USBH_CtlReq>
 8007834:	4603      	mov	r3, r0
}
 8007836:	4618      	mov	r0, r3
 8007838:	3708      	adds	r7, #8
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}

0800783e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800783e:	b580      	push	{r7, lr}
 8007840:	b082      	sub	sp, #8
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
 8007846:	460b      	mov	r3, r1
 8007848:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	789b      	ldrb	r3, [r3, #2]
 800784e:	2b01      	cmp	r3, #1
 8007850:	d10f      	bne.n	8007872 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2202      	movs	r2, #2
 8007856:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007864:	78fb      	ldrb	r3, [r7, #3]
 8007866:	b29a      	uxth	r2, r3
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007872:	2200      	movs	r2, #0
 8007874:	2100      	movs	r1, #0
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 faae 	bl	8007dd8 <USBH_CtlReq>
 800787c:	4603      	mov	r3, r0
}
 800787e:	4618      	mov	r0, r3
 8007880:	3708      	adds	r7, #8
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}

08007886 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007886:	b480      	push	{r7}
 8007888:	b085      	sub	sp, #20
 800788a:	af00      	add	r7, sp, #0
 800788c:	60f8      	str	r0, [r7, #12]
 800788e:	60b9      	str	r1, [r7, #8]
 8007890:	4613      	mov	r3, r2
 8007892:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	781a      	ldrb	r2, [r3, #0]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	785a      	ldrb	r2, [r3, #1]
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	3302      	adds	r3, #2
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	b29a      	uxth	r2, r3
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	3303      	adds	r3, #3
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	021b      	lsls	r3, r3, #8
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	4313      	orrs	r3, r2
 80078ba:	b29a      	uxth	r2, r3
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	791a      	ldrb	r2, [r3, #4]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	795a      	ldrb	r2, [r3, #5]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	799a      	ldrb	r2, [r3, #6]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	79da      	ldrb	r2, [r3, #7]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	79db      	ldrb	r3, [r3, #7]
 80078e4:	2b20      	cmp	r3, #32
 80078e6:	dc11      	bgt.n	800790c <USBH_ParseDevDesc+0x86>
 80078e8:	2b08      	cmp	r3, #8
 80078ea:	db16      	blt.n	800791a <USBH_ParseDevDesc+0x94>
 80078ec:	3b08      	subs	r3, #8
 80078ee:	2201      	movs	r2, #1
 80078f0:	fa02 f303 	lsl.w	r3, r2, r3
 80078f4:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80078f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	bf14      	ite	ne
 8007900:	2301      	movne	r3, #1
 8007902:	2300      	moveq	r3, #0
 8007904:	b2db      	uxtb	r3, r3
 8007906:	2b00      	cmp	r3, #0
 8007908:	d102      	bne.n	8007910 <USBH_ParseDevDesc+0x8a>
 800790a:	e006      	b.n	800791a <USBH_ParseDevDesc+0x94>
 800790c:	2b40      	cmp	r3, #64	; 0x40
 800790e:	d104      	bne.n	800791a <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	79da      	ldrb	r2, [r3, #7]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	71da      	strb	r2, [r3, #7]
      break;
 8007918:	e003      	b.n	8007922 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2240      	movs	r2, #64	; 0x40
 800791e:	71da      	strb	r2, [r3, #7]
      break;
 8007920:	bf00      	nop
  }

  if (length > 8U)
 8007922:	88fb      	ldrh	r3, [r7, #6]
 8007924:	2b08      	cmp	r3, #8
 8007926:	d939      	bls.n	800799c <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	3308      	adds	r3, #8
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	b29a      	uxth	r2, r3
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	3309      	adds	r3, #9
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	b29b      	uxth	r3, r3
 8007938:	021b      	lsls	r3, r3, #8
 800793a:	b29b      	uxth	r3, r3
 800793c:	4313      	orrs	r3, r2
 800793e:	b29a      	uxth	r2, r3
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	330a      	adds	r3, #10
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	b29a      	uxth	r2, r3
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	330b      	adds	r3, #11
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	b29b      	uxth	r3, r3
 8007954:	021b      	lsls	r3, r3, #8
 8007956:	b29b      	uxth	r3, r3
 8007958:	4313      	orrs	r3, r2
 800795a:	b29a      	uxth	r2, r3
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	330c      	adds	r3, #12
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	b29a      	uxth	r2, r3
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	330d      	adds	r3, #13
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	b29b      	uxth	r3, r3
 8007970:	021b      	lsls	r3, r3, #8
 8007972:	b29b      	uxth	r3, r3
 8007974:	4313      	orrs	r3, r2
 8007976:	b29a      	uxth	r2, r3
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	7b9a      	ldrb	r2, [r3, #14]
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	7bda      	ldrb	r2, [r3, #15]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	7c1a      	ldrb	r2, [r3, #16]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	7c5a      	ldrb	r2, [r3, #17]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	745a      	strb	r2, [r3, #17]
  }
}
 800799c:	bf00      	nop
 800799e:	3714      	adds	r7, #20
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b08c      	sub	sp, #48	; 0x30
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	60b9      	str	r1, [r7, #8]
 80079b2:	4613      	mov	r3, r2
 80079b4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80079bc:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80079be:	2300      	movs	r3, #0
 80079c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80079c8:	2300      	movs	r3, #0
 80079ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80079ce:	2300      	movs	r3, #0
 80079d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	781a      	ldrb	r2, [r3, #0]
 80079dc:	6a3b      	ldr	r3, [r7, #32]
 80079de:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	785a      	ldrb	r2, [r3, #1]
 80079e4:	6a3b      	ldr	r3, [r7, #32]
 80079e6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	3302      	adds	r3, #2
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	b29a      	uxth	r2, r3
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	3303      	adds	r3, #3
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	021b      	lsls	r3, r3, #8
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	4313      	orrs	r3, r2
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a04:	bf28      	it	cs
 8007a06:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007a0a:	b29a      	uxth	r2, r3
 8007a0c:	6a3b      	ldr	r3, [r7, #32]
 8007a0e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	791a      	ldrb	r2, [r3, #4]
 8007a14:	6a3b      	ldr	r3, [r7, #32]
 8007a16:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	795a      	ldrb	r2, [r3, #5]
 8007a1c:	6a3b      	ldr	r3, [r7, #32]
 8007a1e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	799a      	ldrb	r2, [r3, #6]
 8007a24:	6a3b      	ldr	r3, [r7, #32]
 8007a26:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	79da      	ldrb	r2, [r3, #7]
 8007a2c:	6a3b      	ldr	r3, [r7, #32]
 8007a2e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	7a1a      	ldrb	r2, [r3, #8]
 8007a34:	6a3b      	ldr	r3, [r7, #32]
 8007a36:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007a38:	6a3b      	ldr	r3, [r7, #32]
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	2b09      	cmp	r3, #9
 8007a3e:	d002      	beq.n	8007a46 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007a40:	6a3b      	ldr	r3, [r7, #32]
 8007a42:	2209      	movs	r2, #9
 8007a44:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007a46:	88fb      	ldrh	r3, [r7, #6]
 8007a48:	2b09      	cmp	r3, #9
 8007a4a:	f240 809d 	bls.w	8007b88 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007a4e:	2309      	movs	r3, #9
 8007a50:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007a52:	2300      	movs	r3, #0
 8007a54:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007a56:	e081      	b.n	8007b5c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007a58:	f107 0316 	add.w	r3, r7, #22
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a60:	f000 f99f 	bl	8007da2 <USBH_GetNextDesc>
 8007a64:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a68:	785b      	ldrb	r3, [r3, #1]
 8007a6a:	2b04      	cmp	r3, #4
 8007a6c:	d176      	bne.n	8007b5c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	2b09      	cmp	r3, #9
 8007a74:	d002      	beq.n	8007a7c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a78:	2209      	movs	r2, #9
 8007a7a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007a7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a80:	221a      	movs	r2, #26
 8007a82:	fb02 f303 	mul.w	r3, r2, r3
 8007a86:	3308      	adds	r3, #8
 8007a88:	6a3a      	ldr	r2, [r7, #32]
 8007a8a:	4413      	add	r3, r2
 8007a8c:	3302      	adds	r3, #2
 8007a8e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007a90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a92:	69f8      	ldr	r0, [r7, #28]
 8007a94:	f000 f87e 	bl	8007b94 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007aa2:	e043      	b.n	8007b2c <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007aa4:	f107 0316 	add.w	r3, r7, #22
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007aac:	f000 f979 	bl	8007da2 <USBH_GetNextDesc>
 8007ab0:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab4:	785b      	ldrb	r3, [r3, #1]
 8007ab6:	2b05      	cmp	r3, #5
 8007ab8:	d138      	bne.n	8007b2c <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007aba:	69fb      	ldr	r3, [r7, #28]
 8007abc:	795b      	ldrb	r3, [r3, #5]
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d10f      	bne.n	8007ae2 <USBH_ParseCfgDesc+0x13a>
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	799b      	ldrb	r3, [r3, #6]
 8007ac6:	2b02      	cmp	r3, #2
 8007ac8:	d10b      	bne.n	8007ae2 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007aca:	69fb      	ldr	r3, [r7, #28]
 8007acc:	79db      	ldrb	r3, [r3, #7]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d10f      	bne.n	8007af2 <USBH_ParseCfgDesc+0x14a>
 8007ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	2b09      	cmp	r3, #9
 8007ad8:	d00b      	beq.n	8007af2 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007adc:	2209      	movs	r2, #9
 8007ade:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007ae0:	e007      	b.n	8007af2 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	2b07      	cmp	r3, #7
 8007ae8:	d004      	beq.n	8007af4 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aec:	2207      	movs	r2, #7
 8007aee:	701a      	strb	r2, [r3, #0]
 8007af0:	e000      	b.n	8007af4 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007af2:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007af4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007af8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007afc:	3201      	adds	r2, #1
 8007afe:	00d2      	lsls	r2, r2, #3
 8007b00:	211a      	movs	r1, #26
 8007b02:	fb01 f303 	mul.w	r3, r1, r3
 8007b06:	4413      	add	r3, r2
 8007b08:	3308      	adds	r3, #8
 8007b0a:	6a3a      	ldr	r2, [r7, #32]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	3304      	adds	r3, #4
 8007b10:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007b12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b14:	69b9      	ldr	r1, [r7, #24]
 8007b16:	68f8      	ldr	r0, [r7, #12]
 8007b18:	f000 f86b 	bl	8007bf2 <USBH_ParseEPDesc>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007b22:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007b26:	3301      	adds	r3, #1
 8007b28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007b2c:	69fb      	ldr	r3, [r7, #28]
 8007b2e:	791b      	ldrb	r3, [r3, #4]
 8007b30:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d204      	bcs.n	8007b42 <USBH_ParseCfgDesc+0x19a>
 8007b38:	6a3b      	ldr	r3, [r7, #32]
 8007b3a:	885a      	ldrh	r2, [r3, #2]
 8007b3c:	8afb      	ldrh	r3, [r7, #22]
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d8b0      	bhi.n	8007aa4 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007b42:	69fb      	ldr	r3, [r7, #28]
 8007b44:	791b      	ldrb	r3, [r3, #4]
 8007b46:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d201      	bcs.n	8007b52 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007b4e:	2303      	movs	r3, #3
 8007b50:	e01c      	b.n	8007b8c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007b52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b56:	3301      	adds	r3, #1
 8007b58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007b5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d805      	bhi.n	8007b70 <USBH_ParseCfgDesc+0x1c8>
 8007b64:	6a3b      	ldr	r3, [r7, #32]
 8007b66:	885a      	ldrh	r2, [r3, #2]
 8007b68:	8afb      	ldrh	r3, [r7, #22]
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	f63f af74 	bhi.w	8007a58 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007b70:	6a3b      	ldr	r3, [r7, #32]
 8007b72:	791b      	ldrb	r3, [r3, #4]
 8007b74:	2b02      	cmp	r3, #2
 8007b76:	bf28      	it	cs
 8007b78:	2302      	movcs	r3, #2
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d201      	bcs.n	8007b88 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007b84:	2303      	movs	r3, #3
 8007b86:	e001      	b.n	8007b8c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007b88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3730      	adds	r7, #48	; 0x30
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	781a      	ldrb	r2, [r3, #0]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	785a      	ldrb	r2, [r3, #1]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	789a      	ldrb	r2, [r3, #2]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	78da      	ldrb	r2, [r3, #3]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	791a      	ldrb	r2, [r3, #4]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	795a      	ldrb	r2, [r3, #5]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	799a      	ldrb	r2, [r3, #6]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	79da      	ldrb	r2, [r3, #7]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	7a1a      	ldrb	r2, [r3, #8]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	721a      	strb	r2, [r3, #8]
}
 8007be6:	bf00      	nop
 8007be8:	370c      	adds	r7, #12
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr

08007bf2 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007bf2:	b480      	push	{r7}
 8007bf4:	b087      	sub	sp, #28
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	60f8      	str	r0, [r7, #12]
 8007bfa:	60b9      	str	r1, [r7, #8]
 8007bfc:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	781a      	ldrb	r2, [r3, #0]
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	785a      	ldrb	r2, [r3, #1]
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	789a      	ldrb	r2, [r3, #2]
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	78da      	ldrb	r2, [r3, #3]
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	3304      	adds	r3, #4
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	b29a      	uxth	r2, r3
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	3305      	adds	r3, #5
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	021b      	lsls	r3, r3, #8
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	4313      	orrs	r3, r2
 8007c38:	b29a      	uxth	r2, r3
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	799a      	ldrb	r2, [r3, #6]
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	889b      	ldrh	r3, [r3, #4]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d102      	bne.n	8007c54 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007c4e:	2303      	movs	r3, #3
 8007c50:	75fb      	strb	r3, [r7, #23]
 8007c52:	e033      	b.n	8007cbc <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	889b      	ldrh	r3, [r3, #4]
 8007c58:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007c5c:	f023 0307 	bic.w	r3, r3, #7
 8007c60:	b29a      	uxth	r2, r3
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	889b      	ldrh	r3, [r3, #4]
 8007c6a:	b21a      	sxth	r2, r3
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	3304      	adds	r3, #4
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	b299      	uxth	r1, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	3305      	adds	r3, #5
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	021b      	lsls	r3, r3, #8
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	430b      	orrs	r3, r1
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d110      	bne.n	8007cae <USBH_ParseEPDesc+0xbc>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	3304      	adds	r3, #4
 8007c90:	781b      	ldrb	r3, [r3, #0]
 8007c92:	b299      	uxth	r1, r3
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	3305      	adds	r3, #5
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	021b      	lsls	r3, r3, #8
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	430b      	orrs	r3, r1
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	b21b      	sxth	r3, r3
 8007ca6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007caa:	b21b      	sxth	r3, r3
 8007cac:	e001      	b.n	8007cb2 <USBH_ParseEPDesc+0xc0>
 8007cae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	b21b      	sxth	r3, r3
 8007cb6:	b29a      	uxth	r2, r3
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d116      	bne.n	8007cf4 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	78db      	ldrb	r3, [r3, #3]
 8007cca:	f003 0303 	and.w	r3, r3, #3
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d005      	beq.n	8007cde <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	78db      	ldrb	r3, [r3, #3]
 8007cd6:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007cda:	2b03      	cmp	r3, #3
 8007cdc:	d127      	bne.n	8007d2e <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	799b      	ldrb	r3, [r3, #6]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d003      	beq.n	8007cee <USBH_ParseEPDesc+0xfc>
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	799b      	ldrb	r3, [r3, #6]
 8007cea:	2b10      	cmp	r3, #16
 8007cec:	d91f      	bls.n	8007d2e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007cee:	2303      	movs	r3, #3
 8007cf0:	75fb      	strb	r3, [r7, #23]
 8007cf2:	e01c      	b.n	8007d2e <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	78db      	ldrb	r3, [r3, #3]
 8007cf8:	f003 0303 	and.w	r3, r3, #3
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d10a      	bne.n	8007d16 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	799b      	ldrb	r3, [r3, #6]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d003      	beq.n	8007d10 <USBH_ParseEPDesc+0x11e>
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	799b      	ldrb	r3, [r3, #6]
 8007d0c:	2b10      	cmp	r3, #16
 8007d0e:	d90e      	bls.n	8007d2e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007d10:	2303      	movs	r3, #3
 8007d12:	75fb      	strb	r3, [r7, #23]
 8007d14:	e00b      	b.n	8007d2e <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	78db      	ldrb	r3, [r3, #3]
 8007d1a:	f003 0303 	and.w	r3, r3, #3
 8007d1e:	2b03      	cmp	r3, #3
 8007d20:	d105      	bne.n	8007d2e <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	799b      	ldrb	r3, [r3, #6]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d101      	bne.n	8007d2e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007d2a:	2303      	movs	r3, #3
 8007d2c:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8007d2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	371c      	adds	r7, #28
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b087      	sub	sp, #28
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	60b9      	str	r1, [r7, #8]
 8007d46:	4613      	mov	r3, r2
 8007d48:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	2b03      	cmp	r3, #3
 8007d52:	d120      	bne.n	8007d96 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	1e9a      	subs	r2, r3, #2
 8007d5a:	88fb      	ldrh	r3, [r7, #6]
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	bf28      	it	cs
 8007d60:	4613      	movcs	r3, r2
 8007d62:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	3302      	adds	r3, #2
 8007d68:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	82fb      	strh	r3, [r7, #22]
 8007d6e:	e00b      	b.n	8007d88 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007d70:	8afb      	ldrh	r3, [r7, #22]
 8007d72:	68fa      	ldr	r2, [r7, #12]
 8007d74:	4413      	add	r3, r2
 8007d76:	781a      	ldrb	r2, [r3, #0]
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007d82:	8afb      	ldrh	r3, [r7, #22]
 8007d84:	3302      	adds	r3, #2
 8007d86:	82fb      	strh	r3, [r7, #22]
 8007d88:	8afa      	ldrh	r2, [r7, #22]
 8007d8a:	8abb      	ldrh	r3, [r7, #20]
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d3ef      	bcc.n	8007d70 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	2200      	movs	r2, #0
 8007d94:	701a      	strb	r2, [r3, #0]
  }
}
 8007d96:	bf00      	nop
 8007d98:	371c      	adds	r7, #28
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr

08007da2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007da2:	b480      	push	{r7}
 8007da4:	b085      	sub	sp, #20
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
 8007daa:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	881a      	ldrh	r2, [r3, #0]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	4413      	add	r3, r2
 8007db8:	b29a      	uxth	r2, r3
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	4413      	add	r3, r2
 8007dc8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007dca:	68fb      	ldr	r3, [r7, #12]
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3714      	adds	r7, #20
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b086      	sub	sp, #24
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	60f8      	str	r0, [r7, #12]
 8007de0:	60b9      	str	r1, [r7, #8]
 8007de2:	4613      	mov	r3, r2
 8007de4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007de6:	2301      	movs	r3, #1
 8007de8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	789b      	ldrb	r3, [r3, #2]
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d002      	beq.n	8007df8 <USBH_CtlReq+0x20>
 8007df2:	2b02      	cmp	r3, #2
 8007df4:	d01d      	beq.n	8007e32 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8007df6:	e043      	b.n	8007e80 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	68ba      	ldr	r2, [r7, #8]
 8007dfc:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	88fa      	ldrh	r2, [r7, #6]
 8007e02:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2201      	movs	r2, #1
 8007e08:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2202      	movs	r2, #2
 8007e0e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007e10:	2301      	movs	r3, #1
 8007e12:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2203      	movs	r2, #3
 8007e18:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007e28:	2300      	movs	r3, #0
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f000 fe06 	bl	8008a3c <osMessageQueuePut>
      break;
 8007e30:	e026      	b.n	8007e80 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8007e32:	68f8      	ldr	r0, [r7, #12]
 8007e34:	f000 f82a 	bl	8007e8c <USBH_HandleControl>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007e3c:	7dfb      	ldrb	r3, [r7, #23]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d002      	beq.n	8007e48 <USBH_CtlReq+0x70>
 8007e42:	7dfb      	ldrb	r3, [r7, #23]
 8007e44:	2b03      	cmp	r3, #3
 8007e46:	d106      	bne.n	8007e56 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2200      	movs	r2, #0
 8007e52:	761a      	strb	r2, [r3, #24]
 8007e54:	e005      	b.n	8007e62 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8007e56:	7dfb      	ldrb	r3, [r7, #23]
 8007e58:	2b02      	cmp	r3, #2
 8007e5a:	d102      	bne.n	8007e62 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2203      	movs	r2, #3
 8007e66:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007e76:	2300      	movs	r3, #0
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f000 fddf 	bl	8008a3c <osMessageQueuePut>
      break;
 8007e7e:	bf00      	nop
  }
  return status;
 8007e80:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3718      	adds	r7, #24
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
	...

08007e8c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b086      	sub	sp, #24
 8007e90:	af02      	add	r7, sp, #8
 8007e92:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007e94:	2301      	movs	r3, #1
 8007e96:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	7e1b      	ldrb	r3, [r3, #24]
 8007ea0:	3b01      	subs	r3, #1
 8007ea2:	2b0a      	cmp	r3, #10
 8007ea4:	f200 8229 	bhi.w	80082fa <USBH_HandleControl+0x46e>
 8007ea8:	a201      	add	r2, pc, #4	; (adr r2, 8007eb0 <USBH_HandleControl+0x24>)
 8007eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eae:	bf00      	nop
 8007eb0:	08007edd 	.word	0x08007edd
 8007eb4:	08007ef7 	.word	0x08007ef7
 8007eb8:	08007f99 	.word	0x08007f99
 8007ebc:	08007fbf 	.word	0x08007fbf
 8007ec0:	0800804b 	.word	0x0800804b
 8007ec4:	08008075 	.word	0x08008075
 8007ec8:	08008137 	.word	0x08008137
 8007ecc:	08008159 	.word	0x08008159
 8007ed0:	080081eb 	.word	0x080081eb
 8007ed4:	08008211 	.word	0x08008211
 8007ed8:	080082a3 	.word	0x080082a3
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f103 0110 	add.w	r1, r3, #16
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	795b      	ldrb	r3, [r3, #5]
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 fa17 	bl	800831c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2202      	movs	r2, #2
 8007ef2:	761a      	strb	r2, [r3, #24]
      break;
 8007ef4:	e20c      	b.n	8008310 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	795b      	ldrb	r3, [r3, #5]
 8007efa:	4619      	mov	r1, r3
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f003 fe79 	bl	800bbf4 <USBH_LL_GetURBState>
 8007f02:	4603      	mov	r3, r0
 8007f04:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007f06:	7bbb      	ldrb	r3, [r7, #14]
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d12c      	bne.n	8007f66 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	7c1b      	ldrb	r3, [r3, #16]
 8007f10:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007f14:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	8adb      	ldrh	r3, [r3, #22]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00a      	beq.n	8007f34 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007f1e:	7b7b      	ldrb	r3, [r7, #13]
 8007f20:	2b80      	cmp	r3, #128	; 0x80
 8007f22:	d103      	bne.n	8007f2c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2203      	movs	r2, #3
 8007f28:	761a      	strb	r2, [r3, #24]
 8007f2a:	e00d      	b.n	8007f48 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2205      	movs	r2, #5
 8007f30:	761a      	strb	r2, [r3, #24]
 8007f32:	e009      	b.n	8007f48 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8007f34:	7b7b      	ldrb	r3, [r7, #13]
 8007f36:	2b80      	cmp	r3, #128	; 0x80
 8007f38:	d103      	bne.n	8007f42 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2209      	movs	r2, #9
 8007f3e:	761a      	strb	r2, [r3, #24]
 8007f40:	e002      	b.n	8007f48 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2207      	movs	r2, #7
 8007f46:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2203      	movs	r2, #3
 8007f4c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f000 fd6c 	bl	8008a3c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007f64:	e1cb      	b.n	80082fe <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007f66:	7bbb      	ldrb	r3, [r7, #14]
 8007f68:	2b04      	cmp	r3, #4
 8007f6a:	d003      	beq.n	8007f74 <USBH_HandleControl+0xe8>
 8007f6c:	7bbb      	ldrb	r3, [r7, #14]
 8007f6e:	2b02      	cmp	r3, #2
 8007f70:	f040 81c5 	bne.w	80082fe <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	220b      	movs	r2, #11
 8007f78:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2203      	movs	r2, #3
 8007f7e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007f8e:	2300      	movs	r3, #0
 8007f90:	2200      	movs	r2, #0
 8007f92:	f000 fd53 	bl	8008a3c <osMessageQueuePut>
      break;
 8007f96:	e1b2      	b.n	80082fe <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007f9e:	b29a      	uxth	r2, r3
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6899      	ldr	r1, [r3, #8]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	899a      	ldrh	r2, [r3, #12]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	791b      	ldrb	r3, [r3, #4]
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 f9f2 	bl	800839a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2204      	movs	r2, #4
 8007fba:	761a      	strb	r2, [r3, #24]
      break;
 8007fbc:	e1a8      	b.n	8008310 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	791b      	ldrb	r3, [r3, #4]
 8007fc2:	4619      	mov	r1, r3
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f003 fe15 	bl	800bbf4 <USBH_LL_GetURBState>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007fce:	7bbb      	ldrb	r3, [r7, #14]
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d110      	bne.n	8007ff6 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2209      	movs	r2, #9
 8007fd8:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2203      	movs	r2, #3
 8007fde:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007fee:	2300      	movs	r3, #0
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	f000 fd23 	bl	8008a3c <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007ff6:	7bbb      	ldrb	r3, [r7, #14]
 8007ff8:	2b05      	cmp	r3, #5
 8007ffa:	d110      	bne.n	800801e <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007ffc:	2303      	movs	r3, #3
 8007ffe:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2203      	movs	r2, #3
 8008004:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008014:	2300      	movs	r3, #0
 8008016:	2200      	movs	r2, #0
 8008018:	f000 fd10 	bl	8008a3c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800801c:	e171      	b.n	8008302 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800801e:	7bbb      	ldrb	r3, [r7, #14]
 8008020:	2b04      	cmp	r3, #4
 8008022:	f040 816e 	bne.w	8008302 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	220b      	movs	r2, #11
 800802a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2203      	movs	r2, #3
 8008030:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008040:	2300      	movs	r3, #0
 8008042:	2200      	movs	r2, #0
 8008044:	f000 fcfa 	bl	8008a3c <osMessageQueuePut>
      break;
 8008048:	e15b      	b.n	8008302 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6899      	ldr	r1, [r3, #8]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	899a      	ldrh	r2, [r3, #12]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	795b      	ldrb	r3, [r3, #5]
 8008056:	2001      	movs	r0, #1
 8008058:	9000      	str	r0, [sp, #0]
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 f978 	bl	8008350 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008066:	b29a      	uxth	r2, r3
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2206      	movs	r2, #6
 8008070:	761a      	strb	r2, [r3, #24]
      break;
 8008072:	e14d      	b.n	8008310 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	795b      	ldrb	r3, [r3, #5]
 8008078:	4619      	mov	r1, r3
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f003 fdba 	bl	800bbf4 <USBH_LL_GetURBState>
 8008080:	4603      	mov	r3, r0
 8008082:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008084:	7bbb      	ldrb	r3, [r7, #14]
 8008086:	2b01      	cmp	r3, #1
 8008088:	d111      	bne.n	80080ae <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2207      	movs	r2, #7
 800808e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2203      	movs	r2, #3
 8008094:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80080a4:	2300      	movs	r3, #0
 80080a6:	2200      	movs	r2, #0
 80080a8:	f000 fcc8 	bl	8008a3c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80080ac:	e12b      	b.n	8008306 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 80080ae:	7bbb      	ldrb	r3, [r7, #14]
 80080b0:	2b05      	cmp	r3, #5
 80080b2:	d113      	bne.n	80080dc <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	220c      	movs	r2, #12
 80080b8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80080ba:	2303      	movs	r3, #3
 80080bc:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2203      	movs	r2, #3
 80080c2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80080d2:	2300      	movs	r3, #0
 80080d4:	2200      	movs	r2, #0
 80080d6:	f000 fcb1 	bl	8008a3c <osMessageQueuePut>
      break;
 80080da:	e114      	b.n	8008306 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 80080dc:	7bbb      	ldrb	r3, [r7, #14]
 80080de:	2b02      	cmp	r3, #2
 80080e0:	d111      	bne.n	8008106 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2205      	movs	r2, #5
 80080e6:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2203      	movs	r2, #3
 80080ec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80080fc:	2300      	movs	r3, #0
 80080fe:	2200      	movs	r2, #0
 8008100:	f000 fc9c 	bl	8008a3c <osMessageQueuePut>
      break;
 8008104:	e0ff      	b.n	8008306 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8008106:	7bbb      	ldrb	r3, [r7, #14]
 8008108:	2b04      	cmp	r3, #4
 800810a:	f040 80fc 	bne.w	8008306 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	220b      	movs	r2, #11
 8008112:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008114:	2302      	movs	r3, #2
 8008116:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2203      	movs	r2, #3
 800811c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800812c:	2300      	movs	r3, #0
 800812e:	2200      	movs	r2, #0
 8008130:	f000 fc84 	bl	8008a3c <osMessageQueuePut>
      break;
 8008134:	e0e7      	b.n	8008306 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	791b      	ldrb	r3, [r3, #4]
 800813a:	2200      	movs	r2, #0
 800813c:	2100      	movs	r1, #0
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 f92b 	bl	800839a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800814a:	b29a      	uxth	r2, r3
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2208      	movs	r2, #8
 8008154:	761a      	strb	r2, [r3, #24]

      break;
 8008156:	e0db      	b.n	8008310 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	791b      	ldrb	r3, [r3, #4]
 800815c:	4619      	mov	r1, r3
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f003 fd48 	bl	800bbf4 <USBH_LL_GetURBState>
 8008164:	4603      	mov	r3, r0
 8008166:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008168:	7bbb      	ldrb	r3, [r7, #14]
 800816a:	2b01      	cmp	r3, #1
 800816c:	d113      	bne.n	8008196 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	220d      	movs	r2, #13
 8008172:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008174:	2300      	movs	r3, #0
 8008176:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2203      	movs	r2, #3
 800817c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800818c:	2300      	movs	r3, #0
 800818e:	2200      	movs	r2, #0
 8008190:	f000 fc54 	bl	8008a3c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008194:	e0b9      	b.n	800830a <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 8008196:	7bbb      	ldrb	r3, [r7, #14]
 8008198:	2b04      	cmp	r3, #4
 800819a:	d111      	bne.n	80081c0 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	220b      	movs	r2, #11
 80081a0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2203      	movs	r2, #3
 80081a6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80081b6:	2300      	movs	r3, #0
 80081b8:	2200      	movs	r2, #0
 80081ba:	f000 fc3f 	bl	8008a3c <osMessageQueuePut>
      break;
 80081be:	e0a4      	b.n	800830a <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 80081c0:	7bbb      	ldrb	r3, [r7, #14]
 80081c2:	2b05      	cmp	r3, #5
 80081c4:	f040 80a1 	bne.w	800830a <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 80081c8:	2303      	movs	r3, #3
 80081ca:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2203      	movs	r2, #3
 80081d0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80081e0:	2300      	movs	r3, #0
 80081e2:	2200      	movs	r2, #0
 80081e4:	f000 fc2a 	bl	8008a3c <osMessageQueuePut>
      break;
 80081e8:	e08f      	b.n	800830a <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	795b      	ldrb	r3, [r3, #5]
 80081ee:	2201      	movs	r2, #1
 80081f0:	9200      	str	r2, [sp, #0]
 80081f2:	2200      	movs	r2, #0
 80081f4:	2100      	movs	r1, #0
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 f8aa 	bl	8008350 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008202:	b29a      	uxth	r2, r3
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	220a      	movs	r2, #10
 800820c:	761a      	strb	r2, [r3, #24]
      break;
 800820e:	e07f      	b.n	8008310 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	795b      	ldrb	r3, [r3, #5]
 8008214:	4619      	mov	r1, r3
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f003 fcec 	bl	800bbf4 <USBH_LL_GetURBState>
 800821c:	4603      	mov	r3, r0
 800821e:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008220:	7bbb      	ldrb	r3, [r7, #14]
 8008222:	2b01      	cmp	r3, #1
 8008224:	d113      	bne.n	800824e <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8008226:	2300      	movs	r3, #0
 8008228:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	220d      	movs	r2, #13
 800822e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2203      	movs	r2, #3
 8008234:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008244:	2300      	movs	r3, #0
 8008246:	2200      	movs	r2, #0
 8008248:	f000 fbf8 	bl	8008a3c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800824c:	e05f      	b.n	800830e <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800824e:	7bbb      	ldrb	r3, [r7, #14]
 8008250:	2b02      	cmp	r3, #2
 8008252:	d111      	bne.n	8008278 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2209      	movs	r2, #9
 8008258:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2203      	movs	r2, #3
 800825e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800826e:	2300      	movs	r3, #0
 8008270:	2200      	movs	r2, #0
 8008272:	f000 fbe3 	bl	8008a3c <osMessageQueuePut>
      break;
 8008276:	e04a      	b.n	800830e <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8008278:	7bbb      	ldrb	r3, [r7, #14]
 800827a:	2b04      	cmp	r3, #4
 800827c:	d147      	bne.n	800830e <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	220b      	movs	r2, #11
 8008282:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2203      	movs	r2, #3
 8008288:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008298:	2300      	movs	r3, #0
 800829a:	2200      	movs	r2, #0
 800829c:	f000 fbce 	bl	8008a3c <osMessageQueuePut>
      break;
 80082a0:	e035      	b.n	800830e <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	7e5b      	ldrb	r3, [r3, #25]
 80082a6:	3301      	adds	r3, #1
 80082a8:	b2da      	uxtb	r2, r3
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	765a      	strb	r2, [r3, #25]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	7e5b      	ldrb	r3, [r3, #25]
 80082b2:	2b02      	cmp	r3, #2
 80082b4:	d806      	bhi.n	80082c4 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2201      	movs	r2, #1
 80082ba:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2201      	movs	r2, #1
 80082c0:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80082c2:	e025      	b.n	8008310 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80082ca:	2106      	movs	r1, #6
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	795b      	ldrb	r3, [r3, #5]
 80082da:	4619      	mov	r1, r3
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 f90d 	bl	80084fc <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	791b      	ldrb	r3, [r3, #4]
 80082e6:	4619      	mov	r1, r3
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 f907 	bl	80084fc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80082f4:	2302      	movs	r3, #2
 80082f6:	73fb      	strb	r3, [r7, #15]
      break;
 80082f8:	e00a      	b.n	8008310 <USBH_HandleControl+0x484>

    default:
      break;
 80082fa:	bf00      	nop
 80082fc:	e008      	b.n	8008310 <USBH_HandleControl+0x484>
      break;
 80082fe:	bf00      	nop
 8008300:	e006      	b.n	8008310 <USBH_HandleControl+0x484>
      break;
 8008302:	bf00      	nop
 8008304:	e004      	b.n	8008310 <USBH_HandleControl+0x484>
      break;
 8008306:	bf00      	nop
 8008308:	e002      	b.n	8008310 <USBH_HandleControl+0x484>
      break;
 800830a:	bf00      	nop
 800830c:	e000      	b.n	8008310 <USBH_HandleControl+0x484>
      break;
 800830e:	bf00      	nop
  }

  return status;
 8008310:	7bfb      	ldrb	r3, [r7, #15]
}
 8008312:	4618      	mov	r0, r3
 8008314:	3710      	adds	r7, #16
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
 800831a:	bf00      	nop

0800831c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b088      	sub	sp, #32
 8008320:	af04      	add	r7, sp, #16
 8008322:	60f8      	str	r0, [r7, #12]
 8008324:	60b9      	str	r1, [r7, #8]
 8008326:	4613      	mov	r3, r2
 8008328:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800832a:	79f9      	ldrb	r1, [r7, #7]
 800832c:	2300      	movs	r3, #0
 800832e:	9303      	str	r3, [sp, #12]
 8008330:	2308      	movs	r3, #8
 8008332:	9302      	str	r3, [sp, #8]
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	9301      	str	r3, [sp, #4]
 8008338:	2300      	movs	r3, #0
 800833a:	9300      	str	r3, [sp, #0]
 800833c:	2300      	movs	r3, #0
 800833e:	2200      	movs	r2, #0
 8008340:	68f8      	ldr	r0, [r7, #12]
 8008342:	f003 fc26 	bl	800bb92 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008346:	2300      	movs	r3, #0
}
 8008348:	4618      	mov	r0, r3
 800834a:	3710      	adds	r7, #16
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b088      	sub	sp, #32
 8008354:	af04      	add	r7, sp, #16
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	60b9      	str	r1, [r7, #8]
 800835a:	4611      	mov	r1, r2
 800835c:	461a      	mov	r2, r3
 800835e:	460b      	mov	r3, r1
 8008360:	80fb      	strh	r3, [r7, #6]
 8008362:	4613      	mov	r3, r2
 8008364:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800836c:	2b00      	cmp	r3, #0
 800836e:	d001      	beq.n	8008374 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008370:	2300      	movs	r3, #0
 8008372:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008374:	7979      	ldrb	r1, [r7, #5]
 8008376:	7e3b      	ldrb	r3, [r7, #24]
 8008378:	9303      	str	r3, [sp, #12]
 800837a:	88fb      	ldrh	r3, [r7, #6]
 800837c:	9302      	str	r3, [sp, #8]
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	9301      	str	r3, [sp, #4]
 8008382:	2301      	movs	r3, #1
 8008384:	9300      	str	r3, [sp, #0]
 8008386:	2300      	movs	r3, #0
 8008388:	2200      	movs	r2, #0
 800838a:	68f8      	ldr	r0, [r7, #12]
 800838c:	f003 fc01 	bl	800bb92 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008390:	2300      	movs	r3, #0
}
 8008392:	4618      	mov	r0, r3
 8008394:	3710      	adds	r7, #16
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}

0800839a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800839a:	b580      	push	{r7, lr}
 800839c:	b088      	sub	sp, #32
 800839e:	af04      	add	r7, sp, #16
 80083a0:	60f8      	str	r0, [r7, #12]
 80083a2:	60b9      	str	r1, [r7, #8]
 80083a4:	4611      	mov	r1, r2
 80083a6:	461a      	mov	r2, r3
 80083a8:	460b      	mov	r3, r1
 80083aa:	80fb      	strh	r3, [r7, #6]
 80083ac:	4613      	mov	r3, r2
 80083ae:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80083b0:	7979      	ldrb	r1, [r7, #5]
 80083b2:	2300      	movs	r3, #0
 80083b4:	9303      	str	r3, [sp, #12]
 80083b6:	88fb      	ldrh	r3, [r7, #6]
 80083b8:	9302      	str	r3, [sp, #8]
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	9301      	str	r3, [sp, #4]
 80083be:	2301      	movs	r3, #1
 80083c0:	9300      	str	r3, [sp, #0]
 80083c2:	2300      	movs	r3, #0
 80083c4:	2201      	movs	r2, #1
 80083c6:	68f8      	ldr	r0, [r7, #12]
 80083c8:	f003 fbe3 	bl	800bb92 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80083cc:	2300      	movs	r3, #0

}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3710      	adds	r7, #16
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}

080083d6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80083d6:	b580      	push	{r7, lr}
 80083d8:	b088      	sub	sp, #32
 80083da:	af04      	add	r7, sp, #16
 80083dc:	60f8      	str	r0, [r7, #12]
 80083de:	60b9      	str	r1, [r7, #8]
 80083e0:	4611      	mov	r1, r2
 80083e2:	461a      	mov	r2, r3
 80083e4:	460b      	mov	r3, r1
 80083e6:	80fb      	strh	r3, [r7, #6]
 80083e8:	4613      	mov	r3, r2
 80083ea:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d001      	beq.n	80083fa <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80083f6:	2300      	movs	r3, #0
 80083f8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80083fa:	7979      	ldrb	r1, [r7, #5]
 80083fc:	7e3b      	ldrb	r3, [r7, #24]
 80083fe:	9303      	str	r3, [sp, #12]
 8008400:	88fb      	ldrh	r3, [r7, #6]
 8008402:	9302      	str	r3, [sp, #8]
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	9301      	str	r3, [sp, #4]
 8008408:	2301      	movs	r3, #1
 800840a:	9300      	str	r3, [sp, #0]
 800840c:	2302      	movs	r3, #2
 800840e:	2200      	movs	r2, #0
 8008410:	68f8      	ldr	r0, [r7, #12]
 8008412:	f003 fbbe 	bl	800bb92 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008416:	2300      	movs	r3, #0
}
 8008418:	4618      	mov	r0, r3
 800841a:	3710      	adds	r7, #16
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}

08008420 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b088      	sub	sp, #32
 8008424:	af04      	add	r7, sp, #16
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	60b9      	str	r1, [r7, #8]
 800842a:	4611      	mov	r1, r2
 800842c:	461a      	mov	r2, r3
 800842e:	460b      	mov	r3, r1
 8008430:	80fb      	strh	r3, [r7, #6]
 8008432:	4613      	mov	r3, r2
 8008434:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008436:	7979      	ldrb	r1, [r7, #5]
 8008438:	2300      	movs	r3, #0
 800843a:	9303      	str	r3, [sp, #12]
 800843c:	88fb      	ldrh	r3, [r7, #6]
 800843e:	9302      	str	r3, [sp, #8]
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	9301      	str	r3, [sp, #4]
 8008444:	2301      	movs	r3, #1
 8008446:	9300      	str	r3, [sp, #0]
 8008448:	2302      	movs	r3, #2
 800844a:	2201      	movs	r2, #1
 800844c:	68f8      	ldr	r0, [r7, #12]
 800844e:	f003 fba0 	bl	800bb92 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008452:	2300      	movs	r3, #0
}
 8008454:	4618      	mov	r0, r3
 8008456:	3710      	adds	r7, #16
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b086      	sub	sp, #24
 8008460:	af04      	add	r7, sp, #16
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	4608      	mov	r0, r1
 8008466:	4611      	mov	r1, r2
 8008468:	461a      	mov	r2, r3
 800846a:	4603      	mov	r3, r0
 800846c:	70fb      	strb	r3, [r7, #3]
 800846e:	460b      	mov	r3, r1
 8008470:	70bb      	strb	r3, [r7, #2]
 8008472:	4613      	mov	r3, r2
 8008474:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008476:	7878      	ldrb	r0, [r7, #1]
 8008478:	78ba      	ldrb	r2, [r7, #2]
 800847a:	78f9      	ldrb	r1, [r7, #3]
 800847c:	8b3b      	ldrh	r3, [r7, #24]
 800847e:	9302      	str	r3, [sp, #8]
 8008480:	7d3b      	ldrb	r3, [r7, #20]
 8008482:	9301      	str	r3, [sp, #4]
 8008484:	7c3b      	ldrb	r3, [r7, #16]
 8008486:	9300      	str	r3, [sp, #0]
 8008488:	4603      	mov	r3, r0
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f003 fb33 	bl	800baf6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008490:	2300      	movs	r3, #0
}
 8008492:	4618      	mov	r0, r3
 8008494:	3708      	adds	r7, #8
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}

0800849a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800849a:	b580      	push	{r7, lr}
 800849c:	b082      	sub	sp, #8
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
 80084a2:	460b      	mov	r3, r1
 80084a4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80084a6:	78fb      	ldrb	r3, [r7, #3]
 80084a8:	4619      	mov	r1, r3
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f003 fb52 	bl	800bb54 <USBH_LL_ClosePipe>

  return USBH_OK;
 80084b0:	2300      	movs	r3, #0
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3708      	adds	r7, #8
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}

080084ba <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80084ba:	b580      	push	{r7, lr}
 80084bc:	b084      	sub	sp, #16
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
 80084c2:	460b      	mov	r3, r1
 80084c4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 f836 	bl	8008538 <USBH_GetFreePipe>
 80084cc:	4603      	mov	r3, r0
 80084ce:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80084d0:	89fb      	ldrh	r3, [r7, #14]
 80084d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d00a      	beq.n	80084f0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80084da:	78fa      	ldrb	r2, [r7, #3]
 80084dc:	89fb      	ldrh	r3, [r7, #14]
 80084de:	f003 030f 	and.w	r3, r3, #15
 80084e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80084e6:	6879      	ldr	r1, [r7, #4]
 80084e8:	33e0      	adds	r3, #224	; 0xe0
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	440b      	add	r3, r1
 80084ee:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80084f0:	89fb      	ldrh	r3, [r7, #14]
 80084f2:	b2db      	uxtb	r3, r3
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3710      	adds	r7, #16
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}

080084fc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b083      	sub	sp, #12
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	460b      	mov	r3, r1
 8008506:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008508:	78fb      	ldrb	r3, [r7, #3]
 800850a:	2b0f      	cmp	r3, #15
 800850c:	d80d      	bhi.n	800852a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800850e:	78fb      	ldrb	r3, [r7, #3]
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	33e0      	adds	r3, #224	; 0xe0
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	4413      	add	r3, r2
 8008518:	685a      	ldr	r2, [r3, #4]
 800851a:	78fb      	ldrb	r3, [r7, #3]
 800851c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008520:	6879      	ldr	r1, [r7, #4]
 8008522:	33e0      	adds	r3, #224	; 0xe0
 8008524:	009b      	lsls	r3, r3, #2
 8008526:	440b      	add	r3, r1
 8008528:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800852a:	2300      	movs	r3, #0
}
 800852c:	4618      	mov	r0, r3
 800852e:	370c      	adds	r7, #12
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr

08008538 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008538:	b480      	push	{r7}
 800853a:	b085      	sub	sp, #20
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008540:	2300      	movs	r3, #0
 8008542:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008544:	2300      	movs	r3, #0
 8008546:	73fb      	strb	r3, [r7, #15]
 8008548:	e00f      	b.n	800856a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800854a:	7bfb      	ldrb	r3, [r7, #15]
 800854c:	687a      	ldr	r2, [r7, #4]
 800854e:	33e0      	adds	r3, #224	; 0xe0
 8008550:	009b      	lsls	r3, r3, #2
 8008552:	4413      	add	r3, r2
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800855a:	2b00      	cmp	r3, #0
 800855c:	d102      	bne.n	8008564 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800855e:	7bfb      	ldrb	r3, [r7, #15]
 8008560:	b29b      	uxth	r3, r3
 8008562:	e007      	b.n	8008574 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008564:	7bfb      	ldrb	r3, [r7, #15]
 8008566:	3301      	adds	r3, #1
 8008568:	73fb      	strb	r3, [r7, #15]
 800856a:	7bfb      	ldrb	r3, [r7, #15]
 800856c:	2b0f      	cmp	r3, #15
 800856e:	d9ec      	bls.n	800854a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008570:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008574:	4618      	mov	r0, r3
 8008576:	3714      	adds	r7, #20
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <__NVIC_SetPriority>:
{
 8008580:	b480      	push	{r7}
 8008582:	b083      	sub	sp, #12
 8008584:	af00      	add	r7, sp, #0
 8008586:	4603      	mov	r3, r0
 8008588:	6039      	str	r1, [r7, #0]
 800858a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800858c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008590:	2b00      	cmp	r3, #0
 8008592:	db0a      	blt.n	80085aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	b2da      	uxtb	r2, r3
 8008598:	490c      	ldr	r1, [pc, #48]	; (80085cc <__NVIC_SetPriority+0x4c>)
 800859a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800859e:	0112      	lsls	r2, r2, #4
 80085a0:	b2d2      	uxtb	r2, r2
 80085a2:	440b      	add	r3, r1
 80085a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80085a8:	e00a      	b.n	80085c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	b2da      	uxtb	r2, r3
 80085ae:	4908      	ldr	r1, [pc, #32]	; (80085d0 <__NVIC_SetPriority+0x50>)
 80085b0:	79fb      	ldrb	r3, [r7, #7]
 80085b2:	f003 030f 	and.w	r3, r3, #15
 80085b6:	3b04      	subs	r3, #4
 80085b8:	0112      	lsls	r2, r2, #4
 80085ba:	b2d2      	uxtb	r2, r2
 80085bc:	440b      	add	r3, r1
 80085be:	761a      	strb	r2, [r3, #24]
}
 80085c0:	bf00      	nop
 80085c2:	370c      	adds	r7, #12
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr
 80085cc:	e000e100 	.word	0xe000e100
 80085d0:	e000ed00 	.word	0xe000ed00

080085d4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80085d4:	b580      	push	{r7, lr}
 80085d6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80085d8:	2100      	movs	r1, #0
 80085da:	f06f 0004 	mvn.w	r0, #4
 80085de:	f7ff ffcf 	bl	8008580 <__NVIC_SetPriority>
#endif
}
 80085e2:	bf00      	nop
 80085e4:	bd80      	pop	{r7, pc}
	...

080085e8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80085e8:	b480      	push	{r7}
 80085ea:	b083      	sub	sp, #12
 80085ec:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085ee:	f3ef 8305 	mrs	r3, IPSR
 80085f2:	603b      	str	r3, [r7, #0]
  return(result);
 80085f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d003      	beq.n	8008602 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80085fa:	f06f 0305 	mvn.w	r3, #5
 80085fe:	607b      	str	r3, [r7, #4]
 8008600:	e00c      	b.n	800861c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008602:	4b0a      	ldr	r3, [pc, #40]	; (800862c <osKernelInitialize+0x44>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d105      	bne.n	8008616 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800860a:	4b08      	ldr	r3, [pc, #32]	; (800862c <osKernelInitialize+0x44>)
 800860c:	2201      	movs	r2, #1
 800860e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008610:	2300      	movs	r3, #0
 8008612:	607b      	str	r3, [r7, #4]
 8008614:	e002      	b.n	800861c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008616:	f04f 33ff 	mov.w	r3, #4294967295
 800861a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800861c:	687b      	ldr	r3, [r7, #4]
}
 800861e:	4618      	mov	r0, r3
 8008620:	370c      	adds	r7, #12
 8008622:	46bd      	mov	sp, r7
 8008624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008628:	4770      	bx	lr
 800862a:	bf00      	nop
 800862c:	2000023c 	.word	0x2000023c

08008630 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008630:	b580      	push	{r7, lr}
 8008632:	b082      	sub	sp, #8
 8008634:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008636:	f3ef 8305 	mrs	r3, IPSR
 800863a:	603b      	str	r3, [r7, #0]
  return(result);
 800863c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800863e:	2b00      	cmp	r3, #0
 8008640:	d003      	beq.n	800864a <osKernelStart+0x1a>
    stat = osErrorISR;
 8008642:	f06f 0305 	mvn.w	r3, #5
 8008646:	607b      	str	r3, [r7, #4]
 8008648:	e010      	b.n	800866c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800864a:	4b0b      	ldr	r3, [pc, #44]	; (8008678 <osKernelStart+0x48>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	2b01      	cmp	r3, #1
 8008650:	d109      	bne.n	8008666 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008652:	f7ff ffbf 	bl	80085d4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008656:	4b08      	ldr	r3, [pc, #32]	; (8008678 <osKernelStart+0x48>)
 8008658:	2202      	movs	r2, #2
 800865a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800865c:	f001 fb10 	bl	8009c80 <vTaskStartScheduler>
      stat = osOK;
 8008660:	2300      	movs	r3, #0
 8008662:	607b      	str	r3, [r7, #4]
 8008664:	e002      	b.n	800866c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008666:	f04f 33ff 	mov.w	r3, #4294967295
 800866a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800866c:	687b      	ldr	r3, [r7, #4]
}
 800866e:	4618      	mov	r0, r3
 8008670:	3708      	adds	r7, #8
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	2000023c 	.word	0x2000023c

0800867c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800867c:	b580      	push	{r7, lr}
 800867e:	b08e      	sub	sp, #56	; 0x38
 8008680:	af04      	add	r7, sp, #16
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	60b9      	str	r1, [r7, #8]
 8008686:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008688:	2300      	movs	r3, #0
 800868a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800868c:	f3ef 8305 	mrs	r3, IPSR
 8008690:	617b      	str	r3, [r7, #20]
  return(result);
 8008692:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008694:	2b00      	cmp	r3, #0
 8008696:	d17e      	bne.n	8008796 <osThreadNew+0x11a>
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d07b      	beq.n	8008796 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800869e:	2380      	movs	r3, #128	; 0x80
 80086a0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80086a2:	2318      	movs	r3, #24
 80086a4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80086a6:	2300      	movs	r3, #0
 80086a8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80086aa:	f04f 33ff 	mov.w	r3, #4294967295
 80086ae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d045      	beq.n	8008742 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d002      	beq.n	80086c4 <osThreadNew+0x48>
        name = attr->name;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	699b      	ldr	r3, [r3, #24]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d002      	beq.n	80086d2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	699b      	ldr	r3, [r3, #24]
 80086d0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80086d2:	69fb      	ldr	r3, [r7, #28]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d008      	beq.n	80086ea <osThreadNew+0x6e>
 80086d8:	69fb      	ldr	r3, [r7, #28]
 80086da:	2b38      	cmp	r3, #56	; 0x38
 80086dc:	d805      	bhi.n	80086ea <osThreadNew+0x6e>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	f003 0301 	and.w	r3, r3, #1
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d001      	beq.n	80086ee <osThreadNew+0x72>
        return (NULL);
 80086ea:	2300      	movs	r3, #0
 80086ec:	e054      	b.n	8008798 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	695b      	ldr	r3, [r3, #20]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d003      	beq.n	80086fe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	695b      	ldr	r3, [r3, #20]
 80086fa:	089b      	lsrs	r3, r3, #2
 80086fc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	689b      	ldr	r3, [r3, #8]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d00e      	beq.n	8008724 <osThreadNew+0xa8>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	68db      	ldr	r3, [r3, #12]
 800870a:	2b5b      	cmp	r3, #91	; 0x5b
 800870c:	d90a      	bls.n	8008724 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008712:	2b00      	cmp	r3, #0
 8008714:	d006      	beq.n	8008724 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	695b      	ldr	r3, [r3, #20]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d002      	beq.n	8008724 <osThreadNew+0xa8>
        mem = 1;
 800871e:	2301      	movs	r3, #1
 8008720:	61bb      	str	r3, [r7, #24]
 8008722:	e010      	b.n	8008746 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	689b      	ldr	r3, [r3, #8]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d10c      	bne.n	8008746 <osThreadNew+0xca>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d108      	bne.n	8008746 <osThreadNew+0xca>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	691b      	ldr	r3, [r3, #16]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d104      	bne.n	8008746 <osThreadNew+0xca>
          mem = 0;
 800873c:	2300      	movs	r3, #0
 800873e:	61bb      	str	r3, [r7, #24]
 8008740:	e001      	b.n	8008746 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008742:	2300      	movs	r3, #0
 8008744:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008746:	69bb      	ldr	r3, [r7, #24]
 8008748:	2b01      	cmp	r3, #1
 800874a:	d110      	bne.n	800876e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008754:	9202      	str	r2, [sp, #8]
 8008756:	9301      	str	r3, [sp, #4]
 8008758:	69fb      	ldr	r3, [r7, #28]
 800875a:	9300      	str	r3, [sp, #0]
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	6a3a      	ldr	r2, [r7, #32]
 8008760:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008762:	68f8      	ldr	r0, [r7, #12]
 8008764:	f001 f8b6 	bl	80098d4 <xTaskCreateStatic>
 8008768:	4603      	mov	r3, r0
 800876a:	613b      	str	r3, [r7, #16]
 800876c:	e013      	b.n	8008796 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800876e:	69bb      	ldr	r3, [r7, #24]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d110      	bne.n	8008796 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008774:	6a3b      	ldr	r3, [r7, #32]
 8008776:	b29a      	uxth	r2, r3
 8008778:	f107 0310 	add.w	r3, r7, #16
 800877c:	9301      	str	r3, [sp, #4]
 800877e:	69fb      	ldr	r3, [r7, #28]
 8008780:	9300      	str	r3, [sp, #0]
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008786:	68f8      	ldr	r0, [r7, #12]
 8008788:	f001 f901 	bl	800998e <xTaskCreate>
 800878c:	4603      	mov	r3, r0
 800878e:	2b01      	cmp	r3, #1
 8008790:	d001      	beq.n	8008796 <osThreadNew+0x11a>
            hTask = NULL;
 8008792:	2300      	movs	r3, #0
 8008794:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008796:	693b      	ldr	r3, [r7, #16]
}
 8008798:	4618      	mov	r0, r3
 800879a:	3728      	adds	r7, #40	; 0x28
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087a8:	f3ef 8305 	mrs	r3, IPSR
 80087ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80087ae:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d003      	beq.n	80087bc <osDelay+0x1c>
    stat = osErrorISR;
 80087b4:	f06f 0305 	mvn.w	r3, #5
 80087b8:	60fb      	str	r3, [r7, #12]
 80087ba:	e007      	b.n	80087cc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80087bc:	2300      	movs	r3, #0
 80087be:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d002      	beq.n	80087cc <osDelay+0x2c>
      vTaskDelay(ticks);
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f001 fa26 	bl	8009c18 <vTaskDelay>
    }
  }

  return (stat);
 80087cc:	68fb      	ldr	r3, [r7, #12]
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3710      	adds	r7, #16
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 80087d6:	b580      	push	{r7, lr}
 80087d8:	b084      	sub	sp, #16
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f002 fb5e 	bl	800aea0 <pvTimerGetTimerID>
 80087e4:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d005      	beq.n	80087f8 <TimerCallback+0x22>
    callb->func (callb->arg);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	68fa      	ldr	r2, [r7, #12]
 80087f2:	6852      	ldr	r2, [r2, #4]
 80087f4:	4610      	mov	r0, r2
 80087f6:	4798      	blx	r3
  }
}
 80087f8:	bf00      	nop
 80087fa:	3710      	adds	r7, #16
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8008800:	b580      	push	{r7, lr}
 8008802:	b08c      	sub	sp, #48	; 0x30
 8008804:	af02      	add	r7, sp, #8
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	607a      	str	r2, [r7, #4]
 800880a:	603b      	str	r3, [r7, #0]
 800880c:	460b      	mov	r3, r1
 800880e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8008810:	2300      	movs	r3, #0
 8008812:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008814:	f3ef 8305 	mrs	r3, IPSR
 8008818:	613b      	str	r3, [r7, #16]
  return(result);
 800881a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800881c:	2b00      	cmp	r3, #0
 800881e:	d163      	bne.n	80088e8 <osTimerNew+0xe8>
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d060      	beq.n	80088e8 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8008826:	2008      	movs	r0, #8
 8008828:	f002 fda6 	bl	800b378 <pvPortMalloc>
 800882c:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d059      	beq.n	80088e8 <osTimerNew+0xe8>
      callb->func = func;
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	68fa      	ldr	r2, [r7, #12]
 8008838:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8008840:	7afb      	ldrb	r3, [r7, #11]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d102      	bne.n	800884c <osTimerNew+0x4c>
        reload = pdFALSE;
 8008846:	2300      	movs	r3, #0
 8008848:	61fb      	str	r3, [r7, #28]
 800884a:	e001      	b.n	8008850 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800884c:	2301      	movs	r3, #1
 800884e:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8008850:	f04f 33ff 	mov.w	r3, #4294967295
 8008854:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8008856:	2300      	movs	r3, #0
 8008858:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d01c      	beq.n	800889a <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d002      	beq.n	800886e <osTimerNew+0x6e>
          name = attr->name;
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d006      	beq.n	8008884 <osTimerNew+0x84>
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	68db      	ldr	r3, [r3, #12]
 800887a:	2b2b      	cmp	r3, #43	; 0x2b
 800887c:	d902      	bls.n	8008884 <osTimerNew+0x84>
          mem = 1;
 800887e:	2301      	movs	r3, #1
 8008880:	61bb      	str	r3, [r7, #24]
 8008882:	e00c      	b.n	800889e <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	689b      	ldr	r3, [r3, #8]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d108      	bne.n	800889e <osTimerNew+0x9e>
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	68db      	ldr	r3, [r3, #12]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d104      	bne.n	800889e <osTimerNew+0x9e>
            mem = 0;
 8008894:	2300      	movs	r3, #0
 8008896:	61bb      	str	r3, [r7, #24]
 8008898:	e001      	b.n	800889e <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800889a:	2300      	movs	r3, #0
 800889c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800889e:	69bb      	ldr	r3, [r7, #24]
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d10c      	bne.n	80088be <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	689b      	ldr	r3, [r3, #8]
 80088a8:	9301      	str	r3, [sp, #4]
 80088aa:	4b12      	ldr	r3, [pc, #72]	; (80088f4 <osTimerNew+0xf4>)
 80088ac:	9300      	str	r3, [sp, #0]
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	69fa      	ldr	r2, [r7, #28]
 80088b2:	2101      	movs	r1, #1
 80088b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80088b6:	f001 ff74 	bl	800a7a2 <xTimerCreateStatic>
 80088ba:	6238      	str	r0, [r7, #32]
 80088bc:	e00b      	b.n	80088d6 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 80088be:	69bb      	ldr	r3, [r7, #24]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d108      	bne.n	80088d6 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80088c4:	4b0b      	ldr	r3, [pc, #44]	; (80088f4 <osTimerNew+0xf4>)
 80088c6:	9300      	str	r3, [sp, #0]
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	69fa      	ldr	r2, [r7, #28]
 80088cc:	2101      	movs	r1, #1
 80088ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80088d0:	f001 ff46 	bl	800a760 <xTimerCreate>
 80088d4:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 80088d6:	6a3b      	ldr	r3, [r7, #32]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d105      	bne.n	80088e8 <osTimerNew+0xe8>
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d002      	beq.n	80088e8 <osTimerNew+0xe8>
        vPortFree (callb);
 80088e2:	6978      	ldr	r0, [r7, #20]
 80088e4:	f002 fe14 	bl	800b510 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80088e8:	6a3b      	ldr	r3, [r7, #32]
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3728      	adds	r7, #40	; 0x28
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	bf00      	nop
 80088f4:	080087d7 	.word	0x080087d7

080088f8 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b088      	sub	sp, #32
 80088fc:	af02      	add	r7, sp, #8
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008906:	f3ef 8305 	mrs	r3, IPSR
 800890a:	60fb      	str	r3, [r7, #12]
  return(result);
 800890c:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800890e:	2b00      	cmp	r3, #0
 8008910:	d003      	beq.n	800891a <osTimerStart+0x22>
    stat = osErrorISR;
 8008912:	f06f 0305 	mvn.w	r3, #5
 8008916:	617b      	str	r3, [r7, #20]
 8008918:	e017      	b.n	800894a <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d103      	bne.n	8008928 <osTimerStart+0x30>
    stat = osErrorParameter;
 8008920:	f06f 0303 	mvn.w	r3, #3
 8008924:	617b      	str	r3, [r7, #20]
 8008926:	e010      	b.n	800894a <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8008928:	2300      	movs	r3, #0
 800892a:	9300      	str	r3, [sp, #0]
 800892c:	2300      	movs	r3, #0
 800892e:	683a      	ldr	r2, [r7, #0]
 8008930:	2104      	movs	r1, #4
 8008932:	6938      	ldr	r0, [r7, #16]
 8008934:	f001 ffae 	bl	800a894 <xTimerGenericCommand>
 8008938:	4603      	mov	r3, r0
 800893a:	2b01      	cmp	r3, #1
 800893c:	d102      	bne.n	8008944 <osTimerStart+0x4c>
      stat = osOK;
 800893e:	2300      	movs	r3, #0
 8008940:	617b      	str	r3, [r7, #20]
 8008942:	e002      	b.n	800894a <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8008944:	f06f 0302 	mvn.w	r3, #2
 8008948:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800894a:	697b      	ldr	r3, [r7, #20]
}
 800894c:	4618      	mov	r0, r3
 800894e:	3718      	adds	r7, #24
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008954:	b580      	push	{r7, lr}
 8008956:	b08a      	sub	sp, #40	; 0x28
 8008958:	af02      	add	r7, sp, #8
 800895a:	60f8      	str	r0, [r7, #12]
 800895c:	60b9      	str	r1, [r7, #8]
 800895e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008960:	2300      	movs	r3, #0
 8008962:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008964:	f3ef 8305 	mrs	r3, IPSR
 8008968:	613b      	str	r3, [r7, #16]
  return(result);
 800896a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800896c:	2b00      	cmp	r3, #0
 800896e:	d15f      	bne.n	8008a30 <osMessageQueueNew+0xdc>
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d05c      	beq.n	8008a30 <osMessageQueueNew+0xdc>
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d059      	beq.n	8008a30 <osMessageQueueNew+0xdc>
    mem = -1;
 800897c:	f04f 33ff 	mov.w	r3, #4294967295
 8008980:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d029      	beq.n	80089dc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	689b      	ldr	r3, [r3, #8]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d012      	beq.n	80089b6 <osMessageQueueNew+0x62>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	68db      	ldr	r3, [r3, #12]
 8008994:	2b4f      	cmp	r3, #79	; 0x4f
 8008996:	d90e      	bls.n	80089b6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800899c:	2b00      	cmp	r3, #0
 800899e:	d00a      	beq.n	80089b6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	695a      	ldr	r2, [r3, #20]
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	68b9      	ldr	r1, [r7, #8]
 80089a8:	fb01 f303 	mul.w	r3, r1, r3
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d302      	bcc.n	80089b6 <osMessageQueueNew+0x62>
        mem = 1;
 80089b0:	2301      	movs	r3, #1
 80089b2:	61bb      	str	r3, [r7, #24]
 80089b4:	e014      	b.n	80089e0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	689b      	ldr	r3, [r3, #8]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d110      	bne.n	80089e0 <osMessageQueueNew+0x8c>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	68db      	ldr	r3, [r3, #12]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d10c      	bne.n	80089e0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d108      	bne.n	80089e0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	695b      	ldr	r3, [r3, #20]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d104      	bne.n	80089e0 <osMessageQueueNew+0x8c>
          mem = 0;
 80089d6:	2300      	movs	r3, #0
 80089d8:	61bb      	str	r3, [r7, #24]
 80089da:	e001      	b.n	80089e0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80089dc:	2300      	movs	r3, #0
 80089de:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80089e0:	69bb      	ldr	r3, [r7, #24]
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	d10b      	bne.n	80089fe <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	691a      	ldr	r2, [r3, #16]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	689b      	ldr	r3, [r3, #8]
 80089ee:	2100      	movs	r1, #0
 80089f0:	9100      	str	r1, [sp, #0]
 80089f2:	68b9      	ldr	r1, [r7, #8]
 80089f4:	68f8      	ldr	r0, [r7, #12]
 80089f6:	f000 fa2f 	bl	8008e58 <xQueueGenericCreateStatic>
 80089fa:	61f8      	str	r0, [r7, #28]
 80089fc:	e008      	b.n	8008a10 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80089fe:	69bb      	ldr	r3, [r7, #24]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d105      	bne.n	8008a10 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008a04:	2200      	movs	r2, #0
 8008a06:	68b9      	ldr	r1, [r7, #8]
 8008a08:	68f8      	ldr	r0, [r7, #12]
 8008a0a:	f000 fa9d 	bl	8008f48 <xQueueGenericCreate>
 8008a0e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008a10:	69fb      	ldr	r3, [r7, #28]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d00c      	beq.n	8008a30 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d003      	beq.n	8008a24 <osMessageQueueNew+0xd0>
        name = attr->name;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	617b      	str	r3, [r7, #20]
 8008a22:	e001      	b.n	8008a28 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8008a24:	2300      	movs	r3, #0
 8008a26:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008a28:	6979      	ldr	r1, [r7, #20]
 8008a2a:	69f8      	ldr	r0, [r7, #28]
 8008a2c:	f000 fef4 	bl	8009818 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008a30:	69fb      	ldr	r3, [r7, #28]
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3720      	adds	r7, #32
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
	...

08008a3c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b088      	sub	sp, #32
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	60f8      	str	r0, [r7, #12]
 8008a44:	60b9      	str	r1, [r7, #8]
 8008a46:	603b      	str	r3, [r7, #0]
 8008a48:	4613      	mov	r3, r2
 8008a4a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008a50:	2300      	movs	r3, #0
 8008a52:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a54:	f3ef 8305 	mrs	r3, IPSR
 8008a58:	617b      	str	r3, [r7, #20]
  return(result);
 8008a5a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d028      	beq.n	8008ab2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008a60:	69bb      	ldr	r3, [r7, #24]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d005      	beq.n	8008a72 <osMessageQueuePut+0x36>
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d002      	beq.n	8008a72 <osMessageQueuePut+0x36>
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d003      	beq.n	8008a7a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008a72:	f06f 0303 	mvn.w	r3, #3
 8008a76:	61fb      	str	r3, [r7, #28]
 8008a78:	e038      	b.n	8008aec <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008a7e:	f107 0210 	add.w	r2, r7, #16
 8008a82:	2300      	movs	r3, #0
 8008a84:	68b9      	ldr	r1, [r7, #8]
 8008a86:	69b8      	ldr	r0, [r7, #24]
 8008a88:	f000 fbba 	bl	8009200 <xQueueGenericSendFromISR>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	2b01      	cmp	r3, #1
 8008a90:	d003      	beq.n	8008a9a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8008a92:	f06f 0302 	mvn.w	r3, #2
 8008a96:	61fb      	str	r3, [r7, #28]
 8008a98:	e028      	b.n	8008aec <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d025      	beq.n	8008aec <osMessageQueuePut+0xb0>
 8008aa0:	4b15      	ldr	r3, [pc, #84]	; (8008af8 <osMessageQueuePut+0xbc>)
 8008aa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008aa6:	601a      	str	r2, [r3, #0]
 8008aa8:	f3bf 8f4f 	dsb	sy
 8008aac:	f3bf 8f6f 	isb	sy
 8008ab0:	e01c      	b.n	8008aec <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008ab2:	69bb      	ldr	r3, [r7, #24]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d002      	beq.n	8008abe <osMessageQueuePut+0x82>
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d103      	bne.n	8008ac6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8008abe:	f06f 0303 	mvn.w	r3, #3
 8008ac2:	61fb      	str	r3, [r7, #28]
 8008ac4:	e012      	b.n	8008aec <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	683a      	ldr	r2, [r7, #0]
 8008aca:	68b9      	ldr	r1, [r7, #8]
 8008acc:	69b8      	ldr	r0, [r7, #24]
 8008ace:	f000 fa99 	bl	8009004 <xQueueGenericSend>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	d009      	beq.n	8008aec <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d003      	beq.n	8008ae6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8008ade:	f06f 0301 	mvn.w	r3, #1
 8008ae2:	61fb      	str	r3, [r7, #28]
 8008ae4:	e002      	b.n	8008aec <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8008ae6:	f06f 0302 	mvn.w	r3, #2
 8008aea:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008aec:	69fb      	ldr	r3, [r7, #28]
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3720      	adds	r7, #32
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	e000ed04 	.word	0xe000ed04

08008afc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b088      	sub	sp, #32
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	60f8      	str	r0, [r7, #12]
 8008b04:	60b9      	str	r1, [r7, #8]
 8008b06:	607a      	str	r2, [r7, #4]
 8008b08:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b12:	f3ef 8305 	mrs	r3, IPSR
 8008b16:	617b      	str	r3, [r7, #20]
  return(result);
 8008b18:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d028      	beq.n	8008b70 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008b1e:	69bb      	ldr	r3, [r7, #24]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d005      	beq.n	8008b30 <osMessageQueueGet+0x34>
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d002      	beq.n	8008b30 <osMessageQueueGet+0x34>
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d003      	beq.n	8008b38 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8008b30:	f06f 0303 	mvn.w	r3, #3
 8008b34:	61fb      	str	r3, [r7, #28]
 8008b36:	e037      	b.n	8008ba8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008b3c:	f107 0310 	add.w	r3, r7, #16
 8008b40:	461a      	mov	r2, r3
 8008b42:	68b9      	ldr	r1, [r7, #8]
 8008b44:	69b8      	ldr	r0, [r7, #24]
 8008b46:	f000 fcd7 	bl	80094f8 <xQueueReceiveFromISR>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d003      	beq.n	8008b58 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008b50:	f06f 0302 	mvn.w	r3, #2
 8008b54:	61fb      	str	r3, [r7, #28]
 8008b56:	e027      	b.n	8008ba8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d024      	beq.n	8008ba8 <osMessageQueueGet+0xac>
 8008b5e:	4b15      	ldr	r3, [pc, #84]	; (8008bb4 <osMessageQueueGet+0xb8>)
 8008b60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b64:	601a      	str	r2, [r3, #0]
 8008b66:	f3bf 8f4f 	dsb	sy
 8008b6a:	f3bf 8f6f 	isb	sy
 8008b6e:	e01b      	b.n	8008ba8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008b70:	69bb      	ldr	r3, [r7, #24]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d002      	beq.n	8008b7c <osMessageQueueGet+0x80>
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d103      	bne.n	8008b84 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008b7c:	f06f 0303 	mvn.w	r3, #3
 8008b80:	61fb      	str	r3, [r7, #28]
 8008b82:	e011      	b.n	8008ba8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008b84:	683a      	ldr	r2, [r7, #0]
 8008b86:	68b9      	ldr	r1, [r7, #8]
 8008b88:	69b8      	ldr	r0, [r7, #24]
 8008b8a:	f000 fbd5 	bl	8009338 <xQueueReceive>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d009      	beq.n	8008ba8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d003      	beq.n	8008ba2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8008b9a:	f06f 0301 	mvn.w	r3, #1
 8008b9e:	61fb      	str	r3, [r7, #28]
 8008ba0:	e002      	b.n	8008ba8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008ba2:	f06f 0302 	mvn.w	r3, #2
 8008ba6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008ba8:	69fb      	ldr	r3, [r7, #28]
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3720      	adds	r7, #32
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}
 8008bb2:	bf00      	nop
 8008bb4:	e000ed04 	.word	0xe000ed04

08008bb8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008bb8:	b480      	push	{r7}
 8008bba:	b085      	sub	sp, #20
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	60f8      	str	r0, [r7, #12]
 8008bc0:	60b9      	str	r1, [r7, #8]
 8008bc2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	4a07      	ldr	r2, [pc, #28]	; (8008be4 <vApplicationGetIdleTaskMemory+0x2c>)
 8008bc8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	4a06      	ldr	r2, [pc, #24]	; (8008be8 <vApplicationGetIdleTaskMemory+0x30>)
 8008bce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2280      	movs	r2, #128	; 0x80
 8008bd4:	601a      	str	r2, [r3, #0]
}
 8008bd6:	bf00      	nop
 8008bd8:	3714      	adds	r7, #20
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr
 8008be2:	bf00      	nop
 8008be4:	20000240 	.word	0x20000240
 8008be8:	2000029c 	.word	0x2000029c

08008bec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008bec:	b480      	push	{r7}
 8008bee:	b085      	sub	sp, #20
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	60f8      	str	r0, [r7, #12]
 8008bf4:	60b9      	str	r1, [r7, #8]
 8008bf6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	4a07      	ldr	r2, [pc, #28]	; (8008c18 <vApplicationGetTimerTaskMemory+0x2c>)
 8008bfc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	4a06      	ldr	r2, [pc, #24]	; (8008c1c <vApplicationGetTimerTaskMemory+0x30>)
 8008c02:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008c0a:	601a      	str	r2, [r3, #0]
}
 8008c0c:	bf00      	nop
 8008c0e:	3714      	adds	r7, #20
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr
 8008c18:	2000049c 	.word	0x2000049c
 8008c1c:	200004f8 	.word	0x200004f8

08008c20 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008c20:	b480      	push	{r7}
 8008c22:	b083      	sub	sp, #12
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f103 0208 	add.w	r2, r3, #8
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f04f 32ff 	mov.w	r2, #4294967295
 8008c38:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f103 0208 	add.w	r2, r3, #8
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f103 0208 	add.w	r2, r3, #8
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2200      	movs	r2, #0
 8008c52:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008c54:	bf00      	nop
 8008c56:	370c      	adds	r7, #12
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr

08008c60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008c60:	b480      	push	{r7}
 8008c62:	b083      	sub	sp, #12
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008c6e:	bf00      	nop
 8008c70:	370c      	adds	r7, #12
 8008c72:	46bd      	mov	sp, r7
 8008c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c78:	4770      	bx	lr

08008c7a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c7a:	b480      	push	{r7}
 8008c7c:	b085      	sub	sp, #20
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
 8008c82:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	68fa      	ldr	r2, [r7, #12]
 8008c8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	689a      	ldr	r2, [r3, #8]
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	689b      	ldr	r3, [r3, #8]
 8008c9c:	683a      	ldr	r2, [r7, #0]
 8008c9e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	683a      	ldr	r2, [r7, #0]
 8008ca4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	1c5a      	adds	r2, r3, #1
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	601a      	str	r2, [r3, #0]
}
 8008cb6:	bf00      	nop
 8008cb8:	3714      	adds	r7, #20
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr

08008cc2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008cc2:	b480      	push	{r7}
 8008cc4:	b085      	sub	sp, #20
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
 8008cca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cd8:	d103      	bne.n	8008ce2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	691b      	ldr	r3, [r3, #16]
 8008cde:	60fb      	str	r3, [r7, #12]
 8008ce0:	e00c      	b.n	8008cfc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	3308      	adds	r3, #8
 8008ce6:	60fb      	str	r3, [r7, #12]
 8008ce8:	e002      	b.n	8008cf0 <vListInsert+0x2e>
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	60fb      	str	r3, [r7, #12]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	68ba      	ldr	r2, [r7, #8]
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d2f6      	bcs.n	8008cea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	685a      	ldr	r2, [r3, #4]
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	683a      	ldr	r2, [r7, #0]
 8008d0a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	68fa      	ldr	r2, [r7, #12]
 8008d10:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	683a      	ldr	r2, [r7, #0]
 8008d16:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	1c5a      	adds	r2, r3, #1
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	601a      	str	r2, [r3, #0]
}
 8008d28:	bf00      	nop
 8008d2a:	3714      	adds	r7, #20
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr

08008d34 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008d34:	b480      	push	{r7}
 8008d36:	b085      	sub	sp, #20
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	691b      	ldr	r3, [r3, #16]
 8008d40:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	6892      	ldr	r2, [r2, #8]
 8008d4a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	689b      	ldr	r3, [r3, #8]
 8008d50:	687a      	ldr	r2, [r7, #4]
 8008d52:	6852      	ldr	r2, [r2, #4]
 8008d54:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	d103      	bne.n	8008d68 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	689a      	ldr	r2, [r3, #8]
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	1e5a      	subs	r2, r3, #1
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3714      	adds	r7, #20
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr

08008d88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b084      	sub	sp, #16
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d10a      	bne.n	8008db2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da0:	f383 8811 	msr	BASEPRI, r3
 8008da4:	f3bf 8f6f 	isb	sy
 8008da8:	f3bf 8f4f 	dsb	sy
 8008dac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008dae:	bf00      	nop
 8008db0:	e7fe      	b.n	8008db0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008db2:	f002 f9bf 	bl	800b134 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681a      	ldr	r2, [r3, #0]
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dbe:	68f9      	ldr	r1, [r7, #12]
 8008dc0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008dc2:	fb01 f303 	mul.w	r3, r1, r3
 8008dc6:	441a      	add	r2, r3
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681a      	ldr	r2, [r3, #0]
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681a      	ldr	r2, [r3, #0]
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008de2:	3b01      	subs	r3, #1
 8008de4:	68f9      	ldr	r1, [r7, #12]
 8008de6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008de8:	fb01 f303 	mul.w	r3, r1, r3
 8008dec:	441a      	add	r2, r3
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	22ff      	movs	r2, #255	; 0xff
 8008df6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	22ff      	movs	r2, #255	; 0xff
 8008dfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d114      	bne.n	8008e32 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	691b      	ldr	r3, [r3, #16]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d01a      	beq.n	8008e46 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	3310      	adds	r3, #16
 8008e14:	4618      	mov	r0, r3
 8008e16:	f001 f9bd 	bl	800a194 <xTaskRemoveFromEventList>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d012      	beq.n	8008e46 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008e20:	4b0c      	ldr	r3, [pc, #48]	; (8008e54 <xQueueGenericReset+0xcc>)
 8008e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e26:	601a      	str	r2, [r3, #0]
 8008e28:	f3bf 8f4f 	dsb	sy
 8008e2c:	f3bf 8f6f 	isb	sy
 8008e30:	e009      	b.n	8008e46 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	3310      	adds	r3, #16
 8008e36:	4618      	mov	r0, r3
 8008e38:	f7ff fef2 	bl	8008c20 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	3324      	adds	r3, #36	; 0x24
 8008e40:	4618      	mov	r0, r3
 8008e42:	f7ff feed 	bl	8008c20 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008e46:	f002 f9a5 	bl	800b194 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008e4a:	2301      	movs	r3, #1
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3710      	adds	r7, #16
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}
 8008e54:	e000ed04 	.word	0xe000ed04

08008e58 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b08e      	sub	sp, #56	; 0x38
 8008e5c:	af02      	add	r7, sp, #8
 8008e5e:	60f8      	str	r0, [r7, #12]
 8008e60:	60b9      	str	r1, [r7, #8]
 8008e62:	607a      	str	r2, [r7, #4]
 8008e64:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d10a      	bne.n	8008e82 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e70:	f383 8811 	msr	BASEPRI, r3
 8008e74:	f3bf 8f6f 	isb	sy
 8008e78:	f3bf 8f4f 	dsb	sy
 8008e7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008e7e:	bf00      	nop
 8008e80:	e7fe      	b.n	8008e80 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d10a      	bne.n	8008e9e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e8c:	f383 8811 	msr	BASEPRI, r3
 8008e90:	f3bf 8f6f 	isb	sy
 8008e94:	f3bf 8f4f 	dsb	sy
 8008e98:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008e9a:	bf00      	nop
 8008e9c:	e7fe      	b.n	8008e9c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d002      	beq.n	8008eaa <xQueueGenericCreateStatic+0x52>
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d001      	beq.n	8008eae <xQueueGenericCreateStatic+0x56>
 8008eaa:	2301      	movs	r3, #1
 8008eac:	e000      	b.n	8008eb0 <xQueueGenericCreateStatic+0x58>
 8008eae:	2300      	movs	r3, #0
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d10a      	bne.n	8008eca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb8:	f383 8811 	msr	BASEPRI, r3
 8008ebc:	f3bf 8f6f 	isb	sy
 8008ec0:	f3bf 8f4f 	dsb	sy
 8008ec4:	623b      	str	r3, [r7, #32]
}
 8008ec6:	bf00      	nop
 8008ec8:	e7fe      	b.n	8008ec8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d102      	bne.n	8008ed6 <xQueueGenericCreateStatic+0x7e>
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d101      	bne.n	8008eda <xQueueGenericCreateStatic+0x82>
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	e000      	b.n	8008edc <xQueueGenericCreateStatic+0x84>
 8008eda:	2300      	movs	r3, #0
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d10a      	bne.n	8008ef6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee4:	f383 8811 	msr	BASEPRI, r3
 8008ee8:	f3bf 8f6f 	isb	sy
 8008eec:	f3bf 8f4f 	dsb	sy
 8008ef0:	61fb      	str	r3, [r7, #28]
}
 8008ef2:	bf00      	nop
 8008ef4:	e7fe      	b.n	8008ef4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008ef6:	2350      	movs	r3, #80	; 0x50
 8008ef8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	2b50      	cmp	r3, #80	; 0x50
 8008efe:	d00a      	beq.n	8008f16 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f04:	f383 8811 	msr	BASEPRI, r3
 8008f08:	f3bf 8f6f 	isb	sy
 8008f0c:	f3bf 8f4f 	dsb	sy
 8008f10:	61bb      	str	r3, [r7, #24]
}
 8008f12:	bf00      	nop
 8008f14:	e7fe      	b.n	8008f14 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008f16:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d00d      	beq.n	8008f3e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f24:	2201      	movs	r2, #1
 8008f26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008f2a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f30:	9300      	str	r3, [sp, #0]
 8008f32:	4613      	mov	r3, r2
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	68b9      	ldr	r1, [r7, #8]
 8008f38:	68f8      	ldr	r0, [r7, #12]
 8008f3a:	f000 f83f 	bl	8008fbc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3730      	adds	r7, #48	; 0x30
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b08a      	sub	sp, #40	; 0x28
 8008f4c:	af02      	add	r7, sp, #8
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	60b9      	str	r1, [r7, #8]
 8008f52:	4613      	mov	r3, r2
 8008f54:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d10a      	bne.n	8008f72 <xQueueGenericCreate+0x2a>
	__asm volatile
 8008f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f60:	f383 8811 	msr	BASEPRI, r3
 8008f64:	f3bf 8f6f 	isb	sy
 8008f68:	f3bf 8f4f 	dsb	sy
 8008f6c:	613b      	str	r3, [r7, #16]
}
 8008f6e:	bf00      	nop
 8008f70:	e7fe      	b.n	8008f70 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	68ba      	ldr	r2, [r7, #8]
 8008f76:	fb02 f303 	mul.w	r3, r2, r3
 8008f7a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008f7c:	69fb      	ldr	r3, [r7, #28]
 8008f7e:	3350      	adds	r3, #80	; 0x50
 8008f80:	4618      	mov	r0, r3
 8008f82:	f002 f9f9 	bl	800b378 <pvPortMalloc>
 8008f86:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008f88:	69bb      	ldr	r3, [r7, #24]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d011      	beq.n	8008fb2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008f8e:	69bb      	ldr	r3, [r7, #24]
 8008f90:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	3350      	adds	r3, #80	; 0x50
 8008f96:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008f98:	69bb      	ldr	r3, [r7, #24]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008fa0:	79fa      	ldrb	r2, [r7, #7]
 8008fa2:	69bb      	ldr	r3, [r7, #24]
 8008fa4:	9300      	str	r3, [sp, #0]
 8008fa6:	4613      	mov	r3, r2
 8008fa8:	697a      	ldr	r2, [r7, #20]
 8008faa:	68b9      	ldr	r1, [r7, #8]
 8008fac:	68f8      	ldr	r0, [r7, #12]
 8008fae:	f000 f805 	bl	8008fbc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008fb2:	69bb      	ldr	r3, [r7, #24]
	}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3720      	adds	r7, #32
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}

08008fbc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b084      	sub	sp, #16
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	60f8      	str	r0, [r7, #12]
 8008fc4:	60b9      	str	r1, [r7, #8]
 8008fc6:	607a      	str	r2, [r7, #4]
 8008fc8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d103      	bne.n	8008fd8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008fd0:	69bb      	ldr	r3, [r7, #24]
 8008fd2:	69ba      	ldr	r2, [r7, #24]
 8008fd4:	601a      	str	r2, [r3, #0]
 8008fd6:	e002      	b.n	8008fde <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008fd8:	69bb      	ldr	r3, [r7, #24]
 8008fda:	687a      	ldr	r2, [r7, #4]
 8008fdc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008fde:	69bb      	ldr	r3, [r7, #24]
 8008fe0:	68fa      	ldr	r2, [r7, #12]
 8008fe2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008fe4:	69bb      	ldr	r3, [r7, #24]
 8008fe6:	68ba      	ldr	r2, [r7, #8]
 8008fe8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008fea:	2101      	movs	r1, #1
 8008fec:	69b8      	ldr	r0, [r7, #24]
 8008fee:	f7ff fecb 	bl	8008d88 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008ff2:	69bb      	ldr	r3, [r7, #24]
 8008ff4:	78fa      	ldrb	r2, [r7, #3]
 8008ff6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008ffa:	bf00      	nop
 8008ffc:	3710      	adds	r7, #16
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
	...

08009004 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b08e      	sub	sp, #56	; 0x38
 8009008:	af00      	add	r7, sp, #0
 800900a:	60f8      	str	r0, [r7, #12]
 800900c:	60b9      	str	r1, [r7, #8]
 800900e:	607a      	str	r2, [r7, #4]
 8009010:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009012:	2300      	movs	r3, #0
 8009014:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800901a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800901c:	2b00      	cmp	r3, #0
 800901e:	d10a      	bne.n	8009036 <xQueueGenericSend+0x32>
	__asm volatile
 8009020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009024:	f383 8811 	msr	BASEPRI, r3
 8009028:	f3bf 8f6f 	isb	sy
 800902c:	f3bf 8f4f 	dsb	sy
 8009030:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009032:	bf00      	nop
 8009034:	e7fe      	b.n	8009034 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d103      	bne.n	8009044 <xQueueGenericSend+0x40>
 800903c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800903e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009040:	2b00      	cmp	r3, #0
 8009042:	d101      	bne.n	8009048 <xQueueGenericSend+0x44>
 8009044:	2301      	movs	r3, #1
 8009046:	e000      	b.n	800904a <xQueueGenericSend+0x46>
 8009048:	2300      	movs	r3, #0
 800904a:	2b00      	cmp	r3, #0
 800904c:	d10a      	bne.n	8009064 <xQueueGenericSend+0x60>
	__asm volatile
 800904e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009052:	f383 8811 	msr	BASEPRI, r3
 8009056:	f3bf 8f6f 	isb	sy
 800905a:	f3bf 8f4f 	dsb	sy
 800905e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009060:	bf00      	nop
 8009062:	e7fe      	b.n	8009062 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	2b02      	cmp	r3, #2
 8009068:	d103      	bne.n	8009072 <xQueueGenericSend+0x6e>
 800906a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800906c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800906e:	2b01      	cmp	r3, #1
 8009070:	d101      	bne.n	8009076 <xQueueGenericSend+0x72>
 8009072:	2301      	movs	r3, #1
 8009074:	e000      	b.n	8009078 <xQueueGenericSend+0x74>
 8009076:	2300      	movs	r3, #0
 8009078:	2b00      	cmp	r3, #0
 800907a:	d10a      	bne.n	8009092 <xQueueGenericSend+0x8e>
	__asm volatile
 800907c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009080:	f383 8811 	msr	BASEPRI, r3
 8009084:	f3bf 8f6f 	isb	sy
 8009088:	f3bf 8f4f 	dsb	sy
 800908c:	623b      	str	r3, [r7, #32]
}
 800908e:	bf00      	nop
 8009090:	e7fe      	b.n	8009090 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009092:	f001 fa3d 	bl	800a510 <xTaskGetSchedulerState>
 8009096:	4603      	mov	r3, r0
 8009098:	2b00      	cmp	r3, #0
 800909a:	d102      	bne.n	80090a2 <xQueueGenericSend+0x9e>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d101      	bne.n	80090a6 <xQueueGenericSend+0xa2>
 80090a2:	2301      	movs	r3, #1
 80090a4:	e000      	b.n	80090a8 <xQueueGenericSend+0xa4>
 80090a6:	2300      	movs	r3, #0
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d10a      	bne.n	80090c2 <xQueueGenericSend+0xbe>
	__asm volatile
 80090ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b0:	f383 8811 	msr	BASEPRI, r3
 80090b4:	f3bf 8f6f 	isb	sy
 80090b8:	f3bf 8f4f 	dsb	sy
 80090bc:	61fb      	str	r3, [r7, #28]
}
 80090be:	bf00      	nop
 80090c0:	e7fe      	b.n	80090c0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80090c2:	f002 f837 	bl	800b134 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80090c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d302      	bcc.n	80090d8 <xQueueGenericSend+0xd4>
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	2b02      	cmp	r3, #2
 80090d6:	d129      	bne.n	800912c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80090d8:	683a      	ldr	r2, [r7, #0]
 80090da:	68b9      	ldr	r1, [r7, #8]
 80090dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090de:	f000 fa8b 	bl	80095f8 <prvCopyDataToQueue>
 80090e2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d010      	beq.n	800910e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ee:	3324      	adds	r3, #36	; 0x24
 80090f0:	4618      	mov	r0, r3
 80090f2:	f001 f84f 	bl	800a194 <xTaskRemoveFromEventList>
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d013      	beq.n	8009124 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80090fc:	4b3f      	ldr	r3, [pc, #252]	; (80091fc <xQueueGenericSend+0x1f8>)
 80090fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009102:	601a      	str	r2, [r3, #0]
 8009104:	f3bf 8f4f 	dsb	sy
 8009108:	f3bf 8f6f 	isb	sy
 800910c:	e00a      	b.n	8009124 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800910e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009110:	2b00      	cmp	r3, #0
 8009112:	d007      	beq.n	8009124 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009114:	4b39      	ldr	r3, [pc, #228]	; (80091fc <xQueueGenericSend+0x1f8>)
 8009116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800911a:	601a      	str	r2, [r3, #0]
 800911c:	f3bf 8f4f 	dsb	sy
 8009120:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009124:	f002 f836 	bl	800b194 <vPortExitCritical>
				return pdPASS;
 8009128:	2301      	movs	r3, #1
 800912a:	e063      	b.n	80091f4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d103      	bne.n	800913a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009132:	f002 f82f 	bl	800b194 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009136:	2300      	movs	r3, #0
 8009138:	e05c      	b.n	80091f4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800913a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800913c:	2b00      	cmp	r3, #0
 800913e:	d106      	bne.n	800914e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009140:	f107 0314 	add.w	r3, r7, #20
 8009144:	4618      	mov	r0, r3
 8009146:	f001 f889 	bl	800a25c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800914a:	2301      	movs	r3, #1
 800914c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800914e:	f002 f821 	bl	800b194 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009152:	f000 fdfb 	bl	8009d4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009156:	f001 ffed 	bl	800b134 <vPortEnterCritical>
 800915a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800915c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009160:	b25b      	sxtb	r3, r3
 8009162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009166:	d103      	bne.n	8009170 <xQueueGenericSend+0x16c>
 8009168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916a:	2200      	movs	r2, #0
 800916c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009172:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009176:	b25b      	sxtb	r3, r3
 8009178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800917c:	d103      	bne.n	8009186 <xQueueGenericSend+0x182>
 800917e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009180:	2200      	movs	r2, #0
 8009182:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009186:	f002 f805 	bl	800b194 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800918a:	1d3a      	adds	r2, r7, #4
 800918c:	f107 0314 	add.w	r3, r7, #20
 8009190:	4611      	mov	r1, r2
 8009192:	4618      	mov	r0, r3
 8009194:	f001 f878 	bl	800a288 <xTaskCheckForTimeOut>
 8009198:	4603      	mov	r3, r0
 800919a:	2b00      	cmp	r3, #0
 800919c:	d124      	bne.n	80091e8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800919e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091a0:	f000 fb22 	bl	80097e8 <prvIsQueueFull>
 80091a4:	4603      	mov	r3, r0
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d018      	beq.n	80091dc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80091aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ac:	3310      	adds	r3, #16
 80091ae:	687a      	ldr	r2, [r7, #4]
 80091b0:	4611      	mov	r1, r2
 80091b2:	4618      	mov	r0, r3
 80091b4:	f000 ff9e 	bl	800a0f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80091b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091ba:	f000 faad 	bl	8009718 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80091be:	f000 fdd3 	bl	8009d68 <xTaskResumeAll>
 80091c2:	4603      	mov	r3, r0
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	f47f af7c 	bne.w	80090c2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80091ca:	4b0c      	ldr	r3, [pc, #48]	; (80091fc <xQueueGenericSend+0x1f8>)
 80091cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091d0:	601a      	str	r2, [r3, #0]
 80091d2:	f3bf 8f4f 	dsb	sy
 80091d6:	f3bf 8f6f 	isb	sy
 80091da:	e772      	b.n	80090c2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80091dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091de:	f000 fa9b 	bl	8009718 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80091e2:	f000 fdc1 	bl	8009d68 <xTaskResumeAll>
 80091e6:	e76c      	b.n	80090c2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80091e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091ea:	f000 fa95 	bl	8009718 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80091ee:	f000 fdbb 	bl	8009d68 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80091f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3738      	adds	r7, #56	; 0x38
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}
 80091fc:	e000ed04 	.word	0xe000ed04

08009200 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b090      	sub	sp, #64	; 0x40
 8009204:	af00      	add	r7, sp, #0
 8009206:	60f8      	str	r0, [r7, #12]
 8009208:	60b9      	str	r1, [r7, #8]
 800920a:	607a      	str	r2, [r7, #4]
 800920c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009214:	2b00      	cmp	r3, #0
 8009216:	d10a      	bne.n	800922e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800921c:	f383 8811 	msr	BASEPRI, r3
 8009220:	f3bf 8f6f 	isb	sy
 8009224:	f3bf 8f4f 	dsb	sy
 8009228:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800922a:	bf00      	nop
 800922c:	e7fe      	b.n	800922c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d103      	bne.n	800923c <xQueueGenericSendFromISR+0x3c>
 8009234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009238:	2b00      	cmp	r3, #0
 800923a:	d101      	bne.n	8009240 <xQueueGenericSendFromISR+0x40>
 800923c:	2301      	movs	r3, #1
 800923e:	e000      	b.n	8009242 <xQueueGenericSendFromISR+0x42>
 8009240:	2300      	movs	r3, #0
 8009242:	2b00      	cmp	r3, #0
 8009244:	d10a      	bne.n	800925c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800924a:	f383 8811 	msr	BASEPRI, r3
 800924e:	f3bf 8f6f 	isb	sy
 8009252:	f3bf 8f4f 	dsb	sy
 8009256:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009258:	bf00      	nop
 800925a:	e7fe      	b.n	800925a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	2b02      	cmp	r3, #2
 8009260:	d103      	bne.n	800926a <xQueueGenericSendFromISR+0x6a>
 8009262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009266:	2b01      	cmp	r3, #1
 8009268:	d101      	bne.n	800926e <xQueueGenericSendFromISR+0x6e>
 800926a:	2301      	movs	r3, #1
 800926c:	e000      	b.n	8009270 <xQueueGenericSendFromISR+0x70>
 800926e:	2300      	movs	r3, #0
 8009270:	2b00      	cmp	r3, #0
 8009272:	d10a      	bne.n	800928a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009278:	f383 8811 	msr	BASEPRI, r3
 800927c:	f3bf 8f6f 	isb	sy
 8009280:	f3bf 8f4f 	dsb	sy
 8009284:	623b      	str	r3, [r7, #32]
}
 8009286:	bf00      	nop
 8009288:	e7fe      	b.n	8009288 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800928a:	f002 f835 	bl	800b2f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800928e:	f3ef 8211 	mrs	r2, BASEPRI
 8009292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009296:	f383 8811 	msr	BASEPRI, r3
 800929a:	f3bf 8f6f 	isb	sy
 800929e:	f3bf 8f4f 	dsb	sy
 80092a2:	61fa      	str	r2, [r7, #28]
 80092a4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80092a6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80092a8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80092aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092b2:	429a      	cmp	r2, r3
 80092b4:	d302      	bcc.n	80092bc <xQueueGenericSendFromISR+0xbc>
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	2b02      	cmp	r3, #2
 80092ba:	d12f      	bne.n	800931c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80092bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80092c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ca:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80092cc:	683a      	ldr	r2, [r7, #0]
 80092ce:	68b9      	ldr	r1, [r7, #8]
 80092d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80092d2:	f000 f991 	bl	80095f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80092d6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80092da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092de:	d112      	bne.n	8009306 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80092e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d016      	beq.n	8009316 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80092e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ea:	3324      	adds	r3, #36	; 0x24
 80092ec:	4618      	mov	r0, r3
 80092ee:	f000 ff51 	bl	800a194 <xTaskRemoveFromEventList>
 80092f2:	4603      	mov	r3, r0
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d00e      	beq.n	8009316 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d00b      	beq.n	8009316 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2201      	movs	r2, #1
 8009302:	601a      	str	r2, [r3, #0]
 8009304:	e007      	b.n	8009316 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009306:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800930a:	3301      	adds	r3, #1
 800930c:	b2db      	uxtb	r3, r3
 800930e:	b25a      	sxtb	r2, r3
 8009310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009312:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009316:	2301      	movs	r3, #1
 8009318:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800931a:	e001      	b.n	8009320 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800931c:	2300      	movs	r3, #0
 800931e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009322:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800932a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800932c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800932e:	4618      	mov	r0, r3
 8009330:	3740      	adds	r7, #64	; 0x40
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
	...

08009338 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b08c      	sub	sp, #48	; 0x30
 800933c:	af00      	add	r7, sp, #0
 800933e:	60f8      	str	r0, [r7, #12]
 8009340:	60b9      	str	r1, [r7, #8]
 8009342:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009344:	2300      	movs	r3, #0
 8009346:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800934c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800934e:	2b00      	cmp	r3, #0
 8009350:	d10a      	bne.n	8009368 <xQueueReceive+0x30>
	__asm volatile
 8009352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009356:	f383 8811 	msr	BASEPRI, r3
 800935a:	f3bf 8f6f 	isb	sy
 800935e:	f3bf 8f4f 	dsb	sy
 8009362:	623b      	str	r3, [r7, #32]
}
 8009364:	bf00      	nop
 8009366:	e7fe      	b.n	8009366 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d103      	bne.n	8009376 <xQueueReceive+0x3e>
 800936e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009372:	2b00      	cmp	r3, #0
 8009374:	d101      	bne.n	800937a <xQueueReceive+0x42>
 8009376:	2301      	movs	r3, #1
 8009378:	e000      	b.n	800937c <xQueueReceive+0x44>
 800937a:	2300      	movs	r3, #0
 800937c:	2b00      	cmp	r3, #0
 800937e:	d10a      	bne.n	8009396 <xQueueReceive+0x5e>
	__asm volatile
 8009380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009384:	f383 8811 	msr	BASEPRI, r3
 8009388:	f3bf 8f6f 	isb	sy
 800938c:	f3bf 8f4f 	dsb	sy
 8009390:	61fb      	str	r3, [r7, #28]
}
 8009392:	bf00      	nop
 8009394:	e7fe      	b.n	8009394 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009396:	f001 f8bb 	bl	800a510 <xTaskGetSchedulerState>
 800939a:	4603      	mov	r3, r0
 800939c:	2b00      	cmp	r3, #0
 800939e:	d102      	bne.n	80093a6 <xQueueReceive+0x6e>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d101      	bne.n	80093aa <xQueueReceive+0x72>
 80093a6:	2301      	movs	r3, #1
 80093a8:	e000      	b.n	80093ac <xQueueReceive+0x74>
 80093aa:	2300      	movs	r3, #0
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d10a      	bne.n	80093c6 <xQueueReceive+0x8e>
	__asm volatile
 80093b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b4:	f383 8811 	msr	BASEPRI, r3
 80093b8:	f3bf 8f6f 	isb	sy
 80093bc:	f3bf 8f4f 	dsb	sy
 80093c0:	61bb      	str	r3, [r7, #24]
}
 80093c2:	bf00      	nop
 80093c4:	e7fe      	b.n	80093c4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80093c6:	f001 feb5 	bl	800b134 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80093ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ce:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80093d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d01f      	beq.n	8009416 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80093d6:	68b9      	ldr	r1, [r7, #8]
 80093d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093da:	f000 f977 	bl	80096cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80093de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e0:	1e5a      	subs	r2, r3, #1
 80093e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e8:	691b      	ldr	r3, [r3, #16]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d00f      	beq.n	800940e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f0:	3310      	adds	r3, #16
 80093f2:	4618      	mov	r0, r3
 80093f4:	f000 fece 	bl	800a194 <xTaskRemoveFromEventList>
 80093f8:	4603      	mov	r3, r0
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d007      	beq.n	800940e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80093fe:	4b3d      	ldr	r3, [pc, #244]	; (80094f4 <xQueueReceive+0x1bc>)
 8009400:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009404:	601a      	str	r2, [r3, #0]
 8009406:	f3bf 8f4f 	dsb	sy
 800940a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800940e:	f001 fec1 	bl	800b194 <vPortExitCritical>
				return pdPASS;
 8009412:	2301      	movs	r3, #1
 8009414:	e069      	b.n	80094ea <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d103      	bne.n	8009424 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800941c:	f001 feba 	bl	800b194 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009420:	2300      	movs	r3, #0
 8009422:	e062      	b.n	80094ea <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009426:	2b00      	cmp	r3, #0
 8009428:	d106      	bne.n	8009438 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800942a:	f107 0310 	add.w	r3, r7, #16
 800942e:	4618      	mov	r0, r3
 8009430:	f000 ff14 	bl	800a25c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009434:	2301      	movs	r3, #1
 8009436:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009438:	f001 feac 	bl	800b194 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800943c:	f000 fc86 	bl	8009d4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009440:	f001 fe78 	bl	800b134 <vPortEnterCritical>
 8009444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009446:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800944a:	b25b      	sxtb	r3, r3
 800944c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009450:	d103      	bne.n	800945a <xQueueReceive+0x122>
 8009452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009454:	2200      	movs	r2, #0
 8009456:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800945a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800945c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009460:	b25b      	sxtb	r3, r3
 8009462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009466:	d103      	bne.n	8009470 <xQueueReceive+0x138>
 8009468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800946a:	2200      	movs	r2, #0
 800946c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009470:	f001 fe90 	bl	800b194 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009474:	1d3a      	adds	r2, r7, #4
 8009476:	f107 0310 	add.w	r3, r7, #16
 800947a:	4611      	mov	r1, r2
 800947c:	4618      	mov	r0, r3
 800947e:	f000 ff03 	bl	800a288 <xTaskCheckForTimeOut>
 8009482:	4603      	mov	r3, r0
 8009484:	2b00      	cmp	r3, #0
 8009486:	d123      	bne.n	80094d0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009488:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800948a:	f000 f997 	bl	80097bc <prvIsQueueEmpty>
 800948e:	4603      	mov	r3, r0
 8009490:	2b00      	cmp	r3, #0
 8009492:	d017      	beq.n	80094c4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009496:	3324      	adds	r3, #36	; 0x24
 8009498:	687a      	ldr	r2, [r7, #4]
 800949a:	4611      	mov	r1, r2
 800949c:	4618      	mov	r0, r3
 800949e:	f000 fe29 	bl	800a0f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80094a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094a4:	f000 f938 	bl	8009718 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80094a8:	f000 fc5e 	bl	8009d68 <xTaskResumeAll>
 80094ac:	4603      	mov	r3, r0
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d189      	bne.n	80093c6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80094b2:	4b10      	ldr	r3, [pc, #64]	; (80094f4 <xQueueReceive+0x1bc>)
 80094b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094b8:	601a      	str	r2, [r3, #0]
 80094ba:	f3bf 8f4f 	dsb	sy
 80094be:	f3bf 8f6f 	isb	sy
 80094c2:	e780      	b.n	80093c6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80094c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094c6:	f000 f927 	bl	8009718 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80094ca:	f000 fc4d 	bl	8009d68 <xTaskResumeAll>
 80094ce:	e77a      	b.n	80093c6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80094d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094d2:	f000 f921 	bl	8009718 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80094d6:	f000 fc47 	bl	8009d68 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80094da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094dc:	f000 f96e 	bl	80097bc <prvIsQueueEmpty>
 80094e0:	4603      	mov	r3, r0
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	f43f af6f 	beq.w	80093c6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80094e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3730      	adds	r7, #48	; 0x30
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop
 80094f4:	e000ed04 	.word	0xe000ed04

080094f8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b08e      	sub	sp, #56	; 0x38
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	60f8      	str	r0, [r7, #12]
 8009500:	60b9      	str	r1, [r7, #8]
 8009502:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800950a:	2b00      	cmp	r3, #0
 800950c:	d10a      	bne.n	8009524 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800950e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009512:	f383 8811 	msr	BASEPRI, r3
 8009516:	f3bf 8f6f 	isb	sy
 800951a:	f3bf 8f4f 	dsb	sy
 800951e:	623b      	str	r3, [r7, #32]
}
 8009520:	bf00      	nop
 8009522:	e7fe      	b.n	8009522 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d103      	bne.n	8009532 <xQueueReceiveFromISR+0x3a>
 800952a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800952c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800952e:	2b00      	cmp	r3, #0
 8009530:	d101      	bne.n	8009536 <xQueueReceiveFromISR+0x3e>
 8009532:	2301      	movs	r3, #1
 8009534:	e000      	b.n	8009538 <xQueueReceiveFromISR+0x40>
 8009536:	2300      	movs	r3, #0
 8009538:	2b00      	cmp	r3, #0
 800953a:	d10a      	bne.n	8009552 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800953c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009540:	f383 8811 	msr	BASEPRI, r3
 8009544:	f3bf 8f6f 	isb	sy
 8009548:	f3bf 8f4f 	dsb	sy
 800954c:	61fb      	str	r3, [r7, #28]
}
 800954e:	bf00      	nop
 8009550:	e7fe      	b.n	8009550 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009552:	f001 fed1 	bl	800b2f8 <vPortValidateInterruptPriority>
	__asm volatile
 8009556:	f3ef 8211 	mrs	r2, BASEPRI
 800955a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800955e:	f383 8811 	msr	BASEPRI, r3
 8009562:	f3bf 8f6f 	isb	sy
 8009566:	f3bf 8f4f 	dsb	sy
 800956a:	61ba      	str	r2, [r7, #24]
 800956c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800956e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009570:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009576:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800957a:	2b00      	cmp	r3, #0
 800957c:	d02f      	beq.n	80095de <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800957e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009580:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009584:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009588:	68b9      	ldr	r1, [r7, #8]
 800958a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800958c:	f000 f89e 	bl	80096cc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009592:	1e5a      	subs	r2, r3, #1
 8009594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009596:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009598:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800959c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095a0:	d112      	bne.n	80095c8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80095a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a4:	691b      	ldr	r3, [r3, #16]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d016      	beq.n	80095d8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80095aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ac:	3310      	adds	r3, #16
 80095ae:	4618      	mov	r0, r3
 80095b0:	f000 fdf0 	bl	800a194 <xTaskRemoveFromEventList>
 80095b4:	4603      	mov	r3, r0
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d00e      	beq.n	80095d8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d00b      	beq.n	80095d8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2201      	movs	r2, #1
 80095c4:	601a      	str	r2, [r3, #0]
 80095c6:	e007      	b.n	80095d8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80095c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095cc:	3301      	adds	r3, #1
 80095ce:	b2db      	uxtb	r3, r3
 80095d0:	b25a      	sxtb	r2, r3
 80095d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80095d8:	2301      	movs	r3, #1
 80095da:	637b      	str	r3, [r7, #52]	; 0x34
 80095dc:	e001      	b.n	80095e2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80095de:	2300      	movs	r3, #0
 80095e0:	637b      	str	r3, [r7, #52]	; 0x34
 80095e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095e4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	f383 8811 	msr	BASEPRI, r3
}
 80095ec:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80095ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3738      	adds	r7, #56	; 0x38
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b086      	sub	sp, #24
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	60b9      	str	r1, [r7, #8]
 8009602:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009604:	2300      	movs	r3, #0
 8009606:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800960c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009612:	2b00      	cmp	r3, #0
 8009614:	d10d      	bne.n	8009632 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d14d      	bne.n	80096ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	689b      	ldr	r3, [r3, #8]
 8009622:	4618      	mov	r0, r3
 8009624:	f000 ff92 	bl	800a54c <xTaskPriorityDisinherit>
 8009628:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	2200      	movs	r2, #0
 800962e:	609a      	str	r2, [r3, #8]
 8009630:	e043      	b.n	80096ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d119      	bne.n	800966c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	6858      	ldr	r0, [r3, #4]
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009640:	461a      	mov	r2, r3
 8009642:	68b9      	ldr	r1, [r7, #8]
 8009644:	f002 fbbe 	bl	800bdc4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	685a      	ldr	r2, [r3, #4]
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009650:	441a      	add	r2, r3
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	685a      	ldr	r2, [r3, #4]
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	689b      	ldr	r3, [r3, #8]
 800965e:	429a      	cmp	r2, r3
 8009660:	d32b      	bcc.n	80096ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681a      	ldr	r2, [r3, #0]
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	605a      	str	r2, [r3, #4]
 800966a:	e026      	b.n	80096ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	68d8      	ldr	r0, [r3, #12]
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009674:	461a      	mov	r2, r3
 8009676:	68b9      	ldr	r1, [r7, #8]
 8009678:	f002 fba4 	bl	800bdc4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	68da      	ldr	r2, [r3, #12]
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009684:	425b      	negs	r3, r3
 8009686:	441a      	add	r2, r3
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	68da      	ldr	r2, [r3, #12]
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	429a      	cmp	r2, r3
 8009696:	d207      	bcs.n	80096a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	689a      	ldr	r2, [r3, #8]
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096a0:	425b      	negs	r3, r3
 80096a2:	441a      	add	r2, r3
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2b02      	cmp	r3, #2
 80096ac:	d105      	bne.n	80096ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d002      	beq.n	80096ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	3b01      	subs	r3, #1
 80096b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	1c5a      	adds	r2, r3, #1
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80096c2:	697b      	ldr	r3, [r7, #20]
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3718      	adds	r7, #24
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b082      	sub	sp, #8
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d018      	beq.n	8009710 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	68da      	ldr	r2, [r3, #12]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096e6:	441a      	add	r2, r3
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	68da      	ldr	r2, [r3, #12]
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	689b      	ldr	r3, [r3, #8]
 80096f4:	429a      	cmp	r2, r3
 80096f6:	d303      	bcc.n	8009700 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681a      	ldr	r2, [r3, #0]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	68d9      	ldr	r1, [r3, #12]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009708:	461a      	mov	r2, r3
 800970a:	6838      	ldr	r0, [r7, #0]
 800970c:	f002 fb5a 	bl	800bdc4 <memcpy>
	}
}
 8009710:	bf00      	nop
 8009712:	3708      	adds	r7, #8
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}

08009718 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009720:	f001 fd08 	bl	800b134 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800972a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800972c:	e011      	b.n	8009752 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009732:	2b00      	cmp	r3, #0
 8009734:	d012      	beq.n	800975c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	3324      	adds	r3, #36	; 0x24
 800973a:	4618      	mov	r0, r3
 800973c:	f000 fd2a 	bl	800a194 <xTaskRemoveFromEventList>
 8009740:	4603      	mov	r3, r0
 8009742:	2b00      	cmp	r3, #0
 8009744:	d001      	beq.n	800974a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009746:	f000 fe01 	bl	800a34c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800974a:	7bfb      	ldrb	r3, [r7, #15]
 800974c:	3b01      	subs	r3, #1
 800974e:	b2db      	uxtb	r3, r3
 8009750:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009756:	2b00      	cmp	r3, #0
 8009758:	dce9      	bgt.n	800972e <prvUnlockQueue+0x16>
 800975a:	e000      	b.n	800975e <prvUnlockQueue+0x46>
					break;
 800975c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	22ff      	movs	r2, #255	; 0xff
 8009762:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009766:	f001 fd15 	bl	800b194 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800976a:	f001 fce3 	bl	800b134 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009774:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009776:	e011      	b.n	800979c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	691b      	ldr	r3, [r3, #16]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d012      	beq.n	80097a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	3310      	adds	r3, #16
 8009784:	4618      	mov	r0, r3
 8009786:	f000 fd05 	bl	800a194 <xTaskRemoveFromEventList>
 800978a:	4603      	mov	r3, r0
 800978c:	2b00      	cmp	r3, #0
 800978e:	d001      	beq.n	8009794 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009790:	f000 fddc 	bl	800a34c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009794:	7bbb      	ldrb	r3, [r7, #14]
 8009796:	3b01      	subs	r3, #1
 8009798:	b2db      	uxtb	r3, r3
 800979a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800979c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	dce9      	bgt.n	8009778 <prvUnlockQueue+0x60>
 80097a4:	e000      	b.n	80097a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80097a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	22ff      	movs	r2, #255	; 0xff
 80097ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80097b0:	f001 fcf0 	bl	800b194 <vPortExitCritical>
}
 80097b4:	bf00      	nop
 80097b6:	3710      	adds	r7, #16
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}

080097bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b084      	sub	sp, #16
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80097c4:	f001 fcb6 	bl	800b134 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d102      	bne.n	80097d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80097d0:	2301      	movs	r3, #1
 80097d2:	60fb      	str	r3, [r7, #12]
 80097d4:	e001      	b.n	80097da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80097d6:	2300      	movs	r3, #0
 80097d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80097da:	f001 fcdb 	bl	800b194 <vPortExitCritical>

	return xReturn;
 80097de:	68fb      	ldr	r3, [r7, #12]
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3710      	adds	r7, #16
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80097f0:	f001 fca0 	bl	800b134 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d102      	bne.n	8009806 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009800:	2301      	movs	r3, #1
 8009802:	60fb      	str	r3, [r7, #12]
 8009804:	e001      	b.n	800980a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009806:	2300      	movs	r3, #0
 8009808:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800980a:	f001 fcc3 	bl	800b194 <vPortExitCritical>

	return xReturn;
 800980e:	68fb      	ldr	r3, [r7, #12]
}
 8009810:	4618      	mov	r0, r3
 8009812:	3710      	adds	r7, #16
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009818:	b480      	push	{r7}
 800981a:	b085      	sub	sp, #20
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009822:	2300      	movs	r3, #0
 8009824:	60fb      	str	r3, [r7, #12]
 8009826:	e014      	b.n	8009852 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009828:	4a0f      	ldr	r2, [pc, #60]	; (8009868 <vQueueAddToRegistry+0x50>)
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d10b      	bne.n	800984c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009834:	490c      	ldr	r1, [pc, #48]	; (8009868 <vQueueAddToRegistry+0x50>)
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	683a      	ldr	r2, [r7, #0]
 800983a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800983e:	4a0a      	ldr	r2, [pc, #40]	; (8009868 <vQueueAddToRegistry+0x50>)
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	00db      	lsls	r3, r3, #3
 8009844:	4413      	add	r3, r2
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800984a:	e006      	b.n	800985a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	3301      	adds	r3, #1
 8009850:	60fb      	str	r3, [r7, #12]
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2b07      	cmp	r3, #7
 8009856:	d9e7      	bls.n	8009828 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009858:	bf00      	nop
 800985a:	bf00      	nop
 800985c:	3714      	adds	r7, #20
 800985e:	46bd      	mov	sp, r7
 8009860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009864:	4770      	bx	lr
 8009866:	bf00      	nop
 8009868:	200008f8 	.word	0x200008f8

0800986c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800986c:	b580      	push	{r7, lr}
 800986e:	b086      	sub	sp, #24
 8009870:	af00      	add	r7, sp, #0
 8009872:	60f8      	str	r0, [r7, #12]
 8009874:	60b9      	str	r1, [r7, #8]
 8009876:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800987c:	f001 fc5a 	bl	800b134 <vPortEnterCritical>
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009886:	b25b      	sxtb	r3, r3
 8009888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800988c:	d103      	bne.n	8009896 <vQueueWaitForMessageRestricted+0x2a>
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	2200      	movs	r2, #0
 8009892:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800989c:	b25b      	sxtb	r3, r3
 800989e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098a2:	d103      	bne.n	80098ac <vQueueWaitForMessageRestricted+0x40>
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	2200      	movs	r2, #0
 80098a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80098ac:	f001 fc72 	bl	800b194 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d106      	bne.n	80098c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	3324      	adds	r3, #36	; 0x24
 80098bc:	687a      	ldr	r2, [r7, #4]
 80098be:	68b9      	ldr	r1, [r7, #8]
 80098c0:	4618      	mov	r0, r3
 80098c2:	f000 fc3b 	bl	800a13c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80098c6:	6978      	ldr	r0, [r7, #20]
 80098c8:	f7ff ff26 	bl	8009718 <prvUnlockQueue>
	}
 80098cc:	bf00      	nop
 80098ce:	3718      	adds	r7, #24
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b08e      	sub	sp, #56	; 0x38
 80098d8:	af04      	add	r7, sp, #16
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	60b9      	str	r1, [r7, #8]
 80098de:	607a      	str	r2, [r7, #4]
 80098e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80098e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d10a      	bne.n	80098fe <xTaskCreateStatic+0x2a>
	__asm volatile
 80098e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ec:	f383 8811 	msr	BASEPRI, r3
 80098f0:	f3bf 8f6f 	isb	sy
 80098f4:	f3bf 8f4f 	dsb	sy
 80098f8:	623b      	str	r3, [r7, #32]
}
 80098fa:	bf00      	nop
 80098fc:	e7fe      	b.n	80098fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80098fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009900:	2b00      	cmp	r3, #0
 8009902:	d10a      	bne.n	800991a <xTaskCreateStatic+0x46>
	__asm volatile
 8009904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009908:	f383 8811 	msr	BASEPRI, r3
 800990c:	f3bf 8f6f 	isb	sy
 8009910:	f3bf 8f4f 	dsb	sy
 8009914:	61fb      	str	r3, [r7, #28]
}
 8009916:	bf00      	nop
 8009918:	e7fe      	b.n	8009918 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800991a:	235c      	movs	r3, #92	; 0x5c
 800991c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	2b5c      	cmp	r3, #92	; 0x5c
 8009922:	d00a      	beq.n	800993a <xTaskCreateStatic+0x66>
	__asm volatile
 8009924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009928:	f383 8811 	msr	BASEPRI, r3
 800992c:	f3bf 8f6f 	isb	sy
 8009930:	f3bf 8f4f 	dsb	sy
 8009934:	61bb      	str	r3, [r7, #24]
}
 8009936:	bf00      	nop
 8009938:	e7fe      	b.n	8009938 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800993a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800993c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800993e:	2b00      	cmp	r3, #0
 8009940:	d01e      	beq.n	8009980 <xTaskCreateStatic+0xac>
 8009942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009944:	2b00      	cmp	r3, #0
 8009946:	d01b      	beq.n	8009980 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800994a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800994c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800994e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009950:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009954:	2202      	movs	r2, #2
 8009956:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800995a:	2300      	movs	r3, #0
 800995c:	9303      	str	r3, [sp, #12]
 800995e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009960:	9302      	str	r3, [sp, #8]
 8009962:	f107 0314 	add.w	r3, r7, #20
 8009966:	9301      	str	r3, [sp, #4]
 8009968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800996a:	9300      	str	r3, [sp, #0]
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	687a      	ldr	r2, [r7, #4]
 8009970:	68b9      	ldr	r1, [r7, #8]
 8009972:	68f8      	ldr	r0, [r7, #12]
 8009974:	f000 f850 	bl	8009a18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009978:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800997a:	f000 f8dd 	bl	8009b38 <prvAddNewTaskToReadyList>
 800997e:	e001      	b.n	8009984 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009980:	2300      	movs	r3, #0
 8009982:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009984:	697b      	ldr	r3, [r7, #20]
	}
 8009986:	4618      	mov	r0, r3
 8009988:	3728      	adds	r7, #40	; 0x28
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}

0800998e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800998e:	b580      	push	{r7, lr}
 8009990:	b08c      	sub	sp, #48	; 0x30
 8009992:	af04      	add	r7, sp, #16
 8009994:	60f8      	str	r0, [r7, #12]
 8009996:	60b9      	str	r1, [r7, #8]
 8009998:	603b      	str	r3, [r7, #0]
 800999a:	4613      	mov	r3, r2
 800999c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800999e:	88fb      	ldrh	r3, [r7, #6]
 80099a0:	009b      	lsls	r3, r3, #2
 80099a2:	4618      	mov	r0, r3
 80099a4:	f001 fce8 	bl	800b378 <pvPortMalloc>
 80099a8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d00e      	beq.n	80099ce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80099b0:	205c      	movs	r0, #92	; 0x5c
 80099b2:	f001 fce1 	bl	800b378 <pvPortMalloc>
 80099b6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80099b8:	69fb      	ldr	r3, [r7, #28]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d003      	beq.n	80099c6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80099be:	69fb      	ldr	r3, [r7, #28]
 80099c0:	697a      	ldr	r2, [r7, #20]
 80099c2:	631a      	str	r2, [r3, #48]	; 0x30
 80099c4:	e005      	b.n	80099d2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80099c6:	6978      	ldr	r0, [r7, #20]
 80099c8:	f001 fda2 	bl	800b510 <vPortFree>
 80099cc:	e001      	b.n	80099d2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80099ce:	2300      	movs	r3, #0
 80099d0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80099d2:	69fb      	ldr	r3, [r7, #28]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d017      	beq.n	8009a08 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80099d8:	69fb      	ldr	r3, [r7, #28]
 80099da:	2200      	movs	r2, #0
 80099dc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80099e0:	88fa      	ldrh	r2, [r7, #6]
 80099e2:	2300      	movs	r3, #0
 80099e4:	9303      	str	r3, [sp, #12]
 80099e6:	69fb      	ldr	r3, [r7, #28]
 80099e8:	9302      	str	r3, [sp, #8]
 80099ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ec:	9301      	str	r3, [sp, #4]
 80099ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f0:	9300      	str	r3, [sp, #0]
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	68b9      	ldr	r1, [r7, #8]
 80099f6:	68f8      	ldr	r0, [r7, #12]
 80099f8:	f000 f80e 	bl	8009a18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80099fc:	69f8      	ldr	r0, [r7, #28]
 80099fe:	f000 f89b 	bl	8009b38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009a02:	2301      	movs	r3, #1
 8009a04:	61bb      	str	r3, [r7, #24]
 8009a06:	e002      	b.n	8009a0e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009a08:	f04f 33ff 	mov.w	r3, #4294967295
 8009a0c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009a0e:	69bb      	ldr	r3, [r7, #24]
	}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3720      	adds	r7, #32
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b088      	sub	sp, #32
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	60f8      	str	r0, [r7, #12]
 8009a20:	60b9      	str	r1, [r7, #8]
 8009a22:	607a      	str	r2, [r7, #4]
 8009a24:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a28:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	009b      	lsls	r3, r3, #2
 8009a2e:	461a      	mov	r2, r3
 8009a30:	21a5      	movs	r1, #165	; 0xa5
 8009a32:	f002 f9d5 	bl	800bde0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009a40:	3b01      	subs	r3, #1
 8009a42:	009b      	lsls	r3, r3, #2
 8009a44:	4413      	add	r3, r2
 8009a46:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009a48:	69bb      	ldr	r3, [r7, #24]
 8009a4a:	f023 0307 	bic.w	r3, r3, #7
 8009a4e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009a50:	69bb      	ldr	r3, [r7, #24]
 8009a52:	f003 0307 	and.w	r3, r3, #7
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d00a      	beq.n	8009a70 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a5e:	f383 8811 	msr	BASEPRI, r3
 8009a62:	f3bf 8f6f 	isb	sy
 8009a66:	f3bf 8f4f 	dsb	sy
 8009a6a:	617b      	str	r3, [r7, #20]
}
 8009a6c:	bf00      	nop
 8009a6e:	e7fe      	b.n	8009a6e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d01f      	beq.n	8009ab6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009a76:	2300      	movs	r3, #0
 8009a78:	61fb      	str	r3, [r7, #28]
 8009a7a:	e012      	b.n	8009aa2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009a7c:	68ba      	ldr	r2, [r7, #8]
 8009a7e:	69fb      	ldr	r3, [r7, #28]
 8009a80:	4413      	add	r3, r2
 8009a82:	7819      	ldrb	r1, [r3, #0]
 8009a84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a86:	69fb      	ldr	r3, [r7, #28]
 8009a88:	4413      	add	r3, r2
 8009a8a:	3334      	adds	r3, #52	; 0x34
 8009a8c:	460a      	mov	r2, r1
 8009a8e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009a90:	68ba      	ldr	r2, [r7, #8]
 8009a92:	69fb      	ldr	r3, [r7, #28]
 8009a94:	4413      	add	r3, r2
 8009a96:	781b      	ldrb	r3, [r3, #0]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d006      	beq.n	8009aaa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009a9c:	69fb      	ldr	r3, [r7, #28]
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	61fb      	str	r3, [r7, #28]
 8009aa2:	69fb      	ldr	r3, [r7, #28]
 8009aa4:	2b0f      	cmp	r3, #15
 8009aa6:	d9e9      	bls.n	8009a7c <prvInitialiseNewTask+0x64>
 8009aa8:	e000      	b.n	8009aac <prvInitialiseNewTask+0x94>
			{
				break;
 8009aaa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aae:	2200      	movs	r2, #0
 8009ab0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009ab4:	e003      	b.n	8009abe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab8:	2200      	movs	r2, #0
 8009aba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac0:	2b37      	cmp	r3, #55	; 0x37
 8009ac2:	d901      	bls.n	8009ac8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009ac4:	2337      	movs	r3, #55	; 0x37
 8009ac6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009acc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ad2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009adc:	3304      	adds	r3, #4
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f7ff f8be 	bl	8008c60 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae6:	3318      	adds	r3, #24
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f7ff f8b9 	bl	8008c60 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009af2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009afc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b02:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b06:	2200      	movs	r2, #0
 8009b08:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009b12:	683a      	ldr	r2, [r7, #0]
 8009b14:	68f9      	ldr	r1, [r7, #12]
 8009b16:	69b8      	ldr	r0, [r7, #24]
 8009b18:	f001 f9e2 	bl	800aee0 <pxPortInitialiseStack>
 8009b1c:	4602      	mov	r2, r0
 8009b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b20:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d002      	beq.n	8009b2e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b2c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b2e:	bf00      	nop
 8009b30:	3720      	adds	r7, #32
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
	...

08009b38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b082      	sub	sp, #8
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009b40:	f001 faf8 	bl	800b134 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009b44:	4b2d      	ldr	r3, [pc, #180]	; (8009bfc <prvAddNewTaskToReadyList+0xc4>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	3301      	adds	r3, #1
 8009b4a:	4a2c      	ldr	r2, [pc, #176]	; (8009bfc <prvAddNewTaskToReadyList+0xc4>)
 8009b4c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009b4e:	4b2c      	ldr	r3, [pc, #176]	; (8009c00 <prvAddNewTaskToReadyList+0xc8>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d109      	bne.n	8009b6a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009b56:	4a2a      	ldr	r2, [pc, #168]	; (8009c00 <prvAddNewTaskToReadyList+0xc8>)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009b5c:	4b27      	ldr	r3, [pc, #156]	; (8009bfc <prvAddNewTaskToReadyList+0xc4>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	d110      	bne.n	8009b86 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009b64:	f000 fc16 	bl	800a394 <prvInitialiseTaskLists>
 8009b68:	e00d      	b.n	8009b86 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009b6a:	4b26      	ldr	r3, [pc, #152]	; (8009c04 <prvAddNewTaskToReadyList+0xcc>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d109      	bne.n	8009b86 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009b72:	4b23      	ldr	r3, [pc, #140]	; (8009c00 <prvAddNewTaskToReadyList+0xc8>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b7c:	429a      	cmp	r2, r3
 8009b7e:	d802      	bhi.n	8009b86 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009b80:	4a1f      	ldr	r2, [pc, #124]	; (8009c00 <prvAddNewTaskToReadyList+0xc8>)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009b86:	4b20      	ldr	r3, [pc, #128]	; (8009c08 <prvAddNewTaskToReadyList+0xd0>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	4a1e      	ldr	r2, [pc, #120]	; (8009c08 <prvAddNewTaskToReadyList+0xd0>)
 8009b8e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009b90:	4b1d      	ldr	r3, [pc, #116]	; (8009c08 <prvAddNewTaskToReadyList+0xd0>)
 8009b92:	681a      	ldr	r2, [r3, #0]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b9c:	4b1b      	ldr	r3, [pc, #108]	; (8009c0c <prvAddNewTaskToReadyList+0xd4>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	429a      	cmp	r2, r3
 8009ba2:	d903      	bls.n	8009bac <prvAddNewTaskToReadyList+0x74>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba8:	4a18      	ldr	r2, [pc, #96]	; (8009c0c <prvAddNewTaskToReadyList+0xd4>)
 8009baa:	6013      	str	r3, [r2, #0]
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bb0:	4613      	mov	r3, r2
 8009bb2:	009b      	lsls	r3, r3, #2
 8009bb4:	4413      	add	r3, r2
 8009bb6:	009b      	lsls	r3, r3, #2
 8009bb8:	4a15      	ldr	r2, [pc, #84]	; (8009c10 <prvAddNewTaskToReadyList+0xd8>)
 8009bba:	441a      	add	r2, r3
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	3304      	adds	r3, #4
 8009bc0:	4619      	mov	r1, r3
 8009bc2:	4610      	mov	r0, r2
 8009bc4:	f7ff f859 	bl	8008c7a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009bc8:	f001 fae4 	bl	800b194 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009bcc:	4b0d      	ldr	r3, [pc, #52]	; (8009c04 <prvAddNewTaskToReadyList+0xcc>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d00e      	beq.n	8009bf2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009bd4:	4b0a      	ldr	r3, [pc, #40]	; (8009c00 <prvAddNewTaskToReadyList+0xc8>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d207      	bcs.n	8009bf2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009be2:	4b0c      	ldr	r3, [pc, #48]	; (8009c14 <prvAddNewTaskToReadyList+0xdc>)
 8009be4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009be8:	601a      	str	r2, [r3, #0]
 8009bea:	f3bf 8f4f 	dsb	sy
 8009bee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009bf2:	bf00      	nop
 8009bf4:	3708      	adds	r7, #8
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}
 8009bfa:	bf00      	nop
 8009bfc:	20000e0c 	.word	0x20000e0c
 8009c00:	20000938 	.word	0x20000938
 8009c04:	20000e18 	.word	0x20000e18
 8009c08:	20000e28 	.word	0x20000e28
 8009c0c:	20000e14 	.word	0x20000e14
 8009c10:	2000093c 	.word	0x2000093c
 8009c14:	e000ed04 	.word	0xe000ed04

08009c18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b084      	sub	sp, #16
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009c20:	2300      	movs	r3, #0
 8009c22:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d017      	beq.n	8009c5a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009c2a:	4b13      	ldr	r3, [pc, #76]	; (8009c78 <vTaskDelay+0x60>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d00a      	beq.n	8009c48 <vTaskDelay+0x30>
	__asm volatile
 8009c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c36:	f383 8811 	msr	BASEPRI, r3
 8009c3a:	f3bf 8f6f 	isb	sy
 8009c3e:	f3bf 8f4f 	dsb	sy
 8009c42:	60bb      	str	r3, [r7, #8]
}
 8009c44:	bf00      	nop
 8009c46:	e7fe      	b.n	8009c46 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009c48:	f000 f880 	bl	8009d4c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009c4c:	2100      	movs	r1, #0
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 fcea 	bl	800a628 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009c54:	f000 f888 	bl	8009d68 <xTaskResumeAll>
 8009c58:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d107      	bne.n	8009c70 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009c60:	4b06      	ldr	r3, [pc, #24]	; (8009c7c <vTaskDelay+0x64>)
 8009c62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c66:	601a      	str	r2, [r3, #0]
 8009c68:	f3bf 8f4f 	dsb	sy
 8009c6c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009c70:	bf00      	nop
 8009c72:	3710      	adds	r7, #16
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}
 8009c78:	20000e34 	.word	0x20000e34
 8009c7c:	e000ed04 	.word	0xe000ed04

08009c80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b08a      	sub	sp, #40	; 0x28
 8009c84:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009c86:	2300      	movs	r3, #0
 8009c88:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009c8e:	463a      	mov	r2, r7
 8009c90:	1d39      	adds	r1, r7, #4
 8009c92:	f107 0308 	add.w	r3, r7, #8
 8009c96:	4618      	mov	r0, r3
 8009c98:	f7fe ff8e 	bl	8008bb8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009c9c:	6839      	ldr	r1, [r7, #0]
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	68ba      	ldr	r2, [r7, #8]
 8009ca2:	9202      	str	r2, [sp, #8]
 8009ca4:	9301      	str	r3, [sp, #4]
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	9300      	str	r3, [sp, #0]
 8009caa:	2300      	movs	r3, #0
 8009cac:	460a      	mov	r2, r1
 8009cae:	4921      	ldr	r1, [pc, #132]	; (8009d34 <vTaskStartScheduler+0xb4>)
 8009cb0:	4821      	ldr	r0, [pc, #132]	; (8009d38 <vTaskStartScheduler+0xb8>)
 8009cb2:	f7ff fe0f 	bl	80098d4 <xTaskCreateStatic>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	4a20      	ldr	r2, [pc, #128]	; (8009d3c <vTaskStartScheduler+0xbc>)
 8009cba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009cbc:	4b1f      	ldr	r3, [pc, #124]	; (8009d3c <vTaskStartScheduler+0xbc>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d002      	beq.n	8009cca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	617b      	str	r3, [r7, #20]
 8009cc8:	e001      	b.n	8009cce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	2b01      	cmp	r3, #1
 8009cd2:	d102      	bne.n	8009cda <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009cd4:	f000 fcfc 	bl	800a6d0 <xTimerCreateTimerTask>
 8009cd8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d116      	bne.n	8009d0e <vTaskStartScheduler+0x8e>
	__asm volatile
 8009ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce4:	f383 8811 	msr	BASEPRI, r3
 8009ce8:	f3bf 8f6f 	isb	sy
 8009cec:	f3bf 8f4f 	dsb	sy
 8009cf0:	613b      	str	r3, [r7, #16]
}
 8009cf2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009cf4:	4b12      	ldr	r3, [pc, #72]	; (8009d40 <vTaskStartScheduler+0xc0>)
 8009cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8009cfa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009cfc:	4b11      	ldr	r3, [pc, #68]	; (8009d44 <vTaskStartScheduler+0xc4>)
 8009cfe:	2201      	movs	r2, #1
 8009d00:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009d02:	4b11      	ldr	r3, [pc, #68]	; (8009d48 <vTaskStartScheduler+0xc8>)
 8009d04:	2200      	movs	r2, #0
 8009d06:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009d08:	f001 f972 	bl	800aff0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009d0c:	e00e      	b.n	8009d2c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d14:	d10a      	bne.n	8009d2c <vTaskStartScheduler+0xac>
	__asm volatile
 8009d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d1a:	f383 8811 	msr	BASEPRI, r3
 8009d1e:	f3bf 8f6f 	isb	sy
 8009d22:	f3bf 8f4f 	dsb	sy
 8009d26:	60fb      	str	r3, [r7, #12]
}
 8009d28:	bf00      	nop
 8009d2a:	e7fe      	b.n	8009d2a <vTaskStartScheduler+0xaa>
}
 8009d2c:	bf00      	nop
 8009d2e:	3718      	adds	r7, #24
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}
 8009d34:	0800c790 	.word	0x0800c790
 8009d38:	0800a365 	.word	0x0800a365
 8009d3c:	20000e30 	.word	0x20000e30
 8009d40:	20000e2c 	.word	0x20000e2c
 8009d44:	20000e18 	.word	0x20000e18
 8009d48:	20000e10 	.word	0x20000e10

08009d4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009d50:	4b04      	ldr	r3, [pc, #16]	; (8009d64 <vTaskSuspendAll+0x18>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	3301      	adds	r3, #1
 8009d56:	4a03      	ldr	r2, [pc, #12]	; (8009d64 <vTaskSuspendAll+0x18>)
 8009d58:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009d5a:	bf00      	nop
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d62:	4770      	bx	lr
 8009d64:	20000e34 	.word	0x20000e34

08009d68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b084      	sub	sp, #16
 8009d6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009d72:	2300      	movs	r3, #0
 8009d74:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009d76:	4b42      	ldr	r3, [pc, #264]	; (8009e80 <xTaskResumeAll+0x118>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d10a      	bne.n	8009d94 <xTaskResumeAll+0x2c>
	__asm volatile
 8009d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d82:	f383 8811 	msr	BASEPRI, r3
 8009d86:	f3bf 8f6f 	isb	sy
 8009d8a:	f3bf 8f4f 	dsb	sy
 8009d8e:	603b      	str	r3, [r7, #0]
}
 8009d90:	bf00      	nop
 8009d92:	e7fe      	b.n	8009d92 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009d94:	f001 f9ce 	bl	800b134 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009d98:	4b39      	ldr	r3, [pc, #228]	; (8009e80 <xTaskResumeAll+0x118>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	3b01      	subs	r3, #1
 8009d9e:	4a38      	ldr	r2, [pc, #224]	; (8009e80 <xTaskResumeAll+0x118>)
 8009da0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009da2:	4b37      	ldr	r3, [pc, #220]	; (8009e80 <xTaskResumeAll+0x118>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d162      	bne.n	8009e70 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009daa:	4b36      	ldr	r3, [pc, #216]	; (8009e84 <xTaskResumeAll+0x11c>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d05e      	beq.n	8009e70 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009db2:	e02f      	b.n	8009e14 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009db4:	4b34      	ldr	r3, [pc, #208]	; (8009e88 <xTaskResumeAll+0x120>)
 8009db6:	68db      	ldr	r3, [r3, #12]
 8009db8:	68db      	ldr	r3, [r3, #12]
 8009dba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	3318      	adds	r3, #24
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f7fe ffb7 	bl	8008d34 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	3304      	adds	r3, #4
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f7fe ffb2 	bl	8008d34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dd4:	4b2d      	ldr	r3, [pc, #180]	; (8009e8c <xTaskResumeAll+0x124>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	429a      	cmp	r2, r3
 8009dda:	d903      	bls.n	8009de4 <xTaskResumeAll+0x7c>
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009de0:	4a2a      	ldr	r2, [pc, #168]	; (8009e8c <xTaskResumeAll+0x124>)
 8009de2:	6013      	str	r3, [r2, #0]
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009de8:	4613      	mov	r3, r2
 8009dea:	009b      	lsls	r3, r3, #2
 8009dec:	4413      	add	r3, r2
 8009dee:	009b      	lsls	r3, r3, #2
 8009df0:	4a27      	ldr	r2, [pc, #156]	; (8009e90 <xTaskResumeAll+0x128>)
 8009df2:	441a      	add	r2, r3
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	3304      	adds	r3, #4
 8009df8:	4619      	mov	r1, r3
 8009dfa:	4610      	mov	r0, r2
 8009dfc:	f7fe ff3d 	bl	8008c7a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e04:	4b23      	ldr	r3, [pc, #140]	; (8009e94 <xTaskResumeAll+0x12c>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d302      	bcc.n	8009e14 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009e0e:	4b22      	ldr	r3, [pc, #136]	; (8009e98 <xTaskResumeAll+0x130>)
 8009e10:	2201      	movs	r2, #1
 8009e12:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009e14:	4b1c      	ldr	r3, [pc, #112]	; (8009e88 <xTaskResumeAll+0x120>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d1cb      	bne.n	8009db4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d001      	beq.n	8009e26 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009e22:	f000 fb55 	bl	800a4d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009e26:	4b1d      	ldr	r3, [pc, #116]	; (8009e9c <xTaskResumeAll+0x134>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d010      	beq.n	8009e54 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009e32:	f000 f847 	bl	8009ec4 <xTaskIncrementTick>
 8009e36:	4603      	mov	r3, r0
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d002      	beq.n	8009e42 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009e3c:	4b16      	ldr	r3, [pc, #88]	; (8009e98 <xTaskResumeAll+0x130>)
 8009e3e:	2201      	movs	r2, #1
 8009e40:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	3b01      	subs	r3, #1
 8009e46:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d1f1      	bne.n	8009e32 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009e4e:	4b13      	ldr	r3, [pc, #76]	; (8009e9c <xTaskResumeAll+0x134>)
 8009e50:	2200      	movs	r2, #0
 8009e52:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009e54:	4b10      	ldr	r3, [pc, #64]	; (8009e98 <xTaskResumeAll+0x130>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d009      	beq.n	8009e70 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009e60:	4b0f      	ldr	r3, [pc, #60]	; (8009ea0 <xTaskResumeAll+0x138>)
 8009e62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e66:	601a      	str	r2, [r3, #0]
 8009e68:	f3bf 8f4f 	dsb	sy
 8009e6c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009e70:	f001 f990 	bl	800b194 <vPortExitCritical>

	return xAlreadyYielded;
 8009e74:	68bb      	ldr	r3, [r7, #8]
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3710      	adds	r7, #16
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}
 8009e7e:	bf00      	nop
 8009e80:	20000e34 	.word	0x20000e34
 8009e84:	20000e0c 	.word	0x20000e0c
 8009e88:	20000dcc 	.word	0x20000dcc
 8009e8c:	20000e14 	.word	0x20000e14
 8009e90:	2000093c 	.word	0x2000093c
 8009e94:	20000938 	.word	0x20000938
 8009e98:	20000e20 	.word	0x20000e20
 8009e9c:	20000e1c 	.word	0x20000e1c
 8009ea0:	e000ed04 	.word	0xe000ed04

08009ea4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b083      	sub	sp, #12
 8009ea8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009eaa:	4b05      	ldr	r3, [pc, #20]	; (8009ec0 <xTaskGetTickCount+0x1c>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009eb0:	687b      	ldr	r3, [r7, #4]
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	370c      	adds	r7, #12
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebc:	4770      	bx	lr
 8009ebe:	bf00      	nop
 8009ec0:	20000e10 	.word	0x20000e10

08009ec4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b086      	sub	sp, #24
 8009ec8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ece:	4b4f      	ldr	r3, [pc, #316]	; (800a00c <xTaskIncrementTick+0x148>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	f040 808f 	bne.w	8009ff6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009ed8:	4b4d      	ldr	r3, [pc, #308]	; (800a010 <xTaskIncrementTick+0x14c>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	3301      	adds	r3, #1
 8009ede:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009ee0:	4a4b      	ldr	r2, [pc, #300]	; (800a010 <xTaskIncrementTick+0x14c>)
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d120      	bne.n	8009f2e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009eec:	4b49      	ldr	r3, [pc, #292]	; (800a014 <xTaskIncrementTick+0x150>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d00a      	beq.n	8009f0c <xTaskIncrementTick+0x48>
	__asm volatile
 8009ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009efa:	f383 8811 	msr	BASEPRI, r3
 8009efe:	f3bf 8f6f 	isb	sy
 8009f02:	f3bf 8f4f 	dsb	sy
 8009f06:	603b      	str	r3, [r7, #0]
}
 8009f08:	bf00      	nop
 8009f0a:	e7fe      	b.n	8009f0a <xTaskIncrementTick+0x46>
 8009f0c:	4b41      	ldr	r3, [pc, #260]	; (800a014 <xTaskIncrementTick+0x150>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	60fb      	str	r3, [r7, #12]
 8009f12:	4b41      	ldr	r3, [pc, #260]	; (800a018 <xTaskIncrementTick+0x154>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	4a3f      	ldr	r2, [pc, #252]	; (800a014 <xTaskIncrementTick+0x150>)
 8009f18:	6013      	str	r3, [r2, #0]
 8009f1a:	4a3f      	ldr	r2, [pc, #252]	; (800a018 <xTaskIncrementTick+0x154>)
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	6013      	str	r3, [r2, #0]
 8009f20:	4b3e      	ldr	r3, [pc, #248]	; (800a01c <xTaskIncrementTick+0x158>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	3301      	adds	r3, #1
 8009f26:	4a3d      	ldr	r2, [pc, #244]	; (800a01c <xTaskIncrementTick+0x158>)
 8009f28:	6013      	str	r3, [r2, #0]
 8009f2a:	f000 fad1 	bl	800a4d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009f2e:	4b3c      	ldr	r3, [pc, #240]	; (800a020 <xTaskIncrementTick+0x15c>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	693a      	ldr	r2, [r7, #16]
 8009f34:	429a      	cmp	r2, r3
 8009f36:	d349      	bcc.n	8009fcc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f38:	4b36      	ldr	r3, [pc, #216]	; (800a014 <xTaskIncrementTick+0x150>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d104      	bne.n	8009f4c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f42:	4b37      	ldr	r3, [pc, #220]	; (800a020 <xTaskIncrementTick+0x15c>)
 8009f44:	f04f 32ff 	mov.w	r2, #4294967295
 8009f48:	601a      	str	r2, [r3, #0]
					break;
 8009f4a:	e03f      	b.n	8009fcc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f4c:	4b31      	ldr	r3, [pc, #196]	; (800a014 <xTaskIncrementTick+0x150>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	68db      	ldr	r3, [r3, #12]
 8009f52:	68db      	ldr	r3, [r3, #12]
 8009f54:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	685b      	ldr	r3, [r3, #4]
 8009f5a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009f5c:	693a      	ldr	r2, [r7, #16]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	429a      	cmp	r2, r3
 8009f62:	d203      	bcs.n	8009f6c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009f64:	4a2e      	ldr	r2, [pc, #184]	; (800a020 <xTaskIncrementTick+0x15c>)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009f6a:	e02f      	b.n	8009fcc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	3304      	adds	r3, #4
 8009f70:	4618      	mov	r0, r3
 8009f72:	f7fe fedf 	bl	8008d34 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d004      	beq.n	8009f88 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	3318      	adds	r3, #24
 8009f82:	4618      	mov	r0, r3
 8009f84:	f7fe fed6 	bl	8008d34 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f8c:	4b25      	ldr	r3, [pc, #148]	; (800a024 <xTaskIncrementTick+0x160>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	429a      	cmp	r2, r3
 8009f92:	d903      	bls.n	8009f9c <xTaskIncrementTick+0xd8>
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f98:	4a22      	ldr	r2, [pc, #136]	; (800a024 <xTaskIncrementTick+0x160>)
 8009f9a:	6013      	str	r3, [r2, #0]
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fa0:	4613      	mov	r3, r2
 8009fa2:	009b      	lsls	r3, r3, #2
 8009fa4:	4413      	add	r3, r2
 8009fa6:	009b      	lsls	r3, r3, #2
 8009fa8:	4a1f      	ldr	r2, [pc, #124]	; (800a028 <xTaskIncrementTick+0x164>)
 8009faa:	441a      	add	r2, r3
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	3304      	adds	r3, #4
 8009fb0:	4619      	mov	r1, r3
 8009fb2:	4610      	mov	r0, r2
 8009fb4:	f7fe fe61 	bl	8008c7a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fbc:	4b1b      	ldr	r3, [pc, #108]	; (800a02c <xTaskIncrementTick+0x168>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	d3b8      	bcc.n	8009f38 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009fca:	e7b5      	b.n	8009f38 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009fcc:	4b17      	ldr	r3, [pc, #92]	; (800a02c <xTaskIncrementTick+0x168>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fd2:	4915      	ldr	r1, [pc, #84]	; (800a028 <xTaskIncrementTick+0x164>)
 8009fd4:	4613      	mov	r3, r2
 8009fd6:	009b      	lsls	r3, r3, #2
 8009fd8:	4413      	add	r3, r2
 8009fda:	009b      	lsls	r3, r3, #2
 8009fdc:	440b      	add	r3, r1
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	2b01      	cmp	r3, #1
 8009fe2:	d901      	bls.n	8009fe8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009fe8:	4b11      	ldr	r3, [pc, #68]	; (800a030 <xTaskIncrementTick+0x16c>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d007      	beq.n	800a000 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	617b      	str	r3, [r7, #20]
 8009ff4:	e004      	b.n	800a000 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009ff6:	4b0f      	ldr	r3, [pc, #60]	; (800a034 <xTaskIncrementTick+0x170>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	3301      	adds	r3, #1
 8009ffc:	4a0d      	ldr	r2, [pc, #52]	; (800a034 <xTaskIncrementTick+0x170>)
 8009ffe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a000:	697b      	ldr	r3, [r7, #20]
}
 800a002:	4618      	mov	r0, r3
 800a004:	3718      	adds	r7, #24
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
 800a00a:	bf00      	nop
 800a00c:	20000e34 	.word	0x20000e34
 800a010:	20000e10 	.word	0x20000e10
 800a014:	20000dc4 	.word	0x20000dc4
 800a018:	20000dc8 	.word	0x20000dc8
 800a01c:	20000e24 	.word	0x20000e24
 800a020:	20000e2c 	.word	0x20000e2c
 800a024:	20000e14 	.word	0x20000e14
 800a028:	2000093c 	.word	0x2000093c
 800a02c:	20000938 	.word	0x20000938
 800a030:	20000e20 	.word	0x20000e20
 800a034:	20000e1c 	.word	0x20000e1c

0800a038 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a038:	b480      	push	{r7}
 800a03a:	b085      	sub	sp, #20
 800a03c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a03e:	4b28      	ldr	r3, [pc, #160]	; (800a0e0 <vTaskSwitchContext+0xa8>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d003      	beq.n	800a04e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a046:	4b27      	ldr	r3, [pc, #156]	; (800a0e4 <vTaskSwitchContext+0xac>)
 800a048:	2201      	movs	r2, #1
 800a04a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a04c:	e041      	b.n	800a0d2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800a04e:	4b25      	ldr	r3, [pc, #148]	; (800a0e4 <vTaskSwitchContext+0xac>)
 800a050:	2200      	movs	r2, #0
 800a052:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a054:	4b24      	ldr	r3, [pc, #144]	; (800a0e8 <vTaskSwitchContext+0xb0>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	60fb      	str	r3, [r7, #12]
 800a05a:	e010      	b.n	800a07e <vTaskSwitchContext+0x46>
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d10a      	bne.n	800a078 <vTaskSwitchContext+0x40>
	__asm volatile
 800a062:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a066:	f383 8811 	msr	BASEPRI, r3
 800a06a:	f3bf 8f6f 	isb	sy
 800a06e:	f3bf 8f4f 	dsb	sy
 800a072:	607b      	str	r3, [r7, #4]
}
 800a074:	bf00      	nop
 800a076:	e7fe      	b.n	800a076 <vTaskSwitchContext+0x3e>
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	3b01      	subs	r3, #1
 800a07c:	60fb      	str	r3, [r7, #12]
 800a07e:	491b      	ldr	r1, [pc, #108]	; (800a0ec <vTaskSwitchContext+0xb4>)
 800a080:	68fa      	ldr	r2, [r7, #12]
 800a082:	4613      	mov	r3, r2
 800a084:	009b      	lsls	r3, r3, #2
 800a086:	4413      	add	r3, r2
 800a088:	009b      	lsls	r3, r3, #2
 800a08a:	440b      	add	r3, r1
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d0e4      	beq.n	800a05c <vTaskSwitchContext+0x24>
 800a092:	68fa      	ldr	r2, [r7, #12]
 800a094:	4613      	mov	r3, r2
 800a096:	009b      	lsls	r3, r3, #2
 800a098:	4413      	add	r3, r2
 800a09a:	009b      	lsls	r3, r3, #2
 800a09c:	4a13      	ldr	r2, [pc, #76]	; (800a0ec <vTaskSwitchContext+0xb4>)
 800a09e:	4413      	add	r3, r2
 800a0a0:	60bb      	str	r3, [r7, #8]
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	685b      	ldr	r3, [r3, #4]
 800a0a6:	685a      	ldr	r2, [r3, #4]
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	605a      	str	r2, [r3, #4]
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	685a      	ldr	r2, [r3, #4]
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	3308      	adds	r3, #8
 800a0b4:	429a      	cmp	r2, r3
 800a0b6:	d104      	bne.n	800a0c2 <vTaskSwitchContext+0x8a>
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	685b      	ldr	r3, [r3, #4]
 800a0bc:	685a      	ldr	r2, [r3, #4]
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	605a      	str	r2, [r3, #4]
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	68db      	ldr	r3, [r3, #12]
 800a0c8:	4a09      	ldr	r2, [pc, #36]	; (800a0f0 <vTaskSwitchContext+0xb8>)
 800a0ca:	6013      	str	r3, [r2, #0]
 800a0cc:	4a06      	ldr	r2, [pc, #24]	; (800a0e8 <vTaskSwitchContext+0xb0>)
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	6013      	str	r3, [r2, #0]
}
 800a0d2:	bf00      	nop
 800a0d4:	3714      	adds	r7, #20
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0dc:	4770      	bx	lr
 800a0de:	bf00      	nop
 800a0e0:	20000e34 	.word	0x20000e34
 800a0e4:	20000e20 	.word	0x20000e20
 800a0e8:	20000e14 	.word	0x20000e14
 800a0ec:	2000093c 	.word	0x2000093c
 800a0f0:	20000938 	.word	0x20000938

0800a0f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b084      	sub	sp, #16
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d10a      	bne.n	800a11a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a108:	f383 8811 	msr	BASEPRI, r3
 800a10c:	f3bf 8f6f 	isb	sy
 800a110:	f3bf 8f4f 	dsb	sy
 800a114:	60fb      	str	r3, [r7, #12]
}
 800a116:	bf00      	nop
 800a118:	e7fe      	b.n	800a118 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a11a:	4b07      	ldr	r3, [pc, #28]	; (800a138 <vTaskPlaceOnEventList+0x44>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	3318      	adds	r3, #24
 800a120:	4619      	mov	r1, r3
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f7fe fdcd 	bl	8008cc2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a128:	2101      	movs	r1, #1
 800a12a:	6838      	ldr	r0, [r7, #0]
 800a12c:	f000 fa7c 	bl	800a628 <prvAddCurrentTaskToDelayedList>
}
 800a130:	bf00      	nop
 800a132:	3710      	adds	r7, #16
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}
 800a138:	20000938 	.word	0x20000938

0800a13c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b086      	sub	sp, #24
 800a140:	af00      	add	r7, sp, #0
 800a142:	60f8      	str	r0, [r7, #12]
 800a144:	60b9      	str	r1, [r7, #8]
 800a146:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d10a      	bne.n	800a164 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a152:	f383 8811 	msr	BASEPRI, r3
 800a156:	f3bf 8f6f 	isb	sy
 800a15a:	f3bf 8f4f 	dsb	sy
 800a15e:	617b      	str	r3, [r7, #20]
}
 800a160:	bf00      	nop
 800a162:	e7fe      	b.n	800a162 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a164:	4b0a      	ldr	r3, [pc, #40]	; (800a190 <vTaskPlaceOnEventListRestricted+0x54>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	3318      	adds	r3, #24
 800a16a:	4619      	mov	r1, r3
 800a16c:	68f8      	ldr	r0, [r7, #12]
 800a16e:	f7fe fd84 	bl	8008c7a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d002      	beq.n	800a17e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a178:	f04f 33ff 	mov.w	r3, #4294967295
 800a17c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a17e:	6879      	ldr	r1, [r7, #4]
 800a180:	68b8      	ldr	r0, [r7, #8]
 800a182:	f000 fa51 	bl	800a628 <prvAddCurrentTaskToDelayedList>
	}
 800a186:	bf00      	nop
 800a188:	3718      	adds	r7, #24
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}
 800a18e:	bf00      	nop
 800a190:	20000938 	.word	0x20000938

0800a194 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b086      	sub	sp, #24
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	68db      	ldr	r3, [r3, #12]
 800a1a0:	68db      	ldr	r3, [r3, #12]
 800a1a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d10a      	bne.n	800a1c0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ae:	f383 8811 	msr	BASEPRI, r3
 800a1b2:	f3bf 8f6f 	isb	sy
 800a1b6:	f3bf 8f4f 	dsb	sy
 800a1ba:	60fb      	str	r3, [r7, #12]
}
 800a1bc:	bf00      	nop
 800a1be:	e7fe      	b.n	800a1be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	3318      	adds	r3, #24
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f7fe fdb5 	bl	8008d34 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1ca:	4b1e      	ldr	r3, [pc, #120]	; (800a244 <xTaskRemoveFromEventList+0xb0>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d11d      	bne.n	800a20e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	3304      	adds	r3, #4
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f7fe fdac 	bl	8008d34 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1e0:	4b19      	ldr	r3, [pc, #100]	; (800a248 <xTaskRemoveFromEventList+0xb4>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	429a      	cmp	r2, r3
 800a1e6:	d903      	bls.n	800a1f0 <xTaskRemoveFromEventList+0x5c>
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ec:	4a16      	ldr	r2, [pc, #88]	; (800a248 <xTaskRemoveFromEventList+0xb4>)
 800a1ee:	6013      	str	r3, [r2, #0]
 800a1f0:	693b      	ldr	r3, [r7, #16]
 800a1f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1f4:	4613      	mov	r3, r2
 800a1f6:	009b      	lsls	r3, r3, #2
 800a1f8:	4413      	add	r3, r2
 800a1fa:	009b      	lsls	r3, r3, #2
 800a1fc:	4a13      	ldr	r2, [pc, #76]	; (800a24c <xTaskRemoveFromEventList+0xb8>)
 800a1fe:	441a      	add	r2, r3
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	3304      	adds	r3, #4
 800a204:	4619      	mov	r1, r3
 800a206:	4610      	mov	r0, r2
 800a208:	f7fe fd37 	bl	8008c7a <vListInsertEnd>
 800a20c:	e005      	b.n	800a21a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	3318      	adds	r3, #24
 800a212:	4619      	mov	r1, r3
 800a214:	480e      	ldr	r0, [pc, #56]	; (800a250 <xTaskRemoveFromEventList+0xbc>)
 800a216:	f7fe fd30 	bl	8008c7a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a21e:	4b0d      	ldr	r3, [pc, #52]	; (800a254 <xTaskRemoveFromEventList+0xc0>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a224:	429a      	cmp	r2, r3
 800a226:	d905      	bls.n	800a234 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a228:	2301      	movs	r3, #1
 800a22a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a22c:	4b0a      	ldr	r3, [pc, #40]	; (800a258 <xTaskRemoveFromEventList+0xc4>)
 800a22e:	2201      	movs	r2, #1
 800a230:	601a      	str	r2, [r3, #0]
 800a232:	e001      	b.n	800a238 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a234:	2300      	movs	r3, #0
 800a236:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a238:	697b      	ldr	r3, [r7, #20]
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3718      	adds	r7, #24
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}
 800a242:	bf00      	nop
 800a244:	20000e34 	.word	0x20000e34
 800a248:	20000e14 	.word	0x20000e14
 800a24c:	2000093c 	.word	0x2000093c
 800a250:	20000dcc 	.word	0x20000dcc
 800a254:	20000938 	.word	0x20000938
 800a258:	20000e20 	.word	0x20000e20

0800a25c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a25c:	b480      	push	{r7}
 800a25e:	b083      	sub	sp, #12
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a264:	4b06      	ldr	r3, [pc, #24]	; (800a280 <vTaskInternalSetTimeOutState+0x24>)
 800a266:	681a      	ldr	r2, [r3, #0]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a26c:	4b05      	ldr	r3, [pc, #20]	; (800a284 <vTaskInternalSetTimeOutState+0x28>)
 800a26e:	681a      	ldr	r2, [r3, #0]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	605a      	str	r2, [r3, #4]
}
 800a274:	bf00      	nop
 800a276:	370c      	adds	r7, #12
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr
 800a280:	20000e24 	.word	0x20000e24
 800a284:	20000e10 	.word	0x20000e10

0800a288 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b088      	sub	sp, #32
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
 800a290:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d10a      	bne.n	800a2ae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a29c:	f383 8811 	msr	BASEPRI, r3
 800a2a0:	f3bf 8f6f 	isb	sy
 800a2a4:	f3bf 8f4f 	dsb	sy
 800a2a8:	613b      	str	r3, [r7, #16]
}
 800a2aa:	bf00      	nop
 800a2ac:	e7fe      	b.n	800a2ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d10a      	bne.n	800a2ca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b8:	f383 8811 	msr	BASEPRI, r3
 800a2bc:	f3bf 8f6f 	isb	sy
 800a2c0:	f3bf 8f4f 	dsb	sy
 800a2c4:	60fb      	str	r3, [r7, #12]
}
 800a2c6:	bf00      	nop
 800a2c8:	e7fe      	b.n	800a2c8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a2ca:	f000 ff33 	bl	800b134 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a2ce:	4b1d      	ldr	r3, [pc, #116]	; (800a344 <xTaskCheckForTimeOut+0xbc>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	685b      	ldr	r3, [r3, #4]
 800a2d8:	69ba      	ldr	r2, [r7, #24]
 800a2da:	1ad3      	subs	r3, r2, r3
 800a2dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2e6:	d102      	bne.n	800a2ee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	61fb      	str	r3, [r7, #28]
 800a2ec:	e023      	b.n	800a336 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	4b15      	ldr	r3, [pc, #84]	; (800a348 <xTaskCheckForTimeOut+0xc0>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	d007      	beq.n	800a30a <xTaskCheckForTimeOut+0x82>
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	69ba      	ldr	r2, [r7, #24]
 800a300:	429a      	cmp	r2, r3
 800a302:	d302      	bcc.n	800a30a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a304:	2301      	movs	r3, #1
 800a306:	61fb      	str	r3, [r7, #28]
 800a308:	e015      	b.n	800a336 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	697a      	ldr	r2, [r7, #20]
 800a310:	429a      	cmp	r2, r3
 800a312:	d20b      	bcs.n	800a32c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	681a      	ldr	r2, [r3, #0]
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	1ad2      	subs	r2, r2, r3
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f7ff ff9b 	bl	800a25c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a326:	2300      	movs	r3, #0
 800a328:	61fb      	str	r3, [r7, #28]
 800a32a:	e004      	b.n	800a336 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	2200      	movs	r2, #0
 800a330:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a332:	2301      	movs	r3, #1
 800a334:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a336:	f000 ff2d 	bl	800b194 <vPortExitCritical>

	return xReturn;
 800a33a:	69fb      	ldr	r3, [r7, #28]
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	3720      	adds	r7, #32
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}
 800a344:	20000e10 	.word	0x20000e10
 800a348:	20000e24 	.word	0x20000e24

0800a34c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a34c:	b480      	push	{r7}
 800a34e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a350:	4b03      	ldr	r3, [pc, #12]	; (800a360 <vTaskMissedYield+0x14>)
 800a352:	2201      	movs	r2, #1
 800a354:	601a      	str	r2, [r3, #0]
}
 800a356:	bf00      	nop
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr
 800a360:	20000e20 	.word	0x20000e20

0800a364 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b082      	sub	sp, #8
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a36c:	f000 f852 	bl	800a414 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a370:	4b06      	ldr	r3, [pc, #24]	; (800a38c <prvIdleTask+0x28>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	2b01      	cmp	r3, #1
 800a376:	d9f9      	bls.n	800a36c <prvIdleTask+0x8>
			{
				taskYIELD();
 800a378:	4b05      	ldr	r3, [pc, #20]	; (800a390 <prvIdleTask+0x2c>)
 800a37a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a37e:	601a      	str	r2, [r3, #0]
 800a380:	f3bf 8f4f 	dsb	sy
 800a384:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a388:	e7f0      	b.n	800a36c <prvIdleTask+0x8>
 800a38a:	bf00      	nop
 800a38c:	2000093c 	.word	0x2000093c
 800a390:	e000ed04 	.word	0xe000ed04

0800a394 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b082      	sub	sp, #8
 800a398:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a39a:	2300      	movs	r3, #0
 800a39c:	607b      	str	r3, [r7, #4]
 800a39e:	e00c      	b.n	800a3ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a3a0:	687a      	ldr	r2, [r7, #4]
 800a3a2:	4613      	mov	r3, r2
 800a3a4:	009b      	lsls	r3, r3, #2
 800a3a6:	4413      	add	r3, r2
 800a3a8:	009b      	lsls	r3, r3, #2
 800a3aa:	4a12      	ldr	r2, [pc, #72]	; (800a3f4 <prvInitialiseTaskLists+0x60>)
 800a3ac:	4413      	add	r3, r2
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f7fe fc36 	bl	8008c20 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	3301      	adds	r3, #1
 800a3b8:	607b      	str	r3, [r7, #4]
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2b37      	cmp	r3, #55	; 0x37
 800a3be:	d9ef      	bls.n	800a3a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a3c0:	480d      	ldr	r0, [pc, #52]	; (800a3f8 <prvInitialiseTaskLists+0x64>)
 800a3c2:	f7fe fc2d 	bl	8008c20 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a3c6:	480d      	ldr	r0, [pc, #52]	; (800a3fc <prvInitialiseTaskLists+0x68>)
 800a3c8:	f7fe fc2a 	bl	8008c20 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a3cc:	480c      	ldr	r0, [pc, #48]	; (800a400 <prvInitialiseTaskLists+0x6c>)
 800a3ce:	f7fe fc27 	bl	8008c20 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a3d2:	480c      	ldr	r0, [pc, #48]	; (800a404 <prvInitialiseTaskLists+0x70>)
 800a3d4:	f7fe fc24 	bl	8008c20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a3d8:	480b      	ldr	r0, [pc, #44]	; (800a408 <prvInitialiseTaskLists+0x74>)
 800a3da:	f7fe fc21 	bl	8008c20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a3de:	4b0b      	ldr	r3, [pc, #44]	; (800a40c <prvInitialiseTaskLists+0x78>)
 800a3e0:	4a05      	ldr	r2, [pc, #20]	; (800a3f8 <prvInitialiseTaskLists+0x64>)
 800a3e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a3e4:	4b0a      	ldr	r3, [pc, #40]	; (800a410 <prvInitialiseTaskLists+0x7c>)
 800a3e6:	4a05      	ldr	r2, [pc, #20]	; (800a3fc <prvInitialiseTaskLists+0x68>)
 800a3e8:	601a      	str	r2, [r3, #0]
}
 800a3ea:	bf00      	nop
 800a3ec:	3708      	adds	r7, #8
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}
 800a3f2:	bf00      	nop
 800a3f4:	2000093c 	.word	0x2000093c
 800a3f8:	20000d9c 	.word	0x20000d9c
 800a3fc:	20000db0 	.word	0x20000db0
 800a400:	20000dcc 	.word	0x20000dcc
 800a404:	20000de0 	.word	0x20000de0
 800a408:	20000df8 	.word	0x20000df8
 800a40c:	20000dc4 	.word	0x20000dc4
 800a410:	20000dc8 	.word	0x20000dc8

0800a414 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b082      	sub	sp, #8
 800a418:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a41a:	e019      	b.n	800a450 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a41c:	f000 fe8a 	bl	800b134 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a420:	4b10      	ldr	r3, [pc, #64]	; (800a464 <prvCheckTasksWaitingTermination+0x50>)
 800a422:	68db      	ldr	r3, [r3, #12]
 800a424:	68db      	ldr	r3, [r3, #12]
 800a426:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	3304      	adds	r3, #4
 800a42c:	4618      	mov	r0, r3
 800a42e:	f7fe fc81 	bl	8008d34 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a432:	4b0d      	ldr	r3, [pc, #52]	; (800a468 <prvCheckTasksWaitingTermination+0x54>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	3b01      	subs	r3, #1
 800a438:	4a0b      	ldr	r2, [pc, #44]	; (800a468 <prvCheckTasksWaitingTermination+0x54>)
 800a43a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a43c:	4b0b      	ldr	r3, [pc, #44]	; (800a46c <prvCheckTasksWaitingTermination+0x58>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	3b01      	subs	r3, #1
 800a442:	4a0a      	ldr	r2, [pc, #40]	; (800a46c <prvCheckTasksWaitingTermination+0x58>)
 800a444:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a446:	f000 fea5 	bl	800b194 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f000 f810 	bl	800a470 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a450:	4b06      	ldr	r3, [pc, #24]	; (800a46c <prvCheckTasksWaitingTermination+0x58>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d1e1      	bne.n	800a41c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a458:	bf00      	nop
 800a45a:	bf00      	nop
 800a45c:	3708      	adds	r7, #8
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}
 800a462:	bf00      	nop
 800a464:	20000de0 	.word	0x20000de0
 800a468:	20000e0c 	.word	0x20000e0c
 800a46c:	20000df4 	.word	0x20000df4

0800a470 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a470:	b580      	push	{r7, lr}
 800a472:	b084      	sub	sp, #16
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d108      	bne.n	800a494 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a486:	4618      	mov	r0, r3
 800a488:	f001 f842 	bl	800b510 <vPortFree>
				vPortFree( pxTCB );
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f001 f83f 	bl	800b510 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a492:	e018      	b.n	800a4c6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a49a:	2b01      	cmp	r3, #1
 800a49c:	d103      	bne.n	800a4a6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f001 f836 	bl	800b510 <vPortFree>
	}
 800a4a4:	e00f      	b.n	800a4c6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a4ac:	2b02      	cmp	r3, #2
 800a4ae:	d00a      	beq.n	800a4c6 <prvDeleteTCB+0x56>
	__asm volatile
 800a4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b4:	f383 8811 	msr	BASEPRI, r3
 800a4b8:	f3bf 8f6f 	isb	sy
 800a4bc:	f3bf 8f4f 	dsb	sy
 800a4c0:	60fb      	str	r3, [r7, #12]
}
 800a4c2:	bf00      	nop
 800a4c4:	e7fe      	b.n	800a4c4 <prvDeleteTCB+0x54>
	}
 800a4c6:	bf00      	nop
 800a4c8:	3710      	adds	r7, #16
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}
	...

0800a4d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b083      	sub	sp, #12
 800a4d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a4d6:	4b0c      	ldr	r3, [pc, #48]	; (800a508 <prvResetNextTaskUnblockTime+0x38>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d104      	bne.n	800a4ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a4e0:	4b0a      	ldr	r3, [pc, #40]	; (800a50c <prvResetNextTaskUnblockTime+0x3c>)
 800a4e2:	f04f 32ff 	mov.w	r2, #4294967295
 800a4e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a4e8:	e008      	b.n	800a4fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4ea:	4b07      	ldr	r3, [pc, #28]	; (800a508 <prvResetNextTaskUnblockTime+0x38>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	68db      	ldr	r3, [r3, #12]
 800a4f0:	68db      	ldr	r3, [r3, #12]
 800a4f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	685b      	ldr	r3, [r3, #4]
 800a4f8:	4a04      	ldr	r2, [pc, #16]	; (800a50c <prvResetNextTaskUnblockTime+0x3c>)
 800a4fa:	6013      	str	r3, [r2, #0]
}
 800a4fc:	bf00      	nop
 800a4fe:	370c      	adds	r7, #12
 800a500:	46bd      	mov	sp, r7
 800a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a506:	4770      	bx	lr
 800a508:	20000dc4 	.word	0x20000dc4
 800a50c:	20000e2c 	.word	0x20000e2c

0800a510 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a510:	b480      	push	{r7}
 800a512:	b083      	sub	sp, #12
 800a514:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a516:	4b0b      	ldr	r3, [pc, #44]	; (800a544 <xTaskGetSchedulerState+0x34>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d102      	bne.n	800a524 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a51e:	2301      	movs	r3, #1
 800a520:	607b      	str	r3, [r7, #4]
 800a522:	e008      	b.n	800a536 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a524:	4b08      	ldr	r3, [pc, #32]	; (800a548 <xTaskGetSchedulerState+0x38>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d102      	bne.n	800a532 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a52c:	2302      	movs	r3, #2
 800a52e:	607b      	str	r3, [r7, #4]
 800a530:	e001      	b.n	800a536 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a532:	2300      	movs	r3, #0
 800a534:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a536:	687b      	ldr	r3, [r7, #4]
	}
 800a538:	4618      	mov	r0, r3
 800a53a:	370c      	adds	r7, #12
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	4770      	bx	lr
 800a544:	20000e18 	.word	0x20000e18
 800a548:	20000e34 	.word	0x20000e34

0800a54c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b086      	sub	sp, #24
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a558:	2300      	movs	r3, #0
 800a55a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d056      	beq.n	800a610 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a562:	4b2e      	ldr	r3, [pc, #184]	; (800a61c <xTaskPriorityDisinherit+0xd0>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	693a      	ldr	r2, [r7, #16]
 800a568:	429a      	cmp	r2, r3
 800a56a:	d00a      	beq.n	800a582 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a56c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a570:	f383 8811 	msr	BASEPRI, r3
 800a574:	f3bf 8f6f 	isb	sy
 800a578:	f3bf 8f4f 	dsb	sy
 800a57c:	60fb      	str	r3, [r7, #12]
}
 800a57e:	bf00      	nop
 800a580:	e7fe      	b.n	800a580 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a582:	693b      	ldr	r3, [r7, #16]
 800a584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a586:	2b00      	cmp	r3, #0
 800a588:	d10a      	bne.n	800a5a0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a58a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a58e:	f383 8811 	msr	BASEPRI, r3
 800a592:	f3bf 8f6f 	isb	sy
 800a596:	f3bf 8f4f 	dsb	sy
 800a59a:	60bb      	str	r3, [r7, #8]
}
 800a59c:	bf00      	nop
 800a59e:	e7fe      	b.n	800a59e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a5a0:	693b      	ldr	r3, [r7, #16]
 800a5a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5a4:	1e5a      	subs	r2, r3, #1
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	d02c      	beq.n	800a610 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d128      	bne.n	800a610 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	3304      	adds	r3, #4
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f7fe fbb6 	bl	8008d34 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5d4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a5dc:	693b      	ldr	r3, [r7, #16]
 800a5de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5e0:	4b0f      	ldr	r3, [pc, #60]	; (800a620 <xTaskPriorityDisinherit+0xd4>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	d903      	bls.n	800a5f0 <xTaskPriorityDisinherit+0xa4>
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5ec:	4a0c      	ldr	r2, [pc, #48]	; (800a620 <xTaskPriorityDisinherit+0xd4>)
 800a5ee:	6013      	str	r3, [r2, #0]
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5f4:	4613      	mov	r3, r2
 800a5f6:	009b      	lsls	r3, r3, #2
 800a5f8:	4413      	add	r3, r2
 800a5fa:	009b      	lsls	r3, r3, #2
 800a5fc:	4a09      	ldr	r2, [pc, #36]	; (800a624 <xTaskPriorityDisinherit+0xd8>)
 800a5fe:	441a      	add	r2, r3
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	3304      	adds	r3, #4
 800a604:	4619      	mov	r1, r3
 800a606:	4610      	mov	r0, r2
 800a608:	f7fe fb37 	bl	8008c7a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a60c:	2301      	movs	r3, #1
 800a60e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a610:	697b      	ldr	r3, [r7, #20]
	}
 800a612:	4618      	mov	r0, r3
 800a614:	3718      	adds	r7, #24
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}
 800a61a:	bf00      	nop
 800a61c:	20000938 	.word	0x20000938
 800a620:	20000e14 	.word	0x20000e14
 800a624:	2000093c 	.word	0x2000093c

0800a628 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b084      	sub	sp, #16
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a632:	4b21      	ldr	r3, [pc, #132]	; (800a6b8 <prvAddCurrentTaskToDelayedList+0x90>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a638:	4b20      	ldr	r3, [pc, #128]	; (800a6bc <prvAddCurrentTaskToDelayedList+0x94>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	3304      	adds	r3, #4
 800a63e:	4618      	mov	r0, r3
 800a640:	f7fe fb78 	bl	8008d34 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a64a:	d10a      	bne.n	800a662 <prvAddCurrentTaskToDelayedList+0x3a>
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d007      	beq.n	800a662 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a652:	4b1a      	ldr	r3, [pc, #104]	; (800a6bc <prvAddCurrentTaskToDelayedList+0x94>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	3304      	adds	r3, #4
 800a658:	4619      	mov	r1, r3
 800a65a:	4819      	ldr	r0, [pc, #100]	; (800a6c0 <prvAddCurrentTaskToDelayedList+0x98>)
 800a65c:	f7fe fb0d 	bl	8008c7a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a660:	e026      	b.n	800a6b0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a662:	68fa      	ldr	r2, [r7, #12]
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	4413      	add	r3, r2
 800a668:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a66a:	4b14      	ldr	r3, [pc, #80]	; (800a6bc <prvAddCurrentTaskToDelayedList+0x94>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	68ba      	ldr	r2, [r7, #8]
 800a670:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a672:	68ba      	ldr	r2, [r7, #8]
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	429a      	cmp	r2, r3
 800a678:	d209      	bcs.n	800a68e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a67a:	4b12      	ldr	r3, [pc, #72]	; (800a6c4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a67c:	681a      	ldr	r2, [r3, #0]
 800a67e:	4b0f      	ldr	r3, [pc, #60]	; (800a6bc <prvAddCurrentTaskToDelayedList+0x94>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	3304      	adds	r3, #4
 800a684:	4619      	mov	r1, r3
 800a686:	4610      	mov	r0, r2
 800a688:	f7fe fb1b 	bl	8008cc2 <vListInsert>
}
 800a68c:	e010      	b.n	800a6b0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a68e:	4b0e      	ldr	r3, [pc, #56]	; (800a6c8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a690:	681a      	ldr	r2, [r3, #0]
 800a692:	4b0a      	ldr	r3, [pc, #40]	; (800a6bc <prvAddCurrentTaskToDelayedList+0x94>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	3304      	adds	r3, #4
 800a698:	4619      	mov	r1, r3
 800a69a:	4610      	mov	r0, r2
 800a69c:	f7fe fb11 	bl	8008cc2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a6a0:	4b0a      	ldr	r3, [pc, #40]	; (800a6cc <prvAddCurrentTaskToDelayedList+0xa4>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	68ba      	ldr	r2, [r7, #8]
 800a6a6:	429a      	cmp	r2, r3
 800a6a8:	d202      	bcs.n	800a6b0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a6aa:	4a08      	ldr	r2, [pc, #32]	; (800a6cc <prvAddCurrentTaskToDelayedList+0xa4>)
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	6013      	str	r3, [r2, #0]
}
 800a6b0:	bf00      	nop
 800a6b2:	3710      	adds	r7, #16
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}
 800a6b8:	20000e10 	.word	0x20000e10
 800a6bc:	20000938 	.word	0x20000938
 800a6c0:	20000df8 	.word	0x20000df8
 800a6c4:	20000dc8 	.word	0x20000dc8
 800a6c8:	20000dc4 	.word	0x20000dc4
 800a6cc:	20000e2c 	.word	0x20000e2c

0800a6d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b08a      	sub	sp, #40	; 0x28
 800a6d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a6da:	f000 fba1 	bl	800ae20 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a6de:	4b1c      	ldr	r3, [pc, #112]	; (800a750 <xTimerCreateTimerTask+0x80>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d021      	beq.n	800a72a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a6ee:	1d3a      	adds	r2, r7, #4
 800a6f0:	f107 0108 	add.w	r1, r7, #8
 800a6f4:	f107 030c 	add.w	r3, r7, #12
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f7fe fa77 	bl	8008bec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a6fe:	6879      	ldr	r1, [r7, #4]
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	68fa      	ldr	r2, [r7, #12]
 800a704:	9202      	str	r2, [sp, #8]
 800a706:	9301      	str	r3, [sp, #4]
 800a708:	2302      	movs	r3, #2
 800a70a:	9300      	str	r3, [sp, #0]
 800a70c:	2300      	movs	r3, #0
 800a70e:	460a      	mov	r2, r1
 800a710:	4910      	ldr	r1, [pc, #64]	; (800a754 <xTimerCreateTimerTask+0x84>)
 800a712:	4811      	ldr	r0, [pc, #68]	; (800a758 <xTimerCreateTimerTask+0x88>)
 800a714:	f7ff f8de 	bl	80098d4 <xTaskCreateStatic>
 800a718:	4603      	mov	r3, r0
 800a71a:	4a10      	ldr	r2, [pc, #64]	; (800a75c <xTimerCreateTimerTask+0x8c>)
 800a71c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a71e:	4b0f      	ldr	r3, [pc, #60]	; (800a75c <xTimerCreateTimerTask+0x8c>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d001      	beq.n	800a72a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a726:	2301      	movs	r3, #1
 800a728:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d10a      	bne.n	800a746 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a734:	f383 8811 	msr	BASEPRI, r3
 800a738:	f3bf 8f6f 	isb	sy
 800a73c:	f3bf 8f4f 	dsb	sy
 800a740:	613b      	str	r3, [r7, #16]
}
 800a742:	bf00      	nop
 800a744:	e7fe      	b.n	800a744 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a746:	697b      	ldr	r3, [r7, #20]
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3718      	adds	r7, #24
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}
 800a750:	20000e68 	.word	0x20000e68
 800a754:	0800c798 	.word	0x0800c798
 800a758:	0800a9c9 	.word	0x0800a9c9
 800a75c:	20000e6c 	.word	0x20000e6c

0800a760 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800a760:	b580      	push	{r7, lr}
 800a762:	b088      	sub	sp, #32
 800a764:	af02      	add	r7, sp, #8
 800a766:	60f8      	str	r0, [r7, #12]
 800a768:	60b9      	str	r1, [r7, #8]
 800a76a:	607a      	str	r2, [r7, #4]
 800a76c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800a76e:	202c      	movs	r0, #44	; 0x2c
 800a770:	f000 fe02 	bl	800b378 <pvPortMalloc>
 800a774:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d00d      	beq.n	800a798 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	2200      	movs	r2, #0
 800a780:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	9301      	str	r3, [sp, #4]
 800a788:	6a3b      	ldr	r3, [r7, #32]
 800a78a:	9300      	str	r3, [sp, #0]
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	687a      	ldr	r2, [r7, #4]
 800a790:	68b9      	ldr	r1, [r7, #8]
 800a792:	68f8      	ldr	r0, [r7, #12]
 800a794:	f000 f843 	bl	800a81e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800a798:	697b      	ldr	r3, [r7, #20]
	}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3718      	adds	r7, #24
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}

0800a7a2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800a7a2:	b580      	push	{r7, lr}
 800a7a4:	b08a      	sub	sp, #40	; 0x28
 800a7a6:	af02      	add	r7, sp, #8
 800a7a8:	60f8      	str	r0, [r7, #12]
 800a7aa:	60b9      	str	r1, [r7, #8]
 800a7ac:	607a      	str	r2, [r7, #4]
 800a7ae:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800a7b0:	232c      	movs	r3, #44	; 0x2c
 800a7b2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	2b2c      	cmp	r3, #44	; 0x2c
 800a7b8:	d00a      	beq.n	800a7d0 <xTimerCreateStatic+0x2e>
	__asm volatile
 800a7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7be:	f383 8811 	msr	BASEPRI, r3
 800a7c2:	f3bf 8f6f 	isb	sy
 800a7c6:	f3bf 8f4f 	dsb	sy
 800a7ca:	61bb      	str	r3, [r7, #24]
}
 800a7cc:	bf00      	nop
 800a7ce:	e7fe      	b.n	800a7ce <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a7d0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800a7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d10a      	bne.n	800a7ee <xTimerCreateStatic+0x4c>
	__asm volatile
 800a7d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7dc:	f383 8811 	msr	BASEPRI, r3
 800a7e0:	f3bf 8f6f 	isb	sy
 800a7e4:	f3bf 8f4f 	dsb	sy
 800a7e8:	617b      	str	r3, [r7, #20]
}
 800a7ea:	bf00      	nop
 800a7ec:	e7fe      	b.n	800a7ec <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800a7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7f0:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800a7f2:	69fb      	ldr	r3, [r7, #28]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d00d      	beq.n	800a814 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800a7f8:	69fb      	ldr	r3, [r7, #28]
 800a7fa:	2202      	movs	r2, #2
 800a7fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a800:	69fb      	ldr	r3, [r7, #28]
 800a802:	9301      	str	r3, [sp, #4]
 800a804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a806:	9300      	str	r3, [sp, #0]
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	687a      	ldr	r2, [r7, #4]
 800a80c:	68b9      	ldr	r1, [r7, #8]
 800a80e:	68f8      	ldr	r0, [r7, #12]
 800a810:	f000 f805 	bl	800a81e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800a814:	69fb      	ldr	r3, [r7, #28]
	}
 800a816:	4618      	mov	r0, r3
 800a818:	3720      	adds	r7, #32
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}

0800a81e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800a81e:	b580      	push	{r7, lr}
 800a820:	b086      	sub	sp, #24
 800a822:	af00      	add	r7, sp, #0
 800a824:	60f8      	str	r0, [r7, #12]
 800a826:	60b9      	str	r1, [r7, #8]
 800a828:	607a      	str	r2, [r7, #4]
 800a82a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d10a      	bne.n	800a848 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800a832:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a836:	f383 8811 	msr	BASEPRI, r3
 800a83a:	f3bf 8f6f 	isb	sy
 800a83e:	f3bf 8f4f 	dsb	sy
 800a842:	617b      	str	r3, [r7, #20]
}
 800a844:	bf00      	nop
 800a846:	e7fe      	b.n	800a846 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800a848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d01e      	beq.n	800a88c <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800a84e:	f000 fae7 	bl	800ae20 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800a852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a854:	68fa      	ldr	r2, [r7, #12]
 800a856:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800a858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a85a:	68ba      	ldr	r2, [r7, #8]
 800a85c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800a85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a860:	683a      	ldr	r2, [r7, #0]
 800a862:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800a864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a866:	6a3a      	ldr	r2, [r7, #32]
 800a868:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800a86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a86c:	3304      	adds	r3, #4
 800a86e:	4618      	mov	r0, r3
 800a870:	f7fe f9f6 	bl	8008c60 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d008      	beq.n	800a88c <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800a87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a87c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a880:	f043 0304 	orr.w	r3, r3, #4
 800a884:	b2da      	uxtb	r2, r3
 800a886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a888:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800a88c:	bf00      	nop
 800a88e:	3718      	adds	r7, #24
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}

0800a894 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b08a      	sub	sp, #40	; 0x28
 800a898:	af00      	add	r7, sp, #0
 800a89a:	60f8      	str	r0, [r7, #12]
 800a89c:	60b9      	str	r1, [r7, #8]
 800a89e:	607a      	str	r2, [r7, #4]
 800a8a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d10a      	bne.n	800a8c2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b0:	f383 8811 	msr	BASEPRI, r3
 800a8b4:	f3bf 8f6f 	isb	sy
 800a8b8:	f3bf 8f4f 	dsb	sy
 800a8bc:	623b      	str	r3, [r7, #32]
}
 800a8be:	bf00      	nop
 800a8c0:	e7fe      	b.n	800a8c0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a8c2:	4b1a      	ldr	r3, [pc, #104]	; (800a92c <xTimerGenericCommand+0x98>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d02a      	beq.n	800a920 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a8ca:	68bb      	ldr	r3, [r7, #8]
 800a8cc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	2b05      	cmp	r3, #5
 800a8da:	dc18      	bgt.n	800a90e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a8dc:	f7ff fe18 	bl	800a510 <xTaskGetSchedulerState>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	2b02      	cmp	r3, #2
 800a8e4:	d109      	bne.n	800a8fa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a8e6:	4b11      	ldr	r3, [pc, #68]	; (800a92c <xTimerGenericCommand+0x98>)
 800a8e8:	6818      	ldr	r0, [r3, #0]
 800a8ea:	f107 0110 	add.w	r1, r7, #16
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8f2:	f7fe fb87 	bl	8009004 <xQueueGenericSend>
 800a8f6:	6278      	str	r0, [r7, #36]	; 0x24
 800a8f8:	e012      	b.n	800a920 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a8fa:	4b0c      	ldr	r3, [pc, #48]	; (800a92c <xTimerGenericCommand+0x98>)
 800a8fc:	6818      	ldr	r0, [r3, #0]
 800a8fe:	f107 0110 	add.w	r1, r7, #16
 800a902:	2300      	movs	r3, #0
 800a904:	2200      	movs	r2, #0
 800a906:	f7fe fb7d 	bl	8009004 <xQueueGenericSend>
 800a90a:	6278      	str	r0, [r7, #36]	; 0x24
 800a90c:	e008      	b.n	800a920 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a90e:	4b07      	ldr	r3, [pc, #28]	; (800a92c <xTimerGenericCommand+0x98>)
 800a910:	6818      	ldr	r0, [r3, #0]
 800a912:	f107 0110 	add.w	r1, r7, #16
 800a916:	2300      	movs	r3, #0
 800a918:	683a      	ldr	r2, [r7, #0]
 800a91a:	f7fe fc71 	bl	8009200 <xQueueGenericSendFromISR>
 800a91e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a922:	4618      	mov	r0, r3
 800a924:	3728      	adds	r7, #40	; 0x28
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}
 800a92a:	bf00      	nop
 800a92c:	20000e68 	.word	0x20000e68

0800a930 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b088      	sub	sp, #32
 800a934:	af02      	add	r7, sp, #8
 800a936:	6078      	str	r0, [r7, #4]
 800a938:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a93a:	4b22      	ldr	r3, [pc, #136]	; (800a9c4 <prvProcessExpiredTimer+0x94>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	68db      	ldr	r3, [r3, #12]
 800a940:	68db      	ldr	r3, [r3, #12]
 800a942:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	3304      	adds	r3, #4
 800a948:	4618      	mov	r0, r3
 800a94a:	f7fe f9f3 	bl	8008d34 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a954:	f003 0304 	and.w	r3, r3, #4
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d022      	beq.n	800a9a2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	699a      	ldr	r2, [r3, #24]
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	18d1      	adds	r1, r2, r3
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	683a      	ldr	r2, [r7, #0]
 800a968:	6978      	ldr	r0, [r7, #20]
 800a96a:	f000 f8d1 	bl	800ab10 <prvInsertTimerInActiveList>
 800a96e:	4603      	mov	r3, r0
 800a970:	2b00      	cmp	r3, #0
 800a972:	d01f      	beq.n	800a9b4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a974:	2300      	movs	r3, #0
 800a976:	9300      	str	r3, [sp, #0]
 800a978:	2300      	movs	r3, #0
 800a97a:	687a      	ldr	r2, [r7, #4]
 800a97c:	2100      	movs	r1, #0
 800a97e:	6978      	ldr	r0, [r7, #20]
 800a980:	f7ff ff88 	bl	800a894 <xTimerGenericCommand>
 800a984:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d113      	bne.n	800a9b4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a990:	f383 8811 	msr	BASEPRI, r3
 800a994:	f3bf 8f6f 	isb	sy
 800a998:	f3bf 8f4f 	dsb	sy
 800a99c:	60fb      	str	r3, [r7, #12]
}
 800a99e:	bf00      	nop
 800a9a0:	e7fe      	b.n	800a9a0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9a8:	f023 0301 	bic.w	r3, r3, #1
 800a9ac:	b2da      	uxtb	r2, r3
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	6a1b      	ldr	r3, [r3, #32]
 800a9b8:	6978      	ldr	r0, [r7, #20]
 800a9ba:	4798      	blx	r3
}
 800a9bc:	bf00      	nop
 800a9be:	3718      	adds	r7, #24
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}
 800a9c4:	20000e60 	.word	0x20000e60

0800a9c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b084      	sub	sp, #16
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a9d0:	f107 0308 	add.w	r3, r7, #8
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f000 f857 	bl	800aa88 <prvGetNextExpireTime>
 800a9da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	4619      	mov	r1, r3
 800a9e0:	68f8      	ldr	r0, [r7, #12]
 800a9e2:	f000 f803 	bl	800a9ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a9e6:	f000 f8d5 	bl	800ab94 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a9ea:	e7f1      	b.n	800a9d0 <prvTimerTask+0x8>

0800a9ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b084      	sub	sp, #16
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
 800a9f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a9f6:	f7ff f9a9 	bl	8009d4c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a9fa:	f107 0308 	add.w	r3, r7, #8
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f000 f866 	bl	800aad0 <prvSampleTimeNow>
 800aa04:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d130      	bne.n	800aa6e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d10a      	bne.n	800aa28 <prvProcessTimerOrBlockTask+0x3c>
 800aa12:	687a      	ldr	r2, [r7, #4]
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	429a      	cmp	r2, r3
 800aa18:	d806      	bhi.n	800aa28 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800aa1a:	f7ff f9a5 	bl	8009d68 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800aa1e:	68f9      	ldr	r1, [r7, #12]
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f7ff ff85 	bl	800a930 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800aa26:	e024      	b.n	800aa72 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d008      	beq.n	800aa40 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800aa2e:	4b13      	ldr	r3, [pc, #76]	; (800aa7c <prvProcessTimerOrBlockTask+0x90>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d101      	bne.n	800aa3c <prvProcessTimerOrBlockTask+0x50>
 800aa38:	2301      	movs	r3, #1
 800aa3a:	e000      	b.n	800aa3e <prvProcessTimerOrBlockTask+0x52>
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800aa40:	4b0f      	ldr	r3, [pc, #60]	; (800aa80 <prvProcessTimerOrBlockTask+0x94>)
 800aa42:	6818      	ldr	r0, [r3, #0]
 800aa44:	687a      	ldr	r2, [r7, #4]
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	1ad3      	subs	r3, r2, r3
 800aa4a:	683a      	ldr	r2, [r7, #0]
 800aa4c:	4619      	mov	r1, r3
 800aa4e:	f7fe ff0d 	bl	800986c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800aa52:	f7ff f989 	bl	8009d68 <xTaskResumeAll>
 800aa56:	4603      	mov	r3, r0
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d10a      	bne.n	800aa72 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800aa5c:	4b09      	ldr	r3, [pc, #36]	; (800aa84 <prvProcessTimerOrBlockTask+0x98>)
 800aa5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa62:	601a      	str	r2, [r3, #0]
 800aa64:	f3bf 8f4f 	dsb	sy
 800aa68:	f3bf 8f6f 	isb	sy
}
 800aa6c:	e001      	b.n	800aa72 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800aa6e:	f7ff f97b 	bl	8009d68 <xTaskResumeAll>
}
 800aa72:	bf00      	nop
 800aa74:	3710      	adds	r7, #16
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}
 800aa7a:	bf00      	nop
 800aa7c:	20000e64 	.word	0x20000e64
 800aa80:	20000e68 	.word	0x20000e68
 800aa84:	e000ed04 	.word	0xe000ed04

0800aa88 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b085      	sub	sp, #20
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800aa90:	4b0e      	ldr	r3, [pc, #56]	; (800aacc <prvGetNextExpireTime+0x44>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d101      	bne.n	800aa9e <prvGetNextExpireTime+0x16>
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	e000      	b.n	800aaa0 <prvGetNextExpireTime+0x18>
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d105      	bne.n	800aab8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aaac:	4b07      	ldr	r3, [pc, #28]	; (800aacc <prvGetNextExpireTime+0x44>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	68db      	ldr	r3, [r3, #12]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	60fb      	str	r3, [r7, #12]
 800aab6:	e001      	b.n	800aabc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800aab8:	2300      	movs	r3, #0
 800aaba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800aabc:	68fb      	ldr	r3, [r7, #12]
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	3714      	adds	r7, #20
 800aac2:	46bd      	mov	sp, r7
 800aac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac8:	4770      	bx	lr
 800aaca:	bf00      	nop
 800aacc:	20000e60 	.word	0x20000e60

0800aad0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b084      	sub	sp, #16
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800aad8:	f7ff f9e4 	bl	8009ea4 <xTaskGetTickCount>
 800aadc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800aade:	4b0b      	ldr	r3, [pc, #44]	; (800ab0c <prvSampleTimeNow+0x3c>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	68fa      	ldr	r2, [r7, #12]
 800aae4:	429a      	cmp	r2, r3
 800aae6:	d205      	bcs.n	800aaf4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800aae8:	f000 f936 	bl	800ad58 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2201      	movs	r2, #1
 800aaf0:	601a      	str	r2, [r3, #0]
 800aaf2:	e002      	b.n	800aafa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800aafa:	4a04      	ldr	r2, [pc, #16]	; (800ab0c <prvSampleTimeNow+0x3c>)
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ab00:	68fb      	ldr	r3, [r7, #12]
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	3710      	adds	r7, #16
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}
 800ab0a:	bf00      	nop
 800ab0c:	20000e70 	.word	0x20000e70

0800ab10 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b086      	sub	sp, #24
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	60f8      	str	r0, [r7, #12]
 800ab18:	60b9      	str	r1, [r7, #8]
 800ab1a:	607a      	str	r2, [r7, #4]
 800ab1c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	68ba      	ldr	r2, [r7, #8]
 800ab26:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	68fa      	ldr	r2, [r7, #12]
 800ab2c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ab2e:	68ba      	ldr	r2, [r7, #8]
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	429a      	cmp	r2, r3
 800ab34:	d812      	bhi.n	800ab5c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab36:	687a      	ldr	r2, [r7, #4]
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	1ad2      	subs	r2, r2, r3
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	699b      	ldr	r3, [r3, #24]
 800ab40:	429a      	cmp	r2, r3
 800ab42:	d302      	bcc.n	800ab4a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ab44:	2301      	movs	r3, #1
 800ab46:	617b      	str	r3, [r7, #20]
 800ab48:	e01b      	b.n	800ab82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ab4a:	4b10      	ldr	r3, [pc, #64]	; (800ab8c <prvInsertTimerInActiveList+0x7c>)
 800ab4c:	681a      	ldr	r2, [r3, #0]
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	3304      	adds	r3, #4
 800ab52:	4619      	mov	r1, r3
 800ab54:	4610      	mov	r0, r2
 800ab56:	f7fe f8b4 	bl	8008cc2 <vListInsert>
 800ab5a:	e012      	b.n	800ab82 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ab5c:	687a      	ldr	r2, [r7, #4]
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d206      	bcs.n	800ab72 <prvInsertTimerInActiveList+0x62>
 800ab64:	68ba      	ldr	r2, [r7, #8]
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	429a      	cmp	r2, r3
 800ab6a:	d302      	bcc.n	800ab72 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	617b      	str	r3, [r7, #20]
 800ab70:	e007      	b.n	800ab82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ab72:	4b07      	ldr	r3, [pc, #28]	; (800ab90 <prvInsertTimerInActiveList+0x80>)
 800ab74:	681a      	ldr	r2, [r3, #0]
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	3304      	adds	r3, #4
 800ab7a:	4619      	mov	r1, r3
 800ab7c:	4610      	mov	r0, r2
 800ab7e:	f7fe f8a0 	bl	8008cc2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ab82:	697b      	ldr	r3, [r7, #20]
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	3718      	adds	r7, #24
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}
 800ab8c:	20000e64 	.word	0x20000e64
 800ab90:	20000e60 	.word	0x20000e60

0800ab94 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b08e      	sub	sp, #56	; 0x38
 800ab98:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ab9a:	e0ca      	b.n	800ad32 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	da18      	bge.n	800abd4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800aba2:	1d3b      	adds	r3, r7, #4
 800aba4:	3304      	adds	r3, #4
 800aba6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800aba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d10a      	bne.n	800abc4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800abae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb2:	f383 8811 	msr	BASEPRI, r3
 800abb6:	f3bf 8f6f 	isb	sy
 800abba:	f3bf 8f4f 	dsb	sy
 800abbe:	61fb      	str	r3, [r7, #28]
}
 800abc0:	bf00      	nop
 800abc2:	e7fe      	b.n	800abc2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800abc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abca:	6850      	ldr	r0, [r2, #4]
 800abcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abce:	6892      	ldr	r2, [r2, #8]
 800abd0:	4611      	mov	r1, r2
 800abd2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	f2c0 80aa 	blt.w	800ad30 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800abe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abe2:	695b      	ldr	r3, [r3, #20]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d004      	beq.n	800abf2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800abe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abea:	3304      	adds	r3, #4
 800abec:	4618      	mov	r0, r3
 800abee:	f7fe f8a1 	bl	8008d34 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800abf2:	463b      	mov	r3, r7
 800abf4:	4618      	mov	r0, r3
 800abf6:	f7ff ff6b 	bl	800aad0 <prvSampleTimeNow>
 800abfa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2b09      	cmp	r3, #9
 800ac00:	f200 8097 	bhi.w	800ad32 <prvProcessReceivedCommands+0x19e>
 800ac04:	a201      	add	r2, pc, #4	; (adr r2, 800ac0c <prvProcessReceivedCommands+0x78>)
 800ac06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac0a:	bf00      	nop
 800ac0c:	0800ac35 	.word	0x0800ac35
 800ac10:	0800ac35 	.word	0x0800ac35
 800ac14:	0800ac35 	.word	0x0800ac35
 800ac18:	0800aca9 	.word	0x0800aca9
 800ac1c:	0800acbd 	.word	0x0800acbd
 800ac20:	0800ad07 	.word	0x0800ad07
 800ac24:	0800ac35 	.word	0x0800ac35
 800ac28:	0800ac35 	.word	0x0800ac35
 800ac2c:	0800aca9 	.word	0x0800aca9
 800ac30:	0800acbd 	.word	0x0800acbd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ac34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac3a:	f043 0301 	orr.w	r3, r3, #1
 800ac3e:	b2da      	uxtb	r2, r3
 800ac40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ac46:	68ba      	ldr	r2, [r7, #8]
 800ac48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac4a:	699b      	ldr	r3, [r3, #24]
 800ac4c:	18d1      	adds	r1, r2, r3
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac54:	f7ff ff5c 	bl	800ab10 <prvInsertTimerInActiveList>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d069      	beq.n	800ad32 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ac5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac60:	6a1b      	ldr	r3, [r3, #32]
 800ac62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac64:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ac66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac6c:	f003 0304 	and.w	r3, r3, #4
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d05e      	beq.n	800ad32 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ac74:	68ba      	ldr	r2, [r7, #8]
 800ac76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac78:	699b      	ldr	r3, [r3, #24]
 800ac7a:	441a      	add	r2, r3
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	9300      	str	r3, [sp, #0]
 800ac80:	2300      	movs	r3, #0
 800ac82:	2100      	movs	r1, #0
 800ac84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac86:	f7ff fe05 	bl	800a894 <xTimerGenericCommand>
 800ac8a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ac8c:	6a3b      	ldr	r3, [r7, #32]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d14f      	bne.n	800ad32 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ac92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac96:	f383 8811 	msr	BASEPRI, r3
 800ac9a:	f3bf 8f6f 	isb	sy
 800ac9e:	f3bf 8f4f 	dsb	sy
 800aca2:	61bb      	str	r3, [r7, #24]
}
 800aca4:	bf00      	nop
 800aca6:	e7fe      	b.n	800aca6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acaa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800acae:	f023 0301 	bic.w	r3, r3, #1
 800acb2:	b2da      	uxtb	r2, r3
 800acb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800acba:	e03a      	b.n	800ad32 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800acbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800acc2:	f043 0301 	orr.w	r3, r3, #1
 800acc6:	b2da      	uxtb	r2, r3
 800acc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800acce:	68ba      	ldr	r2, [r7, #8]
 800acd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acd2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800acd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acd6:	699b      	ldr	r3, [r3, #24]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d10a      	bne.n	800acf2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800acdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace0:	f383 8811 	msr	BASEPRI, r3
 800ace4:	f3bf 8f6f 	isb	sy
 800ace8:	f3bf 8f4f 	dsb	sy
 800acec:	617b      	str	r3, [r7, #20]
}
 800acee:	bf00      	nop
 800acf0:	e7fe      	b.n	800acf0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800acf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf4:	699a      	ldr	r2, [r3, #24]
 800acf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf8:	18d1      	adds	r1, r2, r3
 800acfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad00:	f7ff ff06 	bl	800ab10 <prvInsertTimerInActiveList>
					break;
 800ad04:	e015      	b.n	800ad32 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ad06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad0c:	f003 0302 	and.w	r3, r3, #2
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d103      	bne.n	800ad1c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ad14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad16:	f000 fbfb 	bl	800b510 <vPortFree>
 800ad1a:	e00a      	b.n	800ad32 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ad1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad22:	f023 0301 	bic.w	r3, r3, #1
 800ad26:	b2da      	uxtb	r2, r3
 800ad28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ad2e:	e000      	b.n	800ad32 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ad30:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ad32:	4b08      	ldr	r3, [pc, #32]	; (800ad54 <prvProcessReceivedCommands+0x1c0>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	1d39      	adds	r1, r7, #4
 800ad38:	2200      	movs	r2, #0
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f7fe fafc 	bl	8009338 <xQueueReceive>
 800ad40:	4603      	mov	r3, r0
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	f47f af2a 	bne.w	800ab9c <prvProcessReceivedCommands+0x8>
	}
}
 800ad48:	bf00      	nop
 800ad4a:	bf00      	nop
 800ad4c:	3730      	adds	r7, #48	; 0x30
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}
 800ad52:	bf00      	nop
 800ad54:	20000e68 	.word	0x20000e68

0800ad58 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b088      	sub	sp, #32
 800ad5c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ad5e:	e048      	b.n	800adf2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ad60:	4b2d      	ldr	r3, [pc, #180]	; (800ae18 <prvSwitchTimerLists+0xc0>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	68db      	ldr	r3, [r3, #12]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad6a:	4b2b      	ldr	r3, [pc, #172]	; (800ae18 <prvSwitchTimerLists+0xc0>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	68db      	ldr	r3, [r3, #12]
 800ad70:	68db      	ldr	r3, [r3, #12]
 800ad72:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	3304      	adds	r3, #4
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f7fd ffdb 	bl	8008d34 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	6a1b      	ldr	r3, [r3, #32]
 800ad82:	68f8      	ldr	r0, [r7, #12]
 800ad84:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad8c:	f003 0304 	and.w	r3, r3, #4
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d02e      	beq.n	800adf2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	699b      	ldr	r3, [r3, #24]
 800ad98:	693a      	ldr	r2, [r7, #16]
 800ad9a:	4413      	add	r3, r2
 800ad9c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ad9e:	68ba      	ldr	r2, [r7, #8]
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	429a      	cmp	r2, r3
 800ada4:	d90e      	bls.n	800adc4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	68ba      	ldr	r2, [r7, #8]
 800adaa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	68fa      	ldr	r2, [r7, #12]
 800adb0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800adb2:	4b19      	ldr	r3, [pc, #100]	; (800ae18 <prvSwitchTimerLists+0xc0>)
 800adb4:	681a      	ldr	r2, [r3, #0]
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	3304      	adds	r3, #4
 800adba:	4619      	mov	r1, r3
 800adbc:	4610      	mov	r0, r2
 800adbe:	f7fd ff80 	bl	8008cc2 <vListInsert>
 800adc2:	e016      	b.n	800adf2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800adc4:	2300      	movs	r3, #0
 800adc6:	9300      	str	r3, [sp, #0]
 800adc8:	2300      	movs	r3, #0
 800adca:	693a      	ldr	r2, [r7, #16]
 800adcc:	2100      	movs	r1, #0
 800adce:	68f8      	ldr	r0, [r7, #12]
 800add0:	f7ff fd60 	bl	800a894 <xTimerGenericCommand>
 800add4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d10a      	bne.n	800adf2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800addc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade0:	f383 8811 	msr	BASEPRI, r3
 800ade4:	f3bf 8f6f 	isb	sy
 800ade8:	f3bf 8f4f 	dsb	sy
 800adec:	603b      	str	r3, [r7, #0]
}
 800adee:	bf00      	nop
 800adf0:	e7fe      	b.n	800adf0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800adf2:	4b09      	ldr	r3, [pc, #36]	; (800ae18 <prvSwitchTimerLists+0xc0>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d1b1      	bne.n	800ad60 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800adfc:	4b06      	ldr	r3, [pc, #24]	; (800ae18 <prvSwitchTimerLists+0xc0>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ae02:	4b06      	ldr	r3, [pc, #24]	; (800ae1c <prvSwitchTimerLists+0xc4>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	4a04      	ldr	r2, [pc, #16]	; (800ae18 <prvSwitchTimerLists+0xc0>)
 800ae08:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ae0a:	4a04      	ldr	r2, [pc, #16]	; (800ae1c <prvSwitchTimerLists+0xc4>)
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	6013      	str	r3, [r2, #0]
}
 800ae10:	bf00      	nop
 800ae12:	3718      	adds	r7, #24
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}
 800ae18:	20000e60 	.word	0x20000e60
 800ae1c:	20000e64 	.word	0x20000e64

0800ae20 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b082      	sub	sp, #8
 800ae24:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ae26:	f000 f985 	bl	800b134 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ae2a:	4b15      	ldr	r3, [pc, #84]	; (800ae80 <prvCheckForValidListAndQueue+0x60>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d120      	bne.n	800ae74 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ae32:	4814      	ldr	r0, [pc, #80]	; (800ae84 <prvCheckForValidListAndQueue+0x64>)
 800ae34:	f7fd fef4 	bl	8008c20 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ae38:	4813      	ldr	r0, [pc, #76]	; (800ae88 <prvCheckForValidListAndQueue+0x68>)
 800ae3a:	f7fd fef1 	bl	8008c20 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ae3e:	4b13      	ldr	r3, [pc, #76]	; (800ae8c <prvCheckForValidListAndQueue+0x6c>)
 800ae40:	4a10      	ldr	r2, [pc, #64]	; (800ae84 <prvCheckForValidListAndQueue+0x64>)
 800ae42:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ae44:	4b12      	ldr	r3, [pc, #72]	; (800ae90 <prvCheckForValidListAndQueue+0x70>)
 800ae46:	4a10      	ldr	r2, [pc, #64]	; (800ae88 <prvCheckForValidListAndQueue+0x68>)
 800ae48:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	9300      	str	r3, [sp, #0]
 800ae4e:	4b11      	ldr	r3, [pc, #68]	; (800ae94 <prvCheckForValidListAndQueue+0x74>)
 800ae50:	4a11      	ldr	r2, [pc, #68]	; (800ae98 <prvCheckForValidListAndQueue+0x78>)
 800ae52:	2110      	movs	r1, #16
 800ae54:	200a      	movs	r0, #10
 800ae56:	f7fd ffff 	bl	8008e58 <xQueueGenericCreateStatic>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	4a08      	ldr	r2, [pc, #32]	; (800ae80 <prvCheckForValidListAndQueue+0x60>)
 800ae5e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ae60:	4b07      	ldr	r3, [pc, #28]	; (800ae80 <prvCheckForValidListAndQueue+0x60>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d005      	beq.n	800ae74 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ae68:	4b05      	ldr	r3, [pc, #20]	; (800ae80 <prvCheckForValidListAndQueue+0x60>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	490b      	ldr	r1, [pc, #44]	; (800ae9c <prvCheckForValidListAndQueue+0x7c>)
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f7fe fcd2 	bl	8009818 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ae74:	f000 f98e 	bl	800b194 <vPortExitCritical>
}
 800ae78:	bf00      	nop
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}
 800ae7e:	bf00      	nop
 800ae80:	20000e68 	.word	0x20000e68
 800ae84:	20000e38 	.word	0x20000e38
 800ae88:	20000e4c 	.word	0x20000e4c
 800ae8c:	20000e60 	.word	0x20000e60
 800ae90:	20000e64 	.word	0x20000e64
 800ae94:	20000f14 	.word	0x20000f14
 800ae98:	20000e74 	.word	0x20000e74
 800ae9c:	0800c7a0 	.word	0x0800c7a0

0800aea0 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b086      	sub	sp, #24
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d10a      	bne.n	800aec8 <pvTimerGetTimerID+0x28>
	__asm volatile
 800aeb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb6:	f383 8811 	msr	BASEPRI, r3
 800aeba:	f3bf 8f6f 	isb	sy
 800aebe:	f3bf 8f4f 	dsb	sy
 800aec2:	60fb      	str	r3, [r7, #12]
}
 800aec4:	bf00      	nop
 800aec6:	e7fe      	b.n	800aec6 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800aec8:	f000 f934 	bl	800b134 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800aecc:	697b      	ldr	r3, [r7, #20]
 800aece:	69db      	ldr	r3, [r3, #28]
 800aed0:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800aed2:	f000 f95f 	bl	800b194 <vPortExitCritical>

	return pvReturn;
 800aed6:	693b      	ldr	r3, [r7, #16]
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	3718      	adds	r7, #24
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}

0800aee0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aee0:	b480      	push	{r7}
 800aee2:	b085      	sub	sp, #20
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	60f8      	str	r0, [r7, #12]
 800aee8:	60b9      	str	r1, [r7, #8]
 800aeea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	3b04      	subs	r3, #4
 800aef0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800aef8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	3b04      	subs	r3, #4
 800aefe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	f023 0201 	bic.w	r2, r3, #1
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	3b04      	subs	r3, #4
 800af0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800af10:	4a0c      	ldr	r2, [pc, #48]	; (800af44 <pxPortInitialiseStack+0x64>)
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	3b14      	subs	r3, #20
 800af1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800af1c:	687a      	ldr	r2, [r7, #4]
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	3b04      	subs	r3, #4
 800af26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	f06f 0202 	mvn.w	r2, #2
 800af2e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	3b20      	subs	r3, #32
 800af34:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800af36:	68fb      	ldr	r3, [r7, #12]
}
 800af38:	4618      	mov	r0, r3
 800af3a:	3714      	adds	r7, #20
 800af3c:	46bd      	mov	sp, r7
 800af3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af42:	4770      	bx	lr
 800af44:	0800af49 	.word	0x0800af49

0800af48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800af48:	b480      	push	{r7}
 800af4a:	b085      	sub	sp, #20
 800af4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800af4e:	2300      	movs	r3, #0
 800af50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800af52:	4b12      	ldr	r3, [pc, #72]	; (800af9c <prvTaskExitError+0x54>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af5a:	d00a      	beq.n	800af72 <prvTaskExitError+0x2a>
	__asm volatile
 800af5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af60:	f383 8811 	msr	BASEPRI, r3
 800af64:	f3bf 8f6f 	isb	sy
 800af68:	f3bf 8f4f 	dsb	sy
 800af6c:	60fb      	str	r3, [r7, #12]
}
 800af6e:	bf00      	nop
 800af70:	e7fe      	b.n	800af70 <prvTaskExitError+0x28>
	__asm volatile
 800af72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af76:	f383 8811 	msr	BASEPRI, r3
 800af7a:	f3bf 8f6f 	isb	sy
 800af7e:	f3bf 8f4f 	dsb	sy
 800af82:	60bb      	str	r3, [r7, #8]
}
 800af84:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800af86:	bf00      	nop
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d0fc      	beq.n	800af88 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800af8e:	bf00      	nop
 800af90:	bf00      	nop
 800af92:	3714      	adds	r7, #20
 800af94:	46bd      	mov	sp, r7
 800af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9a:	4770      	bx	lr
 800af9c:	2000002c 	.word	0x2000002c

0800afa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800afa0:	4b07      	ldr	r3, [pc, #28]	; (800afc0 <pxCurrentTCBConst2>)
 800afa2:	6819      	ldr	r1, [r3, #0]
 800afa4:	6808      	ldr	r0, [r1, #0]
 800afa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afaa:	f380 8809 	msr	PSP, r0
 800afae:	f3bf 8f6f 	isb	sy
 800afb2:	f04f 0000 	mov.w	r0, #0
 800afb6:	f380 8811 	msr	BASEPRI, r0
 800afba:	4770      	bx	lr
 800afbc:	f3af 8000 	nop.w

0800afc0 <pxCurrentTCBConst2>:
 800afc0:	20000938 	.word	0x20000938
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800afc4:	bf00      	nop
 800afc6:	bf00      	nop

0800afc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800afc8:	4808      	ldr	r0, [pc, #32]	; (800afec <prvPortStartFirstTask+0x24>)
 800afca:	6800      	ldr	r0, [r0, #0]
 800afcc:	6800      	ldr	r0, [r0, #0]
 800afce:	f380 8808 	msr	MSP, r0
 800afd2:	f04f 0000 	mov.w	r0, #0
 800afd6:	f380 8814 	msr	CONTROL, r0
 800afda:	b662      	cpsie	i
 800afdc:	b661      	cpsie	f
 800afde:	f3bf 8f4f 	dsb	sy
 800afe2:	f3bf 8f6f 	isb	sy
 800afe6:	df00      	svc	0
 800afe8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800afea:	bf00      	nop
 800afec:	e000ed08 	.word	0xe000ed08

0800aff0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b086      	sub	sp, #24
 800aff4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800aff6:	4b46      	ldr	r3, [pc, #280]	; (800b110 <xPortStartScheduler+0x120>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	4a46      	ldr	r2, [pc, #280]	; (800b114 <xPortStartScheduler+0x124>)
 800affc:	4293      	cmp	r3, r2
 800affe:	d10a      	bne.n	800b016 <xPortStartScheduler+0x26>
	__asm volatile
 800b000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b004:	f383 8811 	msr	BASEPRI, r3
 800b008:	f3bf 8f6f 	isb	sy
 800b00c:	f3bf 8f4f 	dsb	sy
 800b010:	613b      	str	r3, [r7, #16]
}
 800b012:	bf00      	nop
 800b014:	e7fe      	b.n	800b014 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b016:	4b3e      	ldr	r3, [pc, #248]	; (800b110 <xPortStartScheduler+0x120>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	4a3f      	ldr	r2, [pc, #252]	; (800b118 <xPortStartScheduler+0x128>)
 800b01c:	4293      	cmp	r3, r2
 800b01e:	d10a      	bne.n	800b036 <xPortStartScheduler+0x46>
	__asm volatile
 800b020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b024:	f383 8811 	msr	BASEPRI, r3
 800b028:	f3bf 8f6f 	isb	sy
 800b02c:	f3bf 8f4f 	dsb	sy
 800b030:	60fb      	str	r3, [r7, #12]
}
 800b032:	bf00      	nop
 800b034:	e7fe      	b.n	800b034 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b036:	4b39      	ldr	r3, [pc, #228]	; (800b11c <xPortStartScheduler+0x12c>)
 800b038:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b03a:	697b      	ldr	r3, [r7, #20]
 800b03c:	781b      	ldrb	r3, [r3, #0]
 800b03e:	b2db      	uxtb	r3, r3
 800b040:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	22ff      	movs	r2, #255	; 0xff
 800b046:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	781b      	ldrb	r3, [r3, #0]
 800b04c:	b2db      	uxtb	r3, r3
 800b04e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b050:	78fb      	ldrb	r3, [r7, #3]
 800b052:	b2db      	uxtb	r3, r3
 800b054:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b058:	b2da      	uxtb	r2, r3
 800b05a:	4b31      	ldr	r3, [pc, #196]	; (800b120 <xPortStartScheduler+0x130>)
 800b05c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b05e:	4b31      	ldr	r3, [pc, #196]	; (800b124 <xPortStartScheduler+0x134>)
 800b060:	2207      	movs	r2, #7
 800b062:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b064:	e009      	b.n	800b07a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b066:	4b2f      	ldr	r3, [pc, #188]	; (800b124 <xPortStartScheduler+0x134>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	3b01      	subs	r3, #1
 800b06c:	4a2d      	ldr	r2, [pc, #180]	; (800b124 <xPortStartScheduler+0x134>)
 800b06e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b070:	78fb      	ldrb	r3, [r7, #3]
 800b072:	b2db      	uxtb	r3, r3
 800b074:	005b      	lsls	r3, r3, #1
 800b076:	b2db      	uxtb	r3, r3
 800b078:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b07a:	78fb      	ldrb	r3, [r7, #3]
 800b07c:	b2db      	uxtb	r3, r3
 800b07e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b082:	2b80      	cmp	r3, #128	; 0x80
 800b084:	d0ef      	beq.n	800b066 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b086:	4b27      	ldr	r3, [pc, #156]	; (800b124 <xPortStartScheduler+0x134>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f1c3 0307 	rsb	r3, r3, #7
 800b08e:	2b04      	cmp	r3, #4
 800b090:	d00a      	beq.n	800b0a8 <xPortStartScheduler+0xb8>
	__asm volatile
 800b092:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b096:	f383 8811 	msr	BASEPRI, r3
 800b09a:	f3bf 8f6f 	isb	sy
 800b09e:	f3bf 8f4f 	dsb	sy
 800b0a2:	60bb      	str	r3, [r7, #8]
}
 800b0a4:	bf00      	nop
 800b0a6:	e7fe      	b.n	800b0a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b0a8:	4b1e      	ldr	r3, [pc, #120]	; (800b124 <xPortStartScheduler+0x134>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	021b      	lsls	r3, r3, #8
 800b0ae:	4a1d      	ldr	r2, [pc, #116]	; (800b124 <xPortStartScheduler+0x134>)
 800b0b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b0b2:	4b1c      	ldr	r3, [pc, #112]	; (800b124 <xPortStartScheduler+0x134>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b0ba:	4a1a      	ldr	r2, [pc, #104]	; (800b124 <xPortStartScheduler+0x134>)
 800b0bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	b2da      	uxtb	r2, r3
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b0c6:	4b18      	ldr	r3, [pc, #96]	; (800b128 <xPortStartScheduler+0x138>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	4a17      	ldr	r2, [pc, #92]	; (800b128 <xPortStartScheduler+0x138>)
 800b0cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b0d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b0d2:	4b15      	ldr	r3, [pc, #84]	; (800b128 <xPortStartScheduler+0x138>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	4a14      	ldr	r2, [pc, #80]	; (800b128 <xPortStartScheduler+0x138>)
 800b0d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b0dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b0de:	f000 f8dd 	bl	800b29c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b0e2:	4b12      	ldr	r3, [pc, #72]	; (800b12c <xPortStartScheduler+0x13c>)
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b0e8:	f000 f8fc 	bl	800b2e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b0ec:	4b10      	ldr	r3, [pc, #64]	; (800b130 <xPortStartScheduler+0x140>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	4a0f      	ldr	r2, [pc, #60]	; (800b130 <xPortStartScheduler+0x140>)
 800b0f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b0f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b0f8:	f7ff ff66 	bl	800afc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b0fc:	f7fe ff9c 	bl	800a038 <vTaskSwitchContext>
	prvTaskExitError();
 800b100:	f7ff ff22 	bl	800af48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b104:	2300      	movs	r3, #0
}
 800b106:	4618      	mov	r0, r3
 800b108:	3718      	adds	r7, #24
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}
 800b10e:	bf00      	nop
 800b110:	e000ed00 	.word	0xe000ed00
 800b114:	410fc271 	.word	0x410fc271
 800b118:	410fc270 	.word	0x410fc270
 800b11c:	e000e400 	.word	0xe000e400
 800b120:	20000f64 	.word	0x20000f64
 800b124:	20000f68 	.word	0x20000f68
 800b128:	e000ed20 	.word	0xe000ed20
 800b12c:	2000002c 	.word	0x2000002c
 800b130:	e000ef34 	.word	0xe000ef34

0800b134 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b134:	b480      	push	{r7}
 800b136:	b083      	sub	sp, #12
 800b138:	af00      	add	r7, sp, #0
	__asm volatile
 800b13a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b13e:	f383 8811 	msr	BASEPRI, r3
 800b142:	f3bf 8f6f 	isb	sy
 800b146:	f3bf 8f4f 	dsb	sy
 800b14a:	607b      	str	r3, [r7, #4]
}
 800b14c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b14e:	4b0f      	ldr	r3, [pc, #60]	; (800b18c <vPortEnterCritical+0x58>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	3301      	adds	r3, #1
 800b154:	4a0d      	ldr	r2, [pc, #52]	; (800b18c <vPortEnterCritical+0x58>)
 800b156:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b158:	4b0c      	ldr	r3, [pc, #48]	; (800b18c <vPortEnterCritical+0x58>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	2b01      	cmp	r3, #1
 800b15e:	d10f      	bne.n	800b180 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b160:	4b0b      	ldr	r3, [pc, #44]	; (800b190 <vPortEnterCritical+0x5c>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	b2db      	uxtb	r3, r3
 800b166:	2b00      	cmp	r3, #0
 800b168:	d00a      	beq.n	800b180 <vPortEnterCritical+0x4c>
	__asm volatile
 800b16a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b16e:	f383 8811 	msr	BASEPRI, r3
 800b172:	f3bf 8f6f 	isb	sy
 800b176:	f3bf 8f4f 	dsb	sy
 800b17a:	603b      	str	r3, [r7, #0]
}
 800b17c:	bf00      	nop
 800b17e:	e7fe      	b.n	800b17e <vPortEnterCritical+0x4a>
	}
}
 800b180:	bf00      	nop
 800b182:	370c      	adds	r7, #12
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr
 800b18c:	2000002c 	.word	0x2000002c
 800b190:	e000ed04 	.word	0xe000ed04

0800b194 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b194:	b480      	push	{r7}
 800b196:	b083      	sub	sp, #12
 800b198:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b19a:	4b12      	ldr	r3, [pc, #72]	; (800b1e4 <vPortExitCritical+0x50>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d10a      	bne.n	800b1b8 <vPortExitCritical+0x24>
	__asm volatile
 800b1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a6:	f383 8811 	msr	BASEPRI, r3
 800b1aa:	f3bf 8f6f 	isb	sy
 800b1ae:	f3bf 8f4f 	dsb	sy
 800b1b2:	607b      	str	r3, [r7, #4]
}
 800b1b4:	bf00      	nop
 800b1b6:	e7fe      	b.n	800b1b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b1b8:	4b0a      	ldr	r3, [pc, #40]	; (800b1e4 <vPortExitCritical+0x50>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	3b01      	subs	r3, #1
 800b1be:	4a09      	ldr	r2, [pc, #36]	; (800b1e4 <vPortExitCritical+0x50>)
 800b1c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b1c2:	4b08      	ldr	r3, [pc, #32]	; (800b1e4 <vPortExitCritical+0x50>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d105      	bne.n	800b1d6 <vPortExitCritical+0x42>
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	f383 8811 	msr	BASEPRI, r3
}
 800b1d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b1d6:	bf00      	nop
 800b1d8:	370c      	adds	r7, #12
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e0:	4770      	bx	lr
 800b1e2:	bf00      	nop
 800b1e4:	2000002c 	.word	0x2000002c
	...

0800b1f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b1f0:	f3ef 8009 	mrs	r0, PSP
 800b1f4:	f3bf 8f6f 	isb	sy
 800b1f8:	4b15      	ldr	r3, [pc, #84]	; (800b250 <pxCurrentTCBConst>)
 800b1fa:	681a      	ldr	r2, [r3, #0]
 800b1fc:	f01e 0f10 	tst.w	lr, #16
 800b200:	bf08      	it	eq
 800b202:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b206:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b20a:	6010      	str	r0, [r2, #0]
 800b20c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b210:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b214:	f380 8811 	msr	BASEPRI, r0
 800b218:	f3bf 8f4f 	dsb	sy
 800b21c:	f3bf 8f6f 	isb	sy
 800b220:	f7fe ff0a 	bl	800a038 <vTaskSwitchContext>
 800b224:	f04f 0000 	mov.w	r0, #0
 800b228:	f380 8811 	msr	BASEPRI, r0
 800b22c:	bc09      	pop	{r0, r3}
 800b22e:	6819      	ldr	r1, [r3, #0]
 800b230:	6808      	ldr	r0, [r1, #0]
 800b232:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b236:	f01e 0f10 	tst.w	lr, #16
 800b23a:	bf08      	it	eq
 800b23c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b240:	f380 8809 	msr	PSP, r0
 800b244:	f3bf 8f6f 	isb	sy
 800b248:	4770      	bx	lr
 800b24a:	bf00      	nop
 800b24c:	f3af 8000 	nop.w

0800b250 <pxCurrentTCBConst>:
 800b250:	20000938 	.word	0x20000938
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b254:	bf00      	nop
 800b256:	bf00      	nop

0800b258 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b082      	sub	sp, #8
 800b25c:	af00      	add	r7, sp, #0
	__asm volatile
 800b25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b262:	f383 8811 	msr	BASEPRI, r3
 800b266:	f3bf 8f6f 	isb	sy
 800b26a:	f3bf 8f4f 	dsb	sy
 800b26e:	607b      	str	r3, [r7, #4]
}
 800b270:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b272:	f7fe fe27 	bl	8009ec4 <xTaskIncrementTick>
 800b276:	4603      	mov	r3, r0
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d003      	beq.n	800b284 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b27c:	4b06      	ldr	r3, [pc, #24]	; (800b298 <xPortSysTickHandler+0x40>)
 800b27e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b282:	601a      	str	r2, [r3, #0]
 800b284:	2300      	movs	r3, #0
 800b286:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	f383 8811 	msr	BASEPRI, r3
}
 800b28e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b290:	bf00      	nop
 800b292:	3708      	adds	r7, #8
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}
 800b298:	e000ed04 	.word	0xe000ed04

0800b29c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b29c:	b480      	push	{r7}
 800b29e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b2a0:	4b0b      	ldr	r3, [pc, #44]	; (800b2d0 <vPortSetupTimerInterrupt+0x34>)
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b2a6:	4b0b      	ldr	r3, [pc, #44]	; (800b2d4 <vPortSetupTimerInterrupt+0x38>)
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b2ac:	4b0a      	ldr	r3, [pc, #40]	; (800b2d8 <vPortSetupTimerInterrupt+0x3c>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	4a0a      	ldr	r2, [pc, #40]	; (800b2dc <vPortSetupTimerInterrupt+0x40>)
 800b2b2:	fba2 2303 	umull	r2, r3, r2, r3
 800b2b6:	099b      	lsrs	r3, r3, #6
 800b2b8:	4a09      	ldr	r2, [pc, #36]	; (800b2e0 <vPortSetupTimerInterrupt+0x44>)
 800b2ba:	3b01      	subs	r3, #1
 800b2bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b2be:	4b04      	ldr	r3, [pc, #16]	; (800b2d0 <vPortSetupTimerInterrupt+0x34>)
 800b2c0:	2207      	movs	r2, #7
 800b2c2:	601a      	str	r2, [r3, #0]
}
 800b2c4:	bf00      	nop
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2cc:	4770      	bx	lr
 800b2ce:	bf00      	nop
 800b2d0:	e000e010 	.word	0xe000e010
 800b2d4:	e000e018 	.word	0xe000e018
 800b2d8:	20000000 	.word	0x20000000
 800b2dc:	10624dd3 	.word	0x10624dd3
 800b2e0:	e000e014 	.word	0xe000e014

0800b2e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b2e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b2f4 <vPortEnableVFP+0x10>
 800b2e8:	6801      	ldr	r1, [r0, #0]
 800b2ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b2ee:	6001      	str	r1, [r0, #0]
 800b2f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b2f2:	bf00      	nop
 800b2f4:	e000ed88 	.word	0xe000ed88

0800b2f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b085      	sub	sp, #20
 800b2fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b2fe:	f3ef 8305 	mrs	r3, IPSR
 800b302:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	2b0f      	cmp	r3, #15
 800b308:	d914      	bls.n	800b334 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b30a:	4a17      	ldr	r2, [pc, #92]	; (800b368 <vPortValidateInterruptPriority+0x70>)
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	4413      	add	r3, r2
 800b310:	781b      	ldrb	r3, [r3, #0]
 800b312:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b314:	4b15      	ldr	r3, [pc, #84]	; (800b36c <vPortValidateInterruptPriority+0x74>)
 800b316:	781b      	ldrb	r3, [r3, #0]
 800b318:	7afa      	ldrb	r2, [r7, #11]
 800b31a:	429a      	cmp	r2, r3
 800b31c:	d20a      	bcs.n	800b334 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b322:	f383 8811 	msr	BASEPRI, r3
 800b326:	f3bf 8f6f 	isb	sy
 800b32a:	f3bf 8f4f 	dsb	sy
 800b32e:	607b      	str	r3, [r7, #4]
}
 800b330:	bf00      	nop
 800b332:	e7fe      	b.n	800b332 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b334:	4b0e      	ldr	r3, [pc, #56]	; (800b370 <vPortValidateInterruptPriority+0x78>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b33c:	4b0d      	ldr	r3, [pc, #52]	; (800b374 <vPortValidateInterruptPriority+0x7c>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	429a      	cmp	r2, r3
 800b342:	d90a      	bls.n	800b35a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b344:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b348:	f383 8811 	msr	BASEPRI, r3
 800b34c:	f3bf 8f6f 	isb	sy
 800b350:	f3bf 8f4f 	dsb	sy
 800b354:	603b      	str	r3, [r7, #0]
}
 800b356:	bf00      	nop
 800b358:	e7fe      	b.n	800b358 <vPortValidateInterruptPriority+0x60>
	}
 800b35a:	bf00      	nop
 800b35c:	3714      	adds	r7, #20
 800b35e:	46bd      	mov	sp, r7
 800b360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b364:	4770      	bx	lr
 800b366:	bf00      	nop
 800b368:	e000e3f0 	.word	0xe000e3f0
 800b36c:	20000f64 	.word	0x20000f64
 800b370:	e000ed0c 	.word	0xe000ed0c
 800b374:	20000f68 	.word	0x20000f68

0800b378 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b08a      	sub	sp, #40	; 0x28
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b380:	2300      	movs	r3, #0
 800b382:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b384:	f7fe fce2 	bl	8009d4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b388:	4b5b      	ldr	r3, [pc, #364]	; (800b4f8 <pvPortMalloc+0x180>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d101      	bne.n	800b394 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b390:	f000 f920 	bl	800b5d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b394:	4b59      	ldr	r3, [pc, #356]	; (800b4fc <pvPortMalloc+0x184>)
 800b396:	681a      	ldr	r2, [r3, #0]
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	4013      	ands	r3, r2
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	f040 8093 	bne.w	800b4c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d01d      	beq.n	800b3e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b3a8:	2208      	movs	r2, #8
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	4413      	add	r3, r2
 800b3ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f003 0307 	and.w	r3, r3, #7
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d014      	beq.n	800b3e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	f023 0307 	bic.w	r3, r3, #7
 800b3c0:	3308      	adds	r3, #8
 800b3c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f003 0307 	and.w	r3, r3, #7
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d00a      	beq.n	800b3e4 <pvPortMalloc+0x6c>
	__asm volatile
 800b3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d2:	f383 8811 	msr	BASEPRI, r3
 800b3d6:	f3bf 8f6f 	isb	sy
 800b3da:	f3bf 8f4f 	dsb	sy
 800b3de:	617b      	str	r3, [r7, #20]
}
 800b3e0:	bf00      	nop
 800b3e2:	e7fe      	b.n	800b3e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d06e      	beq.n	800b4c8 <pvPortMalloc+0x150>
 800b3ea:	4b45      	ldr	r3, [pc, #276]	; (800b500 <pvPortMalloc+0x188>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	687a      	ldr	r2, [r7, #4]
 800b3f0:	429a      	cmp	r2, r3
 800b3f2:	d869      	bhi.n	800b4c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b3f4:	4b43      	ldr	r3, [pc, #268]	; (800b504 <pvPortMalloc+0x18c>)
 800b3f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b3f8:	4b42      	ldr	r3, [pc, #264]	; (800b504 <pvPortMalloc+0x18c>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b3fe:	e004      	b.n	800b40a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b402:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	687a      	ldr	r2, [r7, #4]
 800b410:	429a      	cmp	r2, r3
 800b412:	d903      	bls.n	800b41c <pvPortMalloc+0xa4>
 800b414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d1f1      	bne.n	800b400 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b41c:	4b36      	ldr	r3, [pc, #216]	; (800b4f8 <pvPortMalloc+0x180>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b422:	429a      	cmp	r2, r3
 800b424:	d050      	beq.n	800b4c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b426:	6a3b      	ldr	r3, [r7, #32]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	2208      	movs	r2, #8
 800b42c:	4413      	add	r3, r2
 800b42e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b432:	681a      	ldr	r2, [r3, #0]
 800b434:	6a3b      	ldr	r3, [r7, #32]
 800b436:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b43a:	685a      	ldr	r2, [r3, #4]
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	1ad2      	subs	r2, r2, r3
 800b440:	2308      	movs	r3, #8
 800b442:	005b      	lsls	r3, r3, #1
 800b444:	429a      	cmp	r2, r3
 800b446:	d91f      	bls.n	800b488 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	4413      	add	r3, r2
 800b44e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b450:	69bb      	ldr	r3, [r7, #24]
 800b452:	f003 0307 	and.w	r3, r3, #7
 800b456:	2b00      	cmp	r3, #0
 800b458:	d00a      	beq.n	800b470 <pvPortMalloc+0xf8>
	__asm volatile
 800b45a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b45e:	f383 8811 	msr	BASEPRI, r3
 800b462:	f3bf 8f6f 	isb	sy
 800b466:	f3bf 8f4f 	dsb	sy
 800b46a:	613b      	str	r3, [r7, #16]
}
 800b46c:	bf00      	nop
 800b46e:	e7fe      	b.n	800b46e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b472:	685a      	ldr	r2, [r3, #4]
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	1ad2      	subs	r2, r2, r3
 800b478:	69bb      	ldr	r3, [r7, #24]
 800b47a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b47e:	687a      	ldr	r2, [r7, #4]
 800b480:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b482:	69b8      	ldr	r0, [r7, #24]
 800b484:	f000 f908 	bl	800b698 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b488:	4b1d      	ldr	r3, [pc, #116]	; (800b500 <pvPortMalloc+0x188>)
 800b48a:	681a      	ldr	r2, [r3, #0]
 800b48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b48e:	685b      	ldr	r3, [r3, #4]
 800b490:	1ad3      	subs	r3, r2, r3
 800b492:	4a1b      	ldr	r2, [pc, #108]	; (800b500 <pvPortMalloc+0x188>)
 800b494:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b496:	4b1a      	ldr	r3, [pc, #104]	; (800b500 <pvPortMalloc+0x188>)
 800b498:	681a      	ldr	r2, [r3, #0]
 800b49a:	4b1b      	ldr	r3, [pc, #108]	; (800b508 <pvPortMalloc+0x190>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	429a      	cmp	r2, r3
 800b4a0:	d203      	bcs.n	800b4aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b4a2:	4b17      	ldr	r3, [pc, #92]	; (800b500 <pvPortMalloc+0x188>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	4a18      	ldr	r2, [pc, #96]	; (800b508 <pvPortMalloc+0x190>)
 800b4a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ac:	685a      	ldr	r2, [r3, #4]
 800b4ae:	4b13      	ldr	r3, [pc, #76]	; (800b4fc <pvPortMalloc+0x184>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	431a      	orrs	r2, r3
 800b4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b4be:	4b13      	ldr	r3, [pc, #76]	; (800b50c <pvPortMalloc+0x194>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	3301      	adds	r3, #1
 800b4c4:	4a11      	ldr	r2, [pc, #68]	; (800b50c <pvPortMalloc+0x194>)
 800b4c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b4c8:	f7fe fc4e 	bl	8009d68 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b4cc:	69fb      	ldr	r3, [r7, #28]
 800b4ce:	f003 0307 	and.w	r3, r3, #7
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d00a      	beq.n	800b4ec <pvPortMalloc+0x174>
	__asm volatile
 800b4d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4da:	f383 8811 	msr	BASEPRI, r3
 800b4de:	f3bf 8f6f 	isb	sy
 800b4e2:	f3bf 8f4f 	dsb	sy
 800b4e6:	60fb      	str	r3, [r7, #12]
}
 800b4e8:	bf00      	nop
 800b4ea:	e7fe      	b.n	800b4ea <pvPortMalloc+0x172>
	return pvReturn;
 800b4ec:	69fb      	ldr	r3, [r7, #28]
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3728      	adds	r7, #40	; 0x28
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}
 800b4f6:	bf00      	nop
 800b4f8:	20004b74 	.word	0x20004b74
 800b4fc:	20004b88 	.word	0x20004b88
 800b500:	20004b78 	.word	0x20004b78
 800b504:	20004b6c 	.word	0x20004b6c
 800b508:	20004b7c 	.word	0x20004b7c
 800b50c:	20004b80 	.word	0x20004b80

0800b510 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b086      	sub	sp, #24
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d04d      	beq.n	800b5be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b522:	2308      	movs	r3, #8
 800b524:	425b      	negs	r3, r3
 800b526:	697a      	ldr	r2, [r7, #20]
 800b528:	4413      	add	r3, r2
 800b52a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b52c:	697b      	ldr	r3, [r7, #20]
 800b52e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b530:	693b      	ldr	r3, [r7, #16]
 800b532:	685a      	ldr	r2, [r3, #4]
 800b534:	4b24      	ldr	r3, [pc, #144]	; (800b5c8 <vPortFree+0xb8>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	4013      	ands	r3, r2
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d10a      	bne.n	800b554 <vPortFree+0x44>
	__asm volatile
 800b53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b542:	f383 8811 	msr	BASEPRI, r3
 800b546:	f3bf 8f6f 	isb	sy
 800b54a:	f3bf 8f4f 	dsb	sy
 800b54e:	60fb      	str	r3, [r7, #12]
}
 800b550:	bf00      	nop
 800b552:	e7fe      	b.n	800b552 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b554:	693b      	ldr	r3, [r7, #16]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d00a      	beq.n	800b572 <vPortFree+0x62>
	__asm volatile
 800b55c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b560:	f383 8811 	msr	BASEPRI, r3
 800b564:	f3bf 8f6f 	isb	sy
 800b568:	f3bf 8f4f 	dsb	sy
 800b56c:	60bb      	str	r3, [r7, #8]
}
 800b56e:	bf00      	nop
 800b570:	e7fe      	b.n	800b570 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	685a      	ldr	r2, [r3, #4]
 800b576:	4b14      	ldr	r3, [pc, #80]	; (800b5c8 <vPortFree+0xb8>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	4013      	ands	r3, r2
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d01e      	beq.n	800b5be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d11a      	bne.n	800b5be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b588:	693b      	ldr	r3, [r7, #16]
 800b58a:	685a      	ldr	r2, [r3, #4]
 800b58c:	4b0e      	ldr	r3, [pc, #56]	; (800b5c8 <vPortFree+0xb8>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	43db      	mvns	r3, r3
 800b592:	401a      	ands	r2, r3
 800b594:	693b      	ldr	r3, [r7, #16]
 800b596:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b598:	f7fe fbd8 	bl	8009d4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b59c:	693b      	ldr	r3, [r7, #16]
 800b59e:	685a      	ldr	r2, [r3, #4]
 800b5a0:	4b0a      	ldr	r3, [pc, #40]	; (800b5cc <vPortFree+0xbc>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	4413      	add	r3, r2
 800b5a6:	4a09      	ldr	r2, [pc, #36]	; (800b5cc <vPortFree+0xbc>)
 800b5a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b5aa:	6938      	ldr	r0, [r7, #16]
 800b5ac:	f000 f874 	bl	800b698 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b5b0:	4b07      	ldr	r3, [pc, #28]	; (800b5d0 <vPortFree+0xc0>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	3301      	adds	r3, #1
 800b5b6:	4a06      	ldr	r2, [pc, #24]	; (800b5d0 <vPortFree+0xc0>)
 800b5b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b5ba:	f7fe fbd5 	bl	8009d68 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b5be:	bf00      	nop
 800b5c0:	3718      	adds	r7, #24
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}
 800b5c6:	bf00      	nop
 800b5c8:	20004b88 	.word	0x20004b88
 800b5cc:	20004b78 	.word	0x20004b78
 800b5d0:	20004b84 	.word	0x20004b84

0800b5d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b085      	sub	sp, #20
 800b5d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b5da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b5de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b5e0:	4b27      	ldr	r3, [pc, #156]	; (800b680 <prvHeapInit+0xac>)
 800b5e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	f003 0307 	and.w	r3, r3, #7
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d00c      	beq.n	800b608 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	3307      	adds	r3, #7
 800b5f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	f023 0307 	bic.w	r3, r3, #7
 800b5fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b5fc:	68ba      	ldr	r2, [r7, #8]
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	1ad3      	subs	r3, r2, r3
 800b602:	4a1f      	ldr	r2, [pc, #124]	; (800b680 <prvHeapInit+0xac>)
 800b604:	4413      	add	r3, r2
 800b606:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b60c:	4a1d      	ldr	r2, [pc, #116]	; (800b684 <prvHeapInit+0xb0>)
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b612:	4b1c      	ldr	r3, [pc, #112]	; (800b684 <prvHeapInit+0xb0>)
 800b614:	2200      	movs	r2, #0
 800b616:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	68ba      	ldr	r2, [r7, #8]
 800b61c:	4413      	add	r3, r2
 800b61e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b620:	2208      	movs	r2, #8
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	1a9b      	subs	r3, r3, r2
 800b626:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	f023 0307 	bic.w	r3, r3, #7
 800b62e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	4a15      	ldr	r2, [pc, #84]	; (800b688 <prvHeapInit+0xb4>)
 800b634:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b636:	4b14      	ldr	r3, [pc, #80]	; (800b688 <prvHeapInit+0xb4>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	2200      	movs	r2, #0
 800b63c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b63e:	4b12      	ldr	r3, [pc, #72]	; (800b688 <prvHeapInit+0xb4>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	2200      	movs	r2, #0
 800b644:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	68fa      	ldr	r2, [r7, #12]
 800b64e:	1ad2      	subs	r2, r2, r3
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b654:	4b0c      	ldr	r3, [pc, #48]	; (800b688 <prvHeapInit+0xb4>)
 800b656:	681a      	ldr	r2, [r3, #0]
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	685b      	ldr	r3, [r3, #4]
 800b660:	4a0a      	ldr	r2, [pc, #40]	; (800b68c <prvHeapInit+0xb8>)
 800b662:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	685b      	ldr	r3, [r3, #4]
 800b668:	4a09      	ldr	r2, [pc, #36]	; (800b690 <prvHeapInit+0xbc>)
 800b66a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b66c:	4b09      	ldr	r3, [pc, #36]	; (800b694 <prvHeapInit+0xc0>)
 800b66e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b672:	601a      	str	r2, [r3, #0]
}
 800b674:	bf00      	nop
 800b676:	3714      	adds	r7, #20
 800b678:	46bd      	mov	sp, r7
 800b67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67e:	4770      	bx	lr
 800b680:	20000f6c 	.word	0x20000f6c
 800b684:	20004b6c 	.word	0x20004b6c
 800b688:	20004b74 	.word	0x20004b74
 800b68c:	20004b7c 	.word	0x20004b7c
 800b690:	20004b78 	.word	0x20004b78
 800b694:	20004b88 	.word	0x20004b88

0800b698 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b698:	b480      	push	{r7}
 800b69a:	b085      	sub	sp, #20
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b6a0:	4b28      	ldr	r3, [pc, #160]	; (800b744 <prvInsertBlockIntoFreeList+0xac>)
 800b6a2:	60fb      	str	r3, [r7, #12]
 800b6a4:	e002      	b.n	800b6ac <prvInsertBlockIntoFreeList+0x14>
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	60fb      	str	r3, [r7, #12]
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	687a      	ldr	r2, [r7, #4]
 800b6b2:	429a      	cmp	r2, r3
 800b6b4:	d8f7      	bhi.n	800b6a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	685b      	ldr	r3, [r3, #4]
 800b6be:	68ba      	ldr	r2, [r7, #8]
 800b6c0:	4413      	add	r3, r2
 800b6c2:	687a      	ldr	r2, [r7, #4]
 800b6c4:	429a      	cmp	r2, r3
 800b6c6:	d108      	bne.n	800b6da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	685a      	ldr	r2, [r3, #4]
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	685b      	ldr	r3, [r3, #4]
 800b6d0:	441a      	add	r2, r3
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	685b      	ldr	r3, [r3, #4]
 800b6e2:	68ba      	ldr	r2, [r7, #8]
 800b6e4:	441a      	add	r2, r3
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	429a      	cmp	r2, r3
 800b6ec:	d118      	bne.n	800b720 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	681a      	ldr	r2, [r3, #0]
 800b6f2:	4b15      	ldr	r3, [pc, #84]	; (800b748 <prvInsertBlockIntoFreeList+0xb0>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	429a      	cmp	r2, r3
 800b6f8:	d00d      	beq.n	800b716 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	685a      	ldr	r2, [r3, #4]
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	685b      	ldr	r3, [r3, #4]
 800b704:	441a      	add	r2, r3
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	681a      	ldr	r2, [r3, #0]
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	601a      	str	r2, [r3, #0]
 800b714:	e008      	b.n	800b728 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b716:	4b0c      	ldr	r3, [pc, #48]	; (800b748 <prvInsertBlockIntoFreeList+0xb0>)
 800b718:	681a      	ldr	r2, [r3, #0]
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	601a      	str	r2, [r3, #0]
 800b71e:	e003      	b.n	800b728 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	681a      	ldr	r2, [r3, #0]
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b728:	68fa      	ldr	r2, [r7, #12]
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	429a      	cmp	r2, r3
 800b72e:	d002      	beq.n	800b736 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	687a      	ldr	r2, [r7, #4]
 800b734:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b736:	bf00      	nop
 800b738:	3714      	adds	r7, #20
 800b73a:	46bd      	mov	sp, r7
 800b73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b740:	4770      	bx	lr
 800b742:	bf00      	nop
 800b744:	20004b6c 	.word	0x20004b6c
 800b748:	20004b74 	.word	0x20004b74

0800b74c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b750:	2201      	movs	r2, #1
 800b752:	490e      	ldr	r1, [pc, #56]	; (800b78c <MX_USB_HOST_Init+0x40>)
 800b754:	480e      	ldr	r0, [pc, #56]	; (800b790 <MX_USB_HOST_Init+0x44>)
 800b756:	f7fb f893 	bl	8006880 <USBH_Init>
 800b75a:	4603      	mov	r3, r0
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d001      	beq.n	800b764 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b760:	f7f5 fda8 	bl	80012b4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b764:	490b      	ldr	r1, [pc, #44]	; (800b794 <MX_USB_HOST_Init+0x48>)
 800b766:	480a      	ldr	r0, [pc, #40]	; (800b790 <MX_USB_HOST_Init+0x44>)
 800b768:	f7fb f93a 	bl	80069e0 <USBH_RegisterClass>
 800b76c:	4603      	mov	r3, r0
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d001      	beq.n	800b776 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b772:	f7f5 fd9f 	bl	80012b4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b776:	4806      	ldr	r0, [pc, #24]	; (800b790 <MX_USB_HOST_Init+0x44>)
 800b778:	f7fb f9be 	bl	8006af8 <USBH_Start>
 800b77c:	4603      	mov	r3, r0
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d001      	beq.n	800b786 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b782:	f7f5 fd97 	bl	80012b4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b786:	bf00      	nop
 800b788:	bd80      	pop	{r7, pc}
 800b78a:	bf00      	nop
 800b78c:	0800b799 	.word	0x0800b799
 800b790:	20004b8c 	.word	0x20004b8c
 800b794:	2000000c 	.word	0x2000000c

0800b798 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b798:	b480      	push	{r7}
 800b79a:	b083      	sub	sp, #12
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
 800b7a0:	460b      	mov	r3, r1
 800b7a2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b7a4:	78fb      	ldrb	r3, [r7, #3]
 800b7a6:	3b01      	subs	r3, #1
 800b7a8:	2b04      	cmp	r3, #4
 800b7aa:	d819      	bhi.n	800b7e0 <USBH_UserProcess+0x48>
 800b7ac:	a201      	add	r2, pc, #4	; (adr r2, 800b7b4 <USBH_UserProcess+0x1c>)
 800b7ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7b2:	bf00      	nop
 800b7b4:	0800b7e1 	.word	0x0800b7e1
 800b7b8:	0800b7d1 	.word	0x0800b7d1
 800b7bc:	0800b7e1 	.word	0x0800b7e1
 800b7c0:	0800b7d9 	.word	0x0800b7d9
 800b7c4:	0800b7c9 	.word	0x0800b7c9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b7c8:	4b09      	ldr	r3, [pc, #36]	; (800b7f0 <USBH_UserProcess+0x58>)
 800b7ca:	2203      	movs	r2, #3
 800b7cc:	701a      	strb	r2, [r3, #0]
  break;
 800b7ce:	e008      	b.n	800b7e2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b7d0:	4b07      	ldr	r3, [pc, #28]	; (800b7f0 <USBH_UserProcess+0x58>)
 800b7d2:	2202      	movs	r2, #2
 800b7d4:	701a      	strb	r2, [r3, #0]
  break;
 800b7d6:	e004      	b.n	800b7e2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b7d8:	4b05      	ldr	r3, [pc, #20]	; (800b7f0 <USBH_UserProcess+0x58>)
 800b7da:	2201      	movs	r2, #1
 800b7dc:	701a      	strb	r2, [r3, #0]
  break;
 800b7de:	e000      	b.n	800b7e2 <USBH_UserProcess+0x4a>

  default:
  break;
 800b7e0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b7e2:	bf00      	nop
 800b7e4:	370c      	adds	r7, #12
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ec:	4770      	bx	lr
 800b7ee:	bf00      	nop
 800b7f0:	20004f70 	.word	0x20004f70

0800b7f4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b08a      	sub	sp, #40	; 0x28
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b7fc:	f107 0314 	add.w	r3, r7, #20
 800b800:	2200      	movs	r2, #0
 800b802:	601a      	str	r2, [r3, #0]
 800b804:	605a      	str	r2, [r3, #4]
 800b806:	609a      	str	r2, [r3, #8]
 800b808:	60da      	str	r2, [r3, #12]
 800b80a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b814:	d147      	bne.n	800b8a6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b816:	2300      	movs	r3, #0
 800b818:	613b      	str	r3, [r7, #16]
 800b81a:	4b25      	ldr	r3, [pc, #148]	; (800b8b0 <HAL_HCD_MspInit+0xbc>)
 800b81c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b81e:	4a24      	ldr	r2, [pc, #144]	; (800b8b0 <HAL_HCD_MspInit+0xbc>)
 800b820:	f043 0301 	orr.w	r3, r3, #1
 800b824:	6313      	str	r3, [r2, #48]	; 0x30
 800b826:	4b22      	ldr	r3, [pc, #136]	; (800b8b0 <HAL_HCD_MspInit+0xbc>)
 800b828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b82a:	f003 0301 	and.w	r3, r3, #1
 800b82e:	613b      	str	r3, [r7, #16]
 800b830:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b832:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b838:	2300      	movs	r3, #0
 800b83a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b83c:	2300      	movs	r3, #0
 800b83e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b840:	f107 0314 	add.w	r3, r7, #20
 800b844:	4619      	mov	r1, r3
 800b846:	481b      	ldr	r0, [pc, #108]	; (800b8b4 <HAL_HCD_MspInit+0xc0>)
 800b848:	f7f6 f8e0 	bl	8001a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b84c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800b850:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b852:	2302      	movs	r3, #2
 800b854:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b856:	2300      	movs	r3, #0
 800b858:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b85a:	2300      	movs	r3, #0
 800b85c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b85e:	230a      	movs	r3, #10
 800b860:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b862:	f107 0314 	add.w	r3, r7, #20
 800b866:	4619      	mov	r1, r3
 800b868:	4812      	ldr	r0, [pc, #72]	; (800b8b4 <HAL_HCD_MspInit+0xc0>)
 800b86a:	f7f6 f8cf 	bl	8001a0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b86e:	4b10      	ldr	r3, [pc, #64]	; (800b8b0 <HAL_HCD_MspInit+0xbc>)
 800b870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b872:	4a0f      	ldr	r2, [pc, #60]	; (800b8b0 <HAL_HCD_MspInit+0xbc>)
 800b874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b878:	6353      	str	r3, [r2, #52]	; 0x34
 800b87a:	2300      	movs	r3, #0
 800b87c:	60fb      	str	r3, [r7, #12]
 800b87e:	4b0c      	ldr	r3, [pc, #48]	; (800b8b0 <HAL_HCD_MspInit+0xbc>)
 800b880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b882:	4a0b      	ldr	r2, [pc, #44]	; (800b8b0 <HAL_HCD_MspInit+0xbc>)
 800b884:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b888:	6453      	str	r3, [r2, #68]	; 0x44
 800b88a:	4b09      	ldr	r3, [pc, #36]	; (800b8b0 <HAL_HCD_MspInit+0xbc>)
 800b88c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b88e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b892:	60fb      	str	r3, [r7, #12]
 800b894:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800b896:	2200      	movs	r2, #0
 800b898:	2105      	movs	r1, #5
 800b89a:	2043      	movs	r0, #67	; 0x43
 800b89c:	f7f6 f87f 	bl	800199e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b8a0:	2043      	movs	r0, #67	; 0x43
 800b8a2:	f7f6 f898 	bl	80019d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b8a6:	bf00      	nop
 800b8a8:	3728      	adds	r7, #40	; 0x28
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}
 800b8ae:	bf00      	nop
 800b8b0:	40023800 	.word	0x40023800
 800b8b4:	40020000 	.word	0x40020000

0800b8b8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b082      	sub	sp, #8
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f7fb fdcd 	bl	8007466 <USBH_LL_IncTimer>
}
 800b8cc:	bf00      	nop
 800b8ce:	3708      	adds	r7, #8
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}

0800b8d4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b082      	sub	sp, #8
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f7fb fe11 	bl	800750a <USBH_LL_Connect>
}
 800b8e8:	bf00      	nop
 800b8ea:	3708      	adds	r7, #8
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}

0800b8f0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b082      	sub	sp, #8
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b8fe:	4618      	mov	r0, r3
 800b900:	f7fb fe26 	bl	8007550 <USBH_LL_Disconnect>
}
 800b904:	bf00      	nop
 800b906:	3708      	adds	r7, #8
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd80      	pop	{r7, pc}

0800b90c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b082      	sub	sp, #8
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
 800b914:	460b      	mov	r3, r1
 800b916:	70fb      	strb	r3, [r7, #3]
 800b918:	4613      	mov	r3, r2
 800b91a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b922:	4618      	mov	r0, r3
 800b924:	f7fb fe5d 	bl	80075e2 <USBH_LL_NotifyURBChange>
#endif
}
 800b928:	bf00      	nop
 800b92a:	3708      	adds	r7, #8
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}

0800b930 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b082      	sub	sp, #8
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b93e:	4618      	mov	r0, r3
 800b940:	f7fb fdbb 	bl	80074ba <USBH_LL_PortEnabled>
}
 800b944:	bf00      	nop
 800b946:	3708      	adds	r7, #8
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}

0800b94c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b082      	sub	sp, #8
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b95a:	4618      	mov	r0, r3
 800b95c:	f7fb fdc7 	bl	80074ee <USBH_LL_PortDisabled>
}
 800b960:	bf00      	nop
 800b962:	3708      	adds	r7, #8
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}

0800b968 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b082      	sub	sp, #8
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b976:	2b01      	cmp	r3, #1
 800b978:	d12a      	bne.n	800b9d0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b97a:	4a18      	ldr	r2, [pc, #96]	; (800b9dc <USBH_LL_Init+0x74>)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	4a15      	ldr	r2, [pc, #84]	; (800b9dc <USBH_LL_Init+0x74>)
 800b986:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b98a:	4b14      	ldr	r3, [pc, #80]	; (800b9dc <USBH_LL_Init+0x74>)
 800b98c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b990:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b992:	4b12      	ldr	r3, [pc, #72]	; (800b9dc <USBH_LL_Init+0x74>)
 800b994:	2208      	movs	r2, #8
 800b996:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b998:	4b10      	ldr	r3, [pc, #64]	; (800b9dc <USBH_LL_Init+0x74>)
 800b99a:	2201      	movs	r2, #1
 800b99c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b99e:	4b0f      	ldr	r3, [pc, #60]	; (800b9dc <USBH_LL_Init+0x74>)
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b9a4:	4b0d      	ldr	r3, [pc, #52]	; (800b9dc <USBH_LL_Init+0x74>)
 800b9a6:	2202      	movs	r2, #2
 800b9a8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b9aa:	4b0c      	ldr	r3, [pc, #48]	; (800b9dc <USBH_LL_Init+0x74>)
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b9b0:	480a      	ldr	r0, [pc, #40]	; (800b9dc <USBH_LL_Init+0x74>)
 800b9b2:	f7f6 fa12 	bl	8001dda <HAL_HCD_Init>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d001      	beq.n	800b9c0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b9bc:	f7f5 fc7a 	bl	80012b4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b9c0:	4806      	ldr	r0, [pc, #24]	; (800b9dc <USBH_LL_Init+0x74>)
 800b9c2:	f7f6 fdf6 	bl	80025b2 <HAL_HCD_GetCurrentFrame>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	4619      	mov	r1, r3
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f7fb fd3c 	bl	8007448 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b9d0:	2300      	movs	r3, #0
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3708      	adds	r7, #8
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}
 800b9da:	bf00      	nop
 800b9dc:	20004f74 	.word	0x20004f74

0800b9e0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b084      	sub	sp, #16
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f7f6 fd65 	bl	80024c6 <HAL_HCD_Start>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ba00:	7bfb      	ldrb	r3, [r7, #15]
 800ba02:	4618      	mov	r0, r3
 800ba04:	f000 f95c 	bl	800bcc0 <USBH_Get_USB_Status>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba0c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba0e:	4618      	mov	r0, r3
 800ba10:	3710      	adds	r7, #16
 800ba12:	46bd      	mov	sp, r7
 800ba14:	bd80      	pop	{r7, pc}

0800ba16 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ba16:	b580      	push	{r7, lr}
 800ba18:	b084      	sub	sp, #16
 800ba1a:	af00      	add	r7, sp, #0
 800ba1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ba22:	2300      	movs	r3, #0
 800ba24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	f7f6 fd6d 	bl	800250c <HAL_HCD_Stop>
 800ba32:	4603      	mov	r3, r0
 800ba34:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ba36:	7bfb      	ldrb	r3, [r7, #15]
 800ba38:	4618      	mov	r0, r3
 800ba3a:	f000 f941 	bl	800bcc0 <USBH_Get_USB_Status>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba42:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba44:	4618      	mov	r0, r3
 800ba46:	3710      	adds	r7, #16
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}

0800ba4c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b084      	sub	sp, #16
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ba54:	2301      	movs	r3, #1
 800ba56:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f7f6 fdb5 	bl	80025ce <HAL_HCD_GetCurrentSpeed>
 800ba64:	4603      	mov	r3, r0
 800ba66:	2b02      	cmp	r3, #2
 800ba68:	d00c      	beq.n	800ba84 <USBH_LL_GetSpeed+0x38>
 800ba6a:	2b02      	cmp	r3, #2
 800ba6c:	d80d      	bhi.n	800ba8a <USBH_LL_GetSpeed+0x3e>
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d002      	beq.n	800ba78 <USBH_LL_GetSpeed+0x2c>
 800ba72:	2b01      	cmp	r3, #1
 800ba74:	d003      	beq.n	800ba7e <USBH_LL_GetSpeed+0x32>
 800ba76:	e008      	b.n	800ba8a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	73fb      	strb	r3, [r7, #15]
    break;
 800ba7c:	e008      	b.n	800ba90 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ba7e:	2301      	movs	r3, #1
 800ba80:	73fb      	strb	r3, [r7, #15]
    break;
 800ba82:	e005      	b.n	800ba90 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ba84:	2302      	movs	r3, #2
 800ba86:	73fb      	strb	r3, [r7, #15]
    break;
 800ba88:	e002      	b.n	800ba90 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	73fb      	strb	r3, [r7, #15]
    break;
 800ba8e:	bf00      	nop
  }
  return  speed;
 800ba90:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3710      	adds	r7, #16
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}

0800ba9a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ba9a:	b580      	push	{r7, lr}
 800ba9c:	b084      	sub	sp, #16
 800ba9e:	af00      	add	r7, sp, #0
 800baa0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800baa2:	2300      	movs	r3, #0
 800baa4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800baa6:	2300      	movs	r3, #0
 800baa8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bab0:	4618      	mov	r0, r3
 800bab2:	f7f6 fd48 	bl	8002546 <HAL_HCD_ResetPort>
 800bab6:	4603      	mov	r3, r0
 800bab8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800baba:	7bfb      	ldrb	r3, [r7, #15]
 800babc:	4618      	mov	r0, r3
 800babe:	f000 f8ff 	bl	800bcc0 <USBH_Get_USB_Status>
 800bac2:	4603      	mov	r3, r0
 800bac4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bac6:	7bbb      	ldrb	r3, [r7, #14]
}
 800bac8:	4618      	mov	r0, r3
 800baca:	3710      	adds	r7, #16
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}

0800bad0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b082      	sub	sp, #8
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
 800bad8:	460b      	mov	r3, r1
 800bada:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bae2:	78fa      	ldrb	r2, [r7, #3]
 800bae4:	4611      	mov	r1, r2
 800bae6:	4618      	mov	r0, r3
 800bae8:	f7f6 fd4f 	bl	800258a <HAL_HCD_HC_GetXferCount>
 800baec:	4603      	mov	r3, r0
}
 800baee:	4618      	mov	r0, r3
 800baf0:	3708      	adds	r7, #8
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd80      	pop	{r7, pc}

0800baf6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800baf6:	b590      	push	{r4, r7, lr}
 800baf8:	b089      	sub	sp, #36	; 0x24
 800bafa:	af04      	add	r7, sp, #16
 800bafc:	6078      	str	r0, [r7, #4]
 800bafe:	4608      	mov	r0, r1
 800bb00:	4611      	mov	r1, r2
 800bb02:	461a      	mov	r2, r3
 800bb04:	4603      	mov	r3, r0
 800bb06:	70fb      	strb	r3, [r7, #3]
 800bb08:	460b      	mov	r3, r1
 800bb0a:	70bb      	strb	r3, [r7, #2]
 800bb0c:	4613      	mov	r3, r2
 800bb0e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb10:	2300      	movs	r3, #0
 800bb12:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bb14:	2300      	movs	r3, #0
 800bb16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800bb1e:	787c      	ldrb	r4, [r7, #1]
 800bb20:	78ba      	ldrb	r2, [r7, #2]
 800bb22:	78f9      	ldrb	r1, [r7, #3]
 800bb24:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bb26:	9302      	str	r3, [sp, #8]
 800bb28:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bb2c:	9301      	str	r3, [sp, #4]
 800bb2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bb32:	9300      	str	r3, [sp, #0]
 800bb34:	4623      	mov	r3, r4
 800bb36:	f7f6 f9b2 	bl	8001e9e <HAL_HCD_HC_Init>
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800bb3e:	7bfb      	ldrb	r3, [r7, #15]
 800bb40:	4618      	mov	r0, r3
 800bb42:	f000 f8bd 	bl	800bcc0 <USBH_Get_USB_Status>
 800bb46:	4603      	mov	r3, r0
 800bb48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb4a:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	3714      	adds	r7, #20
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bd90      	pop	{r4, r7, pc}

0800bb54 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b084      	sub	sp, #16
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
 800bb5c:	460b      	mov	r3, r1
 800bb5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb60:	2300      	movs	r3, #0
 800bb62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bb64:	2300      	movs	r3, #0
 800bb66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bb6e:	78fa      	ldrb	r2, [r7, #3]
 800bb70:	4611      	mov	r1, r2
 800bb72:	4618      	mov	r0, r3
 800bb74:	f7f6 fa22 	bl	8001fbc <HAL_HCD_HC_Halt>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bb7c:	7bfb      	ldrb	r3, [r7, #15]
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f000 f89e 	bl	800bcc0 <USBH_Get_USB_Status>
 800bb84:	4603      	mov	r3, r0
 800bb86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb88:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	3710      	adds	r7, #16
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}

0800bb92 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800bb92:	b590      	push	{r4, r7, lr}
 800bb94:	b089      	sub	sp, #36	; 0x24
 800bb96:	af04      	add	r7, sp, #16
 800bb98:	6078      	str	r0, [r7, #4]
 800bb9a:	4608      	mov	r0, r1
 800bb9c:	4611      	mov	r1, r2
 800bb9e:	461a      	mov	r2, r3
 800bba0:	4603      	mov	r3, r0
 800bba2:	70fb      	strb	r3, [r7, #3]
 800bba4:	460b      	mov	r3, r1
 800bba6:	70bb      	strb	r3, [r7, #2]
 800bba8:	4613      	mov	r3, r2
 800bbaa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbac:	2300      	movs	r3, #0
 800bbae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800bbba:	787c      	ldrb	r4, [r7, #1]
 800bbbc:	78ba      	ldrb	r2, [r7, #2]
 800bbbe:	78f9      	ldrb	r1, [r7, #3]
 800bbc0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800bbc4:	9303      	str	r3, [sp, #12]
 800bbc6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bbc8:	9302      	str	r3, [sp, #8]
 800bbca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbcc:	9301      	str	r3, [sp, #4]
 800bbce:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bbd2:	9300      	str	r3, [sp, #0]
 800bbd4:	4623      	mov	r3, r4
 800bbd6:	f7f6 fa15 	bl	8002004 <HAL_HCD_HC_SubmitRequest>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800bbde:	7bfb      	ldrb	r3, [r7, #15]
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f000 f86d 	bl	800bcc0 <USBH_Get_USB_Status>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbea:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	3714      	adds	r7, #20
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd90      	pop	{r4, r7, pc}

0800bbf4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b082      	sub	sp, #8
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	460b      	mov	r3, r1
 800bbfe:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bc06:	78fa      	ldrb	r2, [r7, #3]
 800bc08:	4611      	mov	r1, r2
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f7f6 fca9 	bl	8002562 <HAL_HCD_HC_GetURBState>
 800bc10:	4603      	mov	r3, r0
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	3708      	adds	r7, #8
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}

0800bc1a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800bc1a:	b580      	push	{r7, lr}
 800bc1c:	b082      	sub	sp, #8
 800bc1e:	af00      	add	r7, sp, #0
 800bc20:	6078      	str	r0, [r7, #4]
 800bc22:	460b      	mov	r3, r1
 800bc24:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800bc2c:	2b01      	cmp	r3, #1
 800bc2e:	d103      	bne.n	800bc38 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800bc30:	78fb      	ldrb	r3, [r7, #3]
 800bc32:	4618      	mov	r0, r3
 800bc34:	f000 f870 	bl	800bd18 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800bc38:	20c8      	movs	r0, #200	; 0xc8
 800bc3a:	f7f5 fdb1 	bl	80017a0 <HAL_Delay>
  return USBH_OK;
 800bc3e:	2300      	movs	r3, #0
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	3708      	adds	r7, #8
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}

0800bc48 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b085      	sub	sp, #20
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
 800bc50:	460b      	mov	r3, r1
 800bc52:	70fb      	strb	r3, [r7, #3]
 800bc54:	4613      	mov	r3, r2
 800bc56:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bc5e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800bc60:	78fb      	ldrb	r3, [r7, #3]
 800bc62:	68fa      	ldr	r2, [r7, #12]
 800bc64:	212c      	movs	r1, #44	; 0x2c
 800bc66:	fb01 f303 	mul.w	r3, r1, r3
 800bc6a:	4413      	add	r3, r2
 800bc6c:	333b      	adds	r3, #59	; 0x3b
 800bc6e:	781b      	ldrb	r3, [r3, #0]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d009      	beq.n	800bc88 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800bc74:	78fb      	ldrb	r3, [r7, #3]
 800bc76:	68fa      	ldr	r2, [r7, #12]
 800bc78:	212c      	movs	r1, #44	; 0x2c
 800bc7a:	fb01 f303 	mul.w	r3, r1, r3
 800bc7e:	4413      	add	r3, r2
 800bc80:	3354      	adds	r3, #84	; 0x54
 800bc82:	78ba      	ldrb	r2, [r7, #2]
 800bc84:	701a      	strb	r2, [r3, #0]
 800bc86:	e008      	b.n	800bc9a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800bc88:	78fb      	ldrb	r3, [r7, #3]
 800bc8a:	68fa      	ldr	r2, [r7, #12]
 800bc8c:	212c      	movs	r1, #44	; 0x2c
 800bc8e:	fb01 f303 	mul.w	r3, r1, r3
 800bc92:	4413      	add	r3, r2
 800bc94:	3355      	adds	r3, #85	; 0x55
 800bc96:	78ba      	ldrb	r2, [r7, #2]
 800bc98:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800bc9a:	2300      	movs	r3, #0
}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	3714      	adds	r7, #20
 800bca0:	46bd      	mov	sp, r7
 800bca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca6:	4770      	bx	lr

0800bca8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b082      	sub	sp, #8
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800bcb0:	6878      	ldr	r0, [r7, #4]
 800bcb2:	f7f5 fd75 	bl	80017a0 <HAL_Delay>
}
 800bcb6:	bf00      	nop
 800bcb8:	3708      	adds	r7, #8
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}
	...

0800bcc0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	b085      	sub	sp, #20
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bcca:	2300      	movs	r3, #0
 800bccc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bcce:	79fb      	ldrb	r3, [r7, #7]
 800bcd0:	2b03      	cmp	r3, #3
 800bcd2:	d817      	bhi.n	800bd04 <USBH_Get_USB_Status+0x44>
 800bcd4:	a201      	add	r2, pc, #4	; (adr r2, 800bcdc <USBH_Get_USB_Status+0x1c>)
 800bcd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcda:	bf00      	nop
 800bcdc:	0800bced 	.word	0x0800bced
 800bce0:	0800bcf3 	.word	0x0800bcf3
 800bce4:	0800bcf9 	.word	0x0800bcf9
 800bce8:	0800bcff 	.word	0x0800bcff
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800bcec:	2300      	movs	r3, #0
 800bcee:	73fb      	strb	r3, [r7, #15]
    break;
 800bcf0:	e00b      	b.n	800bd0a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800bcf2:	2302      	movs	r3, #2
 800bcf4:	73fb      	strb	r3, [r7, #15]
    break;
 800bcf6:	e008      	b.n	800bd0a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	73fb      	strb	r3, [r7, #15]
    break;
 800bcfc:	e005      	b.n	800bd0a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800bcfe:	2302      	movs	r3, #2
 800bd00:	73fb      	strb	r3, [r7, #15]
    break;
 800bd02:	e002      	b.n	800bd0a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800bd04:	2302      	movs	r3, #2
 800bd06:	73fb      	strb	r3, [r7, #15]
    break;
 800bd08:	bf00      	nop
  }
  return usb_status;
 800bd0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	3714      	adds	r7, #20
 800bd10:	46bd      	mov	sp, r7
 800bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd16:	4770      	bx	lr

0800bd18 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b084      	sub	sp, #16
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	4603      	mov	r3, r0
 800bd20:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800bd22:	79fb      	ldrb	r3, [r7, #7]
 800bd24:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800bd26:	79fb      	ldrb	r3, [r7, #7]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d102      	bne.n	800bd32 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	73fb      	strb	r3, [r7, #15]
 800bd30:	e001      	b.n	800bd36 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800bd32:	2301      	movs	r3, #1
 800bd34:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800bd36:	7bfb      	ldrb	r3, [r7, #15]
 800bd38:	461a      	mov	r2, r3
 800bd3a:	2101      	movs	r1, #1
 800bd3c:	4803      	ldr	r0, [pc, #12]	; (800bd4c <MX_DriverVbusFS+0x34>)
 800bd3e:	f7f6 f819 	bl	8001d74 <HAL_GPIO_WritePin>
}
 800bd42:	bf00      	nop
 800bd44:	3710      	adds	r7, #16
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}
 800bd4a:	bf00      	nop
 800bd4c:	40020800 	.word	0x40020800

0800bd50 <__errno>:
 800bd50:	4b01      	ldr	r3, [pc, #4]	; (800bd58 <__errno+0x8>)
 800bd52:	6818      	ldr	r0, [r3, #0]
 800bd54:	4770      	bx	lr
 800bd56:	bf00      	nop
 800bd58:	20000030 	.word	0x20000030

0800bd5c <__libc_init_array>:
 800bd5c:	b570      	push	{r4, r5, r6, lr}
 800bd5e:	4d0d      	ldr	r5, [pc, #52]	; (800bd94 <__libc_init_array+0x38>)
 800bd60:	4c0d      	ldr	r4, [pc, #52]	; (800bd98 <__libc_init_array+0x3c>)
 800bd62:	1b64      	subs	r4, r4, r5
 800bd64:	10a4      	asrs	r4, r4, #2
 800bd66:	2600      	movs	r6, #0
 800bd68:	42a6      	cmp	r6, r4
 800bd6a:	d109      	bne.n	800bd80 <__libc_init_array+0x24>
 800bd6c:	4d0b      	ldr	r5, [pc, #44]	; (800bd9c <__libc_init_array+0x40>)
 800bd6e:	4c0c      	ldr	r4, [pc, #48]	; (800bda0 <__libc_init_array+0x44>)
 800bd70:	f000 fc9e 	bl	800c6b0 <_init>
 800bd74:	1b64      	subs	r4, r4, r5
 800bd76:	10a4      	asrs	r4, r4, #2
 800bd78:	2600      	movs	r6, #0
 800bd7a:	42a6      	cmp	r6, r4
 800bd7c:	d105      	bne.n	800bd8a <__libc_init_array+0x2e>
 800bd7e:	bd70      	pop	{r4, r5, r6, pc}
 800bd80:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd84:	4798      	blx	r3
 800bd86:	3601      	adds	r6, #1
 800bd88:	e7ee      	b.n	800bd68 <__libc_init_array+0xc>
 800bd8a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd8e:	4798      	blx	r3
 800bd90:	3601      	adds	r6, #1
 800bd92:	e7f2      	b.n	800bd7a <__libc_init_array+0x1e>
 800bd94:	0800e920 	.word	0x0800e920
 800bd98:	0800e920 	.word	0x0800e920
 800bd9c:	0800e920 	.word	0x0800e920
 800bda0:	0800e924 	.word	0x0800e924

0800bda4 <malloc>:
 800bda4:	4b02      	ldr	r3, [pc, #8]	; (800bdb0 <malloc+0xc>)
 800bda6:	4601      	mov	r1, r0
 800bda8:	6818      	ldr	r0, [r3, #0]
 800bdaa:	f000 b88d 	b.w	800bec8 <_malloc_r>
 800bdae:	bf00      	nop
 800bdb0:	20000030 	.word	0x20000030

0800bdb4 <free>:
 800bdb4:	4b02      	ldr	r3, [pc, #8]	; (800bdc0 <free+0xc>)
 800bdb6:	4601      	mov	r1, r0
 800bdb8:	6818      	ldr	r0, [r3, #0]
 800bdba:	f000 b819 	b.w	800bdf0 <_free_r>
 800bdbe:	bf00      	nop
 800bdc0:	20000030 	.word	0x20000030

0800bdc4 <memcpy>:
 800bdc4:	440a      	add	r2, r1
 800bdc6:	4291      	cmp	r1, r2
 800bdc8:	f100 33ff 	add.w	r3, r0, #4294967295
 800bdcc:	d100      	bne.n	800bdd0 <memcpy+0xc>
 800bdce:	4770      	bx	lr
 800bdd0:	b510      	push	{r4, lr}
 800bdd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bdd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bdda:	4291      	cmp	r1, r2
 800bddc:	d1f9      	bne.n	800bdd2 <memcpy+0xe>
 800bdde:	bd10      	pop	{r4, pc}

0800bde0 <memset>:
 800bde0:	4402      	add	r2, r0
 800bde2:	4603      	mov	r3, r0
 800bde4:	4293      	cmp	r3, r2
 800bde6:	d100      	bne.n	800bdea <memset+0xa>
 800bde8:	4770      	bx	lr
 800bdea:	f803 1b01 	strb.w	r1, [r3], #1
 800bdee:	e7f9      	b.n	800bde4 <memset+0x4>

0800bdf0 <_free_r>:
 800bdf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bdf2:	2900      	cmp	r1, #0
 800bdf4:	d044      	beq.n	800be80 <_free_r+0x90>
 800bdf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bdfa:	9001      	str	r0, [sp, #4]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	f1a1 0404 	sub.w	r4, r1, #4
 800be02:	bfb8      	it	lt
 800be04:	18e4      	addlt	r4, r4, r3
 800be06:	f000 f903 	bl	800c010 <__malloc_lock>
 800be0a:	4a1e      	ldr	r2, [pc, #120]	; (800be84 <_free_r+0x94>)
 800be0c:	9801      	ldr	r0, [sp, #4]
 800be0e:	6813      	ldr	r3, [r2, #0]
 800be10:	b933      	cbnz	r3, 800be20 <_free_r+0x30>
 800be12:	6063      	str	r3, [r4, #4]
 800be14:	6014      	str	r4, [r2, #0]
 800be16:	b003      	add	sp, #12
 800be18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800be1c:	f000 b8fe 	b.w	800c01c <__malloc_unlock>
 800be20:	42a3      	cmp	r3, r4
 800be22:	d908      	bls.n	800be36 <_free_r+0x46>
 800be24:	6825      	ldr	r5, [r4, #0]
 800be26:	1961      	adds	r1, r4, r5
 800be28:	428b      	cmp	r3, r1
 800be2a:	bf01      	itttt	eq
 800be2c:	6819      	ldreq	r1, [r3, #0]
 800be2e:	685b      	ldreq	r3, [r3, #4]
 800be30:	1949      	addeq	r1, r1, r5
 800be32:	6021      	streq	r1, [r4, #0]
 800be34:	e7ed      	b.n	800be12 <_free_r+0x22>
 800be36:	461a      	mov	r2, r3
 800be38:	685b      	ldr	r3, [r3, #4]
 800be3a:	b10b      	cbz	r3, 800be40 <_free_r+0x50>
 800be3c:	42a3      	cmp	r3, r4
 800be3e:	d9fa      	bls.n	800be36 <_free_r+0x46>
 800be40:	6811      	ldr	r1, [r2, #0]
 800be42:	1855      	adds	r5, r2, r1
 800be44:	42a5      	cmp	r5, r4
 800be46:	d10b      	bne.n	800be60 <_free_r+0x70>
 800be48:	6824      	ldr	r4, [r4, #0]
 800be4a:	4421      	add	r1, r4
 800be4c:	1854      	adds	r4, r2, r1
 800be4e:	42a3      	cmp	r3, r4
 800be50:	6011      	str	r1, [r2, #0]
 800be52:	d1e0      	bne.n	800be16 <_free_r+0x26>
 800be54:	681c      	ldr	r4, [r3, #0]
 800be56:	685b      	ldr	r3, [r3, #4]
 800be58:	6053      	str	r3, [r2, #4]
 800be5a:	4421      	add	r1, r4
 800be5c:	6011      	str	r1, [r2, #0]
 800be5e:	e7da      	b.n	800be16 <_free_r+0x26>
 800be60:	d902      	bls.n	800be68 <_free_r+0x78>
 800be62:	230c      	movs	r3, #12
 800be64:	6003      	str	r3, [r0, #0]
 800be66:	e7d6      	b.n	800be16 <_free_r+0x26>
 800be68:	6825      	ldr	r5, [r4, #0]
 800be6a:	1961      	adds	r1, r4, r5
 800be6c:	428b      	cmp	r3, r1
 800be6e:	bf04      	itt	eq
 800be70:	6819      	ldreq	r1, [r3, #0]
 800be72:	685b      	ldreq	r3, [r3, #4]
 800be74:	6063      	str	r3, [r4, #4]
 800be76:	bf04      	itt	eq
 800be78:	1949      	addeq	r1, r1, r5
 800be7a:	6021      	streq	r1, [r4, #0]
 800be7c:	6054      	str	r4, [r2, #4]
 800be7e:	e7ca      	b.n	800be16 <_free_r+0x26>
 800be80:	b003      	add	sp, #12
 800be82:	bd30      	pop	{r4, r5, pc}
 800be84:	20005278 	.word	0x20005278

0800be88 <sbrk_aligned>:
 800be88:	b570      	push	{r4, r5, r6, lr}
 800be8a:	4e0e      	ldr	r6, [pc, #56]	; (800bec4 <sbrk_aligned+0x3c>)
 800be8c:	460c      	mov	r4, r1
 800be8e:	6831      	ldr	r1, [r6, #0]
 800be90:	4605      	mov	r5, r0
 800be92:	b911      	cbnz	r1, 800be9a <sbrk_aligned+0x12>
 800be94:	f000 f88c 	bl	800bfb0 <_sbrk_r>
 800be98:	6030      	str	r0, [r6, #0]
 800be9a:	4621      	mov	r1, r4
 800be9c:	4628      	mov	r0, r5
 800be9e:	f000 f887 	bl	800bfb0 <_sbrk_r>
 800bea2:	1c43      	adds	r3, r0, #1
 800bea4:	d00a      	beq.n	800bebc <sbrk_aligned+0x34>
 800bea6:	1cc4      	adds	r4, r0, #3
 800bea8:	f024 0403 	bic.w	r4, r4, #3
 800beac:	42a0      	cmp	r0, r4
 800beae:	d007      	beq.n	800bec0 <sbrk_aligned+0x38>
 800beb0:	1a21      	subs	r1, r4, r0
 800beb2:	4628      	mov	r0, r5
 800beb4:	f000 f87c 	bl	800bfb0 <_sbrk_r>
 800beb8:	3001      	adds	r0, #1
 800beba:	d101      	bne.n	800bec0 <sbrk_aligned+0x38>
 800bebc:	f04f 34ff 	mov.w	r4, #4294967295
 800bec0:	4620      	mov	r0, r4
 800bec2:	bd70      	pop	{r4, r5, r6, pc}
 800bec4:	2000527c 	.word	0x2000527c

0800bec8 <_malloc_r>:
 800bec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800becc:	1ccd      	adds	r5, r1, #3
 800bece:	f025 0503 	bic.w	r5, r5, #3
 800bed2:	3508      	adds	r5, #8
 800bed4:	2d0c      	cmp	r5, #12
 800bed6:	bf38      	it	cc
 800bed8:	250c      	movcc	r5, #12
 800beda:	2d00      	cmp	r5, #0
 800bedc:	4607      	mov	r7, r0
 800bede:	db01      	blt.n	800bee4 <_malloc_r+0x1c>
 800bee0:	42a9      	cmp	r1, r5
 800bee2:	d905      	bls.n	800bef0 <_malloc_r+0x28>
 800bee4:	230c      	movs	r3, #12
 800bee6:	603b      	str	r3, [r7, #0]
 800bee8:	2600      	movs	r6, #0
 800beea:	4630      	mov	r0, r6
 800beec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bef0:	4e2e      	ldr	r6, [pc, #184]	; (800bfac <_malloc_r+0xe4>)
 800bef2:	f000 f88d 	bl	800c010 <__malloc_lock>
 800bef6:	6833      	ldr	r3, [r6, #0]
 800bef8:	461c      	mov	r4, r3
 800befa:	bb34      	cbnz	r4, 800bf4a <_malloc_r+0x82>
 800befc:	4629      	mov	r1, r5
 800befe:	4638      	mov	r0, r7
 800bf00:	f7ff ffc2 	bl	800be88 <sbrk_aligned>
 800bf04:	1c43      	adds	r3, r0, #1
 800bf06:	4604      	mov	r4, r0
 800bf08:	d14d      	bne.n	800bfa6 <_malloc_r+0xde>
 800bf0a:	6834      	ldr	r4, [r6, #0]
 800bf0c:	4626      	mov	r6, r4
 800bf0e:	2e00      	cmp	r6, #0
 800bf10:	d140      	bne.n	800bf94 <_malloc_r+0xcc>
 800bf12:	6823      	ldr	r3, [r4, #0]
 800bf14:	4631      	mov	r1, r6
 800bf16:	4638      	mov	r0, r7
 800bf18:	eb04 0803 	add.w	r8, r4, r3
 800bf1c:	f000 f848 	bl	800bfb0 <_sbrk_r>
 800bf20:	4580      	cmp	r8, r0
 800bf22:	d13a      	bne.n	800bf9a <_malloc_r+0xd2>
 800bf24:	6821      	ldr	r1, [r4, #0]
 800bf26:	3503      	adds	r5, #3
 800bf28:	1a6d      	subs	r5, r5, r1
 800bf2a:	f025 0503 	bic.w	r5, r5, #3
 800bf2e:	3508      	adds	r5, #8
 800bf30:	2d0c      	cmp	r5, #12
 800bf32:	bf38      	it	cc
 800bf34:	250c      	movcc	r5, #12
 800bf36:	4629      	mov	r1, r5
 800bf38:	4638      	mov	r0, r7
 800bf3a:	f7ff ffa5 	bl	800be88 <sbrk_aligned>
 800bf3e:	3001      	adds	r0, #1
 800bf40:	d02b      	beq.n	800bf9a <_malloc_r+0xd2>
 800bf42:	6823      	ldr	r3, [r4, #0]
 800bf44:	442b      	add	r3, r5
 800bf46:	6023      	str	r3, [r4, #0]
 800bf48:	e00e      	b.n	800bf68 <_malloc_r+0xa0>
 800bf4a:	6822      	ldr	r2, [r4, #0]
 800bf4c:	1b52      	subs	r2, r2, r5
 800bf4e:	d41e      	bmi.n	800bf8e <_malloc_r+0xc6>
 800bf50:	2a0b      	cmp	r2, #11
 800bf52:	d916      	bls.n	800bf82 <_malloc_r+0xba>
 800bf54:	1961      	adds	r1, r4, r5
 800bf56:	42a3      	cmp	r3, r4
 800bf58:	6025      	str	r5, [r4, #0]
 800bf5a:	bf18      	it	ne
 800bf5c:	6059      	strne	r1, [r3, #4]
 800bf5e:	6863      	ldr	r3, [r4, #4]
 800bf60:	bf08      	it	eq
 800bf62:	6031      	streq	r1, [r6, #0]
 800bf64:	5162      	str	r2, [r4, r5]
 800bf66:	604b      	str	r3, [r1, #4]
 800bf68:	4638      	mov	r0, r7
 800bf6a:	f104 060b 	add.w	r6, r4, #11
 800bf6e:	f000 f855 	bl	800c01c <__malloc_unlock>
 800bf72:	f026 0607 	bic.w	r6, r6, #7
 800bf76:	1d23      	adds	r3, r4, #4
 800bf78:	1af2      	subs	r2, r6, r3
 800bf7a:	d0b6      	beq.n	800beea <_malloc_r+0x22>
 800bf7c:	1b9b      	subs	r3, r3, r6
 800bf7e:	50a3      	str	r3, [r4, r2]
 800bf80:	e7b3      	b.n	800beea <_malloc_r+0x22>
 800bf82:	6862      	ldr	r2, [r4, #4]
 800bf84:	42a3      	cmp	r3, r4
 800bf86:	bf0c      	ite	eq
 800bf88:	6032      	streq	r2, [r6, #0]
 800bf8a:	605a      	strne	r2, [r3, #4]
 800bf8c:	e7ec      	b.n	800bf68 <_malloc_r+0xa0>
 800bf8e:	4623      	mov	r3, r4
 800bf90:	6864      	ldr	r4, [r4, #4]
 800bf92:	e7b2      	b.n	800befa <_malloc_r+0x32>
 800bf94:	4634      	mov	r4, r6
 800bf96:	6876      	ldr	r6, [r6, #4]
 800bf98:	e7b9      	b.n	800bf0e <_malloc_r+0x46>
 800bf9a:	230c      	movs	r3, #12
 800bf9c:	603b      	str	r3, [r7, #0]
 800bf9e:	4638      	mov	r0, r7
 800bfa0:	f000 f83c 	bl	800c01c <__malloc_unlock>
 800bfa4:	e7a1      	b.n	800beea <_malloc_r+0x22>
 800bfa6:	6025      	str	r5, [r4, #0]
 800bfa8:	e7de      	b.n	800bf68 <_malloc_r+0xa0>
 800bfaa:	bf00      	nop
 800bfac:	20005278 	.word	0x20005278

0800bfb0 <_sbrk_r>:
 800bfb0:	b538      	push	{r3, r4, r5, lr}
 800bfb2:	4d06      	ldr	r5, [pc, #24]	; (800bfcc <_sbrk_r+0x1c>)
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	4604      	mov	r4, r0
 800bfb8:	4608      	mov	r0, r1
 800bfba:	602b      	str	r3, [r5, #0]
 800bfbc:	f7f5 fb0c 	bl	80015d8 <_sbrk>
 800bfc0:	1c43      	adds	r3, r0, #1
 800bfc2:	d102      	bne.n	800bfca <_sbrk_r+0x1a>
 800bfc4:	682b      	ldr	r3, [r5, #0]
 800bfc6:	b103      	cbz	r3, 800bfca <_sbrk_r+0x1a>
 800bfc8:	6023      	str	r3, [r4, #0]
 800bfca:	bd38      	pop	{r3, r4, r5, pc}
 800bfcc:	20005280 	.word	0x20005280

0800bfd0 <siprintf>:
 800bfd0:	b40e      	push	{r1, r2, r3}
 800bfd2:	b500      	push	{lr}
 800bfd4:	b09c      	sub	sp, #112	; 0x70
 800bfd6:	ab1d      	add	r3, sp, #116	; 0x74
 800bfd8:	9002      	str	r0, [sp, #8]
 800bfda:	9006      	str	r0, [sp, #24]
 800bfdc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bfe0:	4809      	ldr	r0, [pc, #36]	; (800c008 <siprintf+0x38>)
 800bfe2:	9107      	str	r1, [sp, #28]
 800bfe4:	9104      	str	r1, [sp, #16]
 800bfe6:	4909      	ldr	r1, [pc, #36]	; (800c00c <siprintf+0x3c>)
 800bfe8:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfec:	9105      	str	r1, [sp, #20]
 800bfee:	6800      	ldr	r0, [r0, #0]
 800bff0:	9301      	str	r3, [sp, #4]
 800bff2:	a902      	add	r1, sp, #8
 800bff4:	f000 f874 	bl	800c0e0 <_svfiprintf_r>
 800bff8:	9b02      	ldr	r3, [sp, #8]
 800bffa:	2200      	movs	r2, #0
 800bffc:	701a      	strb	r2, [r3, #0]
 800bffe:	b01c      	add	sp, #112	; 0x70
 800c000:	f85d eb04 	ldr.w	lr, [sp], #4
 800c004:	b003      	add	sp, #12
 800c006:	4770      	bx	lr
 800c008:	20000030 	.word	0x20000030
 800c00c:	ffff0208 	.word	0xffff0208

0800c010 <__malloc_lock>:
 800c010:	4801      	ldr	r0, [pc, #4]	; (800c018 <__malloc_lock+0x8>)
 800c012:	f000 baf9 	b.w	800c608 <__retarget_lock_acquire_recursive>
 800c016:	bf00      	nop
 800c018:	20005284 	.word	0x20005284

0800c01c <__malloc_unlock>:
 800c01c:	4801      	ldr	r0, [pc, #4]	; (800c024 <__malloc_unlock+0x8>)
 800c01e:	f000 baf4 	b.w	800c60a <__retarget_lock_release_recursive>
 800c022:	bf00      	nop
 800c024:	20005284 	.word	0x20005284

0800c028 <__ssputs_r>:
 800c028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c02c:	688e      	ldr	r6, [r1, #8]
 800c02e:	429e      	cmp	r6, r3
 800c030:	4682      	mov	sl, r0
 800c032:	460c      	mov	r4, r1
 800c034:	4690      	mov	r8, r2
 800c036:	461f      	mov	r7, r3
 800c038:	d838      	bhi.n	800c0ac <__ssputs_r+0x84>
 800c03a:	898a      	ldrh	r2, [r1, #12]
 800c03c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c040:	d032      	beq.n	800c0a8 <__ssputs_r+0x80>
 800c042:	6825      	ldr	r5, [r4, #0]
 800c044:	6909      	ldr	r1, [r1, #16]
 800c046:	eba5 0901 	sub.w	r9, r5, r1
 800c04a:	6965      	ldr	r5, [r4, #20]
 800c04c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c050:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c054:	3301      	adds	r3, #1
 800c056:	444b      	add	r3, r9
 800c058:	106d      	asrs	r5, r5, #1
 800c05a:	429d      	cmp	r5, r3
 800c05c:	bf38      	it	cc
 800c05e:	461d      	movcc	r5, r3
 800c060:	0553      	lsls	r3, r2, #21
 800c062:	d531      	bpl.n	800c0c8 <__ssputs_r+0xa0>
 800c064:	4629      	mov	r1, r5
 800c066:	f7ff ff2f 	bl	800bec8 <_malloc_r>
 800c06a:	4606      	mov	r6, r0
 800c06c:	b950      	cbnz	r0, 800c084 <__ssputs_r+0x5c>
 800c06e:	230c      	movs	r3, #12
 800c070:	f8ca 3000 	str.w	r3, [sl]
 800c074:	89a3      	ldrh	r3, [r4, #12]
 800c076:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c07a:	81a3      	strh	r3, [r4, #12]
 800c07c:	f04f 30ff 	mov.w	r0, #4294967295
 800c080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c084:	6921      	ldr	r1, [r4, #16]
 800c086:	464a      	mov	r2, r9
 800c088:	f7ff fe9c 	bl	800bdc4 <memcpy>
 800c08c:	89a3      	ldrh	r3, [r4, #12]
 800c08e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c096:	81a3      	strh	r3, [r4, #12]
 800c098:	6126      	str	r6, [r4, #16]
 800c09a:	6165      	str	r5, [r4, #20]
 800c09c:	444e      	add	r6, r9
 800c09e:	eba5 0509 	sub.w	r5, r5, r9
 800c0a2:	6026      	str	r6, [r4, #0]
 800c0a4:	60a5      	str	r5, [r4, #8]
 800c0a6:	463e      	mov	r6, r7
 800c0a8:	42be      	cmp	r6, r7
 800c0aa:	d900      	bls.n	800c0ae <__ssputs_r+0x86>
 800c0ac:	463e      	mov	r6, r7
 800c0ae:	6820      	ldr	r0, [r4, #0]
 800c0b0:	4632      	mov	r2, r6
 800c0b2:	4641      	mov	r1, r8
 800c0b4:	f000 faaa 	bl	800c60c <memmove>
 800c0b8:	68a3      	ldr	r3, [r4, #8]
 800c0ba:	1b9b      	subs	r3, r3, r6
 800c0bc:	60a3      	str	r3, [r4, #8]
 800c0be:	6823      	ldr	r3, [r4, #0]
 800c0c0:	4433      	add	r3, r6
 800c0c2:	6023      	str	r3, [r4, #0]
 800c0c4:	2000      	movs	r0, #0
 800c0c6:	e7db      	b.n	800c080 <__ssputs_r+0x58>
 800c0c8:	462a      	mov	r2, r5
 800c0ca:	f000 fab9 	bl	800c640 <_realloc_r>
 800c0ce:	4606      	mov	r6, r0
 800c0d0:	2800      	cmp	r0, #0
 800c0d2:	d1e1      	bne.n	800c098 <__ssputs_r+0x70>
 800c0d4:	6921      	ldr	r1, [r4, #16]
 800c0d6:	4650      	mov	r0, sl
 800c0d8:	f7ff fe8a 	bl	800bdf0 <_free_r>
 800c0dc:	e7c7      	b.n	800c06e <__ssputs_r+0x46>
	...

0800c0e0 <_svfiprintf_r>:
 800c0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0e4:	4698      	mov	r8, r3
 800c0e6:	898b      	ldrh	r3, [r1, #12]
 800c0e8:	061b      	lsls	r3, r3, #24
 800c0ea:	b09d      	sub	sp, #116	; 0x74
 800c0ec:	4607      	mov	r7, r0
 800c0ee:	460d      	mov	r5, r1
 800c0f0:	4614      	mov	r4, r2
 800c0f2:	d50e      	bpl.n	800c112 <_svfiprintf_r+0x32>
 800c0f4:	690b      	ldr	r3, [r1, #16]
 800c0f6:	b963      	cbnz	r3, 800c112 <_svfiprintf_r+0x32>
 800c0f8:	2140      	movs	r1, #64	; 0x40
 800c0fa:	f7ff fee5 	bl	800bec8 <_malloc_r>
 800c0fe:	6028      	str	r0, [r5, #0]
 800c100:	6128      	str	r0, [r5, #16]
 800c102:	b920      	cbnz	r0, 800c10e <_svfiprintf_r+0x2e>
 800c104:	230c      	movs	r3, #12
 800c106:	603b      	str	r3, [r7, #0]
 800c108:	f04f 30ff 	mov.w	r0, #4294967295
 800c10c:	e0d1      	b.n	800c2b2 <_svfiprintf_r+0x1d2>
 800c10e:	2340      	movs	r3, #64	; 0x40
 800c110:	616b      	str	r3, [r5, #20]
 800c112:	2300      	movs	r3, #0
 800c114:	9309      	str	r3, [sp, #36]	; 0x24
 800c116:	2320      	movs	r3, #32
 800c118:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c11c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c120:	2330      	movs	r3, #48	; 0x30
 800c122:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c2cc <_svfiprintf_r+0x1ec>
 800c126:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c12a:	f04f 0901 	mov.w	r9, #1
 800c12e:	4623      	mov	r3, r4
 800c130:	469a      	mov	sl, r3
 800c132:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c136:	b10a      	cbz	r2, 800c13c <_svfiprintf_r+0x5c>
 800c138:	2a25      	cmp	r2, #37	; 0x25
 800c13a:	d1f9      	bne.n	800c130 <_svfiprintf_r+0x50>
 800c13c:	ebba 0b04 	subs.w	fp, sl, r4
 800c140:	d00b      	beq.n	800c15a <_svfiprintf_r+0x7a>
 800c142:	465b      	mov	r3, fp
 800c144:	4622      	mov	r2, r4
 800c146:	4629      	mov	r1, r5
 800c148:	4638      	mov	r0, r7
 800c14a:	f7ff ff6d 	bl	800c028 <__ssputs_r>
 800c14e:	3001      	adds	r0, #1
 800c150:	f000 80aa 	beq.w	800c2a8 <_svfiprintf_r+0x1c8>
 800c154:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c156:	445a      	add	r2, fp
 800c158:	9209      	str	r2, [sp, #36]	; 0x24
 800c15a:	f89a 3000 	ldrb.w	r3, [sl]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	f000 80a2 	beq.w	800c2a8 <_svfiprintf_r+0x1c8>
 800c164:	2300      	movs	r3, #0
 800c166:	f04f 32ff 	mov.w	r2, #4294967295
 800c16a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c16e:	f10a 0a01 	add.w	sl, sl, #1
 800c172:	9304      	str	r3, [sp, #16]
 800c174:	9307      	str	r3, [sp, #28]
 800c176:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c17a:	931a      	str	r3, [sp, #104]	; 0x68
 800c17c:	4654      	mov	r4, sl
 800c17e:	2205      	movs	r2, #5
 800c180:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c184:	4851      	ldr	r0, [pc, #324]	; (800c2cc <_svfiprintf_r+0x1ec>)
 800c186:	f7f4 f823 	bl	80001d0 <memchr>
 800c18a:	9a04      	ldr	r2, [sp, #16]
 800c18c:	b9d8      	cbnz	r0, 800c1c6 <_svfiprintf_r+0xe6>
 800c18e:	06d0      	lsls	r0, r2, #27
 800c190:	bf44      	itt	mi
 800c192:	2320      	movmi	r3, #32
 800c194:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c198:	0711      	lsls	r1, r2, #28
 800c19a:	bf44      	itt	mi
 800c19c:	232b      	movmi	r3, #43	; 0x2b
 800c19e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c1a2:	f89a 3000 	ldrb.w	r3, [sl]
 800c1a6:	2b2a      	cmp	r3, #42	; 0x2a
 800c1a8:	d015      	beq.n	800c1d6 <_svfiprintf_r+0xf6>
 800c1aa:	9a07      	ldr	r2, [sp, #28]
 800c1ac:	4654      	mov	r4, sl
 800c1ae:	2000      	movs	r0, #0
 800c1b0:	f04f 0c0a 	mov.w	ip, #10
 800c1b4:	4621      	mov	r1, r4
 800c1b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1ba:	3b30      	subs	r3, #48	; 0x30
 800c1bc:	2b09      	cmp	r3, #9
 800c1be:	d94e      	bls.n	800c25e <_svfiprintf_r+0x17e>
 800c1c0:	b1b0      	cbz	r0, 800c1f0 <_svfiprintf_r+0x110>
 800c1c2:	9207      	str	r2, [sp, #28]
 800c1c4:	e014      	b.n	800c1f0 <_svfiprintf_r+0x110>
 800c1c6:	eba0 0308 	sub.w	r3, r0, r8
 800c1ca:	fa09 f303 	lsl.w	r3, r9, r3
 800c1ce:	4313      	orrs	r3, r2
 800c1d0:	9304      	str	r3, [sp, #16]
 800c1d2:	46a2      	mov	sl, r4
 800c1d4:	e7d2      	b.n	800c17c <_svfiprintf_r+0x9c>
 800c1d6:	9b03      	ldr	r3, [sp, #12]
 800c1d8:	1d19      	adds	r1, r3, #4
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	9103      	str	r1, [sp, #12]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	bfbb      	ittet	lt
 800c1e2:	425b      	neglt	r3, r3
 800c1e4:	f042 0202 	orrlt.w	r2, r2, #2
 800c1e8:	9307      	strge	r3, [sp, #28]
 800c1ea:	9307      	strlt	r3, [sp, #28]
 800c1ec:	bfb8      	it	lt
 800c1ee:	9204      	strlt	r2, [sp, #16]
 800c1f0:	7823      	ldrb	r3, [r4, #0]
 800c1f2:	2b2e      	cmp	r3, #46	; 0x2e
 800c1f4:	d10c      	bne.n	800c210 <_svfiprintf_r+0x130>
 800c1f6:	7863      	ldrb	r3, [r4, #1]
 800c1f8:	2b2a      	cmp	r3, #42	; 0x2a
 800c1fa:	d135      	bne.n	800c268 <_svfiprintf_r+0x188>
 800c1fc:	9b03      	ldr	r3, [sp, #12]
 800c1fe:	1d1a      	adds	r2, r3, #4
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	9203      	str	r2, [sp, #12]
 800c204:	2b00      	cmp	r3, #0
 800c206:	bfb8      	it	lt
 800c208:	f04f 33ff 	movlt.w	r3, #4294967295
 800c20c:	3402      	adds	r4, #2
 800c20e:	9305      	str	r3, [sp, #20]
 800c210:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c2dc <_svfiprintf_r+0x1fc>
 800c214:	7821      	ldrb	r1, [r4, #0]
 800c216:	2203      	movs	r2, #3
 800c218:	4650      	mov	r0, sl
 800c21a:	f7f3 ffd9 	bl	80001d0 <memchr>
 800c21e:	b140      	cbz	r0, 800c232 <_svfiprintf_r+0x152>
 800c220:	2340      	movs	r3, #64	; 0x40
 800c222:	eba0 000a 	sub.w	r0, r0, sl
 800c226:	fa03 f000 	lsl.w	r0, r3, r0
 800c22a:	9b04      	ldr	r3, [sp, #16]
 800c22c:	4303      	orrs	r3, r0
 800c22e:	3401      	adds	r4, #1
 800c230:	9304      	str	r3, [sp, #16]
 800c232:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c236:	4826      	ldr	r0, [pc, #152]	; (800c2d0 <_svfiprintf_r+0x1f0>)
 800c238:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c23c:	2206      	movs	r2, #6
 800c23e:	f7f3 ffc7 	bl	80001d0 <memchr>
 800c242:	2800      	cmp	r0, #0
 800c244:	d038      	beq.n	800c2b8 <_svfiprintf_r+0x1d8>
 800c246:	4b23      	ldr	r3, [pc, #140]	; (800c2d4 <_svfiprintf_r+0x1f4>)
 800c248:	bb1b      	cbnz	r3, 800c292 <_svfiprintf_r+0x1b2>
 800c24a:	9b03      	ldr	r3, [sp, #12]
 800c24c:	3307      	adds	r3, #7
 800c24e:	f023 0307 	bic.w	r3, r3, #7
 800c252:	3308      	adds	r3, #8
 800c254:	9303      	str	r3, [sp, #12]
 800c256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c258:	4433      	add	r3, r6
 800c25a:	9309      	str	r3, [sp, #36]	; 0x24
 800c25c:	e767      	b.n	800c12e <_svfiprintf_r+0x4e>
 800c25e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c262:	460c      	mov	r4, r1
 800c264:	2001      	movs	r0, #1
 800c266:	e7a5      	b.n	800c1b4 <_svfiprintf_r+0xd4>
 800c268:	2300      	movs	r3, #0
 800c26a:	3401      	adds	r4, #1
 800c26c:	9305      	str	r3, [sp, #20]
 800c26e:	4619      	mov	r1, r3
 800c270:	f04f 0c0a 	mov.w	ip, #10
 800c274:	4620      	mov	r0, r4
 800c276:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c27a:	3a30      	subs	r2, #48	; 0x30
 800c27c:	2a09      	cmp	r2, #9
 800c27e:	d903      	bls.n	800c288 <_svfiprintf_r+0x1a8>
 800c280:	2b00      	cmp	r3, #0
 800c282:	d0c5      	beq.n	800c210 <_svfiprintf_r+0x130>
 800c284:	9105      	str	r1, [sp, #20]
 800c286:	e7c3      	b.n	800c210 <_svfiprintf_r+0x130>
 800c288:	fb0c 2101 	mla	r1, ip, r1, r2
 800c28c:	4604      	mov	r4, r0
 800c28e:	2301      	movs	r3, #1
 800c290:	e7f0      	b.n	800c274 <_svfiprintf_r+0x194>
 800c292:	ab03      	add	r3, sp, #12
 800c294:	9300      	str	r3, [sp, #0]
 800c296:	462a      	mov	r2, r5
 800c298:	4b0f      	ldr	r3, [pc, #60]	; (800c2d8 <_svfiprintf_r+0x1f8>)
 800c29a:	a904      	add	r1, sp, #16
 800c29c:	4638      	mov	r0, r7
 800c29e:	f3af 8000 	nop.w
 800c2a2:	1c42      	adds	r2, r0, #1
 800c2a4:	4606      	mov	r6, r0
 800c2a6:	d1d6      	bne.n	800c256 <_svfiprintf_r+0x176>
 800c2a8:	89ab      	ldrh	r3, [r5, #12]
 800c2aa:	065b      	lsls	r3, r3, #25
 800c2ac:	f53f af2c 	bmi.w	800c108 <_svfiprintf_r+0x28>
 800c2b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c2b2:	b01d      	add	sp, #116	; 0x74
 800c2b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2b8:	ab03      	add	r3, sp, #12
 800c2ba:	9300      	str	r3, [sp, #0]
 800c2bc:	462a      	mov	r2, r5
 800c2be:	4b06      	ldr	r3, [pc, #24]	; (800c2d8 <_svfiprintf_r+0x1f8>)
 800c2c0:	a904      	add	r1, sp, #16
 800c2c2:	4638      	mov	r0, r7
 800c2c4:	f000 f87a 	bl	800c3bc <_printf_i>
 800c2c8:	e7eb      	b.n	800c2a2 <_svfiprintf_r+0x1c2>
 800c2ca:	bf00      	nop
 800c2cc:	0800e8e4 	.word	0x0800e8e4
 800c2d0:	0800e8ee 	.word	0x0800e8ee
 800c2d4:	00000000 	.word	0x00000000
 800c2d8:	0800c029 	.word	0x0800c029
 800c2dc:	0800e8ea 	.word	0x0800e8ea

0800c2e0 <_printf_common>:
 800c2e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2e4:	4616      	mov	r6, r2
 800c2e6:	4699      	mov	r9, r3
 800c2e8:	688a      	ldr	r2, [r1, #8]
 800c2ea:	690b      	ldr	r3, [r1, #16]
 800c2ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c2f0:	4293      	cmp	r3, r2
 800c2f2:	bfb8      	it	lt
 800c2f4:	4613      	movlt	r3, r2
 800c2f6:	6033      	str	r3, [r6, #0]
 800c2f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c2fc:	4607      	mov	r7, r0
 800c2fe:	460c      	mov	r4, r1
 800c300:	b10a      	cbz	r2, 800c306 <_printf_common+0x26>
 800c302:	3301      	adds	r3, #1
 800c304:	6033      	str	r3, [r6, #0]
 800c306:	6823      	ldr	r3, [r4, #0]
 800c308:	0699      	lsls	r1, r3, #26
 800c30a:	bf42      	ittt	mi
 800c30c:	6833      	ldrmi	r3, [r6, #0]
 800c30e:	3302      	addmi	r3, #2
 800c310:	6033      	strmi	r3, [r6, #0]
 800c312:	6825      	ldr	r5, [r4, #0]
 800c314:	f015 0506 	ands.w	r5, r5, #6
 800c318:	d106      	bne.n	800c328 <_printf_common+0x48>
 800c31a:	f104 0a19 	add.w	sl, r4, #25
 800c31e:	68e3      	ldr	r3, [r4, #12]
 800c320:	6832      	ldr	r2, [r6, #0]
 800c322:	1a9b      	subs	r3, r3, r2
 800c324:	42ab      	cmp	r3, r5
 800c326:	dc26      	bgt.n	800c376 <_printf_common+0x96>
 800c328:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c32c:	1e13      	subs	r3, r2, #0
 800c32e:	6822      	ldr	r2, [r4, #0]
 800c330:	bf18      	it	ne
 800c332:	2301      	movne	r3, #1
 800c334:	0692      	lsls	r2, r2, #26
 800c336:	d42b      	bmi.n	800c390 <_printf_common+0xb0>
 800c338:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c33c:	4649      	mov	r1, r9
 800c33e:	4638      	mov	r0, r7
 800c340:	47c0      	blx	r8
 800c342:	3001      	adds	r0, #1
 800c344:	d01e      	beq.n	800c384 <_printf_common+0xa4>
 800c346:	6823      	ldr	r3, [r4, #0]
 800c348:	68e5      	ldr	r5, [r4, #12]
 800c34a:	6832      	ldr	r2, [r6, #0]
 800c34c:	f003 0306 	and.w	r3, r3, #6
 800c350:	2b04      	cmp	r3, #4
 800c352:	bf08      	it	eq
 800c354:	1aad      	subeq	r5, r5, r2
 800c356:	68a3      	ldr	r3, [r4, #8]
 800c358:	6922      	ldr	r2, [r4, #16]
 800c35a:	bf0c      	ite	eq
 800c35c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c360:	2500      	movne	r5, #0
 800c362:	4293      	cmp	r3, r2
 800c364:	bfc4      	itt	gt
 800c366:	1a9b      	subgt	r3, r3, r2
 800c368:	18ed      	addgt	r5, r5, r3
 800c36a:	2600      	movs	r6, #0
 800c36c:	341a      	adds	r4, #26
 800c36e:	42b5      	cmp	r5, r6
 800c370:	d11a      	bne.n	800c3a8 <_printf_common+0xc8>
 800c372:	2000      	movs	r0, #0
 800c374:	e008      	b.n	800c388 <_printf_common+0xa8>
 800c376:	2301      	movs	r3, #1
 800c378:	4652      	mov	r2, sl
 800c37a:	4649      	mov	r1, r9
 800c37c:	4638      	mov	r0, r7
 800c37e:	47c0      	blx	r8
 800c380:	3001      	adds	r0, #1
 800c382:	d103      	bne.n	800c38c <_printf_common+0xac>
 800c384:	f04f 30ff 	mov.w	r0, #4294967295
 800c388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c38c:	3501      	adds	r5, #1
 800c38e:	e7c6      	b.n	800c31e <_printf_common+0x3e>
 800c390:	18e1      	adds	r1, r4, r3
 800c392:	1c5a      	adds	r2, r3, #1
 800c394:	2030      	movs	r0, #48	; 0x30
 800c396:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c39a:	4422      	add	r2, r4
 800c39c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c3a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c3a4:	3302      	adds	r3, #2
 800c3a6:	e7c7      	b.n	800c338 <_printf_common+0x58>
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	4622      	mov	r2, r4
 800c3ac:	4649      	mov	r1, r9
 800c3ae:	4638      	mov	r0, r7
 800c3b0:	47c0      	blx	r8
 800c3b2:	3001      	adds	r0, #1
 800c3b4:	d0e6      	beq.n	800c384 <_printf_common+0xa4>
 800c3b6:	3601      	adds	r6, #1
 800c3b8:	e7d9      	b.n	800c36e <_printf_common+0x8e>
	...

0800c3bc <_printf_i>:
 800c3bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c3c0:	7e0f      	ldrb	r7, [r1, #24]
 800c3c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c3c4:	2f78      	cmp	r7, #120	; 0x78
 800c3c6:	4691      	mov	r9, r2
 800c3c8:	4680      	mov	r8, r0
 800c3ca:	460c      	mov	r4, r1
 800c3cc:	469a      	mov	sl, r3
 800c3ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c3d2:	d807      	bhi.n	800c3e4 <_printf_i+0x28>
 800c3d4:	2f62      	cmp	r7, #98	; 0x62
 800c3d6:	d80a      	bhi.n	800c3ee <_printf_i+0x32>
 800c3d8:	2f00      	cmp	r7, #0
 800c3da:	f000 80d8 	beq.w	800c58e <_printf_i+0x1d2>
 800c3de:	2f58      	cmp	r7, #88	; 0x58
 800c3e0:	f000 80a3 	beq.w	800c52a <_printf_i+0x16e>
 800c3e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c3e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c3ec:	e03a      	b.n	800c464 <_printf_i+0xa8>
 800c3ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c3f2:	2b15      	cmp	r3, #21
 800c3f4:	d8f6      	bhi.n	800c3e4 <_printf_i+0x28>
 800c3f6:	a101      	add	r1, pc, #4	; (adr r1, 800c3fc <_printf_i+0x40>)
 800c3f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c3fc:	0800c455 	.word	0x0800c455
 800c400:	0800c469 	.word	0x0800c469
 800c404:	0800c3e5 	.word	0x0800c3e5
 800c408:	0800c3e5 	.word	0x0800c3e5
 800c40c:	0800c3e5 	.word	0x0800c3e5
 800c410:	0800c3e5 	.word	0x0800c3e5
 800c414:	0800c469 	.word	0x0800c469
 800c418:	0800c3e5 	.word	0x0800c3e5
 800c41c:	0800c3e5 	.word	0x0800c3e5
 800c420:	0800c3e5 	.word	0x0800c3e5
 800c424:	0800c3e5 	.word	0x0800c3e5
 800c428:	0800c575 	.word	0x0800c575
 800c42c:	0800c499 	.word	0x0800c499
 800c430:	0800c557 	.word	0x0800c557
 800c434:	0800c3e5 	.word	0x0800c3e5
 800c438:	0800c3e5 	.word	0x0800c3e5
 800c43c:	0800c597 	.word	0x0800c597
 800c440:	0800c3e5 	.word	0x0800c3e5
 800c444:	0800c499 	.word	0x0800c499
 800c448:	0800c3e5 	.word	0x0800c3e5
 800c44c:	0800c3e5 	.word	0x0800c3e5
 800c450:	0800c55f 	.word	0x0800c55f
 800c454:	682b      	ldr	r3, [r5, #0]
 800c456:	1d1a      	adds	r2, r3, #4
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	602a      	str	r2, [r5, #0]
 800c45c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c460:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c464:	2301      	movs	r3, #1
 800c466:	e0a3      	b.n	800c5b0 <_printf_i+0x1f4>
 800c468:	6820      	ldr	r0, [r4, #0]
 800c46a:	6829      	ldr	r1, [r5, #0]
 800c46c:	0606      	lsls	r6, r0, #24
 800c46e:	f101 0304 	add.w	r3, r1, #4
 800c472:	d50a      	bpl.n	800c48a <_printf_i+0xce>
 800c474:	680e      	ldr	r6, [r1, #0]
 800c476:	602b      	str	r3, [r5, #0]
 800c478:	2e00      	cmp	r6, #0
 800c47a:	da03      	bge.n	800c484 <_printf_i+0xc8>
 800c47c:	232d      	movs	r3, #45	; 0x2d
 800c47e:	4276      	negs	r6, r6
 800c480:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c484:	485e      	ldr	r0, [pc, #376]	; (800c600 <_printf_i+0x244>)
 800c486:	230a      	movs	r3, #10
 800c488:	e019      	b.n	800c4be <_printf_i+0x102>
 800c48a:	680e      	ldr	r6, [r1, #0]
 800c48c:	602b      	str	r3, [r5, #0]
 800c48e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c492:	bf18      	it	ne
 800c494:	b236      	sxthne	r6, r6
 800c496:	e7ef      	b.n	800c478 <_printf_i+0xbc>
 800c498:	682b      	ldr	r3, [r5, #0]
 800c49a:	6820      	ldr	r0, [r4, #0]
 800c49c:	1d19      	adds	r1, r3, #4
 800c49e:	6029      	str	r1, [r5, #0]
 800c4a0:	0601      	lsls	r1, r0, #24
 800c4a2:	d501      	bpl.n	800c4a8 <_printf_i+0xec>
 800c4a4:	681e      	ldr	r6, [r3, #0]
 800c4a6:	e002      	b.n	800c4ae <_printf_i+0xf2>
 800c4a8:	0646      	lsls	r6, r0, #25
 800c4aa:	d5fb      	bpl.n	800c4a4 <_printf_i+0xe8>
 800c4ac:	881e      	ldrh	r6, [r3, #0]
 800c4ae:	4854      	ldr	r0, [pc, #336]	; (800c600 <_printf_i+0x244>)
 800c4b0:	2f6f      	cmp	r7, #111	; 0x6f
 800c4b2:	bf0c      	ite	eq
 800c4b4:	2308      	moveq	r3, #8
 800c4b6:	230a      	movne	r3, #10
 800c4b8:	2100      	movs	r1, #0
 800c4ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c4be:	6865      	ldr	r5, [r4, #4]
 800c4c0:	60a5      	str	r5, [r4, #8]
 800c4c2:	2d00      	cmp	r5, #0
 800c4c4:	bfa2      	ittt	ge
 800c4c6:	6821      	ldrge	r1, [r4, #0]
 800c4c8:	f021 0104 	bicge.w	r1, r1, #4
 800c4cc:	6021      	strge	r1, [r4, #0]
 800c4ce:	b90e      	cbnz	r6, 800c4d4 <_printf_i+0x118>
 800c4d0:	2d00      	cmp	r5, #0
 800c4d2:	d04d      	beq.n	800c570 <_printf_i+0x1b4>
 800c4d4:	4615      	mov	r5, r2
 800c4d6:	fbb6 f1f3 	udiv	r1, r6, r3
 800c4da:	fb03 6711 	mls	r7, r3, r1, r6
 800c4de:	5dc7      	ldrb	r7, [r0, r7]
 800c4e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c4e4:	4637      	mov	r7, r6
 800c4e6:	42bb      	cmp	r3, r7
 800c4e8:	460e      	mov	r6, r1
 800c4ea:	d9f4      	bls.n	800c4d6 <_printf_i+0x11a>
 800c4ec:	2b08      	cmp	r3, #8
 800c4ee:	d10b      	bne.n	800c508 <_printf_i+0x14c>
 800c4f0:	6823      	ldr	r3, [r4, #0]
 800c4f2:	07de      	lsls	r6, r3, #31
 800c4f4:	d508      	bpl.n	800c508 <_printf_i+0x14c>
 800c4f6:	6923      	ldr	r3, [r4, #16]
 800c4f8:	6861      	ldr	r1, [r4, #4]
 800c4fa:	4299      	cmp	r1, r3
 800c4fc:	bfde      	ittt	le
 800c4fe:	2330      	movle	r3, #48	; 0x30
 800c500:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c504:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c508:	1b52      	subs	r2, r2, r5
 800c50a:	6122      	str	r2, [r4, #16]
 800c50c:	f8cd a000 	str.w	sl, [sp]
 800c510:	464b      	mov	r3, r9
 800c512:	aa03      	add	r2, sp, #12
 800c514:	4621      	mov	r1, r4
 800c516:	4640      	mov	r0, r8
 800c518:	f7ff fee2 	bl	800c2e0 <_printf_common>
 800c51c:	3001      	adds	r0, #1
 800c51e:	d14c      	bne.n	800c5ba <_printf_i+0x1fe>
 800c520:	f04f 30ff 	mov.w	r0, #4294967295
 800c524:	b004      	add	sp, #16
 800c526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c52a:	4835      	ldr	r0, [pc, #212]	; (800c600 <_printf_i+0x244>)
 800c52c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c530:	6829      	ldr	r1, [r5, #0]
 800c532:	6823      	ldr	r3, [r4, #0]
 800c534:	f851 6b04 	ldr.w	r6, [r1], #4
 800c538:	6029      	str	r1, [r5, #0]
 800c53a:	061d      	lsls	r5, r3, #24
 800c53c:	d514      	bpl.n	800c568 <_printf_i+0x1ac>
 800c53e:	07df      	lsls	r7, r3, #31
 800c540:	bf44      	itt	mi
 800c542:	f043 0320 	orrmi.w	r3, r3, #32
 800c546:	6023      	strmi	r3, [r4, #0]
 800c548:	b91e      	cbnz	r6, 800c552 <_printf_i+0x196>
 800c54a:	6823      	ldr	r3, [r4, #0]
 800c54c:	f023 0320 	bic.w	r3, r3, #32
 800c550:	6023      	str	r3, [r4, #0]
 800c552:	2310      	movs	r3, #16
 800c554:	e7b0      	b.n	800c4b8 <_printf_i+0xfc>
 800c556:	6823      	ldr	r3, [r4, #0]
 800c558:	f043 0320 	orr.w	r3, r3, #32
 800c55c:	6023      	str	r3, [r4, #0]
 800c55e:	2378      	movs	r3, #120	; 0x78
 800c560:	4828      	ldr	r0, [pc, #160]	; (800c604 <_printf_i+0x248>)
 800c562:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c566:	e7e3      	b.n	800c530 <_printf_i+0x174>
 800c568:	0659      	lsls	r1, r3, #25
 800c56a:	bf48      	it	mi
 800c56c:	b2b6      	uxthmi	r6, r6
 800c56e:	e7e6      	b.n	800c53e <_printf_i+0x182>
 800c570:	4615      	mov	r5, r2
 800c572:	e7bb      	b.n	800c4ec <_printf_i+0x130>
 800c574:	682b      	ldr	r3, [r5, #0]
 800c576:	6826      	ldr	r6, [r4, #0]
 800c578:	6961      	ldr	r1, [r4, #20]
 800c57a:	1d18      	adds	r0, r3, #4
 800c57c:	6028      	str	r0, [r5, #0]
 800c57e:	0635      	lsls	r5, r6, #24
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	d501      	bpl.n	800c588 <_printf_i+0x1cc>
 800c584:	6019      	str	r1, [r3, #0]
 800c586:	e002      	b.n	800c58e <_printf_i+0x1d2>
 800c588:	0670      	lsls	r0, r6, #25
 800c58a:	d5fb      	bpl.n	800c584 <_printf_i+0x1c8>
 800c58c:	8019      	strh	r1, [r3, #0]
 800c58e:	2300      	movs	r3, #0
 800c590:	6123      	str	r3, [r4, #16]
 800c592:	4615      	mov	r5, r2
 800c594:	e7ba      	b.n	800c50c <_printf_i+0x150>
 800c596:	682b      	ldr	r3, [r5, #0]
 800c598:	1d1a      	adds	r2, r3, #4
 800c59a:	602a      	str	r2, [r5, #0]
 800c59c:	681d      	ldr	r5, [r3, #0]
 800c59e:	6862      	ldr	r2, [r4, #4]
 800c5a0:	2100      	movs	r1, #0
 800c5a2:	4628      	mov	r0, r5
 800c5a4:	f7f3 fe14 	bl	80001d0 <memchr>
 800c5a8:	b108      	cbz	r0, 800c5ae <_printf_i+0x1f2>
 800c5aa:	1b40      	subs	r0, r0, r5
 800c5ac:	6060      	str	r0, [r4, #4]
 800c5ae:	6863      	ldr	r3, [r4, #4]
 800c5b0:	6123      	str	r3, [r4, #16]
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5b8:	e7a8      	b.n	800c50c <_printf_i+0x150>
 800c5ba:	6923      	ldr	r3, [r4, #16]
 800c5bc:	462a      	mov	r2, r5
 800c5be:	4649      	mov	r1, r9
 800c5c0:	4640      	mov	r0, r8
 800c5c2:	47d0      	blx	sl
 800c5c4:	3001      	adds	r0, #1
 800c5c6:	d0ab      	beq.n	800c520 <_printf_i+0x164>
 800c5c8:	6823      	ldr	r3, [r4, #0]
 800c5ca:	079b      	lsls	r3, r3, #30
 800c5cc:	d413      	bmi.n	800c5f6 <_printf_i+0x23a>
 800c5ce:	68e0      	ldr	r0, [r4, #12]
 800c5d0:	9b03      	ldr	r3, [sp, #12]
 800c5d2:	4298      	cmp	r0, r3
 800c5d4:	bfb8      	it	lt
 800c5d6:	4618      	movlt	r0, r3
 800c5d8:	e7a4      	b.n	800c524 <_printf_i+0x168>
 800c5da:	2301      	movs	r3, #1
 800c5dc:	4632      	mov	r2, r6
 800c5de:	4649      	mov	r1, r9
 800c5e0:	4640      	mov	r0, r8
 800c5e2:	47d0      	blx	sl
 800c5e4:	3001      	adds	r0, #1
 800c5e6:	d09b      	beq.n	800c520 <_printf_i+0x164>
 800c5e8:	3501      	adds	r5, #1
 800c5ea:	68e3      	ldr	r3, [r4, #12]
 800c5ec:	9903      	ldr	r1, [sp, #12]
 800c5ee:	1a5b      	subs	r3, r3, r1
 800c5f0:	42ab      	cmp	r3, r5
 800c5f2:	dcf2      	bgt.n	800c5da <_printf_i+0x21e>
 800c5f4:	e7eb      	b.n	800c5ce <_printf_i+0x212>
 800c5f6:	2500      	movs	r5, #0
 800c5f8:	f104 0619 	add.w	r6, r4, #25
 800c5fc:	e7f5      	b.n	800c5ea <_printf_i+0x22e>
 800c5fe:	bf00      	nop
 800c600:	0800e8f5 	.word	0x0800e8f5
 800c604:	0800e906 	.word	0x0800e906

0800c608 <__retarget_lock_acquire_recursive>:
 800c608:	4770      	bx	lr

0800c60a <__retarget_lock_release_recursive>:
 800c60a:	4770      	bx	lr

0800c60c <memmove>:
 800c60c:	4288      	cmp	r0, r1
 800c60e:	b510      	push	{r4, lr}
 800c610:	eb01 0402 	add.w	r4, r1, r2
 800c614:	d902      	bls.n	800c61c <memmove+0x10>
 800c616:	4284      	cmp	r4, r0
 800c618:	4623      	mov	r3, r4
 800c61a:	d807      	bhi.n	800c62c <memmove+0x20>
 800c61c:	1e43      	subs	r3, r0, #1
 800c61e:	42a1      	cmp	r1, r4
 800c620:	d008      	beq.n	800c634 <memmove+0x28>
 800c622:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c626:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c62a:	e7f8      	b.n	800c61e <memmove+0x12>
 800c62c:	4402      	add	r2, r0
 800c62e:	4601      	mov	r1, r0
 800c630:	428a      	cmp	r2, r1
 800c632:	d100      	bne.n	800c636 <memmove+0x2a>
 800c634:	bd10      	pop	{r4, pc}
 800c636:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c63a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c63e:	e7f7      	b.n	800c630 <memmove+0x24>

0800c640 <_realloc_r>:
 800c640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c644:	4680      	mov	r8, r0
 800c646:	4614      	mov	r4, r2
 800c648:	460e      	mov	r6, r1
 800c64a:	b921      	cbnz	r1, 800c656 <_realloc_r+0x16>
 800c64c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c650:	4611      	mov	r1, r2
 800c652:	f7ff bc39 	b.w	800bec8 <_malloc_r>
 800c656:	b92a      	cbnz	r2, 800c664 <_realloc_r+0x24>
 800c658:	f7ff fbca 	bl	800bdf0 <_free_r>
 800c65c:	4625      	mov	r5, r4
 800c65e:	4628      	mov	r0, r5
 800c660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c664:	f000 f81b 	bl	800c69e <_malloc_usable_size_r>
 800c668:	4284      	cmp	r4, r0
 800c66a:	4607      	mov	r7, r0
 800c66c:	d802      	bhi.n	800c674 <_realloc_r+0x34>
 800c66e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c672:	d812      	bhi.n	800c69a <_realloc_r+0x5a>
 800c674:	4621      	mov	r1, r4
 800c676:	4640      	mov	r0, r8
 800c678:	f7ff fc26 	bl	800bec8 <_malloc_r>
 800c67c:	4605      	mov	r5, r0
 800c67e:	2800      	cmp	r0, #0
 800c680:	d0ed      	beq.n	800c65e <_realloc_r+0x1e>
 800c682:	42bc      	cmp	r4, r7
 800c684:	4622      	mov	r2, r4
 800c686:	4631      	mov	r1, r6
 800c688:	bf28      	it	cs
 800c68a:	463a      	movcs	r2, r7
 800c68c:	f7ff fb9a 	bl	800bdc4 <memcpy>
 800c690:	4631      	mov	r1, r6
 800c692:	4640      	mov	r0, r8
 800c694:	f7ff fbac 	bl	800bdf0 <_free_r>
 800c698:	e7e1      	b.n	800c65e <_realloc_r+0x1e>
 800c69a:	4635      	mov	r5, r6
 800c69c:	e7df      	b.n	800c65e <_realloc_r+0x1e>

0800c69e <_malloc_usable_size_r>:
 800c69e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6a2:	1f18      	subs	r0, r3, #4
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	bfbc      	itt	lt
 800c6a8:	580b      	ldrlt	r3, [r1, r0]
 800c6aa:	18c0      	addlt	r0, r0, r3
 800c6ac:	4770      	bx	lr
	...

0800c6b0 <_init>:
 800c6b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6b2:	bf00      	nop
 800c6b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6b6:	bc08      	pop	{r3}
 800c6b8:	469e      	mov	lr, r3
 800c6ba:	4770      	bx	lr

0800c6bc <_fini>:
 800c6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6be:	bf00      	nop
 800c6c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6c2:	bc08      	pop	{r3}
 800c6c4:	469e      	mov	lr, r3
 800c6c6:	4770      	bx	lr
