
Erster_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c418  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000021c4  0800c5a8  0800c5a8  0001c5a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e76c  0800e76c  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800e76c  0800e76c  0001e76c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e774  0800e774  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e774  0800e774  0001e774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e778  0800e778  0001e778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800e77c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          000051ec  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005280  20005280  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002557b  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005371  00000000  00000000  0004563f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f08  00000000  00000000  0004a9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001cf8  00000000  00000000  0004c8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027c46  00000000  00000000  0004e5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000261aa  00000000  00000000  000761f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df579  00000000  00000000  0009c3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017b919  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000087c0  00000000  00000000  0017b96c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c590 	.word	0x0800c590

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800c590 	.word	0x0800c590

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <LCD_SetCursor>:
#include "fonts.h"
#include "display.h"
#include "cmsis_os.h"
#include "usb_host.h"

void LCD_SetCursor(uint16_t x, uint16_t y){
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	460a      	mov	r2, r1
 800057e:	80fb      	strh	r3, [r7, #6]
 8000580:	4613      	mov	r3, r2
 8000582:	80bb      	strh	r3, [r7, #4]
	LCD_WriteReg(0x004E, x); // Set x-pos
 8000584:	88fb      	ldrh	r3, [r7, #6]
 8000586:	4619      	mov	r1, r3
 8000588:	204e      	movs	r0, #78	; 0x4e
 800058a:	f000 f96f 	bl	800086c <LCD_WriteReg>
	LCD_WriteReg(0x004F, y); // Set y-pos
 800058e:	88bb      	ldrh	r3, [r7, #4]
 8000590:	4619      	mov	r1, r3
 8000592:	204f      	movs	r0, #79	; 0x4f
 8000594:	f000 f96a 	bl	800086c <LCD_WriteReg>
}
 8000598:	bf00      	nop
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}

080005a0 <LCD_DrawPixel>:

void LCD_DrawPixel(uint16_t color){
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	80fb      	strh	r3, [r7, #6]
	LCD_WriteReg(0x0022,color);
 80005aa:	88fb      	ldrh	r3, [r7, #6]
 80005ac:	4619      	mov	r1, r3
 80005ae:	2022      	movs	r0, #34	; 0x22
 80005b0:	f000 f95c 	bl	800086c <LCD_WriteReg>
}
 80005b4:	bf00      	nop
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <LCD_WriteLetter>:

void LCD_WriteLetter(uint16_t x, uint16_t y, uint16_t colorfg, uint16_t colorbg, char letter){
 80005bc:	b590      	push	{r4, r7, lr}
 80005be:	b087      	sub	sp, #28
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4604      	mov	r4, r0
 80005c4:	4608      	mov	r0, r1
 80005c6:	4611      	mov	r1, r2
 80005c8:	461a      	mov	r2, r3
 80005ca:	4623      	mov	r3, r4
 80005cc:	80fb      	strh	r3, [r7, #6]
 80005ce:	4603      	mov	r3, r0
 80005d0:	80bb      	strh	r3, [r7, #4]
 80005d2:	460b      	mov	r3, r1
 80005d4:	807b      	strh	r3, [r7, #2]
 80005d6:	4613      	mov	r3, r2
 80005d8:	803b      	strh	r3, [r7, #0]
	int offset = letter*16*2;
 80005da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80005de:	015b      	lsls	r3, r3, #5
 80005e0:	613b      	str	r3, [r7, #16]
	int i = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	617b      	str	r3, [r7, #20]
	uint16_t line = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	81fb      	strh	r3, [r7, #14]
	LCD_SetCursor(x,y);
 80005ea:	88ba      	ldrh	r2, [r7, #4]
 80005ec:	88fb      	ldrh	r3, [r7, #6]
 80005ee:	4611      	mov	r1, r2
 80005f0:	4618      	mov	r0, r3
 80005f2:	f7ff ffbf 	bl	8000574 <LCD_SetCursor>
	//printf("Ascii Code for %c: %d , %d\n",letter,letter,offset);
	for(i=offset; i<offset+16*2; i++){
 80005f6:	693b      	ldr	r3, [r7, #16]
 80005f8:	617b      	str	r3, [r7, #20]
 80005fa:	e024      	b.n	8000646 <LCD_WriteLetter+0x8a>
		LCD_SetCursor(x,y);
 80005fc:	88ba      	ldrh	r2, [r7, #4]
 80005fe:	88fb      	ldrh	r3, [r7, #6]
 8000600:	4611      	mov	r1, r2
 8000602:	4618      	mov	r0, r3
 8000604:	f7ff ffb6 	bl	8000574 <LCD_SetCursor>
		line = console_font_12x16[i] << 4 | console_font_12x16[i+1] >> 4;
 8000608:	4a14      	ldr	r2, [pc, #80]	; (800065c <LCD_WriteLetter+0xa0>)
 800060a:	697b      	ldr	r3, [r7, #20]
 800060c:	4413      	add	r3, r2
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	011b      	lsls	r3, r3, #4
 8000612:	b21a      	sxth	r2, r3
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	3301      	adds	r3, #1
 8000618:	4910      	ldr	r1, [pc, #64]	; (800065c <LCD_WriteLetter+0xa0>)
 800061a:	5ccb      	ldrb	r3, [r1, r3]
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	b2db      	uxtb	r3, r3
 8000620:	b21b      	sxth	r3, r3
 8000622:	4313      	orrs	r3, r2
 8000624:	b21b      	sxth	r3, r3
 8000626:	81fb      	strh	r3, [r7, #14]
		Bits2Pixel(line, colorfg, colorbg);
 8000628:	883a      	ldrh	r2, [r7, #0]
 800062a:	8879      	ldrh	r1, [r7, #2]
 800062c:	89fb      	ldrh	r3, [r7, #14]
 800062e:	4618      	mov	r0, r3
 8000630:	f000 f845 	bl	80006be <Bits2Pixel>
		y++;
 8000634:	88bb      	ldrh	r3, [r7, #4]
 8000636:	3301      	adds	r3, #1
 8000638:	80bb      	strh	r3, [r7, #4]
		i++;
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	3301      	adds	r3, #1
 800063e:	617b      	str	r3, [r7, #20]
	for(i=offset; i<offset+16*2; i++){
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	3301      	adds	r3, #1
 8000644:	617b      	str	r3, [r7, #20]
 8000646:	693b      	ldr	r3, [r7, #16]
 8000648:	331f      	adds	r3, #31
 800064a:	697a      	ldr	r2, [r7, #20]
 800064c:	429a      	cmp	r2, r3
 800064e:	ddd5      	ble.n	80005fc <LCD_WriteLetter+0x40>
	}
}
 8000650:	bf00      	nop
 8000652:	bf00      	nop
 8000654:	371c      	adds	r7, #28
 8000656:	46bd      	mov	sp, r7
 8000658:	bd90      	pop	{r4, r7, pc}
 800065a:	bf00      	nop
 800065c:	0800c644 	.word	0x0800c644

08000660 <LCD_WriteString>:

void LCD_WriteString(uint16_t x, uint16_t y, uint16_t colorfg, uint16_t colorbg, char* letStr){
 8000660:	b590      	push	{r4, r7, lr}
 8000662:	b087      	sub	sp, #28
 8000664:	af02      	add	r7, sp, #8
 8000666:	4604      	mov	r4, r0
 8000668:	4608      	mov	r0, r1
 800066a:	4611      	mov	r1, r2
 800066c:	461a      	mov	r2, r3
 800066e:	4623      	mov	r3, r4
 8000670:	80fb      	strh	r3, [r7, #6]
 8000672:	4603      	mov	r3, r0
 8000674:	80bb      	strh	r3, [r7, #4]
 8000676:	460b      	mov	r3, r1
 8000678:	807b      	strh	r3, [r7, #2]
 800067a:	4613      	mov	r3, r2
 800067c:	803b      	strh	r3, [r7, #0]
	int n = 0;
 800067e:	2300      	movs	r3, #0
 8000680:	60fb      	str	r3, [r7, #12]
	while(letStr[n] != 0){
 8000682:	e011      	b.n	80006a8 <LCD_WriteString+0x48>
		LCD_WriteLetter(x,y,colorfg,colorbg,letStr[n]);
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	6a3a      	ldr	r2, [r7, #32]
 8000688:	4413      	add	r3, r2
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	883c      	ldrh	r4, [r7, #0]
 800068e:	887a      	ldrh	r2, [r7, #2]
 8000690:	88b9      	ldrh	r1, [r7, #4]
 8000692:	88f8      	ldrh	r0, [r7, #6]
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	4623      	mov	r3, r4
 8000698:	f7ff ff90 	bl	80005bc <LCD_WriteLetter>
		x+=12;
 800069c:	88fb      	ldrh	r3, [r7, #6]
 800069e:	330c      	adds	r3, #12
 80006a0:	80fb      	strh	r3, [r7, #6]
		n++;
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	3301      	adds	r3, #1
 80006a6:	60fb      	str	r3, [r7, #12]
	while(letStr[n] != 0){
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	6a3a      	ldr	r2, [r7, #32]
 80006ac:	4413      	add	r3, r2
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d1e7      	bne.n	8000684 <LCD_WriteString+0x24>
	}
}
 80006b4:	bf00      	nop
 80006b6:	bf00      	nop
 80006b8:	3714      	adds	r7, #20
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd90      	pop	{r4, r7, pc}

080006be <Bits2Pixel>:

void Bits2Pixel(uint16_t line, uint16_t colorfg, uint16_t colorbg){
 80006be:	b580      	push	{r7, lr}
 80006c0:	b090      	sub	sp, #64	; 0x40
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	4603      	mov	r3, r0
 80006c6:	80fb      	strh	r3, [r7, #6]
 80006c8:	460b      	mov	r3, r1
 80006ca:	80bb      	strh	r3, [r7, #4]
 80006cc:	4613      	mov	r3, r2
 80006ce:	807b      	strh	r3, [r7, #2]
	int str[13];
	int n = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	63fb      	str	r3, [r7, #60]	; 0x3c
	while(n<12){
 80006d4:	e009      	b.n	80006ea <Bits2Pixel+0x2c>
		str[n] = 0;
 80006d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006d8:	009b      	lsls	r3, r3, #2
 80006da:	3340      	adds	r3, #64	; 0x40
 80006dc:	443b      	add	r3, r7
 80006de:	2200      	movs	r2, #0
 80006e0:	f843 2c38 	str.w	r2, [r3, #-56]
		n++;
 80006e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006e6:	3301      	adds	r3, #1
 80006e8:	63fb      	str	r3, [r7, #60]	; 0x3c
	while(n<12){
 80006ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006ec:	2b0b      	cmp	r3, #11
 80006ee:	ddf2      	ble.n	80006d6 <Bits2Pixel+0x18>
	}
	n = 11;
 80006f0:	230b      	movs	r3, #11
 80006f2:	63fb      	str	r3, [r7, #60]	; 0x3c
	while(line){
 80006f4:	e019      	b.n	800072a <Bits2Pixel+0x6c>
		if(line&1)
 80006f6:	88fb      	ldrh	r3, [r7, #6]
 80006f8:	f003 0301 	and.w	r3, r3, #1
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d007      	beq.n	8000710 <Bits2Pixel+0x52>
			str[n] = 1;
 8000700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000702:	009b      	lsls	r3, r3, #2
 8000704:	3340      	adds	r3, #64	; 0x40
 8000706:	443b      	add	r3, r7
 8000708:	2201      	movs	r2, #1
 800070a:	f843 2c38 	str.w	r2, [r3, #-56]
 800070e:	e006      	b.n	800071e <Bits2Pixel+0x60>
		else
			str[n] = 0;
 8000710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000712:	009b      	lsls	r3, r3, #2
 8000714:	3340      	adds	r3, #64	; 0x40
 8000716:	443b      	add	r3, r7
 8000718:	2200      	movs	r2, #0
 800071a:	f843 2c38 	str.w	r2, [r3, #-56]
		line >>=1;
 800071e:	88fb      	ldrh	r3, [r7, #6]
 8000720:	085b      	lsrs	r3, r3, #1
 8000722:	80fb      	strh	r3, [r7, #6]
		n--;
 8000724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000726:	3b01      	subs	r3, #1
 8000728:	63fb      	str	r3, [r7, #60]	; 0x3c
	while(line){
 800072a:	88fb      	ldrh	r3, [r7, #6]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d1e2      	bne.n	80006f6 <Bits2Pixel+0x38>
	}
	str[12]=0;
 8000730:	2300      	movs	r3, #0
 8000732:	63bb      	str	r3, [r7, #56]	; 0x38

	n = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	63fb      	str	r3, [r7, #60]	; 0x3c
	while(n<12){
 8000738:	e013      	b.n	8000762 <Bits2Pixel+0xa4>
		if(str[n]==0)
 800073a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	3340      	adds	r3, #64	; 0x40
 8000740:	443b      	add	r3, r7
 8000742:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d104      	bne.n	8000754 <Bits2Pixel+0x96>
			LCD_DrawPixel(colorfg);
 800074a:	88bb      	ldrh	r3, [r7, #4]
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff ff27 	bl	80005a0 <LCD_DrawPixel>
 8000752:	e003      	b.n	800075c <Bits2Pixel+0x9e>
		else
			LCD_DrawPixel(colorbg);
 8000754:	887b      	ldrh	r3, [r7, #2]
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff ff22 	bl	80005a0 <LCD_DrawPixel>
		n++;
 800075c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800075e:	3301      	adds	r3, #1
 8000760:	63fb      	str	r3, [r7, #60]	; 0x3c
	while(n<12){
 8000762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000764:	2b0b      	cmp	r3, #11
 8000766:	dde8      	ble.n	800073a <Bits2Pixel+0x7c>
//		if(line&1){
//			LCD_DrawPixel(0xFFFF);
//		}else {
//			LCD_DrawPixel(0xFFFF);
//		}
}
 8000768:	bf00      	nop
 800076a:	bf00      	nop
 800076c:	3740      	adds	r7, #64	; 0x40
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}

08000772 <LCD_ClearDisplay>:

void LCD_ClearDisplay(uint16_t color){
 8000772:	b580      	push	{r7, lr}
 8000774:	b084      	sub	sp, #16
 8000776:	af00      	add	r7, sp, #0
 8000778:	4603      	mov	r3, r0
 800077a:	80fb      	strh	r3, [r7, #6]
	int i = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	60fb      	str	r3, [r7, #12]
	LCD_SetCursor(0,0);
 8000780:	2100      	movs	r1, #0
 8000782:	2000      	movs	r0, #0
 8000784:	f7ff fef6 	bl	8000574 <LCD_SetCursor>

	while(i<76800){
 8000788:	e006      	b.n	8000798 <LCD_ClearDisplay+0x26>
		LCD_DrawPixel(color);
 800078a:	88fb      	ldrh	r3, [r7, #6]
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff ff07 	bl	80005a0 <LCD_DrawPixel>
		i++;
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	3301      	adds	r3, #1
 8000796:	60fb      	str	r3, [r7, #12]
	while(i<76800){
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 800079e:	dbf4      	blt.n	800078a <LCD_ClearDisplay+0x18>
	}
}
 80007a0:	bf00      	nop
 80007a2:	bf00      	nop
 80007a4:	3710      	adds	r7, #16
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
	...

080007ac <LCD_Output16BitWord>:

void  LCD_Output16BitWord(uint16_t data)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	80fb      	strh	r3, [r7, #6]
	GPIOD->ODR |= (data << 14); // 1er setzen
 80007b6:	4b2b      	ldr	r3, [pc, #172]	; (8000864 <LCD_Output16BitWord+0xb8>)
 80007b8:	695b      	ldr	r3, [r3, #20]
 80007ba:	88fa      	ldrh	r2, [r7, #6]
 80007bc:	0392      	lsls	r2, r2, #14
 80007be:	4611      	mov	r1, r2
 80007c0:	4a28      	ldr	r2, [pc, #160]	; (8000864 <LCD_Output16BitWord+0xb8>)
 80007c2:	430b      	orrs	r3, r1
 80007c4:	6153      	str	r3, [r2, #20]
    GPIOD->ODR &= (data << 14) | 0x3FFF; //0er setzen
 80007c6:	4b27      	ldr	r3, [pc, #156]	; (8000864 <LCD_Output16BitWord+0xb8>)
 80007c8:	695a      	ldr	r2, [r3, #20]
 80007ca:	88fb      	ldrh	r3, [r7, #6]
 80007cc:	039b      	lsls	r3, r3, #14
 80007ce:	ea6f 3393 	mvn.w	r3, r3, lsr #14
 80007d2:	ea6f 3383 	mvn.w	r3, r3, lsl #14
 80007d6:	4923      	ldr	r1, [pc, #140]	; (8000864 <LCD_Output16BitWord+0xb8>)
 80007d8:	4013      	ands	r3, r2
 80007da:	614b      	str	r3, [r1, #20]
    GPIOD->ODR |= ((data >> 5) & 0x0700);
 80007dc:	4b21      	ldr	r3, [pc, #132]	; (8000864 <LCD_Output16BitWord+0xb8>)
 80007de:	695a      	ldr	r2, [r3, #20]
 80007e0:	88fb      	ldrh	r3, [r7, #6]
 80007e2:	095b      	lsrs	r3, r3, #5
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80007ea:	491e      	ldr	r1, [pc, #120]	; (8000864 <LCD_Output16BitWord+0xb8>)
 80007ec:	4313      	orrs	r3, r2
 80007ee:	614b      	str	r3, [r1, #20]
    GPIOD->ODR &= ((data >> 5) & 0x0700) | ~(0x0700);
 80007f0:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <LCD_Output16BitWord+0xb8>)
 80007f2:	695b      	ldr	r3, [r3, #20]
 80007f4:	88fa      	ldrh	r2, [r7, #6]
 80007f6:	0952      	lsrs	r2, r2, #5
 80007f8:	b292      	uxth	r2, r2
 80007fa:	f462 62e0 	orn	r2, r2, #1792	; 0x700
 80007fe:	4611      	mov	r1, r2
 8000800:	4a18      	ldr	r2, [pc, #96]	; (8000864 <LCD_Output16BitWord+0xb8>)
 8000802:	400b      	ands	r3, r1
 8000804:	6153      	str	r3, [r2, #20]
    GPIOD->ODR |= (data >> 2) & 0x3;
 8000806:	4b17      	ldr	r3, [pc, #92]	; (8000864 <LCD_Output16BitWord+0xb8>)
 8000808:	695a      	ldr	r2, [r3, #20]
 800080a:	88fb      	ldrh	r3, [r7, #6]
 800080c:	089b      	lsrs	r3, r3, #2
 800080e:	b29b      	uxth	r3, r3
 8000810:	f003 0303 	and.w	r3, r3, #3
 8000814:	4913      	ldr	r1, [pc, #76]	; (8000864 <LCD_Output16BitWord+0xb8>)
 8000816:	4313      	orrs	r3, r2
 8000818:	614b      	str	r3, [r1, #20]
    GPIOD->ODR &= ((data >> 2) & 0x3) | ~(0x3);
 800081a:	4b12      	ldr	r3, [pc, #72]	; (8000864 <LCD_Output16BitWord+0xb8>)
 800081c:	695b      	ldr	r3, [r3, #20]
 800081e:	88fa      	ldrh	r2, [r7, #6]
 8000820:	0892      	lsrs	r2, r2, #2
 8000822:	b292      	uxth	r2, r2
 8000824:	f062 0203 	orn	r2, r2, #3
 8000828:	4611      	mov	r1, r2
 800082a:	4a0e      	ldr	r2, [pc, #56]	; (8000864 <LCD_Output16BitWord+0xb8>)
 800082c:	400b      	ands	r3, r1
 800082e:	6153      	str	r3, [r2, #20]

    GPIOE->ODR |= (data << 3) & ~(0x007F);
 8000830:	4b0d      	ldr	r3, [pc, #52]	; (8000868 <LCD_Output16BitWord+0xbc>)
 8000832:	695a      	ldr	r2, [r3, #20]
 8000834:	88fb      	ldrh	r3, [r7, #6]
 8000836:	00db      	lsls	r3, r3, #3
 8000838:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800083c:	490a      	ldr	r1, [pc, #40]	; (8000868 <LCD_Output16BitWord+0xbc>)
 800083e:	4313      	orrs	r3, r2
 8000840:	614b      	str	r3, [r1, #20]
    GPIOE->ODR &= ((data << 3) & ~(0x007F)) | 0x007F;
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <LCD_Output16BitWord+0xbc>)
 8000844:	695b      	ldr	r3, [r3, #20]
 8000846:	88fa      	ldrh	r2, [r7, #6]
 8000848:	00d2      	lsls	r2, r2, #3
 800084a:	f042 027f 	orr.w	r2, r2, #127	; 0x7f
 800084e:	4611      	mov	r1, r2
 8000850:	4a05      	ldr	r2, [pc, #20]	; (8000868 <LCD_Output16BitWord+0xbc>)
 8000852:	400b      	ands	r3, r1
 8000854:	6153      	str	r3, [r2, #20]
}
 8000856:	bf00      	nop
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	40020c00 	.word	0x40020c00
 8000868:	40021000 	.word	0x40021000

0800086c <LCD_WriteReg>:

void LCD_WriteReg(uint16_t command, uint16_t data){
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	460a      	mov	r2, r1
 8000876:	80fb      	strh	r3, [r7, #6]
 8000878:	4613      	mov	r3, r2
 800087a:	80bb      	strh	r3, [r7, #4]
	LCD_WriteCommand(command);
 800087c:	88fb      	ldrh	r3, [r7, #6]
 800087e:	4618      	mov	r0, r3
 8000880:	f000 f838 	bl	80008f4 <LCD_WriteCommand>
	LCD_WriteData(data);
 8000884:	88bb      	ldrh	r3, [r7, #4]
 8000886:	4618      	mov	r0, r3
 8000888:	f000 f804 	bl	8000894 <LCD_WriteData>
}
 800088c:	bf00      	nop
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <LCD_WriteData>:

void LCD_WriteData(uint16_t data){
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	80fb      	strh	r3, [r7, #6]
	GPIOD->ODR &= ~(0x80); // set PD7 ~CS to 0
 800089e:	4b13      	ldr	r3, [pc, #76]	; (80008ec <LCD_WriteData+0x58>)
 80008a0:	695b      	ldr	r3, [r3, #20]
 80008a2:	4a12      	ldr	r2, [pc, #72]	; (80008ec <LCD_WriteData+0x58>)
 80008a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80008a8:	6153      	str	r3, [r2, #20]
	GPIOE->ODR |= 0x8; // set PE3 (D/~C) to 1 (Data)
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <LCD_WriteData+0x5c>)
 80008ac:	695b      	ldr	r3, [r3, #20]
 80008ae:	4a10      	ldr	r2, [pc, #64]	; (80008f0 <LCD_WriteData+0x5c>)
 80008b0:	f043 0308 	orr.w	r3, r3, #8
 80008b4:	6153      	str	r3, [r2, #20]
	GPIOD->ODR &= ~(0x20); // Pushimpuls WR = 0
 80008b6:	4b0d      	ldr	r3, [pc, #52]	; (80008ec <LCD_WriteData+0x58>)
 80008b8:	695b      	ldr	r3, [r3, #20]
 80008ba:	4a0c      	ldr	r2, [pc, #48]	; (80008ec <LCD_WriteData+0x58>)
 80008bc:	f023 0320 	bic.w	r3, r3, #32
 80008c0:	6153      	str	r3, [r2, #20]
	LCD_Output16BitWord(data);
 80008c2:	88fb      	ldrh	r3, [r7, #6]
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff ff71 	bl	80007ac <LCD_Output16BitWord>
	GPIOD->ODR |= 0x20; // WR = 1
 80008ca:	4b08      	ldr	r3, [pc, #32]	; (80008ec <LCD_WriteData+0x58>)
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	4a07      	ldr	r2, [pc, #28]	; (80008ec <LCD_WriteData+0x58>)
 80008d0:	f043 0320 	orr.w	r3, r3, #32
 80008d4:	6153      	str	r3, [r2, #20]
	GPIOD->ODR |= 0x80; // Chipselect = 1
 80008d6:	4b05      	ldr	r3, [pc, #20]	; (80008ec <LCD_WriteData+0x58>)
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	4a04      	ldr	r2, [pc, #16]	; (80008ec <LCD_WriteData+0x58>)
 80008dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e0:	6153      	str	r3, [r2, #20]
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40020c00 	.word	0x40020c00
 80008f0:	40021000 	.word	0x40021000

080008f4 <LCD_WriteCommand>:

void LCD_WriteCommand(uint16_t data){
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	80fb      	strh	r3, [r7, #6]
	GPIOD->ODR &= ~(0x80); // set PD7 ~CS to 0
 80008fe:	4b13      	ldr	r3, [pc, #76]	; (800094c <LCD_WriteCommand+0x58>)
 8000900:	695b      	ldr	r3, [r3, #20]
 8000902:	4a12      	ldr	r2, [pc, #72]	; (800094c <LCD_WriteCommand+0x58>)
 8000904:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000908:	6153      	str	r3, [r2, #20]
	GPIOE->ODR &= ~(0x8); // set PE3 (D/~C) to 0 (Command)
 800090a:	4b11      	ldr	r3, [pc, #68]	; (8000950 <LCD_WriteCommand+0x5c>)
 800090c:	695b      	ldr	r3, [r3, #20]
 800090e:	4a10      	ldr	r2, [pc, #64]	; (8000950 <LCD_WriteCommand+0x5c>)
 8000910:	f023 0308 	bic.w	r3, r3, #8
 8000914:	6153      	str	r3, [r2, #20]
	GPIOD->ODR &= ~(0x20); // set WR PD5 = 0
 8000916:	4b0d      	ldr	r3, [pc, #52]	; (800094c <LCD_WriteCommand+0x58>)
 8000918:	695b      	ldr	r3, [r3, #20]
 800091a:	4a0c      	ldr	r2, [pc, #48]	; (800094c <LCD_WriteCommand+0x58>)
 800091c:	f023 0320 	bic.w	r3, r3, #32
 8000920:	6153      	str	r3, [r2, #20]
	LCD_Output16BitWord(data);
 8000922:	88fb      	ldrh	r3, [r7, #6]
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff ff41 	bl	80007ac <LCD_Output16BitWord>
	GPIOD->ODR |= 0x20; // set WR PD5 = 1
 800092a:	4b08      	ldr	r3, [pc, #32]	; (800094c <LCD_WriteCommand+0x58>)
 800092c:	695b      	ldr	r3, [r3, #20]
 800092e:	4a07      	ldr	r2, [pc, #28]	; (800094c <LCD_WriteCommand+0x58>)
 8000930:	f043 0320 	orr.w	r3, r3, #32
 8000934:	6153      	str	r3, [r2, #20]
	GPIOD->ODR |= 0x80; // set ~CS PD7 = 1
 8000936:	4b05      	ldr	r3, [pc, #20]	; (800094c <LCD_WriteCommand+0x58>)
 8000938:	695b      	ldr	r3, [r3, #20]
 800093a:	4a04      	ldr	r2, [pc, #16]	; (800094c <LCD_WriteCommand+0x58>)
 800093c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000940:	6153      	str	r3, [r2, #20]
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40020c00 	.word	0x40020c00
 8000950:	40021000 	.word	0x40021000

08000954 <LCD_Init>:

void LCD_Init (void){
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
	// Display-Reset
	GPIOD->ODR &= ~(0x8);
 8000958:	4b35      	ldr	r3, [pc, #212]	; (8000a30 <LCD_Init+0xdc>)
 800095a:	695b      	ldr	r3, [r3, #20]
 800095c:	4a34      	ldr	r2, [pc, #208]	; (8000a30 <LCD_Init+0xdc>)
 800095e:	f023 0308 	bic.w	r3, r3, #8
 8000962:	6153      	str	r3, [r2, #20]
	osDelay(pdMS_TO_TICKS(1));
 8000964:	2001      	movs	r0, #1
 8000966:	f007 fe87 	bl	8008678 <osDelay>
	GPIOD->ODR |= 0x8;
 800096a:	4b31      	ldr	r3, [pc, #196]	; (8000a30 <LCD_Init+0xdc>)
 800096c:	695b      	ldr	r3, [r3, #20]
 800096e:	4a30      	ldr	r2, [pc, #192]	; (8000a30 <LCD_Init+0xdc>)
 8000970:	f043 0308 	orr.w	r3, r3, #8
 8000974:	6153      	str	r3, [r2, #20]
	osDelay(pdMS_TO_TICKS(1));
 8000976:	2001      	movs	r0, #1
 8000978:	f007 fe7e 	bl	8008678 <osDelay>


	LCD_WriteReg(0x0010, 0x0001); /* Enter sleep mode */
 800097c:	2101      	movs	r1, #1
 800097e:	2010      	movs	r0, #16
 8000980:	f7ff ff74 	bl	800086c <LCD_WriteReg>
	LCD_WriteReg(0x001E, 0x00B2); /* Set initial power parameters. */
 8000984:	21b2      	movs	r1, #178	; 0xb2
 8000986:	201e      	movs	r0, #30
 8000988:	f7ff ff70 	bl	800086c <LCD_WriteReg>
	LCD_WriteReg(0x0028, 0x0006); /* Set initial power parameters. */
 800098c:	2106      	movs	r1, #6
 800098e:	2028      	movs	r0, #40	; 0x28
 8000990:	f7ff ff6c 	bl	800086c <LCD_WriteReg>
	LCD_WriteReg(0x0000, 0x0001); /* Start the oscillator.*/
 8000994:	2101      	movs	r1, #1
 8000996:	2000      	movs	r0, #0
 8000998:	f7ff ff68 	bl	800086c <LCD_WriteReg>
	LCD_WriteReg(0x0001, 0x72EF); /* Set pixel format and basic display orientation */
 800099c:	f247 21ef 	movw	r1, #29423	; 0x72ef
 80009a0:	2001      	movs	r0, #1
 80009a2:	f7ff ff63 	bl	800086c <LCD_WriteReg>
	LCD_WriteReg(0x0002, 0x0600);
 80009a6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80009aa:	2002      	movs	r0, #2
 80009ac:	f7ff ff5e 	bl	800086c <LCD_WriteReg>
	LCD_WriteReg(0x0010, 0x0000); /* Exit sleep mode.*/
 80009b0:	2100      	movs	r1, #0
 80009b2:	2010      	movs	r0, #16
 80009b4:	f7ff ff5a 	bl	800086c <LCD_WriteReg>
	//30ms warten weniger geht meist auch
	osDelay(pdMS_TO_TICKS(30));;
 80009b8:	201e      	movs	r0, #30
 80009ba:	f007 fe5d 	bl	8008678 <osDelay>

	LCD_WriteReg(0x0011, 0x6870); /* Configure pixel color format and MCU interface parameters.*/
 80009be:	f646 0170 	movw	r1, #26736	; 0x6870
 80009c2:	2011      	movs	r0, #17
 80009c4:	f7ff ff52 	bl	800086c <LCD_WriteReg>
	LCD_WriteReg(0x0012, 0x0999); /* Set analog parameters */
 80009c8:	f640 1199 	movw	r1, #2457	; 0x999
 80009cc:	2012      	movs	r0, #18
 80009ce:	f7ff ff4d 	bl	800086c <LCD_WriteReg>
	LCD_WriteReg(0x0026, 0x3800);
 80009d2:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 80009d6:	2026      	movs	r0, #38	; 0x26
 80009d8:	f7ff ff48 	bl	800086c <LCD_WriteReg>
	LCD_WriteReg(0x0007, 0x0033); /* Enable the display */
 80009dc:	2133      	movs	r1, #51	; 0x33
 80009de:	2007      	movs	r0, #7
 80009e0:	f7ff ff44 	bl	800086c <LCD_WriteReg>
	LCD_WriteReg(0x000C, 0x0005); /* Set VCIX2 voltage to 6.1V.*/
 80009e4:	2105      	movs	r1, #5
 80009e6:	200c      	movs	r0, #12
 80009e8:	f7ff ff40 	bl	800086c <LCD_WriteReg>
	LCD_WriteReg(0x000D, 0x000A); /* Configure Vlcd63 and VCOMl */
 80009ec:	210a      	movs	r1, #10
 80009ee:	200d      	movs	r0, #13
 80009f0:	f7ff ff3c 	bl	800086c <LCD_WriteReg>
	LCD_WriteReg(0x000E, 0x2E00);
 80009f4:	f44f 5138 	mov.w	r1, #11776	; 0x2e00
 80009f8:	200e      	movs	r0, #14
 80009fa:	f7ff ff37 	bl	800086c <LCD_WriteReg>
	LCD_WriteReg(0x0044, (240-1) << 8); /* Set the display size and ensure that the GRAM window
 80009fe:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 8000a02:	2044      	movs	r0, #68	; 0x44
 8000a04:	f7ff ff32 	bl	800086c <LCD_WriteReg>
	is set to allow access to the full display buffer.*/
	LCD_WriteReg(0x0045, 0x0000);
 8000a08:	2100      	movs	r1, #0
 8000a0a:	2045      	movs	r0, #69	; 0x45
 8000a0c:	f7ff ff2e 	bl	800086c <LCD_WriteReg>
	LCD_WriteReg(0x0046, 320-1);
 8000a10:	f240 113f 	movw	r1, #319	; 0x13f
 8000a14:	2046      	movs	r0, #70	; 0x46
 8000a16:	f7ff ff29 	bl	800086c <LCD_WriteReg>
	LCD_WriteReg(0x004E, 0x0000); /*Set cursor to 0,0 */
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	204e      	movs	r0, #78	; 0x4e
 8000a1e:	f7ff ff25 	bl	800086c <LCD_WriteReg>
	LCD_WriteReg(0x004F, 0x0000);
 8000a22:	2100      	movs	r1, #0
 8000a24:	204f      	movs	r0, #79	; 0x4f
 8000a26:	f7ff ff21 	bl	800086c <LCD_WriteReg>


	//GPIOD->ODR |= 0x2000; // PD13 = 1 Backlight anschalten
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40020c00 	.word	0x40020c00

08000a34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a3a:	f000 fdab 	bl	8001594 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a3e:	f000 f8cd 	bl	8000bdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a42:	f000 f9ff 	bl	8000e44 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a46:	f000 f933 	bl	8000cb0 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000a4a:	f000 f95f 	bl	8000d0c <MX_I2S3_Init>
  MX_SPI1_Init();
 8000a4e:	f000 f98d 	bl	8000d6c <MX_SPI1_Init>
  MX_TIM7_Init();
 8000a52:	f000 f9c1 	bl	8000dd8 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

	// Peripheral GPIOD einschalten
	RCC->AHB1ENR |= 1<<3|1;
 8000a56:	4b47      	ldr	r3, [pc, #284]	; (8000b74 <main+0x140>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a46      	ldr	r2, [pc, #280]	; (8000b74 <main+0x140>)
 8000a5c:	f043 0309 	orr.w	r3, r3, #9
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
	// Peripheral GPIOE einschalten
	RCC->AHB1ENR |= 1<<4|1;
 8000a62:	4b44      	ldr	r3, [pc, #272]	; (8000b74 <main+0x140>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a43      	ldr	r2, [pc, #268]	; (8000b74 <main+0x140>)
 8000a68:	f043 0311 	orr.w	r3, r3, #17
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30

	// GPIO einrichten für Output
	GPIOD->MODER |= 0x55154545;
 8000a6e:	4b42      	ldr	r3, [pc, #264]	; (8000b78 <main+0x144>)
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	4941      	ldr	r1, [pc, #260]	; (8000b78 <main+0x144>)
 8000a74:	4b41      	ldr	r3, [pc, #260]	; (8000b7c <main+0x148>)
 8000a76:	4313      	orrs	r3, r2
 8000a78:	600b      	str	r3, [r1, #0]
	GPIOE->MODER |= 0x55554040;
 8000a7a:	4b41      	ldr	r3, [pc, #260]	; (8000b80 <main+0x14c>)
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	4940      	ldr	r1, [pc, #256]	; (8000b80 <main+0x14c>)
 8000a80:	4b40      	ldr	r3, [pc, #256]	; (8000b84 <main+0x150>)
 8000a82:	4313      	orrs	r3, r2
 8000a84:	600b      	str	r3, [r1, #0]

	// Orange LED konfigurieren
	GPIOD->MODER |= 1<<24;
 8000a86:	4b3c      	ldr	r3, [pc, #240]	; (8000b78 <main+0x144>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a3b      	ldr	r2, [pc, #236]	; (8000b78 <main+0x144>)
 8000a8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a90:	6013      	str	r3, [r2, #0]

	// Gruene LED (Port D12) ausschalten
	GPIOD->ODR &= ~(1<<12);
 8000a92:	4b39      	ldr	r3, [pc, #228]	; (8000b78 <main+0x144>)
 8000a94:	695b      	ldr	r3, [r3, #20]
 8000a96:	4a38      	ldr	r2, [pc, #224]	; (8000b78 <main+0x144>)
 8000a98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000a9c:	6153      	str	r3, [r2, #20]

	//Read auf 1
	GPIOD->MODER 	|= 1<<8;
 8000a9e:	4b36      	ldr	r3, [pc, #216]	; (8000b78 <main+0x144>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a35      	ldr	r2, [pc, #212]	; (8000b78 <main+0x144>)
 8000aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aa8:	6013      	str	r3, [r2, #0]
	GPIOD->ODR		|= 1<<4;
 8000aaa:	4b33      	ldr	r3, [pc, #204]	; (8000b78 <main+0x144>)
 8000aac:	695b      	ldr	r3, [r3, #20]
 8000aae:	4a32      	ldr	r2, [pc, #200]	; (8000b78 <main+0x144>)
 8000ab0:	f043 0310 	orr.w	r3, r3, #16
 8000ab4:	6153      	str	r3, [r2, #20]

	// Hintergrundbeleuchtung
	GPIOD->MODER |= 1<<26;
 8000ab6:	4b30      	ldr	r3, [pc, #192]	; (8000b78 <main+0x144>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a2f      	ldr	r2, [pc, #188]	; (8000b78 <main+0x144>)
 8000abc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ac0:	6013      	str	r3, [r2, #0]
	GPIOD->ODR |= 1<<13;
 8000ac2:	4b2d      	ldr	r3, [pc, #180]	; (8000b78 <main+0x144>)
 8000ac4:	695b      	ldr	r3, [r3, #20]
 8000ac6:	4a2c      	ldr	r2, [pc, #176]	; (8000b78 <main+0x144>)
 8000ac8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000acc:	6153      	str	r3, [r2, #20]

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ace:	f007 fcf7 	bl	80084c0 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of oneMs */
  oneMsHandle = osTimerNew(oneMsFunc, osTimerPeriodic, NULL, &oneMs_attributes);
 8000ad2:	4b2d      	ldr	r3, [pc, #180]	; (8000b88 <main+0x154>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2101      	movs	r1, #1
 8000ad8:	482c      	ldr	r0, [pc, #176]	; (8000b8c <main+0x158>)
 8000ada:	f007 fdfd 	bl	80086d8 <osTimerNew>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	4a2b      	ldr	r2, [pc, #172]	; (8000b90 <main+0x15c>)
 8000ae2:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of logQueue */
  logQueueHandle = osMessageQueueNew (16, 128, &logQueue_attributes);
 8000ae4:	4a2b      	ldr	r2, [pc, #172]	; (8000b94 <main+0x160>)
 8000ae6:	2180      	movs	r1, #128	; 0x80
 8000ae8:	2010      	movs	r0, #16
 8000aea:	f007 fe9f 	bl	800882c <osMessageQueueNew>
 8000aee:	4603      	mov	r3, r0
 8000af0:	4a29      	ldr	r2, [pc, #164]	; (8000b98 <main+0x164>)
 8000af2:	6013      	str	r3, [r2, #0]
  //Handle = xQueueCreate(16,sizeof(uint32_t));
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000af4:	4a29      	ldr	r2, [pc, #164]	; (8000b9c <main+0x168>)
 8000af6:	2100      	movs	r1, #0
 8000af8:	4829      	ldr	r0, [pc, #164]	; (8000ba0 <main+0x16c>)
 8000afa:	f007 fd2b 	bl	8008554 <osThreadNew>
 8000afe:	4603      	mov	r3, r0
 8000b00:	4a28      	ldr	r2, [pc, #160]	; (8000ba4 <main+0x170>)
 8000b02:	6013      	str	r3, [r2, #0]

  /* creation of task1ms */
  task1msHandle = osThreadNew(StartTask02, NULL, &task1ms_attributes);
 8000b04:	4a28      	ldr	r2, [pc, #160]	; (8000ba8 <main+0x174>)
 8000b06:	2100      	movs	r1, #0
 8000b08:	4828      	ldr	r0, [pc, #160]	; (8000bac <main+0x178>)
 8000b0a:	f007 fd23 	bl	8008554 <osThreadNew>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	4a27      	ldr	r2, [pc, #156]	; (8000bb0 <main+0x17c>)
 8000b12:	6013      	str	r3, [r2, #0]

  /* creation of task10ms */
  task10msHandle = osThreadNew(StartTask03, NULL, &task10ms_attributes);
 8000b14:	4a27      	ldr	r2, [pc, #156]	; (8000bb4 <main+0x180>)
 8000b16:	2100      	movs	r1, #0
 8000b18:	4827      	ldr	r0, [pc, #156]	; (8000bb8 <main+0x184>)
 8000b1a:	f007 fd1b 	bl	8008554 <osThreadNew>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	4a26      	ldr	r2, [pc, #152]	; (8000bbc <main+0x188>)
 8000b22:	6013      	str	r3, [r2, #0]

  /* creation of producer01 */
  producer01Handle = osThreadNew(producer01task, NULL, &producer01_attributes);
 8000b24:	4a26      	ldr	r2, [pc, #152]	; (8000bc0 <main+0x18c>)
 8000b26:	2100      	movs	r1, #0
 8000b28:	4826      	ldr	r0, [pc, #152]	; (8000bc4 <main+0x190>)
 8000b2a:	f007 fd13 	bl	8008554 <osThreadNew>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	4a25      	ldr	r2, [pc, #148]	; (8000bc8 <main+0x194>)
 8000b32:	6013      	str	r3, [r2, #0]

  /* creation of consumer01 */
  consumer01Handle = osThreadNew(consumer01task, NULL, &consumer01_attributes);
 8000b34:	4a25      	ldr	r2, [pc, #148]	; (8000bcc <main+0x198>)
 8000b36:	2100      	movs	r1, #0
 8000b38:	4825      	ldr	r0, [pc, #148]	; (8000bd0 <main+0x19c>)
 8000b3a:	f007 fd0b 	bl	8008554 <osThreadNew>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	4a24      	ldr	r2, [pc, #144]	; (8000bd4 <main+0x1a0>)
 8000b42:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  osTimerStart(oneMsHandle,pdMS_TO_TICKS(125));
 8000b44:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <main+0x15c>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	217d      	movs	r1, #125	; 0x7d
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f007 fe40 	bl	80087d0 <osTimerStart>
  LCD_Init();
 8000b50:	f7ff ff00 	bl	8000954 <LCD_Init>
  LCD_ClearDisplay(0xFFFF);
 8000b54:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000b58:	f7ff fe0b 	bl	8000772 <LCD_ClearDisplay>

  LCD_WriteString(0, 0, 0, 0xFFFF, "Test");
 8000b5c:	4b1e      	ldr	r3, [pc, #120]	; (8000bd8 <main+0x1a4>)
 8000b5e:	9300      	str	r3, [sp, #0]
 8000b60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b64:	2200      	movs	r2, #0
 8000b66:	2100      	movs	r1, #0
 8000b68:	2000      	movs	r0, #0
 8000b6a:	f7ff fd79 	bl	8000660 <LCD_WriteString>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000b6e:	f007 fccb 	bl	8008508 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //xTimerCreate("oneMsTimer", pdMS_TO_TICKS(1), pdTRUE, 0, prvOneMsTimer); /////////////////////////


  while (1)
 8000b72:	e7fe      	b.n	8000b72 <main+0x13e>
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40020c00 	.word	0x40020c00
 8000b7c:	55154545 	.word	0x55154545
 8000b80:	40021000 	.word	0x40021000
 8000b84:	55554040 	.word	0x55554040
 8000b88:	0800e710 	.word	0x0800e710
 8000b8c:	0800116d 	.word	0x0800116d
 8000b90:	20000204 	.word	0x20000204
 8000b94:	0800e6f8 	.word	0x0800e6f8
 8000b98:	20000200 	.word	0x20000200
 8000b9c:	0800e644 	.word	0x0800e644
 8000ba0:	08001041 	.word	0x08001041
 8000ba4:	200001ec 	.word	0x200001ec
 8000ba8:	0800e668 	.word	0x0800e668
 8000bac:	0800109d 	.word	0x0800109d
 8000bb0:	200001f0 	.word	0x200001f0
 8000bb4:	0800e68c 	.word	0x0800e68c
 8000bb8:	080010ad 	.word	0x080010ad
 8000bbc:	200001f4 	.word	0x200001f4
 8000bc0:	0800e6b0 	.word	0x0800e6b0
 8000bc4:	080010bd 	.word	0x080010bd
 8000bc8:	200001f8 	.word	0x200001f8
 8000bcc:	0800e6d4 	.word	0x0800e6d4
 8000bd0:	08001111 	.word	0x08001111
 8000bd4:	200001fc 	.word	0x200001fc
 8000bd8:	0800c5f4 	.word	0x0800c5f4

08000bdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b094      	sub	sp, #80	; 0x50
 8000be0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000be2:	f107 0320 	add.w	r3, r7, #32
 8000be6:	2230      	movs	r2, #48	; 0x30
 8000be8:	2100      	movs	r1, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f00b f868 	bl	800bcc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf0:	f107 030c 	add.w	r3, r7, #12
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c00:	2300      	movs	r3, #0
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	4b28      	ldr	r3, [pc, #160]	; (8000ca8 <SystemClock_Config+0xcc>)
 8000c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c08:	4a27      	ldr	r2, [pc, #156]	; (8000ca8 <SystemClock_Config+0xcc>)
 8000c0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c10:	4b25      	ldr	r3, [pc, #148]	; (8000ca8 <SystemClock_Config+0xcc>)
 8000c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	4b22      	ldr	r3, [pc, #136]	; (8000cac <SystemClock_Config+0xd0>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a21      	ldr	r2, [pc, #132]	; (8000cac <SystemClock_Config+0xd0>)
 8000c26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c2a:	6013      	str	r3, [r2, #0]
 8000c2c:	4b1f      	ldr	r3, [pc, #124]	; (8000cac <SystemClock_Config+0xd0>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c42:	2302      	movs	r3, #2
 8000c44:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c4c:	2308      	movs	r3, #8
 8000c4e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c50:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000c54:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c56:	2302      	movs	r3, #2
 8000c58:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c5a:	2307      	movs	r3, #7
 8000c5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c5e:	f107 0320 	add.w	r3, r7, #32
 8000c62:	4618      	mov	r0, r3
 8000c64:	f003 fa14 	bl	8004090 <HAL_RCC_OscConfig>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000c6e:	f000 fa8d 	bl	800118c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c72:	230f      	movs	r3, #15
 8000c74:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c76:	2302      	movs	r3, #2
 8000c78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c7e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c82:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c88:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c8a:	f107 030c 	add.w	r3, r7, #12
 8000c8e:	2105      	movs	r1, #5
 8000c90:	4618      	mov	r0, r3
 8000c92:	f003 fc75 	bl	8004580 <HAL_RCC_ClockConfig>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000c9c:	f000 fa76 	bl	800118c <Error_Handler>
  }
}
 8000ca0:	bf00      	nop
 8000ca2:	3750      	adds	r7, #80	; 0x50
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40007000 	.word	0x40007000

08000cb0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cb4:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <MX_I2C1_Init+0x50>)
 8000cb6:	4a13      	ldr	r2, [pc, #76]	; (8000d04 <MX_I2C1_Init+0x54>)
 8000cb8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <MX_I2C1_Init+0x50>)
 8000cbc:	4a12      	ldr	r2, [pc, #72]	; (8000d08 <MX_I2C1_Init+0x58>)
 8000cbe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cc0:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <MX_I2C1_Init+0x50>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <MX_I2C1_Init+0x50>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <MX_I2C1_Init+0x50>)
 8000cce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cd2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cd4:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <MX_I2C1_Init+0x50>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000cda:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <MX_I2C1_Init+0x50>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <MX_I2C1_Init+0x50>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <MX_I2C1_Init+0x50>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cec:	4804      	ldr	r0, [pc, #16]	; (8000d00 <MX_I2C1_Init+0x50>)
 8000cee:	f002 fbeb 	bl	80034c8 <HAL_I2C_Init>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cf8:	f000 fa48 	bl	800118c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	200000b0 	.word	0x200000b0
 8000d04:	40005400 	.word	0x40005400
 8000d08:	000186a0 	.word	0x000186a0

08000d0c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000d10:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <MX_I2S3_Init+0x54>)
 8000d12:	4a14      	ldr	r2, [pc, #80]	; (8000d64 <MX_I2S3_Init+0x58>)
 8000d14:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000d16:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <MX_I2S3_Init+0x54>)
 8000d18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d1c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000d1e:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <MX_I2S3_Init+0x54>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000d24:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <MX_I2S3_Init+0x54>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000d2a:	4b0d      	ldr	r3, [pc, #52]	; (8000d60 <MX_I2S3_Init+0x54>)
 8000d2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d30:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000d32:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <MX_I2S3_Init+0x54>)
 8000d34:	4a0c      	ldr	r2, [pc, #48]	; (8000d68 <MX_I2S3_Init+0x5c>)
 8000d36:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000d38:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <MX_I2S3_Init+0x54>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000d3e:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <MX_I2S3_Init+0x54>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000d44:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <MX_I2S3_Init+0x54>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000d4a:	4805      	ldr	r0, [pc, #20]	; (8000d60 <MX_I2S3_Init+0x54>)
 8000d4c:	f002 fd00 	bl	8003750 <HAL_I2S_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000d56:	f000 fa19 	bl	800118c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000104 	.word	0x20000104
 8000d64:	40003c00 	.word	0x40003c00
 8000d68:	00017700 	.word	0x00017700

08000d6c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d70:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <MX_SPI1_Init+0x64>)
 8000d72:	4a18      	ldr	r2, [pc, #96]	; (8000dd4 <MX_SPI1_Init+0x68>)
 8000d74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d76:	4b16      	ldr	r3, [pc, #88]	; (8000dd0 <MX_SPI1_Init+0x64>)
 8000d78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d7e:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <MX_SPI1_Init+0x64>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <MX_SPI1_Init+0x64>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d8a:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <MX_SPI1_Init+0x64>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d90:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <MX_SPI1_Init+0x64>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d96:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <MX_SPI1_Init+0x64>)
 8000d98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d9c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <MX_SPI1_Init+0x64>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000da4:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <MX_SPI1_Init+0x64>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000daa:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <MX_SPI1_Init+0x64>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000db0:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <MX_SPI1_Init+0x64>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000db6:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <MX_SPI1_Init+0x64>)
 8000db8:	220a      	movs	r2, #10
 8000dba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dbc:	4804      	ldr	r0, [pc, #16]	; (8000dd0 <MX_SPI1_Init+0x64>)
 8000dbe:	f003 ff2b 	bl	8004c18 <HAL_SPI_Init>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000dc8:	f000 f9e0 	bl	800118c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000dcc:	bf00      	nop
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	2000014c 	.word	0x2000014c
 8000dd4:	40013000 	.word	0x40013000

08000dd8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dde:	463b      	mov	r3, r7
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000de6:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <MX_TIM7_Init+0x64>)
 8000de8:	4a15      	ldr	r2, [pc, #84]	; (8000e40 <MX_TIM7_Init+0x68>)
 8000dea:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 84;
 8000dec:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <MX_TIM7_Init+0x64>)
 8000dee:	2254      	movs	r2, #84	; 0x54
 8000df0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df2:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <MX_TIM7_Init+0x64>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8000df8:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <MX_TIM7_Init+0x64>)
 8000dfa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dfe:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e00:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <MX_TIM7_Init+0x64>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000e06:	480d      	ldr	r0, [pc, #52]	; (8000e3c <MX_TIM7_Init+0x64>)
 8000e08:	f003 ff8f 	bl	8004d2a <HAL_TIM_Base_Init>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000e12:	f000 f9bb 	bl	800118c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e16:	2300      	movs	r3, #0
 8000e18:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000e1e:	463b      	mov	r3, r7
 8000e20:	4619      	mov	r1, r3
 8000e22:	4806      	ldr	r0, [pc, #24]	; (8000e3c <MX_TIM7_Init+0x64>)
 8000e24:	f004 f870 	bl	8004f08 <HAL_TIMEx_MasterConfigSynchronization>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000e2e:	f000 f9ad 	bl	800118c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	200001a4 	.word	0x200001a4
 8000e40:	40001400 	.word	0x40001400

08000e44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08c      	sub	sp, #48	; 0x30
 8000e48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4a:	f107 031c 	add.w	r3, r7, #28
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
 8000e56:	60da      	str	r2, [r3, #12]
 8000e58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61bb      	str	r3, [r7, #24]
 8000e5e:	4b72      	ldr	r3, [pc, #456]	; (8001028 <MX_GPIO_Init+0x1e4>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a71      	ldr	r2, [pc, #452]	; (8001028 <MX_GPIO_Init+0x1e4>)
 8000e64:	f043 0310 	orr.w	r3, r3, #16
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6a:	4b6f      	ldr	r3, [pc, #444]	; (8001028 <MX_GPIO_Init+0x1e4>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	f003 0310 	and.w	r3, r3, #16
 8000e72:	61bb      	str	r3, [r7, #24]
 8000e74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
 8000e7a:	4b6b      	ldr	r3, [pc, #428]	; (8001028 <MX_GPIO_Init+0x1e4>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a6a      	ldr	r2, [pc, #424]	; (8001028 <MX_GPIO_Init+0x1e4>)
 8000e80:	f043 0304 	orr.w	r3, r3, #4
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b68      	ldr	r3, [pc, #416]	; (8001028 <MX_GPIO_Init+0x1e4>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f003 0304 	and.w	r3, r3, #4
 8000e8e:	617b      	str	r3, [r7, #20]
 8000e90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	613b      	str	r3, [r7, #16]
 8000e96:	4b64      	ldr	r3, [pc, #400]	; (8001028 <MX_GPIO_Init+0x1e4>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	4a63      	ldr	r2, [pc, #396]	; (8001028 <MX_GPIO_Init+0x1e4>)
 8000e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea2:	4b61      	ldr	r3, [pc, #388]	; (8001028 <MX_GPIO_Init+0x1e4>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	4b5d      	ldr	r3, [pc, #372]	; (8001028 <MX_GPIO_Init+0x1e4>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	4a5c      	ldr	r2, [pc, #368]	; (8001028 <MX_GPIO_Init+0x1e4>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebe:	4b5a      	ldr	r3, [pc, #360]	; (8001028 <MX_GPIO_Init+0x1e4>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60bb      	str	r3, [r7, #8]
 8000ece:	4b56      	ldr	r3, [pc, #344]	; (8001028 <MX_GPIO_Init+0x1e4>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	4a55      	ldr	r2, [pc, #340]	; (8001028 <MX_GPIO_Init+0x1e4>)
 8000ed4:	f043 0302 	orr.w	r3, r3, #2
 8000ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eda:	4b53      	ldr	r3, [pc, #332]	; (8001028 <MX_GPIO_Init+0x1e4>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	f003 0302 	and.w	r3, r3, #2
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	607b      	str	r3, [r7, #4]
 8000eea:	4b4f      	ldr	r3, [pc, #316]	; (8001028 <MX_GPIO_Init+0x1e4>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a4e      	ldr	r2, [pc, #312]	; (8001028 <MX_GPIO_Init+0x1e4>)
 8000ef0:	f043 0308 	orr.w	r3, r3, #8
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4b4c      	ldr	r3, [pc, #304]	; (8001028 <MX_GPIO_Init+0x1e4>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f003 0308 	and.w	r3, r3, #8
 8000efe:	607b      	str	r3, [r7, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2108      	movs	r1, #8
 8000f06:	4849      	ldr	r0, [pc, #292]	; (800102c <MX_GPIO_Init+0x1e8>)
 8000f08:	f000 fea0 	bl	8001c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	2101      	movs	r1, #1
 8000f10:	4847      	ldr	r0, [pc, #284]	; (8001030 <MX_GPIO_Init+0x1ec>)
 8000f12:	f000 fe9b 	bl	8001c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, green_led_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000f16:	2200      	movs	r2, #0
 8000f18:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000f1c:	4845      	ldr	r0, [pc, #276]	; (8001034 <MX_GPIO_Init+0x1f0>)
 8000f1e:	f000 fe95 	bl	8001c4c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000f22:	2308      	movs	r3, #8
 8000f24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f26:	2301      	movs	r3, #1
 8000f28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000f32:	f107 031c 	add.w	r3, r7, #28
 8000f36:	4619      	mov	r1, r3
 8000f38:	483c      	ldr	r0, [pc, #240]	; (800102c <MX_GPIO_Init+0x1e8>)
 8000f3a:	f000 fcd3 	bl	80018e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f42:	2301      	movs	r3, #1
 8000f44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f4e:	f107 031c 	add.w	r3, r7, #28
 8000f52:	4619      	mov	r1, r3
 8000f54:	4836      	ldr	r0, [pc, #216]	; (8001030 <MX_GPIO_Init+0x1ec>)
 8000f56:	f000 fcc5 	bl	80018e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000f5a:	2308      	movs	r3, #8
 8000f5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	2300      	movs	r3, #0
 8000f68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f6a:	2305      	movs	r3, #5
 8000f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000f6e:	f107 031c 	add.w	r3, r7, #28
 8000f72:	4619      	mov	r1, r3
 8000f74:	482e      	ldr	r0, [pc, #184]	; (8001030 <MX_GPIO_Init+0x1ec>)
 8000f76:	f000 fcb5 	bl	80018e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : blue_button_Pin */
  GPIO_InitStruct.Pin = blue_button_Pin;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f7e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000f82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(blue_button_GPIO_Port, &GPIO_InitStruct);
 8000f88:	f107 031c 	add.w	r3, r7, #28
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	482a      	ldr	r0, [pc, #168]	; (8001038 <MX_GPIO_Init+0x1f4>)
 8000f90:	f000 fca8 	bl	80018e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000f94:	2304      	movs	r3, #4
 8000f96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000fa0:	f107 031c 	add.w	r3, r7, #28
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4825      	ldr	r0, [pc, #148]	; (800103c <MX_GPIO_Init+0x1f8>)
 8000fa8:	f000 fc9c 	bl	80018e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000fac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fbe:	2305      	movs	r3, #5
 8000fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000fc2:	f107 031c 	add.w	r3, r7, #28
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	481c      	ldr	r0, [pc, #112]	; (800103c <MX_GPIO_Init+0x1f8>)
 8000fca:	f000 fc8b 	bl	80018e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : green_led_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = green_led_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000fce:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000fd2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fe0:	f107 031c 	add.w	r3, r7, #28
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4813      	ldr	r0, [pc, #76]	; (8001034 <MX_GPIO_Init+0x1f0>)
 8000fe8:	f000 fc7c 	bl	80018e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000fec:	2320      	movs	r3, #32
 8000fee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ff8:	f107 031c 	add.w	r3, r7, #28
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	480d      	ldr	r0, [pc, #52]	; (8001034 <MX_GPIO_Init+0x1f0>)
 8001000:	f000 fc70 	bl	80018e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001004:	2302      	movs	r3, #2
 8001006:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001008:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800100c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001012:	f107 031c 	add.w	r3, r7, #28
 8001016:	4619      	mov	r1, r3
 8001018:	4804      	ldr	r0, [pc, #16]	; (800102c <MX_GPIO_Init+0x1e8>)
 800101a:	f000 fc63 	bl	80018e4 <HAL_GPIO_Init>

}
 800101e:	bf00      	nop
 8001020:	3730      	adds	r7, #48	; 0x30
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40023800 	.word	0x40023800
 800102c:	40021000 	.word	0x40021000
 8001030:	40020800 	.word	0x40020800
 8001034:	40020c00 	.word	0x40020c00
 8001038:	40020000 	.word	0x40020000
 800103c:	40020400 	.word	0x40020400

08001040 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001048:	f00a faf0 	bl	800b62c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
	if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)){
 800104c:	2101      	movs	r1, #1
 800104e:	4811      	ldr	r0, [pc, #68]	; (8001094 <StartDefaultTask+0x54>)
 8001050:	f000 fde4 	bl	8001c1c <HAL_GPIO_ReadPin>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d012      	beq.n	8001080 <StartDefaultTask+0x40>
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,GPIO_PIN_SET);
 800105a:	2201      	movs	r2, #1
 800105c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001060:	480d      	ldr	r0, [pc, #52]	; (8001098 <StartDefaultTask+0x58>)
 8001062:	f000 fdf3 	bl	8001c4c <HAL_GPIO_WritePin>
		osDelay(500);
 8001066:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800106a:	f007 fb05 	bl	8008678 <osDelay>
		HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);
 800106e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001072:	4809      	ldr	r0, [pc, #36]	; (8001098 <StartDefaultTask+0x58>)
 8001074:	f000 fe03 	bl	8001c7e <HAL_GPIO_TogglePin>
		osDelay(500);
 8001078:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800107c:	f007 fafc 	bl	8008678 <osDelay>
	}
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,GPIO_PIN_RESET);
 8001080:	2200      	movs	r2, #0
 8001082:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001086:	4804      	ldr	r0, [pc, #16]	; (8001098 <StartDefaultTask+0x58>)
 8001088:	f000 fde0 	bl	8001c4c <HAL_GPIO_WritePin>

    osDelay(1);
 800108c:	2001      	movs	r0, #1
 800108e:	f007 faf3 	bl	8008678 <osDelay>
	if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)){
 8001092:	e7db      	b.n	800104c <StartDefaultTask+0xc>
 8001094:	40020000 	.word	0x40020000
 8001098:	40020c00 	.word	0x40020c00

0800109c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f007 fae7 	bl	8008678 <osDelay>
 80010aa:	e7fb      	b.n	80010a4 <StartTask02+0x8>

080010ac <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80010b4:	2001      	movs	r0, #1
 80010b6:	f007 fadf 	bl	8008678 <osDelay>
 80010ba:	e7fb      	b.n	80010b4 <StartTask03+0x8>

080010bc <producer01task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_producer01task */
void producer01task(void *argument)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08e      	sub	sp, #56	; 0x38
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN producer01task */
  int nr = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	637b      	str	r3, [r7, #52]	; 0x34
  /* Infinite loop */
  for(;;)
  {
	  char message[40] = "";
 80010c8:	2300      	movs	r3, #0
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	f107 0310 	add.w	r3, r7, #16
 80010d0:	2224      	movs	r2, #36	; 0x24
 80010d2:	2100      	movs	r1, #0
 80010d4:	4618      	mov	r0, r3
 80010d6:	f00a fdf3 	bl	800bcc0 <memset>
	  sprintf(message,"Test %d",nr);
 80010da:	f107 030c 	add.w	r3, r7, #12
 80010de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80010e0:	4909      	ldr	r1, [pc, #36]	; (8001108 <producer01task+0x4c>)
 80010e2:	4618      	mov	r0, r3
 80010e4:	f00a fee4 	bl	800beb0 <siprintf>
	  nr++;
 80010e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ea:	3301      	adds	r3, #1
 80010ec:	637b      	str	r3, [r7, #52]	; 0x34
	  //xQueueSendToFront(logQueueHandle,&message);
	  //osMessagePut(logQueueHandle,(uint32_t)message,osWaitForever);
	  osMessageQueuePut(logQueueHandle, &message, 0U, 0U);
 80010ee:	4b07      	ldr	r3, [pc, #28]	; (800110c <producer01task+0x50>)
 80010f0:	6818      	ldr	r0, [r3, #0]
 80010f2:	f107 010c 	add.w	r1, r7, #12
 80010f6:	2300      	movs	r3, #0
 80010f8:	2200      	movs	r2, #0
 80010fa:	f007 fc0b 	bl	8008914 <osMessageQueuePut>
	  osDelay(1000);
 80010fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001102:	f007 fab9 	bl	8008678 <osDelay>
  {
 8001106:	e7df      	b.n	80010c8 <producer01task+0xc>
 8001108:	0800c5fc 	.word	0x0800c5fc
 800110c:	20000200 	.word	0x20000200

08001110 <consumer01task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_consumer01task */
void consumer01task(void *argument)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b0a4      	sub	sp, #144	; 0x90
 8001114:	af02      	add	r7, sp, #8
 8001116:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN consumer01task */
	LCD_WriteString(0, 15, 0, 0xFFFF, "Check Queue every 1.5s");
 8001118:	4b12      	ldr	r3, [pc, #72]	; (8001164 <consumer01task+0x54>)
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001120:	2200      	movs	r2, #0
 8001122:	210f      	movs	r1, #15
 8001124:	2000      	movs	r0, #0
 8001126:	f7ff fa9b 	bl	8000660 <LCD_WriteString>
	char message[128] = "";
 800112a:	2300      	movs	r3, #0
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	f107 030c 	add.w	r3, r7, #12
 8001132:	227c      	movs	r2, #124	; 0x7c
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f00a fdc2 	bl	800bcc0 <memset>
  /* Infinite loop */
  for(;;)
  {
	  osMessageQueueGet(logQueueHandle, &message, NULL, osWaitForever);
 800113c:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <consumer01task+0x58>)
 800113e:	6818      	ldr	r0, [r3, #0]
 8001140:	f107 0108 	add.w	r1, r7, #8
 8001144:	f04f 33ff 	mov.w	r3, #4294967295
 8001148:	2200      	movs	r2, #0
 800114a:	f007 fc43 	bl	80089d4 <osMessageQueueGet>
	  LCD_WriteString(5, 50, 0, 0xFFFF, message);
 800114e:	f107 0308 	add.w	r3, r7, #8
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001158:	2200      	movs	r2, #0
 800115a:	2132      	movs	r1, #50	; 0x32
 800115c:	2005      	movs	r0, #5
 800115e:	f7ff fa7f 	bl	8000660 <LCD_WriteString>
	  osMessageQueueGet(logQueueHandle, &message, NULL, osWaitForever);
 8001162:	e7eb      	b.n	800113c <consumer01task+0x2c>
 8001164:	0800c604 	.word	0x0800c604
 8001168:	20000200 	.word	0x20000200

0800116c <oneMsFunc>:
  /* USER CODE END consumer01task */
}

/* oneMsFunc function */
void oneMsFunc(void *argument)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
//		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13,GPIO_PIN_RESET);
//	}else if(counter >= 250){
//		counter = 0;
//	}

	HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_15);
 8001174:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001178:	4803      	ldr	r0, [pc, #12]	; (8001188 <oneMsFunc+0x1c>)
 800117a:	f000 fd80 	bl	8001c7e <HAL_GPIO_TogglePin>


  /* USER CODE END oneMsFunc */
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40020c00 	.word	0x40020c00

0800118c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001190:	b672      	cpsid	i
}
 8001192:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001194:	e7fe      	b.n	8001194 <Error_Handler+0x8>
	...

08001198 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	607b      	str	r3, [r7, #4]
 80011a2:	4b12      	ldr	r3, [pc, #72]	; (80011ec <HAL_MspInit+0x54>)
 80011a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a6:	4a11      	ldr	r2, [pc, #68]	; (80011ec <HAL_MspInit+0x54>)
 80011a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ac:	6453      	str	r3, [r2, #68]	; 0x44
 80011ae:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <HAL_MspInit+0x54>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	603b      	str	r3, [r7, #0]
 80011be:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <HAL_MspInit+0x54>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <HAL_MspInit+0x54>)
 80011c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ca:	4b08      	ldr	r3, [pc, #32]	; (80011ec <HAL_MspInit+0x54>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d2:	603b      	str	r3, [r7, #0]
 80011d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011d6:	2200      	movs	r2, #0
 80011d8:	210f      	movs	r1, #15
 80011da:	f06f 0001 	mvn.w	r0, #1
 80011de:	f000 fb4a 	bl	8001876 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40023800 	.word	0x40023800

080011f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08a      	sub	sp, #40	; 0x28
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a19      	ldr	r2, [pc, #100]	; (8001274 <HAL_I2C_MspInit+0x84>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d12c      	bne.n	800126c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]
 8001216:	4b18      	ldr	r3, [pc, #96]	; (8001278 <HAL_I2C_MspInit+0x88>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a17      	ldr	r2, [pc, #92]	; (8001278 <HAL_I2C_MspInit+0x88>)
 800121c:	f043 0302 	orr.w	r3, r3, #2
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b15      	ldr	r3, [pc, #84]	; (8001278 <HAL_I2C_MspInit+0x88>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	613b      	str	r3, [r7, #16]
 800122c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800122e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001232:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001234:	2312      	movs	r3, #18
 8001236:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001238:	2301      	movs	r3, #1
 800123a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123c:	2300      	movs	r3, #0
 800123e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001240:	2304      	movs	r3, #4
 8001242:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	4619      	mov	r1, r3
 800124a:	480c      	ldr	r0, [pc, #48]	; (800127c <HAL_I2C_MspInit+0x8c>)
 800124c:	f000 fb4a 	bl	80018e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001250:	2300      	movs	r3, #0
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	4b08      	ldr	r3, [pc, #32]	; (8001278 <HAL_I2C_MspInit+0x88>)
 8001256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001258:	4a07      	ldr	r2, [pc, #28]	; (8001278 <HAL_I2C_MspInit+0x88>)
 800125a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800125e:	6413      	str	r3, [r2, #64]	; 0x40
 8001260:	4b05      	ldr	r3, [pc, #20]	; (8001278 <HAL_I2C_MspInit+0x88>)
 8001262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800126c:	bf00      	nop
 800126e:	3728      	adds	r7, #40	; 0x28
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40005400 	.word	0x40005400
 8001278:	40023800 	.word	0x40023800
 800127c:	40020400 	.word	0x40020400

08001280 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08e      	sub	sp, #56	; 0x38
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a31      	ldr	r2, [pc, #196]	; (8001370 <HAL_I2S_MspInit+0xf0>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d15a      	bne.n	8001366 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80012b0:	2301      	movs	r3, #1
 80012b2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80012b4:	23c0      	movs	r3, #192	; 0xc0
 80012b6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80012b8:	2302      	movs	r3, #2
 80012ba:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	4618      	mov	r0, r3
 80012c2:	f003 fb69 	bl	8004998 <HAL_RCCEx_PeriphCLKConfig>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80012cc:	f7ff ff5e 	bl	800118c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80012d0:	2300      	movs	r3, #0
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	4b27      	ldr	r3, [pc, #156]	; (8001374 <HAL_I2S_MspInit+0xf4>)
 80012d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d8:	4a26      	ldr	r2, [pc, #152]	; (8001374 <HAL_I2S_MspInit+0xf4>)
 80012da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012de:	6413      	str	r3, [r2, #64]	; 0x40
 80012e0:	4b24      	ldr	r3, [pc, #144]	; (8001374 <HAL_I2S_MspInit+0xf4>)
 80012e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012e8:	613b      	str	r3, [r7, #16]
 80012ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ec:	2300      	movs	r3, #0
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	4b20      	ldr	r3, [pc, #128]	; (8001374 <HAL_I2S_MspInit+0xf4>)
 80012f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f4:	4a1f      	ldr	r2, [pc, #124]	; (8001374 <HAL_I2S_MspInit+0xf4>)
 80012f6:	f043 0301 	orr.w	r3, r3, #1
 80012fa:	6313      	str	r3, [r2, #48]	; 0x30
 80012fc:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <HAL_I2S_MspInit+0xf4>)
 80012fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001300:	f003 0301 	and.w	r3, r3, #1
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001308:	2300      	movs	r3, #0
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	4b19      	ldr	r3, [pc, #100]	; (8001374 <HAL_I2S_MspInit+0xf4>)
 800130e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001310:	4a18      	ldr	r2, [pc, #96]	; (8001374 <HAL_I2S_MspInit+0xf4>)
 8001312:	f043 0304 	orr.w	r3, r3, #4
 8001316:	6313      	str	r3, [r2, #48]	; 0x30
 8001318:	4b16      	ldr	r3, [pc, #88]	; (8001374 <HAL_I2S_MspInit+0xf4>)
 800131a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131c:	f003 0304 	and.w	r3, r3, #4
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001324:	2310      	movs	r3, #16
 8001326:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001328:	2302      	movs	r3, #2
 800132a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001330:	2300      	movs	r3, #0
 8001332:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001334:	2306      	movs	r3, #6
 8001336:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001338:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800133c:	4619      	mov	r1, r3
 800133e:	480e      	ldr	r0, [pc, #56]	; (8001378 <HAL_I2S_MspInit+0xf8>)
 8001340:	f000 fad0 	bl	80018e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001344:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2300      	movs	r3, #0
 8001354:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001356:	2306      	movs	r3, #6
 8001358:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800135a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135e:	4619      	mov	r1, r3
 8001360:	4806      	ldr	r0, [pc, #24]	; (800137c <HAL_I2S_MspInit+0xfc>)
 8001362:	f000 fabf 	bl	80018e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001366:	bf00      	nop
 8001368:	3738      	adds	r7, #56	; 0x38
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40003c00 	.word	0x40003c00
 8001374:	40023800 	.word	0x40023800
 8001378:	40020000 	.word	0x40020000
 800137c:	40020800 	.word	0x40020800

08001380 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08a      	sub	sp, #40	; 0x28
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a19      	ldr	r2, [pc, #100]	; (8001404 <HAL_SPI_MspInit+0x84>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d12b      	bne.n	80013fa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	613b      	str	r3, [r7, #16]
 80013a6:	4b18      	ldr	r3, [pc, #96]	; (8001408 <HAL_SPI_MspInit+0x88>)
 80013a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013aa:	4a17      	ldr	r2, [pc, #92]	; (8001408 <HAL_SPI_MspInit+0x88>)
 80013ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013b0:	6453      	str	r3, [r2, #68]	; 0x44
 80013b2:	4b15      	ldr	r3, [pc, #84]	; (8001408 <HAL_SPI_MspInit+0x88>)
 80013b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013ba:	613b      	str	r3, [r7, #16]
 80013bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	4b11      	ldr	r3, [pc, #68]	; (8001408 <HAL_SPI_MspInit+0x88>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	4a10      	ldr	r2, [pc, #64]	; (8001408 <HAL_SPI_MspInit+0x88>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	6313      	str	r3, [r2, #48]	; 0x30
 80013ce:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <HAL_SPI_MspInit+0x88>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80013da:	23e0      	movs	r3, #224	; 0xe0
 80013dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	2302      	movs	r3, #2
 80013e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2300      	movs	r3, #0
 80013e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013ea:	2305      	movs	r3, #5
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	4619      	mov	r1, r3
 80013f4:	4805      	ldr	r0, [pc, #20]	; (800140c <HAL_SPI_MspInit+0x8c>)
 80013f6:	f000 fa75 	bl	80018e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80013fa:	bf00      	nop
 80013fc:	3728      	adds	r7, #40	; 0x28
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40013000 	.word	0x40013000
 8001408:	40023800 	.word	0x40023800
 800140c:	40020000 	.word	0x40020000

08001410 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a0b      	ldr	r2, [pc, #44]	; (800144c <HAL_TIM_Base_MspInit+0x3c>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d10d      	bne.n	800143e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <HAL_TIM_Base_MspInit+0x40>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	4a09      	ldr	r2, [pc, #36]	; (8001450 <HAL_TIM_Base_MspInit+0x40>)
 800142c:	f043 0320 	orr.w	r3, r3, #32
 8001430:	6413      	str	r3, [r2, #64]	; 0x40
 8001432:	4b07      	ldr	r3, [pc, #28]	; (8001450 <HAL_TIM_Base_MspInit+0x40>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	f003 0320 	and.w	r3, r3, #32
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800143e:	bf00      	nop
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	40001400 	.word	0x40001400
 8001450:	40023800 	.word	0x40023800

08001454 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001458:	e7fe      	b.n	8001458 <NMI_Handler+0x4>

0800145a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800145e:	e7fe      	b.n	800145e <HardFault_Handler+0x4>

08001460 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001464:	e7fe      	b.n	8001464 <MemManage_Handler+0x4>

08001466 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800146a:	e7fe      	b.n	800146a <BusFault_Handler+0x4>

0800146c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001470:	e7fe      	b.n	8001470 <UsageFault_Handler+0x4>

08001472 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001484:	f000 f8d8 	bl	8001638 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001488:	f008 ffae 	bl	800a3e8 <xTaskGetSchedulerState>
 800148c:	4603      	mov	r3, r0
 800148e:	2b01      	cmp	r3, #1
 8001490:	d001      	beq.n	8001496 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001492:	f009 fe51 	bl	800b138 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
	...

0800149c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80014a0:	4802      	ldr	r0, [pc, #8]	; (80014ac <OTG_FS_IRQHandler+0x10>)
 80014a2:	f000 fe71 	bl	8002188 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20004f6c 	.word	0x20004f6c

080014b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014b8:	4a14      	ldr	r2, [pc, #80]	; (800150c <_sbrk+0x5c>)
 80014ba:	4b15      	ldr	r3, [pc, #84]	; (8001510 <_sbrk+0x60>)
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014c4:	4b13      	ldr	r3, [pc, #76]	; (8001514 <_sbrk+0x64>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d102      	bne.n	80014d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014cc:	4b11      	ldr	r3, [pc, #68]	; (8001514 <_sbrk+0x64>)
 80014ce:	4a12      	ldr	r2, [pc, #72]	; (8001518 <_sbrk+0x68>)
 80014d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014d2:	4b10      	ldr	r3, [pc, #64]	; (8001514 <_sbrk+0x64>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4413      	add	r3, r2
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d207      	bcs.n	80014f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014e0:	f00a fba6 	bl	800bc30 <__errno>
 80014e4:	4603      	mov	r3, r0
 80014e6:	220c      	movs	r2, #12
 80014e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ea:	f04f 33ff 	mov.w	r3, #4294967295
 80014ee:	e009      	b.n	8001504 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014f0:	4b08      	ldr	r3, [pc, #32]	; (8001514 <_sbrk+0x64>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014f6:	4b07      	ldr	r3, [pc, #28]	; (8001514 <_sbrk+0x64>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4413      	add	r3, r2
 80014fe:	4a05      	ldr	r2, [pc, #20]	; (8001514 <_sbrk+0x64>)
 8001500:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001502:	68fb      	ldr	r3, [r7, #12]
}
 8001504:	4618      	mov	r0, r3
 8001506:	3718      	adds	r7, #24
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20020000 	.word	0x20020000
 8001510:	00000400 	.word	0x00000400
 8001514:	20000208 	.word	0x20000208
 8001518:	20005280 	.word	0x20005280

0800151c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <SystemInit+0x20>)
 8001522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001526:	4a05      	ldr	r2, [pc, #20]	; (800153c <SystemInit+0x20>)
 8001528:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800152c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001540:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001578 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001544:	480d      	ldr	r0, [pc, #52]	; (800157c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001546:	490e      	ldr	r1, [pc, #56]	; (8001580 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001548:	4a0e      	ldr	r2, [pc, #56]	; (8001584 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800154a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800154c:	e002      	b.n	8001554 <LoopCopyDataInit>

0800154e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800154e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001550:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001552:	3304      	adds	r3, #4

08001554 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001554:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001556:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001558:	d3f9      	bcc.n	800154e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800155a:	4a0b      	ldr	r2, [pc, #44]	; (8001588 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800155c:	4c0b      	ldr	r4, [pc, #44]	; (800158c <LoopFillZerobss+0x26>)
  movs r3, #0
 800155e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001560:	e001      	b.n	8001566 <LoopFillZerobss>

08001562 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001562:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001564:	3204      	adds	r2, #4

08001566 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001566:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001568:	d3fb      	bcc.n	8001562 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800156a:	f7ff ffd7 	bl	800151c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800156e:	f00a fb65 	bl	800bc3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001572:	f7ff fa5f 	bl	8000a34 <main>
  bx  lr    
 8001576:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001578:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800157c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001580:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001584:	0800e77c 	.word	0x0800e77c
  ldr r2, =_sbss
 8001588:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 800158c:	20005280 	.word	0x20005280

08001590 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001590:	e7fe      	b.n	8001590 <ADC_IRQHandler>
	...

08001594 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001598:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <HAL_Init+0x40>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a0d      	ldr	r2, [pc, #52]	; (80015d4 <HAL_Init+0x40>)
 800159e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015a4:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <HAL_Init+0x40>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a0a      	ldr	r2, [pc, #40]	; (80015d4 <HAL_Init+0x40>)
 80015aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015b0:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <HAL_Init+0x40>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a07      	ldr	r2, [pc, #28]	; (80015d4 <HAL_Init+0x40>)
 80015b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015bc:	2003      	movs	r0, #3
 80015be:	f000 f94f 	bl	8001860 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015c2:	200f      	movs	r0, #15
 80015c4:	f000 f808 	bl	80015d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015c8:	f7ff fde6 	bl	8001198 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40023c00 	.word	0x40023c00

080015d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015e0:	4b12      	ldr	r3, [pc, #72]	; (800162c <HAL_InitTick+0x54>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	4b12      	ldr	r3, [pc, #72]	; (8001630 <HAL_InitTick+0x58>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	4619      	mov	r1, r3
 80015ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80015f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f6:	4618      	mov	r0, r3
 80015f8:	f000 f967 	bl	80018ca <HAL_SYSTICK_Config>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e00e      	b.n	8001624 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2b0f      	cmp	r3, #15
 800160a:	d80a      	bhi.n	8001622 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800160c:	2200      	movs	r2, #0
 800160e:	6879      	ldr	r1, [r7, #4]
 8001610:	f04f 30ff 	mov.w	r0, #4294967295
 8001614:	f000 f92f 	bl	8001876 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001618:	4a06      	ldr	r2, [pc, #24]	; (8001634 <HAL_InitTick+0x5c>)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800161e:	2300      	movs	r3, #0
 8001620:	e000      	b.n	8001624 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
}
 8001624:	4618      	mov	r0, r3
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20000000 	.word	0x20000000
 8001630:	20000008 	.word	0x20000008
 8001634:	20000004 	.word	0x20000004

08001638 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <HAL_IncTick+0x20>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	461a      	mov	r2, r3
 8001642:	4b06      	ldr	r3, [pc, #24]	; (800165c <HAL_IncTick+0x24>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4413      	add	r3, r2
 8001648:	4a04      	ldr	r2, [pc, #16]	; (800165c <HAL_IncTick+0x24>)
 800164a:	6013      	str	r3, [r2, #0]
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	20000008 	.word	0x20000008
 800165c:	2000020c 	.word	0x2000020c

08001660 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  return uwTick;
 8001664:	4b03      	ldr	r3, [pc, #12]	; (8001674 <HAL_GetTick+0x14>)
 8001666:	681b      	ldr	r3, [r3, #0]
}
 8001668:	4618      	mov	r0, r3
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	2000020c 	.word	0x2000020c

08001678 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001680:	f7ff ffee 	bl	8001660 <HAL_GetTick>
 8001684:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001690:	d005      	beq.n	800169e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001692:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <HAL_Delay+0x44>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	461a      	mov	r2, r3
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	4413      	add	r3, r2
 800169c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800169e:	bf00      	nop
 80016a0:	f7ff ffde 	bl	8001660 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d8f7      	bhi.n	80016a0 <HAL_Delay+0x28>
  {
  }
}
 80016b0:	bf00      	nop
 80016b2:	bf00      	nop
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000008 	.word	0x20000008

080016c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d0:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <__NVIC_SetPriorityGrouping+0x44>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016d6:	68ba      	ldr	r2, [r7, #8]
 80016d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016dc:	4013      	ands	r3, r2
 80016de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016f2:	4a04      	ldr	r2, [pc, #16]	; (8001704 <__NVIC_SetPriorityGrouping+0x44>)
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	60d3      	str	r3, [r2, #12]
}
 80016f8:	bf00      	nop
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800170c:	4b04      	ldr	r3, [pc, #16]	; (8001720 <__NVIC_GetPriorityGrouping+0x18>)
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	0a1b      	lsrs	r3, r3, #8
 8001712:	f003 0307 	and.w	r3, r3, #7
}
 8001716:	4618      	mov	r0, r3
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800172e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001732:	2b00      	cmp	r3, #0
 8001734:	db0b      	blt.n	800174e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	f003 021f 	and.w	r2, r3, #31
 800173c:	4907      	ldr	r1, [pc, #28]	; (800175c <__NVIC_EnableIRQ+0x38>)
 800173e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001742:	095b      	lsrs	r3, r3, #5
 8001744:	2001      	movs	r0, #1
 8001746:	fa00 f202 	lsl.w	r2, r0, r2
 800174a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	e000e100 	.word	0xe000e100

08001760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	6039      	str	r1, [r7, #0]
 800176a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800176c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001770:	2b00      	cmp	r3, #0
 8001772:	db0a      	blt.n	800178a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	b2da      	uxtb	r2, r3
 8001778:	490c      	ldr	r1, [pc, #48]	; (80017ac <__NVIC_SetPriority+0x4c>)
 800177a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177e:	0112      	lsls	r2, r2, #4
 8001780:	b2d2      	uxtb	r2, r2
 8001782:	440b      	add	r3, r1
 8001784:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001788:	e00a      	b.n	80017a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	b2da      	uxtb	r2, r3
 800178e:	4908      	ldr	r1, [pc, #32]	; (80017b0 <__NVIC_SetPriority+0x50>)
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	f003 030f 	and.w	r3, r3, #15
 8001796:	3b04      	subs	r3, #4
 8001798:	0112      	lsls	r2, r2, #4
 800179a:	b2d2      	uxtb	r2, r2
 800179c:	440b      	add	r3, r1
 800179e:	761a      	strb	r2, [r3, #24]
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	e000e100 	.word	0xe000e100
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b089      	sub	sp, #36	; 0x24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	f1c3 0307 	rsb	r3, r3, #7
 80017ce:	2b04      	cmp	r3, #4
 80017d0:	bf28      	it	cs
 80017d2:	2304      	movcs	r3, #4
 80017d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	3304      	adds	r3, #4
 80017da:	2b06      	cmp	r3, #6
 80017dc:	d902      	bls.n	80017e4 <NVIC_EncodePriority+0x30>
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	3b03      	subs	r3, #3
 80017e2:	e000      	b.n	80017e6 <NVIC_EncodePriority+0x32>
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e8:	f04f 32ff 	mov.w	r2, #4294967295
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	43da      	mvns	r2, r3
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	401a      	ands	r2, r3
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	fa01 f303 	lsl.w	r3, r1, r3
 8001806:	43d9      	mvns	r1, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800180c:	4313      	orrs	r3, r2
         );
}
 800180e:	4618      	mov	r0, r3
 8001810:	3724      	adds	r7, #36	; 0x24
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
	...

0800181c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3b01      	subs	r3, #1
 8001828:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800182c:	d301      	bcc.n	8001832 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800182e:	2301      	movs	r3, #1
 8001830:	e00f      	b.n	8001852 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001832:	4a0a      	ldr	r2, [pc, #40]	; (800185c <SysTick_Config+0x40>)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3b01      	subs	r3, #1
 8001838:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800183a:	210f      	movs	r1, #15
 800183c:	f04f 30ff 	mov.w	r0, #4294967295
 8001840:	f7ff ff8e 	bl	8001760 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001844:	4b05      	ldr	r3, [pc, #20]	; (800185c <SysTick_Config+0x40>)
 8001846:	2200      	movs	r2, #0
 8001848:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800184a:	4b04      	ldr	r3, [pc, #16]	; (800185c <SysTick_Config+0x40>)
 800184c:	2207      	movs	r2, #7
 800184e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	e000e010 	.word	0xe000e010

08001860 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff ff29 	bl	80016c0 <__NVIC_SetPriorityGrouping>
}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001876:	b580      	push	{r7, lr}
 8001878:	b086      	sub	sp, #24
 800187a:	af00      	add	r7, sp, #0
 800187c:	4603      	mov	r3, r0
 800187e:	60b9      	str	r1, [r7, #8]
 8001880:	607a      	str	r2, [r7, #4]
 8001882:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001888:	f7ff ff3e 	bl	8001708 <__NVIC_GetPriorityGrouping>
 800188c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	68b9      	ldr	r1, [r7, #8]
 8001892:	6978      	ldr	r0, [r7, #20]
 8001894:	f7ff ff8e 	bl	80017b4 <NVIC_EncodePriority>
 8001898:	4602      	mov	r2, r0
 800189a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800189e:	4611      	mov	r1, r2
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff ff5d 	bl	8001760 <__NVIC_SetPriority>
}
 80018a6:	bf00      	nop
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b082      	sub	sp, #8
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	4603      	mov	r3, r0
 80018b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff ff31 	bl	8001724 <__NVIC_EnableIRQ>
}
 80018c2:	bf00      	nop
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f7ff ffa2 	bl	800181c <SysTick_Config>
 80018d8:	4603      	mov	r3, r0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
	...

080018e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b089      	sub	sp, #36	; 0x24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018ee:	2300      	movs	r3, #0
 80018f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018f2:	2300      	movs	r3, #0
 80018f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018f6:	2300      	movs	r3, #0
 80018f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
 80018fe:	e16b      	b.n	8001bd8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001900:	2201      	movs	r2, #1
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	697a      	ldr	r2, [r7, #20]
 8001910:	4013      	ands	r3, r2
 8001912:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	429a      	cmp	r2, r3
 800191a:	f040 815a 	bne.w	8001bd2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f003 0303 	and.w	r3, r3, #3
 8001926:	2b01      	cmp	r3, #1
 8001928:	d005      	beq.n	8001936 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001932:	2b02      	cmp	r3, #2
 8001934:	d130      	bne.n	8001998 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	2203      	movs	r2, #3
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43db      	mvns	r3, r3
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	4013      	ands	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	68da      	ldr	r2, [r3, #12]
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4313      	orrs	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800196c:	2201      	movs	r2, #1
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4013      	ands	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	091b      	lsrs	r3, r3, #4
 8001982:	f003 0201 	and.w	r2, r3, #1
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	4313      	orrs	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f003 0303 	and.w	r3, r3, #3
 80019a0:	2b03      	cmp	r3, #3
 80019a2:	d017      	beq.n	80019d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	2203      	movs	r2, #3
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4013      	ands	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f003 0303 	and.w	r3, r3, #3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d123      	bne.n	8001a28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	08da      	lsrs	r2, r3, #3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3208      	adds	r2, #8
 80019e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	f003 0307 	and.w	r3, r3, #7
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	220f      	movs	r2, #15
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	43db      	mvns	r3, r3
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	4013      	ands	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	691a      	ldr	r2, [r3, #16]
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	08da      	lsrs	r2, r3, #3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	3208      	adds	r2, #8
 8001a22:	69b9      	ldr	r1, [r7, #24]
 8001a24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	2203      	movs	r2, #3
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f003 0203 	and.w	r2, r3, #3
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f000 80b4 	beq.w	8001bd2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	4b60      	ldr	r3, [pc, #384]	; (8001bf0 <HAL_GPIO_Init+0x30c>)
 8001a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a72:	4a5f      	ldr	r2, [pc, #380]	; (8001bf0 <HAL_GPIO_Init+0x30c>)
 8001a74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a78:	6453      	str	r3, [r2, #68]	; 0x44
 8001a7a:	4b5d      	ldr	r3, [pc, #372]	; (8001bf0 <HAL_GPIO_Init+0x30c>)
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a86:	4a5b      	ldr	r2, [pc, #364]	; (8001bf4 <HAL_GPIO_Init+0x310>)
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	089b      	lsrs	r3, r3, #2
 8001a8c:	3302      	adds	r3, #2
 8001a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	f003 0303 	and.w	r3, r3, #3
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	220f      	movs	r2, #15
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a52      	ldr	r2, [pc, #328]	; (8001bf8 <HAL_GPIO_Init+0x314>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d02b      	beq.n	8001b0a <HAL_GPIO_Init+0x226>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a51      	ldr	r2, [pc, #324]	; (8001bfc <HAL_GPIO_Init+0x318>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d025      	beq.n	8001b06 <HAL_GPIO_Init+0x222>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a50      	ldr	r2, [pc, #320]	; (8001c00 <HAL_GPIO_Init+0x31c>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d01f      	beq.n	8001b02 <HAL_GPIO_Init+0x21e>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a4f      	ldr	r2, [pc, #316]	; (8001c04 <HAL_GPIO_Init+0x320>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d019      	beq.n	8001afe <HAL_GPIO_Init+0x21a>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a4e      	ldr	r2, [pc, #312]	; (8001c08 <HAL_GPIO_Init+0x324>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d013      	beq.n	8001afa <HAL_GPIO_Init+0x216>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a4d      	ldr	r2, [pc, #308]	; (8001c0c <HAL_GPIO_Init+0x328>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d00d      	beq.n	8001af6 <HAL_GPIO_Init+0x212>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a4c      	ldr	r2, [pc, #304]	; (8001c10 <HAL_GPIO_Init+0x32c>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d007      	beq.n	8001af2 <HAL_GPIO_Init+0x20e>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a4b      	ldr	r2, [pc, #300]	; (8001c14 <HAL_GPIO_Init+0x330>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d101      	bne.n	8001aee <HAL_GPIO_Init+0x20a>
 8001aea:	2307      	movs	r3, #7
 8001aec:	e00e      	b.n	8001b0c <HAL_GPIO_Init+0x228>
 8001aee:	2308      	movs	r3, #8
 8001af0:	e00c      	b.n	8001b0c <HAL_GPIO_Init+0x228>
 8001af2:	2306      	movs	r3, #6
 8001af4:	e00a      	b.n	8001b0c <HAL_GPIO_Init+0x228>
 8001af6:	2305      	movs	r3, #5
 8001af8:	e008      	b.n	8001b0c <HAL_GPIO_Init+0x228>
 8001afa:	2304      	movs	r3, #4
 8001afc:	e006      	b.n	8001b0c <HAL_GPIO_Init+0x228>
 8001afe:	2303      	movs	r3, #3
 8001b00:	e004      	b.n	8001b0c <HAL_GPIO_Init+0x228>
 8001b02:	2302      	movs	r3, #2
 8001b04:	e002      	b.n	8001b0c <HAL_GPIO_Init+0x228>
 8001b06:	2301      	movs	r3, #1
 8001b08:	e000      	b.n	8001b0c <HAL_GPIO_Init+0x228>
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	69fa      	ldr	r2, [r7, #28]
 8001b0e:	f002 0203 	and.w	r2, r2, #3
 8001b12:	0092      	lsls	r2, r2, #2
 8001b14:	4093      	lsls	r3, r2
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b1c:	4935      	ldr	r1, [pc, #212]	; (8001bf4 <HAL_GPIO_Init+0x310>)
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	089b      	lsrs	r3, r3, #2
 8001b22:	3302      	adds	r3, #2
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b2a:	4b3b      	ldr	r3, [pc, #236]	; (8001c18 <HAL_GPIO_Init+0x334>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	43db      	mvns	r3, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4013      	ands	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b4e:	4a32      	ldr	r2, [pc, #200]	; (8001c18 <HAL_GPIO_Init+0x334>)
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b54:	4b30      	ldr	r3, [pc, #192]	; (8001c18 <HAL_GPIO_Init+0x334>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4013      	ands	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d003      	beq.n	8001b78 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b78:	4a27      	ldr	r2, [pc, #156]	; (8001c18 <HAL_GPIO_Init+0x334>)
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b7e:	4b26      	ldr	r3, [pc, #152]	; (8001c18 <HAL_GPIO_Init+0x334>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	43db      	mvns	r3, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ba2:	4a1d      	ldr	r2, [pc, #116]	; (8001c18 <HAL_GPIO_Init+0x334>)
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ba8:	4b1b      	ldr	r3, [pc, #108]	; (8001c18 <HAL_GPIO_Init+0x334>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d003      	beq.n	8001bcc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bcc:	4a12      	ldr	r2, [pc, #72]	; (8001c18 <HAL_GPIO_Init+0x334>)
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	61fb      	str	r3, [r7, #28]
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	2b0f      	cmp	r3, #15
 8001bdc:	f67f ae90 	bls.w	8001900 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001be0:	bf00      	nop
 8001be2:	bf00      	nop
 8001be4:	3724      	adds	r7, #36	; 0x24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40013800 	.word	0x40013800
 8001bf8:	40020000 	.word	0x40020000
 8001bfc:	40020400 	.word	0x40020400
 8001c00:	40020800 	.word	0x40020800
 8001c04:	40020c00 	.word	0x40020c00
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	40021400 	.word	0x40021400
 8001c10:	40021800 	.word	0x40021800
 8001c14:	40021c00 	.word	0x40021c00
 8001c18:	40013c00 	.word	0x40013c00

08001c1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	460b      	mov	r3, r1
 8001c26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	691a      	ldr	r2, [r3, #16]
 8001c2c:	887b      	ldrh	r3, [r7, #2]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d002      	beq.n	8001c3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c34:	2301      	movs	r3, #1
 8001c36:	73fb      	strb	r3, [r7, #15]
 8001c38:	e001      	b.n	8001c3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	460b      	mov	r3, r1
 8001c56:	807b      	strh	r3, [r7, #2]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c5c:	787b      	ldrb	r3, [r7, #1]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c62:	887a      	ldrh	r2, [r7, #2]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c68:	e003      	b.n	8001c72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c6a:	887b      	ldrh	r3, [r7, #2]
 8001c6c:	041a      	lsls	r2, r3, #16
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	619a      	str	r2, [r3, #24]
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b085      	sub	sp, #20
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
 8001c86:	460b      	mov	r3, r1
 8001c88:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c90:	887a      	ldrh	r2, [r7, #2]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	4013      	ands	r3, r2
 8001c96:	041a      	lsls	r2, r3, #16
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	43d9      	mvns	r1, r3
 8001c9c:	887b      	ldrh	r3, [r7, #2]
 8001c9e:	400b      	ands	r3, r1
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	619a      	str	r2, [r3, #24]
}
 8001ca6:	bf00      	nop
 8001ca8:	3714      	adds	r7, #20
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001cb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cb4:	b08f      	sub	sp, #60	; 0x3c
 8001cb6:	af0a      	add	r7, sp, #40	; 0x28
 8001cb8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d101      	bne.n	8001cc4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e054      	b.n	8001d6e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d106      	bne.n	8001ce4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f009 fcf8 	bl	800b6d4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d102      	bne.n	8001cfe <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f003 f9ee 	bl	80050e4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	603b      	str	r3, [r7, #0]
 8001d0e:	687e      	ldr	r6, [r7, #4]
 8001d10:	466d      	mov	r5, sp
 8001d12:	f106 0410 	add.w	r4, r6, #16
 8001d16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d1e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d22:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d26:	1d33      	adds	r3, r6, #4
 8001d28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d2a:	6838      	ldr	r0, [r7, #0]
 8001d2c:	f003 f968 	bl	8005000 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2101      	movs	r1, #1
 8001d36:	4618      	mov	r0, r3
 8001d38:	f003 f9e5 	bl	8005106 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	603b      	str	r3, [r7, #0]
 8001d42:	687e      	ldr	r6, [r7, #4]
 8001d44:	466d      	mov	r5, sp
 8001d46:	f106 0410 	add.w	r4, r6, #16
 8001d4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d56:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d5a:	1d33      	adds	r3, r6, #4
 8001d5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d5e:	6838      	ldr	r0, [r7, #0]
 8001d60:	f003 fb6e 	bl	8005440 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3714      	adds	r7, #20
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d76 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001d76:	b590      	push	{r4, r7, lr}
 8001d78:	b089      	sub	sp, #36	; 0x24
 8001d7a:	af04      	add	r7, sp, #16
 8001d7c:	6078      	str	r0, [r7, #4]
 8001d7e:	4608      	mov	r0, r1
 8001d80:	4611      	mov	r1, r2
 8001d82:	461a      	mov	r2, r3
 8001d84:	4603      	mov	r3, r0
 8001d86:	70fb      	strb	r3, [r7, #3]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	70bb      	strb	r3, [r7, #2]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d101      	bne.n	8001d9e <HAL_HCD_HC_Init+0x28>
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	e076      	b.n	8001e8c <HAL_HCD_HC_Init+0x116>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2201      	movs	r2, #1
 8001da2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001da6:	78fb      	ldrb	r3, [r7, #3]
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	212c      	movs	r1, #44	; 0x2c
 8001dac:	fb01 f303 	mul.w	r3, r1, r3
 8001db0:	4413      	add	r3, r2
 8001db2:	333d      	adds	r3, #61	; 0x3d
 8001db4:	2200      	movs	r2, #0
 8001db6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001db8:	78fb      	ldrb	r3, [r7, #3]
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	212c      	movs	r1, #44	; 0x2c
 8001dbe:	fb01 f303 	mul.w	r3, r1, r3
 8001dc2:	4413      	add	r3, r2
 8001dc4:	3338      	adds	r3, #56	; 0x38
 8001dc6:	787a      	ldrb	r2, [r7, #1]
 8001dc8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001dca:	78fb      	ldrb	r3, [r7, #3]
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	212c      	movs	r1, #44	; 0x2c
 8001dd0:	fb01 f303 	mul.w	r3, r1, r3
 8001dd4:	4413      	add	r3, r2
 8001dd6:	3340      	adds	r3, #64	; 0x40
 8001dd8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001dda:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001ddc:	78fb      	ldrb	r3, [r7, #3]
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	212c      	movs	r1, #44	; 0x2c
 8001de2:	fb01 f303 	mul.w	r3, r1, r3
 8001de6:	4413      	add	r3, r2
 8001de8:	3339      	adds	r3, #57	; 0x39
 8001dea:	78fa      	ldrb	r2, [r7, #3]
 8001dec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001dee:	78fb      	ldrb	r3, [r7, #3]
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	212c      	movs	r1, #44	; 0x2c
 8001df4:	fb01 f303 	mul.w	r3, r1, r3
 8001df8:	4413      	add	r3, r2
 8001dfa:	333f      	adds	r3, #63	; 0x3f
 8001dfc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001e00:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001e02:	78fb      	ldrb	r3, [r7, #3]
 8001e04:	78ba      	ldrb	r2, [r7, #2]
 8001e06:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e0a:	b2d0      	uxtb	r0, r2
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	212c      	movs	r1, #44	; 0x2c
 8001e10:	fb01 f303 	mul.w	r3, r1, r3
 8001e14:	4413      	add	r3, r2
 8001e16:	333a      	adds	r3, #58	; 0x3a
 8001e18:	4602      	mov	r2, r0
 8001e1a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001e1c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	da09      	bge.n	8001e38 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001e24:	78fb      	ldrb	r3, [r7, #3]
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	212c      	movs	r1, #44	; 0x2c
 8001e2a:	fb01 f303 	mul.w	r3, r1, r3
 8001e2e:	4413      	add	r3, r2
 8001e30:	333b      	adds	r3, #59	; 0x3b
 8001e32:	2201      	movs	r2, #1
 8001e34:	701a      	strb	r2, [r3, #0]
 8001e36:	e008      	b.n	8001e4a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001e38:	78fb      	ldrb	r3, [r7, #3]
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	212c      	movs	r1, #44	; 0x2c
 8001e3e:	fb01 f303 	mul.w	r3, r1, r3
 8001e42:	4413      	add	r3, r2
 8001e44:	333b      	adds	r3, #59	; 0x3b
 8001e46:	2200      	movs	r2, #0
 8001e48:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001e4a:	78fb      	ldrb	r3, [r7, #3]
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	212c      	movs	r1, #44	; 0x2c
 8001e50:	fb01 f303 	mul.w	r3, r1, r3
 8001e54:	4413      	add	r3, r2
 8001e56:	333c      	adds	r3, #60	; 0x3c
 8001e58:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001e5c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6818      	ldr	r0, [r3, #0]
 8001e62:	787c      	ldrb	r4, [r7, #1]
 8001e64:	78ba      	ldrb	r2, [r7, #2]
 8001e66:	78f9      	ldrb	r1, [r7, #3]
 8001e68:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e6a:	9302      	str	r3, [sp, #8]
 8001e6c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001e70:	9301      	str	r3, [sp, #4]
 8001e72:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e76:	9300      	str	r3, [sp, #0]
 8001e78:	4623      	mov	r3, r4
 8001e7a:	f003 fc67 	bl	800574c <USB_HC_Init>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd90      	pop	{r4, r7, pc}

08001e94 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d101      	bne.n	8001eb2 <HAL_HCD_HC_Halt+0x1e>
 8001eae:	2302      	movs	r3, #2
 8001eb0:	e00f      	b.n	8001ed2 <HAL_HCD_HC_Halt+0x3e>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	78fa      	ldrb	r2, [r7, #3]
 8001ec0:	4611      	mov	r1, r2
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f003 feb7 	bl	8005c36 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
	...

08001edc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	4608      	mov	r0, r1
 8001ee6:	4611      	mov	r1, r2
 8001ee8:	461a      	mov	r2, r3
 8001eea:	4603      	mov	r3, r0
 8001eec:	70fb      	strb	r3, [r7, #3]
 8001eee:	460b      	mov	r3, r1
 8001ef0:	70bb      	strb	r3, [r7, #2]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001ef6:	78fb      	ldrb	r3, [r7, #3]
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	212c      	movs	r1, #44	; 0x2c
 8001efc:	fb01 f303 	mul.w	r3, r1, r3
 8001f00:	4413      	add	r3, r2
 8001f02:	333b      	adds	r3, #59	; 0x3b
 8001f04:	78ba      	ldrb	r2, [r7, #2]
 8001f06:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001f08:	78fb      	ldrb	r3, [r7, #3]
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	212c      	movs	r1, #44	; 0x2c
 8001f0e:	fb01 f303 	mul.w	r3, r1, r3
 8001f12:	4413      	add	r3, r2
 8001f14:	333f      	adds	r3, #63	; 0x3f
 8001f16:	787a      	ldrb	r2, [r7, #1]
 8001f18:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001f1a:	7c3b      	ldrb	r3, [r7, #16]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d112      	bne.n	8001f46 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001f20:	78fb      	ldrb	r3, [r7, #3]
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	212c      	movs	r1, #44	; 0x2c
 8001f26:	fb01 f303 	mul.w	r3, r1, r3
 8001f2a:	4413      	add	r3, r2
 8001f2c:	3342      	adds	r3, #66	; 0x42
 8001f2e:	2203      	movs	r2, #3
 8001f30:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001f32:	78fb      	ldrb	r3, [r7, #3]
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	212c      	movs	r1, #44	; 0x2c
 8001f38:	fb01 f303 	mul.w	r3, r1, r3
 8001f3c:	4413      	add	r3, r2
 8001f3e:	333d      	adds	r3, #61	; 0x3d
 8001f40:	7f3a      	ldrb	r2, [r7, #28]
 8001f42:	701a      	strb	r2, [r3, #0]
 8001f44:	e008      	b.n	8001f58 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f46:	78fb      	ldrb	r3, [r7, #3]
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	212c      	movs	r1, #44	; 0x2c
 8001f4c:	fb01 f303 	mul.w	r3, r1, r3
 8001f50:	4413      	add	r3, r2
 8001f52:	3342      	adds	r3, #66	; 0x42
 8001f54:	2202      	movs	r2, #2
 8001f56:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001f58:	787b      	ldrb	r3, [r7, #1]
 8001f5a:	2b03      	cmp	r3, #3
 8001f5c:	f200 80c6 	bhi.w	80020ec <HAL_HCD_HC_SubmitRequest+0x210>
 8001f60:	a201      	add	r2, pc, #4	; (adr r2, 8001f68 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f66:	bf00      	nop
 8001f68:	08001f79 	.word	0x08001f79
 8001f6c:	080020d9 	.word	0x080020d9
 8001f70:	08001fdd 	.word	0x08001fdd
 8001f74:	0800205b 	.word	0x0800205b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001f78:	7c3b      	ldrb	r3, [r7, #16]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	f040 80b8 	bne.w	80020f0 <HAL_HCD_HC_SubmitRequest+0x214>
 8001f80:	78bb      	ldrb	r3, [r7, #2]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f040 80b4 	bne.w	80020f0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001f88:	8b3b      	ldrh	r3, [r7, #24]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d108      	bne.n	8001fa0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001f8e:	78fb      	ldrb	r3, [r7, #3]
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	212c      	movs	r1, #44	; 0x2c
 8001f94:	fb01 f303 	mul.w	r3, r1, r3
 8001f98:	4413      	add	r3, r2
 8001f9a:	3355      	adds	r3, #85	; 0x55
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001fa0:	78fb      	ldrb	r3, [r7, #3]
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	212c      	movs	r1, #44	; 0x2c
 8001fa6:	fb01 f303 	mul.w	r3, r1, r3
 8001faa:	4413      	add	r3, r2
 8001fac:	3355      	adds	r3, #85	; 0x55
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d109      	bne.n	8001fc8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001fb4:	78fb      	ldrb	r3, [r7, #3]
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	212c      	movs	r1, #44	; 0x2c
 8001fba:	fb01 f303 	mul.w	r3, r1, r3
 8001fbe:	4413      	add	r3, r2
 8001fc0:	3342      	adds	r3, #66	; 0x42
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001fc6:	e093      	b.n	80020f0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001fc8:	78fb      	ldrb	r3, [r7, #3]
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	212c      	movs	r1, #44	; 0x2c
 8001fce:	fb01 f303 	mul.w	r3, r1, r3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	3342      	adds	r3, #66	; 0x42
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	701a      	strb	r2, [r3, #0]
      break;
 8001fda:	e089      	b.n	80020f0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001fdc:	78bb      	ldrb	r3, [r7, #2]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d11d      	bne.n	800201e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001fe2:	78fb      	ldrb	r3, [r7, #3]
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	212c      	movs	r1, #44	; 0x2c
 8001fe8:	fb01 f303 	mul.w	r3, r1, r3
 8001fec:	4413      	add	r3, r2
 8001fee:	3355      	adds	r3, #85	; 0x55
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d109      	bne.n	800200a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ff6:	78fb      	ldrb	r3, [r7, #3]
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	212c      	movs	r1, #44	; 0x2c
 8001ffc:	fb01 f303 	mul.w	r3, r1, r3
 8002000:	4413      	add	r3, r2
 8002002:	3342      	adds	r3, #66	; 0x42
 8002004:	2200      	movs	r2, #0
 8002006:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002008:	e073      	b.n	80020f2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800200a:	78fb      	ldrb	r3, [r7, #3]
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	212c      	movs	r1, #44	; 0x2c
 8002010:	fb01 f303 	mul.w	r3, r1, r3
 8002014:	4413      	add	r3, r2
 8002016:	3342      	adds	r3, #66	; 0x42
 8002018:	2202      	movs	r2, #2
 800201a:	701a      	strb	r2, [r3, #0]
      break;
 800201c:	e069      	b.n	80020f2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800201e:	78fb      	ldrb	r3, [r7, #3]
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	212c      	movs	r1, #44	; 0x2c
 8002024:	fb01 f303 	mul.w	r3, r1, r3
 8002028:	4413      	add	r3, r2
 800202a:	3354      	adds	r3, #84	; 0x54
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d109      	bne.n	8002046 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002032:	78fb      	ldrb	r3, [r7, #3]
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	212c      	movs	r1, #44	; 0x2c
 8002038:	fb01 f303 	mul.w	r3, r1, r3
 800203c:	4413      	add	r3, r2
 800203e:	3342      	adds	r3, #66	; 0x42
 8002040:	2200      	movs	r2, #0
 8002042:	701a      	strb	r2, [r3, #0]
      break;
 8002044:	e055      	b.n	80020f2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002046:	78fb      	ldrb	r3, [r7, #3]
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	212c      	movs	r1, #44	; 0x2c
 800204c:	fb01 f303 	mul.w	r3, r1, r3
 8002050:	4413      	add	r3, r2
 8002052:	3342      	adds	r3, #66	; 0x42
 8002054:	2202      	movs	r2, #2
 8002056:	701a      	strb	r2, [r3, #0]
      break;
 8002058:	e04b      	b.n	80020f2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800205a:	78bb      	ldrb	r3, [r7, #2]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d11d      	bne.n	800209c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002060:	78fb      	ldrb	r3, [r7, #3]
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	212c      	movs	r1, #44	; 0x2c
 8002066:	fb01 f303 	mul.w	r3, r1, r3
 800206a:	4413      	add	r3, r2
 800206c:	3355      	adds	r3, #85	; 0x55
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d109      	bne.n	8002088 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002074:	78fb      	ldrb	r3, [r7, #3]
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	212c      	movs	r1, #44	; 0x2c
 800207a:	fb01 f303 	mul.w	r3, r1, r3
 800207e:	4413      	add	r3, r2
 8002080:	3342      	adds	r3, #66	; 0x42
 8002082:	2200      	movs	r2, #0
 8002084:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002086:	e034      	b.n	80020f2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002088:	78fb      	ldrb	r3, [r7, #3]
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	212c      	movs	r1, #44	; 0x2c
 800208e:	fb01 f303 	mul.w	r3, r1, r3
 8002092:	4413      	add	r3, r2
 8002094:	3342      	adds	r3, #66	; 0x42
 8002096:	2202      	movs	r2, #2
 8002098:	701a      	strb	r2, [r3, #0]
      break;
 800209a:	e02a      	b.n	80020f2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800209c:	78fb      	ldrb	r3, [r7, #3]
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	212c      	movs	r1, #44	; 0x2c
 80020a2:	fb01 f303 	mul.w	r3, r1, r3
 80020a6:	4413      	add	r3, r2
 80020a8:	3354      	adds	r3, #84	; 0x54
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d109      	bne.n	80020c4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020b0:	78fb      	ldrb	r3, [r7, #3]
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	212c      	movs	r1, #44	; 0x2c
 80020b6:	fb01 f303 	mul.w	r3, r1, r3
 80020ba:	4413      	add	r3, r2
 80020bc:	3342      	adds	r3, #66	; 0x42
 80020be:	2200      	movs	r2, #0
 80020c0:	701a      	strb	r2, [r3, #0]
      break;
 80020c2:	e016      	b.n	80020f2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020c4:	78fb      	ldrb	r3, [r7, #3]
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	212c      	movs	r1, #44	; 0x2c
 80020ca:	fb01 f303 	mul.w	r3, r1, r3
 80020ce:	4413      	add	r3, r2
 80020d0:	3342      	adds	r3, #66	; 0x42
 80020d2:	2202      	movs	r2, #2
 80020d4:	701a      	strb	r2, [r3, #0]
      break;
 80020d6:	e00c      	b.n	80020f2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020d8:	78fb      	ldrb	r3, [r7, #3]
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	212c      	movs	r1, #44	; 0x2c
 80020de:	fb01 f303 	mul.w	r3, r1, r3
 80020e2:	4413      	add	r3, r2
 80020e4:	3342      	adds	r3, #66	; 0x42
 80020e6:	2200      	movs	r2, #0
 80020e8:	701a      	strb	r2, [r3, #0]
      break;
 80020ea:	e002      	b.n	80020f2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80020ec:	bf00      	nop
 80020ee:	e000      	b.n	80020f2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80020f0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80020f2:	78fb      	ldrb	r3, [r7, #3]
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	212c      	movs	r1, #44	; 0x2c
 80020f8:	fb01 f303 	mul.w	r3, r1, r3
 80020fc:	4413      	add	r3, r2
 80020fe:	3344      	adds	r3, #68	; 0x44
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002104:	78fb      	ldrb	r3, [r7, #3]
 8002106:	8b3a      	ldrh	r2, [r7, #24]
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	202c      	movs	r0, #44	; 0x2c
 800210c:	fb00 f303 	mul.w	r3, r0, r3
 8002110:	440b      	add	r3, r1
 8002112:	334c      	adds	r3, #76	; 0x4c
 8002114:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002116:	78fb      	ldrb	r3, [r7, #3]
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	212c      	movs	r1, #44	; 0x2c
 800211c:	fb01 f303 	mul.w	r3, r1, r3
 8002120:	4413      	add	r3, r2
 8002122:	3360      	adds	r3, #96	; 0x60
 8002124:	2200      	movs	r2, #0
 8002126:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002128:	78fb      	ldrb	r3, [r7, #3]
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	212c      	movs	r1, #44	; 0x2c
 800212e:	fb01 f303 	mul.w	r3, r1, r3
 8002132:	4413      	add	r3, r2
 8002134:	3350      	adds	r3, #80	; 0x50
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800213a:	78fb      	ldrb	r3, [r7, #3]
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	212c      	movs	r1, #44	; 0x2c
 8002140:	fb01 f303 	mul.w	r3, r1, r3
 8002144:	4413      	add	r3, r2
 8002146:	3339      	adds	r3, #57	; 0x39
 8002148:	78fa      	ldrb	r2, [r7, #3]
 800214a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800214c:	78fb      	ldrb	r3, [r7, #3]
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	212c      	movs	r1, #44	; 0x2c
 8002152:	fb01 f303 	mul.w	r3, r1, r3
 8002156:	4413      	add	r3, r2
 8002158:	3361      	adds	r3, #97	; 0x61
 800215a:	2200      	movs	r2, #0
 800215c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6818      	ldr	r0, [r3, #0]
 8002162:	78fb      	ldrb	r3, [r7, #3]
 8002164:	222c      	movs	r2, #44	; 0x2c
 8002166:	fb02 f303 	mul.w	r3, r2, r3
 800216a:	3338      	adds	r3, #56	; 0x38
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	18d1      	adds	r1, r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	b2db      	uxtb	r3, r3
 8002176:	461a      	mov	r2, r3
 8002178:	f003 fc0a 	bl	8005990 <USB_HC_StartXfer>
 800217c:	4603      	mov	r3, r0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop

08002188 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f003 f90b 	bl	80053ba <USB_GetMode>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	f040 80f6 	bne.w	8002398 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f003 f8ef 	bl	8005394 <USB_ReadInterrupts>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f000 80ec 	beq.w	8002396 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f003 f8e6 	bl	8005394 <USB_ReadInterrupts>
 80021c8:	4603      	mov	r3, r0
 80021ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021d2:	d104      	bne.n	80021de <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80021dc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f003 f8d6 	bl	8005394 <USB_ReadInterrupts>
 80021e8:	4603      	mov	r3, r0
 80021ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021f2:	d104      	bne.n	80021fe <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80021fc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4618      	mov	r0, r3
 8002204:	f003 f8c6 	bl	8005394 <USB_ReadInterrupts>
 8002208:	4603      	mov	r3, r0
 800220a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800220e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002212:	d104      	bne.n	800221e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800221c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f003 f8b6 	bl	8005394 <USB_ReadInterrupts>
 8002228:	4603      	mov	r3, r0
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b02      	cmp	r3, #2
 8002230:	d103      	bne.n	800223a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2202      	movs	r2, #2
 8002238:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f003 f8a8 	bl	8005394 <USB_ReadInterrupts>
 8002244:	4603      	mov	r3, r0
 8002246:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800224a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800224e:	d11c      	bne.n	800228a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002258:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10f      	bne.n	800228a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800226a:	2110      	movs	r1, #16
 800226c:	6938      	ldr	r0, [r7, #16]
 800226e:	f002 ff97 	bl	80051a0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002272:	6938      	ldr	r0, [r7, #16]
 8002274:	f002 ffc8 	bl	8005208 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2101      	movs	r1, #1
 800227e:	4618      	mov	r0, r3
 8002280:	f003 f99e 	bl	80055c0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f009 faa3 	bl	800b7d0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4618      	mov	r0, r3
 8002290:	f003 f880 	bl	8005394 <USB_ReadInterrupts>
 8002294:	4603      	mov	r3, r0
 8002296:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800229a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800229e:	d102      	bne.n	80022a6 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f001 f89e 	bl	80033e2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f003 f872 	bl	8005394 <USB_ReadInterrupts>
 80022b0:	4603      	mov	r3, r0
 80022b2:	f003 0308 	and.w	r3, r3, #8
 80022b6:	2b08      	cmp	r3, #8
 80022b8:	d106      	bne.n	80022c8 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f009 fa6c 	bl	800b798 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2208      	movs	r2, #8
 80022c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f003 f861 	bl	8005394 <USB_ReadInterrupts>
 80022d2:	4603      	mov	r3, r0
 80022d4:	f003 0310 	and.w	r3, r3, #16
 80022d8:	2b10      	cmp	r3, #16
 80022da:	d101      	bne.n	80022e0 <HAL_HCD_IRQHandler+0x158>
 80022dc:	2301      	movs	r3, #1
 80022de:	e000      	b.n	80022e2 <HAL_HCD_IRQHandler+0x15a>
 80022e0:	2300      	movs	r3, #0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d012      	beq.n	800230c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	699a      	ldr	r2, [r3, #24]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f022 0210 	bic.w	r2, r2, #16
 80022f4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 ffa1 	bl	800323e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	699a      	ldr	r2, [r3, #24]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0210 	orr.w	r2, r2, #16
 800230a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	f003 f83f 	bl	8005394 <USB_ReadInterrupts>
 8002316:	4603      	mov	r3, r0
 8002318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800231c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002320:	d13a      	bne.n	8002398 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f003 fc74 	bl	8005c14 <USB_HC_ReadInterrupt>
 800232c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800232e:	2300      	movs	r3, #0
 8002330:	617b      	str	r3, [r7, #20]
 8002332:	e025      	b.n	8002380 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	f003 030f 	and.w	r3, r3, #15
 800233a:	68ba      	ldr	r2, [r7, #8]
 800233c:	fa22 f303 	lsr.w	r3, r2, r3
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	2b00      	cmp	r3, #0
 8002346:	d018      	beq.n	800237a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	015a      	lsls	r2, r3, #5
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	4413      	add	r3, r2
 8002350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800235a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800235e:	d106      	bne.n	800236e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	b2db      	uxtb	r3, r3
 8002364:	4619      	mov	r1, r3
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 f8ab 	bl	80024c2 <HCD_HC_IN_IRQHandler>
 800236c:	e005      	b.n	800237a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	b2db      	uxtb	r3, r3
 8002372:	4619      	mov	r1, r3
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f000 fbf9 	bl	8002b6c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	3301      	adds	r3, #1
 800237e:	617b      	str	r3, [r7, #20]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	429a      	cmp	r2, r3
 8002388:	d3d4      	bcc.n	8002334 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002392:	615a      	str	r2, [r3, #20]
 8002394:	e000      	b.n	8002398 <HAL_HCD_IRQHandler+0x210>
      return;
 8002396:	bf00      	nop
    }
  }
}
 8002398:	3718      	adds	r7, #24
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b082      	sub	sp, #8
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d101      	bne.n	80023b4 <HAL_HCD_Start+0x16>
 80023b0:	2302      	movs	r3, #2
 80023b2:	e013      	b.n	80023dc <HAL_HCD_Start+0x3e>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2101      	movs	r1, #1
 80023c2:	4618      	mov	r0, r3
 80023c4:	f003 f960 	bl	8005688 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f002 fe78 	bl	80050c2 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d101      	bne.n	80023fa <HAL_HCD_Stop+0x16>
 80023f6:	2302      	movs	r3, #2
 80023f8:	e00d      	b.n	8002416 <HAL_HCD_Stop+0x32>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2201      	movs	r2, #1
 80023fe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f003 fd4e 	bl	8005ea8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b082      	sub	sp, #8
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f003 f902 	bl	8005634 <USB_ResetPort>
 8002430:	4603      	mov	r3, r0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800243a:	b480      	push	{r7}
 800243c:	b083      	sub	sp, #12
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
 8002442:	460b      	mov	r3, r1
 8002444:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002446:	78fb      	ldrb	r3, [r7, #3]
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	212c      	movs	r1, #44	; 0x2c
 800244c:	fb01 f303 	mul.w	r3, r1, r3
 8002450:	4413      	add	r3, r2
 8002452:	3360      	adds	r3, #96	; 0x60
 8002454:	781b      	ldrb	r3, [r3, #0]
}
 8002456:	4618      	mov	r0, r3
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002462:	b480      	push	{r7}
 8002464:	b083      	sub	sp, #12
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
 800246a:	460b      	mov	r3, r1
 800246c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800246e:	78fb      	ldrb	r3, [r7, #3]
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	212c      	movs	r1, #44	; 0x2c
 8002474:	fb01 f303 	mul.w	r3, r1, r3
 8002478:	4413      	add	r3, r2
 800247a:	3350      	adds	r3, #80	; 0x50
 800247c:	681b      	ldr	r3, [r3, #0]
}
 800247e:	4618      	mov	r0, r3
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b082      	sub	sp, #8
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f003 f946 	bl	8005728 <USB_GetCurrentFrame>
 800249c:	4603      	mov	r3, r0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b082      	sub	sp, #8
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f003 f921 	bl	80056fa <USB_GetHostSpeed>
 80024b8:	4603      	mov	r3, r0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b086      	sub	sp, #24
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
 80024ca:	460b      	mov	r3, r1
 80024cc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80024d8:	78fb      	ldrb	r3, [r7, #3]
 80024da:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	015a      	lsls	r2, r3, #5
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	4413      	add	r3, r2
 80024e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 0304 	and.w	r3, r3, #4
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	d11a      	bne.n	8002528 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	015a      	lsls	r2, r3, #5
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	4413      	add	r3, r2
 80024fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024fe:	461a      	mov	r2, r3
 8002500:	2304      	movs	r3, #4
 8002502:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	212c      	movs	r1, #44	; 0x2c
 800250a:	fb01 f303 	mul.w	r3, r1, r3
 800250e:	4413      	add	r3, r2
 8002510:	3361      	adds	r3, #97	; 0x61
 8002512:	2206      	movs	r2, #6
 8002514:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	b2d2      	uxtb	r2, r2
 800251e:	4611      	mov	r1, r2
 8002520:	4618      	mov	r0, r3
 8002522:	f003 fb88 	bl	8005c36 <USB_HC_Halt>
 8002526:	e0af      	b.n	8002688 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	015a      	lsls	r2, r3, #5
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	4413      	add	r3, r2
 8002530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800253e:	d11b      	bne.n	8002578 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	015a      	lsls	r2, r3, #5
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	4413      	add	r3, r2
 8002548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254c:	461a      	mov	r2, r3
 800254e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002552:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	212c      	movs	r1, #44	; 0x2c
 800255a:	fb01 f303 	mul.w	r3, r1, r3
 800255e:	4413      	add	r3, r2
 8002560:	3361      	adds	r3, #97	; 0x61
 8002562:	2207      	movs	r2, #7
 8002564:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	b2d2      	uxtb	r2, r2
 800256e:	4611      	mov	r1, r2
 8002570:	4618      	mov	r0, r3
 8002572:	f003 fb60 	bl	8005c36 <USB_HC_Halt>
 8002576:	e087      	b.n	8002688 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	015a      	lsls	r2, r3, #5
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	4413      	add	r3, r2
 8002580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 0320 	and.w	r3, r3, #32
 800258a:	2b20      	cmp	r3, #32
 800258c:	d109      	bne.n	80025a2 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	015a      	lsls	r2, r3, #5
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	4413      	add	r3, r2
 8002596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800259a:	461a      	mov	r2, r3
 800259c:	2320      	movs	r3, #32
 800259e:	6093      	str	r3, [r2, #8]
 80025a0:	e072      	b.n	8002688 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	015a      	lsls	r2, r3, #5
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	4413      	add	r3, r2
 80025aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f003 0308 	and.w	r3, r3, #8
 80025b4:	2b08      	cmp	r3, #8
 80025b6:	d11a      	bne.n	80025ee <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	015a      	lsls	r2, r3, #5
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	4413      	add	r3, r2
 80025c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c4:	461a      	mov	r2, r3
 80025c6:	2308      	movs	r3, #8
 80025c8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	212c      	movs	r1, #44	; 0x2c
 80025d0:	fb01 f303 	mul.w	r3, r1, r3
 80025d4:	4413      	add	r3, r2
 80025d6:	3361      	adds	r3, #97	; 0x61
 80025d8:	2205      	movs	r2, #5
 80025da:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	4611      	mov	r1, r2
 80025e6:	4618      	mov	r0, r3
 80025e8:	f003 fb25 	bl	8005c36 <USB_HC_Halt>
 80025ec:	e04c      	b.n	8002688 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	015a      	lsls	r2, r3, #5
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	4413      	add	r3, r2
 80025f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002604:	d11b      	bne.n	800263e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	015a      	lsls	r2, r3, #5
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	4413      	add	r3, r2
 800260e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002612:	461a      	mov	r2, r3
 8002614:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002618:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	212c      	movs	r1, #44	; 0x2c
 8002620:	fb01 f303 	mul.w	r3, r1, r3
 8002624:	4413      	add	r3, r2
 8002626:	3361      	adds	r3, #97	; 0x61
 8002628:	2208      	movs	r2, #8
 800262a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	b2d2      	uxtb	r2, r2
 8002634:	4611      	mov	r1, r2
 8002636:	4618      	mov	r0, r3
 8002638:	f003 fafd 	bl	8005c36 <USB_HC_Halt>
 800263c:	e024      	b.n	8002688 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	015a      	lsls	r2, r3, #5
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	4413      	add	r3, r2
 8002646:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002650:	2b80      	cmp	r3, #128	; 0x80
 8002652:	d119      	bne.n	8002688 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	015a      	lsls	r2, r3, #5
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	4413      	add	r3, r2
 800265c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002660:	461a      	mov	r2, r3
 8002662:	2380      	movs	r3, #128	; 0x80
 8002664:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	212c      	movs	r1, #44	; 0x2c
 800266c:	fb01 f303 	mul.w	r3, r1, r3
 8002670:	4413      	add	r3, r2
 8002672:	3361      	adds	r3, #97	; 0x61
 8002674:	2206      	movs	r2, #6
 8002676:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	4611      	mov	r1, r2
 8002682:	4618      	mov	r0, r3
 8002684:	f003 fad7 	bl	8005c36 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	015a      	lsls	r2, r3, #5
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	4413      	add	r3, r2
 8002690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800269a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800269e:	d112      	bne.n	80026c6 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	b2d2      	uxtb	r2, r2
 80026a8:	4611      	mov	r1, r2
 80026aa:	4618      	mov	r0, r3
 80026ac:	f003 fac3 	bl	8005c36 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	015a      	lsls	r2, r3, #5
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	4413      	add	r3, r2
 80026b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026bc:	461a      	mov	r2, r3
 80026be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026c2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80026c4:	e24e      	b.n	8002b64 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	015a      	lsls	r2, r3, #5
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	4413      	add	r3, r2
 80026ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b01      	cmp	r3, #1
 80026da:	f040 80df 	bne.w	800289c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d019      	beq.n	800271a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	212c      	movs	r1, #44	; 0x2c
 80026ec:	fb01 f303 	mul.w	r3, r1, r3
 80026f0:	4413      	add	r3, r2
 80026f2:	3348      	adds	r3, #72	; 0x48
 80026f4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	0159      	lsls	r1, r3, #5
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	440b      	add	r3, r1
 80026fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002708:	1ad2      	subs	r2, r2, r3
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	202c      	movs	r0, #44	; 0x2c
 8002710:	fb00 f303 	mul.w	r3, r0, r3
 8002714:	440b      	add	r3, r1
 8002716:	3350      	adds	r3, #80	; 0x50
 8002718:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	212c      	movs	r1, #44	; 0x2c
 8002720:	fb01 f303 	mul.w	r3, r1, r3
 8002724:	4413      	add	r3, r2
 8002726:	3361      	adds	r3, #97	; 0x61
 8002728:	2201      	movs	r2, #1
 800272a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	212c      	movs	r1, #44	; 0x2c
 8002732:	fb01 f303 	mul.w	r3, r1, r3
 8002736:	4413      	add	r3, r2
 8002738:	335c      	adds	r3, #92	; 0x5c
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	015a      	lsls	r2, r3, #5
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	4413      	add	r3, r2
 8002746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800274a:	461a      	mov	r2, r3
 800274c:	2301      	movs	r3, #1
 800274e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	212c      	movs	r1, #44	; 0x2c
 8002756:	fb01 f303 	mul.w	r3, r1, r3
 800275a:	4413      	add	r3, r2
 800275c:	333f      	adds	r3, #63	; 0x3f
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d009      	beq.n	8002778 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	212c      	movs	r1, #44	; 0x2c
 800276a:	fb01 f303 	mul.w	r3, r1, r3
 800276e:	4413      	add	r3, r2
 8002770:	333f      	adds	r3, #63	; 0x3f
 8002772:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002774:	2b02      	cmp	r3, #2
 8002776:	d111      	bne.n	800279c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	4611      	mov	r1, r2
 8002782:	4618      	mov	r0, r3
 8002784:	f003 fa57 	bl	8005c36 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	015a      	lsls	r2, r3, #5
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	4413      	add	r3, r2
 8002790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002794:	461a      	mov	r2, r3
 8002796:	2310      	movs	r3, #16
 8002798:	6093      	str	r3, [r2, #8]
 800279a:	e03a      	b.n	8002812 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	212c      	movs	r1, #44	; 0x2c
 80027a2:	fb01 f303 	mul.w	r3, r1, r3
 80027a6:	4413      	add	r3, r2
 80027a8:	333f      	adds	r3, #63	; 0x3f
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	2b03      	cmp	r3, #3
 80027ae:	d009      	beq.n	80027c4 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	212c      	movs	r1, #44	; 0x2c
 80027b6:	fb01 f303 	mul.w	r3, r1, r3
 80027ba:	4413      	add	r3, r2
 80027bc:	333f      	adds	r3, #63	; 0x3f
 80027be:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d126      	bne.n	8002812 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	015a      	lsls	r2, r3, #5
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	4413      	add	r3, r2
 80027cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	0151      	lsls	r1, r2, #5
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	440a      	add	r2, r1
 80027da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80027e2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	212c      	movs	r1, #44	; 0x2c
 80027ea:	fb01 f303 	mul.w	r3, r1, r3
 80027ee:	4413      	add	r3, r2
 80027f0:	3360      	adds	r3, #96	; 0x60
 80027f2:	2201      	movs	r2, #1
 80027f4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	b2d9      	uxtb	r1, r3
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	202c      	movs	r0, #44	; 0x2c
 8002800:	fb00 f303 	mul.w	r3, r0, r3
 8002804:	4413      	add	r3, r2
 8002806:	3360      	adds	r3, #96	; 0x60
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	461a      	mov	r2, r3
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f008 ffed 	bl	800b7ec <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d12b      	bne.n	8002872 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	212c      	movs	r1, #44	; 0x2c
 8002820:	fb01 f303 	mul.w	r3, r1, r3
 8002824:	4413      	add	r3, r2
 8002826:	3348      	adds	r3, #72	; 0x48
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	202c      	movs	r0, #44	; 0x2c
 8002830:	fb00 f202 	mul.w	r2, r0, r2
 8002834:	440a      	add	r2, r1
 8002836:	3240      	adds	r2, #64	; 0x40
 8002838:	8812      	ldrh	r2, [r2, #0]
 800283a:	fbb3 f3f2 	udiv	r3, r3, r2
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 818e 	beq.w	8002b64 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	212c      	movs	r1, #44	; 0x2c
 800284e:	fb01 f303 	mul.w	r3, r1, r3
 8002852:	4413      	add	r3, r2
 8002854:	3354      	adds	r3, #84	; 0x54
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	f083 0301 	eor.w	r3, r3, #1
 800285c:	b2d8      	uxtb	r0, r3
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	212c      	movs	r1, #44	; 0x2c
 8002864:	fb01 f303 	mul.w	r3, r1, r3
 8002868:	4413      	add	r3, r2
 800286a:	3354      	adds	r3, #84	; 0x54
 800286c:	4602      	mov	r2, r0
 800286e:	701a      	strb	r2, [r3, #0]
}
 8002870:	e178      	b.n	8002b64 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	212c      	movs	r1, #44	; 0x2c
 8002878:	fb01 f303 	mul.w	r3, r1, r3
 800287c:	4413      	add	r3, r2
 800287e:	3354      	adds	r3, #84	; 0x54
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	f083 0301 	eor.w	r3, r3, #1
 8002886:	b2d8      	uxtb	r0, r3
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	212c      	movs	r1, #44	; 0x2c
 800288e:	fb01 f303 	mul.w	r3, r1, r3
 8002892:	4413      	add	r3, r2
 8002894:	3354      	adds	r3, #84	; 0x54
 8002896:	4602      	mov	r2, r0
 8002898:	701a      	strb	r2, [r3, #0]
}
 800289a:	e163      	b.n	8002b64 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	015a      	lsls	r2, r3, #5
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	4413      	add	r3, r2
 80028a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	f040 80f6 	bne.w	8002aa0 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	212c      	movs	r1, #44	; 0x2c
 80028ba:	fb01 f303 	mul.w	r3, r1, r3
 80028be:	4413      	add	r3, r2
 80028c0:	3361      	adds	r3, #97	; 0x61
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d109      	bne.n	80028dc <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	212c      	movs	r1, #44	; 0x2c
 80028ce:	fb01 f303 	mul.w	r3, r1, r3
 80028d2:	4413      	add	r3, r2
 80028d4:	3360      	adds	r3, #96	; 0x60
 80028d6:	2201      	movs	r2, #1
 80028d8:	701a      	strb	r2, [r3, #0]
 80028da:	e0c9      	b.n	8002a70 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	212c      	movs	r1, #44	; 0x2c
 80028e2:	fb01 f303 	mul.w	r3, r1, r3
 80028e6:	4413      	add	r3, r2
 80028e8:	3361      	adds	r3, #97	; 0x61
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b05      	cmp	r3, #5
 80028ee:	d109      	bne.n	8002904 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	212c      	movs	r1, #44	; 0x2c
 80028f6:	fb01 f303 	mul.w	r3, r1, r3
 80028fa:	4413      	add	r3, r2
 80028fc:	3360      	adds	r3, #96	; 0x60
 80028fe:	2205      	movs	r2, #5
 8002900:	701a      	strb	r2, [r3, #0]
 8002902:	e0b5      	b.n	8002a70 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	212c      	movs	r1, #44	; 0x2c
 800290a:	fb01 f303 	mul.w	r3, r1, r3
 800290e:	4413      	add	r3, r2
 8002910:	3361      	adds	r3, #97	; 0x61
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	2b06      	cmp	r3, #6
 8002916:	d009      	beq.n	800292c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	212c      	movs	r1, #44	; 0x2c
 800291e:	fb01 f303 	mul.w	r3, r1, r3
 8002922:	4413      	add	r3, r2
 8002924:	3361      	adds	r3, #97	; 0x61
 8002926:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002928:	2b08      	cmp	r3, #8
 800292a:	d150      	bne.n	80029ce <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	212c      	movs	r1, #44	; 0x2c
 8002932:	fb01 f303 	mul.w	r3, r1, r3
 8002936:	4413      	add	r3, r2
 8002938:	335c      	adds	r3, #92	; 0x5c
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	1c5a      	adds	r2, r3, #1
 800293e:	6879      	ldr	r1, [r7, #4]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	202c      	movs	r0, #44	; 0x2c
 8002944:	fb00 f303 	mul.w	r3, r0, r3
 8002948:	440b      	add	r3, r1
 800294a:	335c      	adds	r3, #92	; 0x5c
 800294c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	212c      	movs	r1, #44	; 0x2c
 8002954:	fb01 f303 	mul.w	r3, r1, r3
 8002958:	4413      	add	r3, r2
 800295a:	335c      	adds	r3, #92	; 0x5c
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2b02      	cmp	r3, #2
 8002960:	d912      	bls.n	8002988 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	212c      	movs	r1, #44	; 0x2c
 8002968:	fb01 f303 	mul.w	r3, r1, r3
 800296c:	4413      	add	r3, r2
 800296e:	335c      	adds	r3, #92	; 0x5c
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	212c      	movs	r1, #44	; 0x2c
 800297a:	fb01 f303 	mul.w	r3, r1, r3
 800297e:	4413      	add	r3, r2
 8002980:	3360      	adds	r3, #96	; 0x60
 8002982:	2204      	movs	r2, #4
 8002984:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002986:	e073      	b.n	8002a70 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	212c      	movs	r1, #44	; 0x2c
 800298e:	fb01 f303 	mul.w	r3, r1, r3
 8002992:	4413      	add	r3, r2
 8002994:	3360      	adds	r3, #96	; 0x60
 8002996:	2202      	movs	r2, #2
 8002998:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	015a      	lsls	r2, r3, #5
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	4413      	add	r3, r2
 80029a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80029b0:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80029b8:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	015a      	lsls	r2, r3, #5
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	4413      	add	r3, r2
 80029c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c6:	461a      	mov	r2, r3
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80029cc:	e050      	b.n	8002a70 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	212c      	movs	r1, #44	; 0x2c
 80029d4:	fb01 f303 	mul.w	r3, r1, r3
 80029d8:	4413      	add	r3, r2
 80029da:	3361      	adds	r3, #97	; 0x61
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2b03      	cmp	r3, #3
 80029e0:	d122      	bne.n	8002a28 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	212c      	movs	r1, #44	; 0x2c
 80029e8:	fb01 f303 	mul.w	r3, r1, r3
 80029ec:	4413      	add	r3, r2
 80029ee:	3360      	adds	r3, #96	; 0x60
 80029f0:	2202      	movs	r2, #2
 80029f2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	015a      	lsls	r2, r3, #5
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	4413      	add	r3, r2
 80029fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a0a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a12:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	015a      	lsls	r2, r3, #5
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a20:	461a      	mov	r2, r3
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	6013      	str	r3, [r2, #0]
 8002a26:	e023      	b.n	8002a70 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	212c      	movs	r1, #44	; 0x2c
 8002a2e:	fb01 f303 	mul.w	r3, r1, r3
 8002a32:	4413      	add	r3, r2
 8002a34:	3361      	adds	r3, #97	; 0x61
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b07      	cmp	r3, #7
 8002a3a:	d119      	bne.n	8002a70 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	212c      	movs	r1, #44	; 0x2c
 8002a42:	fb01 f303 	mul.w	r3, r1, r3
 8002a46:	4413      	add	r3, r2
 8002a48:	335c      	adds	r3, #92	; 0x5c
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	1c5a      	adds	r2, r3, #1
 8002a4e:	6879      	ldr	r1, [r7, #4]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	202c      	movs	r0, #44	; 0x2c
 8002a54:	fb00 f303 	mul.w	r3, r0, r3
 8002a58:	440b      	add	r3, r1
 8002a5a:	335c      	adds	r3, #92	; 0x5c
 8002a5c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	212c      	movs	r1, #44	; 0x2c
 8002a64:	fb01 f303 	mul.w	r3, r1, r3
 8002a68:	4413      	add	r3, r2
 8002a6a:	3360      	adds	r3, #96	; 0x60
 8002a6c:	2204      	movs	r2, #4
 8002a6e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	015a      	lsls	r2, r3, #5
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	4413      	add	r3, r2
 8002a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	2302      	movs	r3, #2
 8002a80:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	b2d9      	uxtb	r1, r3
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	202c      	movs	r0, #44	; 0x2c
 8002a8c:	fb00 f303 	mul.w	r3, r0, r3
 8002a90:	4413      	add	r3, r2
 8002a92:	3360      	adds	r3, #96	; 0x60
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	461a      	mov	r2, r3
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f008 fea7 	bl	800b7ec <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002a9e:	e061      	b.n	8002b64 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	015a      	lsls	r2, r3, #5
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 0310 	and.w	r3, r3, #16
 8002ab2:	2b10      	cmp	r3, #16
 8002ab4:	d156      	bne.n	8002b64 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	212c      	movs	r1, #44	; 0x2c
 8002abc:	fb01 f303 	mul.w	r3, r1, r3
 8002ac0:	4413      	add	r3, r2
 8002ac2:	333f      	adds	r3, #63	; 0x3f
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	2b03      	cmp	r3, #3
 8002ac8:	d111      	bne.n	8002aee <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	212c      	movs	r1, #44	; 0x2c
 8002ad0:	fb01 f303 	mul.w	r3, r1, r3
 8002ad4:	4413      	add	r3, r2
 8002ad6:	335c      	adds	r3, #92	; 0x5c
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	4611      	mov	r1, r2
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f003 f8a5 	bl	8005c36 <USB_HC_Halt>
 8002aec:	e031      	b.n	8002b52 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	212c      	movs	r1, #44	; 0x2c
 8002af4:	fb01 f303 	mul.w	r3, r1, r3
 8002af8:	4413      	add	r3, r2
 8002afa:	333f      	adds	r3, #63	; 0x3f
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d009      	beq.n	8002b16 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	212c      	movs	r1, #44	; 0x2c
 8002b08:	fb01 f303 	mul.w	r3, r1, r3
 8002b0c:	4413      	add	r3, r2
 8002b0e:	333f      	adds	r3, #63	; 0x3f
 8002b10:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d11d      	bne.n	8002b52 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	212c      	movs	r1, #44	; 0x2c
 8002b1c:	fb01 f303 	mul.w	r3, r1, r3
 8002b20:	4413      	add	r3, r2
 8002b22:	335c      	adds	r3, #92	; 0x5c
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d110      	bne.n	8002b52 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	212c      	movs	r1, #44	; 0x2c
 8002b36:	fb01 f303 	mul.w	r3, r1, r3
 8002b3a:	4413      	add	r3, r2
 8002b3c:	3361      	adds	r3, #97	; 0x61
 8002b3e:	2203      	movs	r2, #3
 8002b40:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	b2d2      	uxtb	r2, r2
 8002b4a:	4611      	mov	r1, r2
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f003 f872 	bl	8005c36 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	015a      	lsls	r2, r3, #5
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	4413      	add	r3, r2
 8002b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5e:	461a      	mov	r2, r3
 8002b60:	2310      	movs	r3, #16
 8002b62:	6093      	str	r3, [r2, #8]
}
 8002b64:	bf00      	nop
 8002b66:	3718      	adds	r7, #24
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b088      	sub	sp, #32
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	460b      	mov	r3, r1
 8002b76:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002b82:	78fb      	ldrb	r3, [r7, #3]
 8002b84:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	015a      	lsls	r2, r3, #5
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f003 0304 	and.w	r3, r3, #4
 8002b98:	2b04      	cmp	r3, #4
 8002b9a:	d11a      	bne.n	8002bd2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	015a      	lsls	r2, r3, #5
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba8:	461a      	mov	r2, r3
 8002baa:	2304      	movs	r3, #4
 8002bac:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	212c      	movs	r1, #44	; 0x2c
 8002bb4:	fb01 f303 	mul.w	r3, r1, r3
 8002bb8:	4413      	add	r3, r2
 8002bba:	3361      	adds	r3, #97	; 0x61
 8002bbc:	2206      	movs	r2, #6
 8002bbe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	b2d2      	uxtb	r2, r2
 8002bc8:	4611      	mov	r1, r2
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f003 f833 	bl	8005c36 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002bd0:	e331      	b.n	8003236 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	015a      	lsls	r2, r3, #5
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	4413      	add	r3, r2
 8002bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f003 0320 	and.w	r3, r3, #32
 8002be4:	2b20      	cmp	r3, #32
 8002be6:	d12e      	bne.n	8002c46 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	015a      	lsls	r2, r3, #5
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	4413      	add	r3, r2
 8002bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	2320      	movs	r3, #32
 8002bf8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	212c      	movs	r1, #44	; 0x2c
 8002c00:	fb01 f303 	mul.w	r3, r1, r3
 8002c04:	4413      	add	r3, r2
 8002c06:	333d      	adds	r3, #61	; 0x3d
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	f040 8313 	bne.w	8003236 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	212c      	movs	r1, #44	; 0x2c
 8002c16:	fb01 f303 	mul.w	r3, r1, r3
 8002c1a:	4413      	add	r3, r2
 8002c1c:	333d      	adds	r3, #61	; 0x3d
 8002c1e:	2200      	movs	r2, #0
 8002c20:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	212c      	movs	r1, #44	; 0x2c
 8002c28:	fb01 f303 	mul.w	r3, r1, r3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	3360      	adds	r3, #96	; 0x60
 8002c30:	2202      	movs	r2, #2
 8002c32:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	b2d2      	uxtb	r2, r2
 8002c3c:	4611      	mov	r1, r2
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f002 fff9 	bl	8005c36 <USB_HC_Halt>
}
 8002c44:	e2f7      	b.n	8003236 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	015a      	lsls	r2, r3, #5
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c5c:	d112      	bne.n	8002c84 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	015a      	lsls	r2, r3, #5
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	4413      	add	r3, r2
 8002c66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c70:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	b2d2      	uxtb	r2, r2
 8002c7a:	4611      	mov	r1, r2
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f002 ffda 	bl	8005c36 <USB_HC_Halt>
}
 8002c82:	e2d8      	b.n	8003236 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	015a      	lsls	r2, r3, #5
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d140      	bne.n	8002d1c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	212c      	movs	r1, #44	; 0x2c
 8002ca0:	fb01 f303 	mul.w	r3, r1, r3
 8002ca4:	4413      	add	r3, r2
 8002ca6:	335c      	adds	r3, #92	; 0x5c
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	015a      	lsls	r2, r3, #5
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cbe:	2b40      	cmp	r3, #64	; 0x40
 8002cc0:	d111      	bne.n	8002ce6 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	212c      	movs	r1, #44	; 0x2c
 8002cc8:	fb01 f303 	mul.w	r3, r1, r3
 8002ccc:	4413      	add	r3, r2
 8002cce:	333d      	adds	r3, #61	; 0x3d
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	015a      	lsls	r2, r3, #5
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	4413      	add	r3, r2
 8002cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	2340      	movs	r3, #64	; 0x40
 8002ce4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	015a      	lsls	r2, r3, #5
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	4413      	add	r3, r2
 8002cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	212c      	movs	r1, #44	; 0x2c
 8002cfe:	fb01 f303 	mul.w	r3, r1, r3
 8002d02:	4413      	add	r3, r2
 8002d04:	3361      	adds	r3, #97	; 0x61
 8002d06:	2201      	movs	r2, #1
 8002d08:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	4611      	mov	r1, r2
 8002d14:	4618      	mov	r0, r3
 8002d16:	f002 ff8e 	bl	8005c36 <USB_HC_Halt>
}
 8002d1a:	e28c      	b.n	8003236 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	015a      	lsls	r2, r3, #5
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	4413      	add	r3, r2
 8002d24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2e:	2b40      	cmp	r3, #64	; 0x40
 8002d30:	d12c      	bne.n	8002d8c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	212c      	movs	r1, #44	; 0x2c
 8002d38:	fb01 f303 	mul.w	r3, r1, r3
 8002d3c:	4413      	add	r3, r2
 8002d3e:	3361      	adds	r3, #97	; 0x61
 8002d40:	2204      	movs	r2, #4
 8002d42:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	212c      	movs	r1, #44	; 0x2c
 8002d4a:	fb01 f303 	mul.w	r3, r1, r3
 8002d4e:	4413      	add	r3, r2
 8002d50:	333d      	adds	r3, #61	; 0x3d
 8002d52:	2201      	movs	r2, #1
 8002d54:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	212c      	movs	r1, #44	; 0x2c
 8002d5c:	fb01 f303 	mul.w	r3, r1, r3
 8002d60:	4413      	add	r3, r2
 8002d62:	335c      	adds	r3, #92	; 0x5c
 8002d64:	2200      	movs	r2, #0
 8002d66:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	b2d2      	uxtb	r2, r2
 8002d70:	4611      	mov	r1, r2
 8002d72:	4618      	mov	r0, r3
 8002d74:	f002 ff5f 	bl	8005c36 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	015a      	lsls	r2, r3, #5
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	4413      	add	r3, r2
 8002d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d84:	461a      	mov	r2, r3
 8002d86:	2340      	movs	r3, #64	; 0x40
 8002d88:	6093      	str	r3, [r2, #8]
}
 8002d8a:	e254      	b.n	8003236 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	015a      	lsls	r2, r3, #5
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	4413      	add	r3, r2
 8002d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 0308 	and.w	r3, r3, #8
 8002d9e:	2b08      	cmp	r3, #8
 8002da0:	d11a      	bne.n	8002dd8 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	015a      	lsls	r2, r3, #5
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	4413      	add	r3, r2
 8002daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dae:	461a      	mov	r2, r3
 8002db0:	2308      	movs	r3, #8
 8002db2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	212c      	movs	r1, #44	; 0x2c
 8002dba:	fb01 f303 	mul.w	r3, r1, r3
 8002dbe:	4413      	add	r3, r2
 8002dc0:	3361      	adds	r3, #97	; 0x61
 8002dc2:	2205      	movs	r2, #5
 8002dc4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	b2d2      	uxtb	r2, r2
 8002dce:	4611      	mov	r1, r2
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f002 ff30 	bl	8005c36 <USB_HC_Halt>
}
 8002dd6:	e22e      	b.n	8003236 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	015a      	lsls	r2, r3, #5
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	4413      	add	r3, r2
 8002de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 0310 	and.w	r3, r3, #16
 8002dea:	2b10      	cmp	r3, #16
 8002dec:	d140      	bne.n	8002e70 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	212c      	movs	r1, #44	; 0x2c
 8002df4:	fb01 f303 	mul.w	r3, r1, r3
 8002df8:	4413      	add	r3, r2
 8002dfa:	335c      	adds	r3, #92	; 0x5c
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	212c      	movs	r1, #44	; 0x2c
 8002e06:	fb01 f303 	mul.w	r3, r1, r3
 8002e0a:	4413      	add	r3, r2
 8002e0c:	3361      	adds	r3, #97	; 0x61
 8002e0e:	2203      	movs	r2, #3
 8002e10:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	212c      	movs	r1, #44	; 0x2c
 8002e18:	fb01 f303 	mul.w	r3, r1, r3
 8002e1c:	4413      	add	r3, r2
 8002e1e:	333d      	adds	r3, #61	; 0x3d
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d112      	bne.n	8002e4c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	212c      	movs	r1, #44	; 0x2c
 8002e2c:	fb01 f303 	mul.w	r3, r1, r3
 8002e30:	4413      	add	r3, r2
 8002e32:	333c      	adds	r3, #60	; 0x3c
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d108      	bne.n	8002e4c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	212c      	movs	r1, #44	; 0x2c
 8002e40:	fb01 f303 	mul.w	r3, r1, r3
 8002e44:	4413      	add	r3, r2
 8002e46:	333d      	adds	r3, #61	; 0x3d
 8002e48:	2201      	movs	r2, #1
 8002e4a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	697a      	ldr	r2, [r7, #20]
 8002e52:	b2d2      	uxtb	r2, r2
 8002e54:	4611      	mov	r1, r2
 8002e56:	4618      	mov	r0, r3
 8002e58:	f002 feed 	bl	8005c36 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	015a      	lsls	r2, r3, #5
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	4413      	add	r3, r2
 8002e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e68:	461a      	mov	r2, r3
 8002e6a:	2310      	movs	r3, #16
 8002e6c:	6093      	str	r3, [r2, #8]
}
 8002e6e:	e1e2      	b.n	8003236 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	015a      	lsls	r2, r3, #5
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	4413      	add	r3, r2
 8002e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e82:	2b80      	cmp	r3, #128	; 0x80
 8002e84:	d164      	bne.n	8002f50 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d111      	bne.n	8002eb2 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	212c      	movs	r1, #44	; 0x2c
 8002e94:	fb01 f303 	mul.w	r3, r1, r3
 8002e98:	4413      	add	r3, r2
 8002e9a:	3361      	adds	r3, #97	; 0x61
 8002e9c:	2206      	movs	r2, #6
 8002e9e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	b2d2      	uxtb	r2, r2
 8002ea8:	4611      	mov	r1, r2
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f002 fec3 	bl	8005c36 <USB_HC_Halt>
 8002eb0:	e044      	b.n	8002f3c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	212c      	movs	r1, #44	; 0x2c
 8002eb8:	fb01 f303 	mul.w	r3, r1, r3
 8002ebc:	4413      	add	r3, r2
 8002ebe:	335c      	adds	r3, #92	; 0x5c
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	1c5a      	adds	r2, r3, #1
 8002ec4:	6879      	ldr	r1, [r7, #4]
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	202c      	movs	r0, #44	; 0x2c
 8002eca:	fb00 f303 	mul.w	r3, r0, r3
 8002ece:	440b      	add	r3, r1
 8002ed0:	335c      	adds	r3, #92	; 0x5c
 8002ed2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	212c      	movs	r1, #44	; 0x2c
 8002eda:	fb01 f303 	mul.w	r3, r1, r3
 8002ede:	4413      	add	r3, r2
 8002ee0:	335c      	adds	r3, #92	; 0x5c
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d920      	bls.n	8002f2a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	212c      	movs	r1, #44	; 0x2c
 8002eee:	fb01 f303 	mul.w	r3, r1, r3
 8002ef2:	4413      	add	r3, r2
 8002ef4:	335c      	adds	r3, #92	; 0x5c
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	212c      	movs	r1, #44	; 0x2c
 8002f00:	fb01 f303 	mul.w	r3, r1, r3
 8002f04:	4413      	add	r3, r2
 8002f06:	3360      	adds	r3, #96	; 0x60
 8002f08:	2204      	movs	r2, #4
 8002f0a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	b2d9      	uxtb	r1, r3
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	202c      	movs	r0, #44	; 0x2c
 8002f16:	fb00 f303 	mul.w	r3, r0, r3
 8002f1a:	4413      	add	r3, r2
 8002f1c:	3360      	adds	r3, #96	; 0x60
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	461a      	mov	r2, r3
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f008 fc62 	bl	800b7ec <HAL_HCD_HC_NotifyURBChange_Callback>
 8002f28:	e008      	b.n	8002f3c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	212c      	movs	r1, #44	; 0x2c
 8002f30:	fb01 f303 	mul.w	r3, r1, r3
 8002f34:	4413      	add	r3, r2
 8002f36:	3360      	adds	r3, #96	; 0x60
 8002f38:	2202      	movs	r2, #2
 8002f3a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	015a      	lsls	r2, r3, #5
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	4413      	add	r3, r2
 8002f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f48:	461a      	mov	r2, r3
 8002f4a:	2380      	movs	r3, #128	; 0x80
 8002f4c:	6093      	str	r3, [r2, #8]
}
 8002f4e:	e172      	b.n	8003236 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	015a      	lsls	r2, r3, #5
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	4413      	add	r3, r2
 8002f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f66:	d11b      	bne.n	8002fa0 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	212c      	movs	r1, #44	; 0x2c
 8002f6e:	fb01 f303 	mul.w	r3, r1, r3
 8002f72:	4413      	add	r3, r2
 8002f74:	3361      	adds	r3, #97	; 0x61
 8002f76:	2208      	movs	r2, #8
 8002f78:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	b2d2      	uxtb	r2, r2
 8002f82:	4611      	mov	r1, r2
 8002f84:	4618      	mov	r0, r3
 8002f86:	f002 fe56 	bl	8005c36 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	015a      	lsls	r2, r3, #5
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	4413      	add	r3, r2
 8002f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f96:	461a      	mov	r2, r3
 8002f98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f9c:	6093      	str	r3, [r2, #8]
}
 8002f9e:	e14a      	b.n	8003236 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	015a      	lsls	r2, r3, #5
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	f040 813f 	bne.w	8003236 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	212c      	movs	r1, #44	; 0x2c
 8002fbe:	fb01 f303 	mul.w	r3, r1, r3
 8002fc2:	4413      	add	r3, r2
 8002fc4:	3361      	adds	r3, #97	; 0x61
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d17d      	bne.n	80030c8 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	212c      	movs	r1, #44	; 0x2c
 8002fd2:	fb01 f303 	mul.w	r3, r1, r3
 8002fd6:	4413      	add	r3, r2
 8002fd8:	3360      	adds	r3, #96	; 0x60
 8002fda:	2201      	movs	r2, #1
 8002fdc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	212c      	movs	r1, #44	; 0x2c
 8002fe4:	fb01 f303 	mul.w	r3, r1, r3
 8002fe8:	4413      	add	r3, r2
 8002fea:	333f      	adds	r3, #63	; 0x3f
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d00a      	beq.n	8003008 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	212c      	movs	r1, #44	; 0x2c
 8002ff8:	fb01 f303 	mul.w	r3, r1, r3
 8002ffc:	4413      	add	r3, r2
 8002ffe:	333f      	adds	r3, #63	; 0x3f
 8003000:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003002:	2b03      	cmp	r3, #3
 8003004:	f040 8100 	bne.w	8003208 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d113      	bne.n	8003038 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	212c      	movs	r1, #44	; 0x2c
 8003016:	fb01 f303 	mul.w	r3, r1, r3
 800301a:	4413      	add	r3, r2
 800301c:	3355      	adds	r3, #85	; 0x55
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	f083 0301 	eor.w	r3, r3, #1
 8003024:	b2d8      	uxtb	r0, r3
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	212c      	movs	r1, #44	; 0x2c
 800302c:	fb01 f303 	mul.w	r3, r1, r3
 8003030:	4413      	add	r3, r2
 8003032:	3355      	adds	r3, #85	; 0x55
 8003034:	4602      	mov	r2, r0
 8003036:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	2b01      	cmp	r3, #1
 800303e:	f040 80e3 	bne.w	8003208 <HCD_HC_OUT_IRQHandler+0x69c>
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	212c      	movs	r1, #44	; 0x2c
 8003048:	fb01 f303 	mul.w	r3, r1, r3
 800304c:	4413      	add	r3, r2
 800304e:	334c      	adds	r3, #76	; 0x4c
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2b00      	cmp	r3, #0
 8003054:	f000 80d8 	beq.w	8003208 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	212c      	movs	r1, #44	; 0x2c
 800305e:	fb01 f303 	mul.w	r3, r1, r3
 8003062:	4413      	add	r3, r2
 8003064:	334c      	adds	r3, #76	; 0x4c
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6879      	ldr	r1, [r7, #4]
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	202c      	movs	r0, #44	; 0x2c
 800306e:	fb00 f202 	mul.w	r2, r0, r2
 8003072:	440a      	add	r2, r1
 8003074:	3240      	adds	r2, #64	; 0x40
 8003076:	8812      	ldrh	r2, [r2, #0]
 8003078:	4413      	add	r3, r2
 800307a:	3b01      	subs	r3, #1
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	202c      	movs	r0, #44	; 0x2c
 8003082:	fb00 f202 	mul.w	r2, r0, r2
 8003086:	440a      	add	r2, r1
 8003088:	3240      	adds	r2, #64	; 0x40
 800308a:	8812      	ldrh	r2, [r2, #0]
 800308c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003090:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 80b5 	beq.w	8003208 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	212c      	movs	r1, #44	; 0x2c
 80030a4:	fb01 f303 	mul.w	r3, r1, r3
 80030a8:	4413      	add	r3, r2
 80030aa:	3355      	adds	r3, #85	; 0x55
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	f083 0301 	eor.w	r3, r3, #1
 80030b2:	b2d8      	uxtb	r0, r3
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	212c      	movs	r1, #44	; 0x2c
 80030ba:	fb01 f303 	mul.w	r3, r1, r3
 80030be:	4413      	add	r3, r2
 80030c0:	3355      	adds	r3, #85	; 0x55
 80030c2:	4602      	mov	r2, r0
 80030c4:	701a      	strb	r2, [r3, #0]
 80030c6:	e09f      	b.n	8003208 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	212c      	movs	r1, #44	; 0x2c
 80030ce:	fb01 f303 	mul.w	r3, r1, r3
 80030d2:	4413      	add	r3, r2
 80030d4:	3361      	adds	r3, #97	; 0x61
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	2b03      	cmp	r3, #3
 80030da:	d109      	bne.n	80030f0 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	212c      	movs	r1, #44	; 0x2c
 80030e2:	fb01 f303 	mul.w	r3, r1, r3
 80030e6:	4413      	add	r3, r2
 80030e8:	3360      	adds	r3, #96	; 0x60
 80030ea:	2202      	movs	r2, #2
 80030ec:	701a      	strb	r2, [r3, #0]
 80030ee:	e08b      	b.n	8003208 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	212c      	movs	r1, #44	; 0x2c
 80030f6:	fb01 f303 	mul.w	r3, r1, r3
 80030fa:	4413      	add	r3, r2
 80030fc:	3361      	adds	r3, #97	; 0x61
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	2b04      	cmp	r3, #4
 8003102:	d109      	bne.n	8003118 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	212c      	movs	r1, #44	; 0x2c
 800310a:	fb01 f303 	mul.w	r3, r1, r3
 800310e:	4413      	add	r3, r2
 8003110:	3360      	adds	r3, #96	; 0x60
 8003112:	2202      	movs	r2, #2
 8003114:	701a      	strb	r2, [r3, #0]
 8003116:	e077      	b.n	8003208 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	212c      	movs	r1, #44	; 0x2c
 800311e:	fb01 f303 	mul.w	r3, r1, r3
 8003122:	4413      	add	r3, r2
 8003124:	3361      	adds	r3, #97	; 0x61
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	2b05      	cmp	r3, #5
 800312a:	d109      	bne.n	8003140 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	212c      	movs	r1, #44	; 0x2c
 8003132:	fb01 f303 	mul.w	r3, r1, r3
 8003136:	4413      	add	r3, r2
 8003138:	3360      	adds	r3, #96	; 0x60
 800313a:	2205      	movs	r2, #5
 800313c:	701a      	strb	r2, [r3, #0]
 800313e:	e063      	b.n	8003208 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	212c      	movs	r1, #44	; 0x2c
 8003146:	fb01 f303 	mul.w	r3, r1, r3
 800314a:	4413      	add	r3, r2
 800314c:	3361      	adds	r3, #97	; 0x61
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	2b06      	cmp	r3, #6
 8003152:	d009      	beq.n	8003168 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	212c      	movs	r1, #44	; 0x2c
 800315a:	fb01 f303 	mul.w	r3, r1, r3
 800315e:	4413      	add	r3, r2
 8003160:	3361      	adds	r3, #97	; 0x61
 8003162:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003164:	2b08      	cmp	r3, #8
 8003166:	d14f      	bne.n	8003208 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	212c      	movs	r1, #44	; 0x2c
 800316e:	fb01 f303 	mul.w	r3, r1, r3
 8003172:	4413      	add	r3, r2
 8003174:	335c      	adds	r3, #92	; 0x5c
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	1c5a      	adds	r2, r3, #1
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	202c      	movs	r0, #44	; 0x2c
 8003180:	fb00 f303 	mul.w	r3, r0, r3
 8003184:	440b      	add	r3, r1
 8003186:	335c      	adds	r3, #92	; 0x5c
 8003188:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	212c      	movs	r1, #44	; 0x2c
 8003190:	fb01 f303 	mul.w	r3, r1, r3
 8003194:	4413      	add	r3, r2
 8003196:	335c      	adds	r3, #92	; 0x5c
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2b02      	cmp	r3, #2
 800319c:	d912      	bls.n	80031c4 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	212c      	movs	r1, #44	; 0x2c
 80031a4:	fb01 f303 	mul.w	r3, r1, r3
 80031a8:	4413      	add	r3, r2
 80031aa:	335c      	adds	r3, #92	; 0x5c
 80031ac:	2200      	movs	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	212c      	movs	r1, #44	; 0x2c
 80031b6:	fb01 f303 	mul.w	r3, r1, r3
 80031ba:	4413      	add	r3, r2
 80031bc:	3360      	adds	r3, #96	; 0x60
 80031be:	2204      	movs	r2, #4
 80031c0:	701a      	strb	r2, [r3, #0]
 80031c2:	e021      	b.n	8003208 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	212c      	movs	r1, #44	; 0x2c
 80031ca:	fb01 f303 	mul.w	r3, r1, r3
 80031ce:	4413      	add	r3, r2
 80031d0:	3360      	adds	r3, #96	; 0x60
 80031d2:	2202      	movs	r2, #2
 80031d4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	015a      	lsls	r2, r3, #5
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	4413      	add	r3, r2
 80031de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80031ec:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80031f4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	015a      	lsls	r2, r3, #5
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	4413      	add	r3, r2
 80031fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003202:	461a      	mov	r2, r3
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	015a      	lsls	r2, r3, #5
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	4413      	add	r3, r2
 8003210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003214:	461a      	mov	r2, r3
 8003216:	2302      	movs	r3, #2
 8003218:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	b2d9      	uxtb	r1, r3
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	202c      	movs	r0, #44	; 0x2c
 8003224:	fb00 f303 	mul.w	r3, r0, r3
 8003228:	4413      	add	r3, r2
 800322a:	3360      	adds	r3, #96	; 0x60
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	461a      	mov	r2, r3
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f008 fadb 	bl	800b7ec <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003236:	bf00      	nop
 8003238:	3720      	adds	r7, #32
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b08a      	sub	sp, #40	; 0x28
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	f003 030f 	and.w	r3, r3, #15
 800325e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	0c5b      	lsrs	r3, r3, #17
 8003264:	f003 030f 	and.w	r3, r3, #15
 8003268:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	091b      	lsrs	r3, r3, #4
 800326e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003272:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	2b02      	cmp	r3, #2
 8003278:	d004      	beq.n	8003284 <HCD_RXQLVL_IRQHandler+0x46>
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	2b05      	cmp	r3, #5
 800327e:	f000 80a9 	beq.w	80033d4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003282:	e0aa      	b.n	80033da <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	2b00      	cmp	r3, #0
 8003288:	f000 80a6 	beq.w	80033d8 <HCD_RXQLVL_IRQHandler+0x19a>
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	212c      	movs	r1, #44	; 0x2c
 8003292:	fb01 f303 	mul.w	r3, r1, r3
 8003296:	4413      	add	r3, r2
 8003298:	3344      	adds	r3, #68	; 0x44
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 809b 	beq.w	80033d8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	212c      	movs	r1, #44	; 0x2c
 80032a8:	fb01 f303 	mul.w	r3, r1, r3
 80032ac:	4413      	add	r3, r2
 80032ae:	3350      	adds	r3, #80	; 0x50
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	441a      	add	r2, r3
 80032b6:	6879      	ldr	r1, [r7, #4]
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	202c      	movs	r0, #44	; 0x2c
 80032bc:	fb00 f303 	mul.w	r3, r0, r3
 80032c0:	440b      	add	r3, r1
 80032c2:	334c      	adds	r3, #76	; 0x4c
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d87a      	bhi.n	80033c0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6818      	ldr	r0, [r3, #0]
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	212c      	movs	r1, #44	; 0x2c
 80032d4:	fb01 f303 	mul.w	r3, r1, r3
 80032d8:	4413      	add	r3, r2
 80032da:	3344      	adds	r3, #68	; 0x44
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	b292      	uxth	r2, r2
 80032e2:	4619      	mov	r1, r3
 80032e4:	f001 fffe 	bl	80052e4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	212c      	movs	r1, #44	; 0x2c
 80032ee:	fb01 f303 	mul.w	r3, r1, r3
 80032f2:	4413      	add	r3, r2
 80032f4:	3344      	adds	r3, #68	; 0x44
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	441a      	add	r2, r3
 80032fc:	6879      	ldr	r1, [r7, #4]
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	202c      	movs	r0, #44	; 0x2c
 8003302:	fb00 f303 	mul.w	r3, r0, r3
 8003306:	440b      	add	r3, r1
 8003308:	3344      	adds	r3, #68	; 0x44
 800330a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	212c      	movs	r1, #44	; 0x2c
 8003312:	fb01 f303 	mul.w	r3, r1, r3
 8003316:	4413      	add	r3, r2
 8003318:	3350      	adds	r3, #80	; 0x50
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	441a      	add	r2, r3
 8003320:	6879      	ldr	r1, [r7, #4]
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	202c      	movs	r0, #44	; 0x2c
 8003326:	fb00 f303 	mul.w	r3, r0, r3
 800332a:	440b      	add	r3, r1
 800332c:	3350      	adds	r3, #80	; 0x50
 800332e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	015a      	lsls	r2, r3, #5
 8003334:	6a3b      	ldr	r3, [r7, #32]
 8003336:	4413      	add	r3, r2
 8003338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	0cdb      	lsrs	r3, r3, #19
 8003340:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003344:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	212c      	movs	r1, #44	; 0x2c
 800334c:	fb01 f303 	mul.w	r3, r1, r3
 8003350:	4413      	add	r3, r2
 8003352:	3340      	adds	r3, #64	; 0x40
 8003354:	881b      	ldrh	r3, [r3, #0]
 8003356:	461a      	mov	r2, r3
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	4293      	cmp	r3, r2
 800335c:	d13c      	bne.n	80033d8 <HCD_RXQLVL_IRQHandler+0x19a>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d039      	beq.n	80033d8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	015a      	lsls	r2, r3, #5
 8003368:	6a3b      	ldr	r3, [r7, #32]
 800336a:	4413      	add	r3, r2
 800336c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800337a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003382:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	015a      	lsls	r2, r3, #5
 8003388:	6a3b      	ldr	r3, [r7, #32]
 800338a:	4413      	add	r3, r2
 800338c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003390:	461a      	mov	r2, r3
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	212c      	movs	r1, #44	; 0x2c
 800339c:	fb01 f303 	mul.w	r3, r1, r3
 80033a0:	4413      	add	r3, r2
 80033a2:	3354      	adds	r3, #84	; 0x54
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	f083 0301 	eor.w	r3, r3, #1
 80033aa:	b2d8      	uxtb	r0, r3
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	212c      	movs	r1, #44	; 0x2c
 80033b2:	fb01 f303 	mul.w	r3, r1, r3
 80033b6:	4413      	add	r3, r2
 80033b8:	3354      	adds	r3, #84	; 0x54
 80033ba:	4602      	mov	r2, r0
 80033bc:	701a      	strb	r2, [r3, #0]
      break;
 80033be:	e00b      	b.n	80033d8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	212c      	movs	r1, #44	; 0x2c
 80033c6:	fb01 f303 	mul.w	r3, r1, r3
 80033ca:	4413      	add	r3, r2
 80033cc:	3360      	adds	r3, #96	; 0x60
 80033ce:	2204      	movs	r2, #4
 80033d0:	701a      	strb	r2, [r3, #0]
      break;
 80033d2:	e001      	b.n	80033d8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80033d4:	bf00      	nop
 80033d6:	e000      	b.n	80033da <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80033d8:	bf00      	nop
  }
}
 80033da:	bf00      	nop
 80033dc:	3728      	adds	r7, #40	; 0x28
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b086      	sub	sp, #24
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800340e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b02      	cmp	r3, #2
 8003418:	d10b      	bne.n	8003432 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	2b01      	cmp	r3, #1
 8003422:	d102      	bne.n	800342a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f008 f9c5 	bl	800b7b4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	f043 0302 	orr.w	r3, r3, #2
 8003430:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f003 0308 	and.w	r3, r3, #8
 8003438:	2b08      	cmp	r3, #8
 800343a:	d132      	bne.n	80034a2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	f043 0308 	orr.w	r3, r3, #8
 8003442:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f003 0304 	and.w	r3, r3, #4
 800344a:	2b04      	cmp	r3, #4
 800344c:	d126      	bne.n	800349c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	2b02      	cmp	r3, #2
 8003454:	d113      	bne.n	800347e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800345c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003460:	d106      	bne.n	8003470 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2102      	movs	r1, #2
 8003468:	4618      	mov	r0, r3
 800346a:	f002 f8a9 	bl	80055c0 <USB_InitFSLSPClkSel>
 800346e:	e011      	b.n	8003494 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2101      	movs	r1, #1
 8003476:	4618      	mov	r0, r3
 8003478:	f002 f8a2 	bl	80055c0 <USB_InitFSLSPClkSel>
 800347c:	e00a      	b.n	8003494 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d106      	bne.n	8003494 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800348c:	461a      	mov	r2, r3
 800348e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003492:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f008 f9bb 	bl	800b810 <HAL_HCD_PortEnabled_Callback>
 800349a:	e002      	b.n	80034a2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f008 f9c5 	bl	800b82c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f003 0320 	and.w	r3, r3, #32
 80034a8:	2b20      	cmp	r3, #32
 80034aa:	d103      	bne.n	80034b4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	f043 0320 	orr.w	r3, r3, #32
 80034b2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80034ba:	461a      	mov	r2, r3
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	6013      	str	r3, [r2, #0]
}
 80034c0:	bf00      	nop
 80034c2:	3718      	adds	r7, #24
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e12b      	b.n	8003732 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d106      	bne.n	80034f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f7fd fe7e 	bl	80011f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2224      	movs	r2, #36	; 0x24
 80034f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f022 0201 	bic.w	r2, r2, #1
 800350a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800351a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800352a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800352c:	f001 fa20 	bl	8004970 <HAL_RCC_GetPCLK1Freq>
 8003530:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	4a81      	ldr	r2, [pc, #516]	; (800373c <HAL_I2C_Init+0x274>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d807      	bhi.n	800354c <HAL_I2C_Init+0x84>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	4a80      	ldr	r2, [pc, #512]	; (8003740 <HAL_I2C_Init+0x278>)
 8003540:	4293      	cmp	r3, r2
 8003542:	bf94      	ite	ls
 8003544:	2301      	movls	r3, #1
 8003546:	2300      	movhi	r3, #0
 8003548:	b2db      	uxtb	r3, r3
 800354a:	e006      	b.n	800355a <HAL_I2C_Init+0x92>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	4a7d      	ldr	r2, [pc, #500]	; (8003744 <HAL_I2C_Init+0x27c>)
 8003550:	4293      	cmp	r3, r2
 8003552:	bf94      	ite	ls
 8003554:	2301      	movls	r3, #1
 8003556:	2300      	movhi	r3, #0
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e0e7      	b.n	8003732 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	4a78      	ldr	r2, [pc, #480]	; (8003748 <HAL_I2C_Init+0x280>)
 8003566:	fba2 2303 	umull	r2, r3, r2, r3
 800356a:	0c9b      	lsrs	r3, r3, #18
 800356c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68ba      	ldr	r2, [r7, #8]
 800357e:	430a      	orrs	r2, r1
 8003580:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	6a1b      	ldr	r3, [r3, #32]
 8003588:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	4a6a      	ldr	r2, [pc, #424]	; (800373c <HAL_I2C_Init+0x274>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d802      	bhi.n	800359c <HAL_I2C_Init+0xd4>
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	3301      	adds	r3, #1
 800359a:	e009      	b.n	80035b0 <HAL_I2C_Init+0xe8>
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80035a2:	fb02 f303 	mul.w	r3, r2, r3
 80035a6:	4a69      	ldr	r2, [pc, #420]	; (800374c <HAL_I2C_Init+0x284>)
 80035a8:	fba2 2303 	umull	r2, r3, r2, r3
 80035ac:	099b      	lsrs	r3, r3, #6
 80035ae:	3301      	adds	r3, #1
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	6812      	ldr	r2, [r2, #0]
 80035b4:	430b      	orrs	r3, r1
 80035b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80035c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	495c      	ldr	r1, [pc, #368]	; (800373c <HAL_I2C_Init+0x274>)
 80035cc:	428b      	cmp	r3, r1
 80035ce:	d819      	bhi.n	8003604 <HAL_I2C_Init+0x13c>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	1e59      	subs	r1, r3, #1
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	fbb1 f3f3 	udiv	r3, r1, r3
 80035de:	1c59      	adds	r1, r3, #1
 80035e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80035e4:	400b      	ands	r3, r1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00a      	beq.n	8003600 <HAL_I2C_Init+0x138>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	1e59      	subs	r1, r3, #1
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80035f8:	3301      	adds	r3, #1
 80035fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035fe:	e051      	b.n	80036a4 <HAL_I2C_Init+0x1dc>
 8003600:	2304      	movs	r3, #4
 8003602:	e04f      	b.n	80036a4 <HAL_I2C_Init+0x1dc>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d111      	bne.n	8003630 <HAL_I2C_Init+0x168>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	1e58      	subs	r0, r3, #1
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6859      	ldr	r1, [r3, #4]
 8003614:	460b      	mov	r3, r1
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	440b      	add	r3, r1
 800361a:	fbb0 f3f3 	udiv	r3, r0, r3
 800361e:	3301      	adds	r3, #1
 8003620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003624:	2b00      	cmp	r3, #0
 8003626:	bf0c      	ite	eq
 8003628:	2301      	moveq	r3, #1
 800362a:	2300      	movne	r3, #0
 800362c:	b2db      	uxtb	r3, r3
 800362e:	e012      	b.n	8003656 <HAL_I2C_Init+0x18e>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	1e58      	subs	r0, r3, #1
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6859      	ldr	r1, [r3, #4]
 8003638:	460b      	mov	r3, r1
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	440b      	add	r3, r1
 800363e:	0099      	lsls	r1, r3, #2
 8003640:	440b      	add	r3, r1
 8003642:	fbb0 f3f3 	udiv	r3, r0, r3
 8003646:	3301      	adds	r3, #1
 8003648:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800364c:	2b00      	cmp	r3, #0
 800364e:	bf0c      	ite	eq
 8003650:	2301      	moveq	r3, #1
 8003652:	2300      	movne	r3, #0
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <HAL_I2C_Init+0x196>
 800365a:	2301      	movs	r3, #1
 800365c:	e022      	b.n	80036a4 <HAL_I2C_Init+0x1dc>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10e      	bne.n	8003684 <HAL_I2C_Init+0x1bc>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	1e58      	subs	r0, r3, #1
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6859      	ldr	r1, [r3, #4]
 800366e:	460b      	mov	r3, r1
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	440b      	add	r3, r1
 8003674:	fbb0 f3f3 	udiv	r3, r0, r3
 8003678:	3301      	adds	r3, #1
 800367a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800367e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003682:	e00f      	b.n	80036a4 <HAL_I2C_Init+0x1dc>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	1e58      	subs	r0, r3, #1
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6859      	ldr	r1, [r3, #4]
 800368c:	460b      	mov	r3, r1
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	440b      	add	r3, r1
 8003692:	0099      	lsls	r1, r3, #2
 8003694:	440b      	add	r3, r1
 8003696:	fbb0 f3f3 	udiv	r3, r0, r3
 800369a:	3301      	adds	r3, #1
 800369c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036a4:	6879      	ldr	r1, [r7, #4]
 80036a6:	6809      	ldr	r1, [r1, #0]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	69da      	ldr	r2, [r3, #28]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	431a      	orrs	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	430a      	orrs	r2, r1
 80036c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80036d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	6911      	ldr	r1, [r2, #16]
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	68d2      	ldr	r2, [r2, #12]
 80036de:	4311      	orrs	r1, r2
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	6812      	ldr	r2, [r2, #0]
 80036e4:	430b      	orrs	r3, r1
 80036e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	695a      	ldr	r2, [r3, #20]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	431a      	orrs	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	430a      	orrs	r2, r1
 8003702:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f042 0201 	orr.w	r2, r2, #1
 8003712:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2220      	movs	r2, #32
 800371e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	000186a0 	.word	0x000186a0
 8003740:	001e847f 	.word	0x001e847f
 8003744:	003d08ff 	.word	0x003d08ff
 8003748:	431bde83 	.word	0x431bde83
 800374c:	10624dd3 	.word	0x10624dd3

08003750 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b088      	sub	sp, #32
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e128      	b.n	80039b4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d109      	bne.n	8003782 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a90      	ldr	r2, [pc, #576]	; (80039bc <HAL_I2S_Init+0x26c>)
 800377a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f7fd fd7f 	bl	8001280 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2202      	movs	r2, #2
 8003786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	69db      	ldr	r3, [r3, #28]
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6812      	ldr	r2, [r2, #0]
 8003794:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003798:	f023 030f 	bic.w	r3, r3, #15
 800379c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2202      	movs	r2, #2
 80037a4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d060      	beq.n	8003870 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d102      	bne.n	80037bc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80037b6:	2310      	movs	r3, #16
 80037b8:	617b      	str	r3, [r7, #20]
 80037ba:	e001      	b.n	80037c0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80037bc:	2320      	movs	r3, #32
 80037be:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	2b20      	cmp	r3, #32
 80037c6:	d802      	bhi.n	80037ce <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80037ce:	2001      	movs	r0, #1
 80037d0:	f001 f9c4 	bl	8004b5c <HAL_RCCEx_GetPeriphCLKFreq>
 80037d4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037de:	d125      	bne.n	800382c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d010      	beq.n	800380a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80037f2:	4613      	mov	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4413      	add	r3, r2
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	461a      	mov	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	fbb2 f3f3 	udiv	r3, r2, r3
 8003804:	3305      	adds	r3, #5
 8003806:	613b      	str	r3, [r7, #16]
 8003808:	e01f      	b.n	800384a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	00db      	lsls	r3, r3, #3
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	fbb2 f2f3 	udiv	r2, r2, r3
 8003814:	4613      	mov	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4413      	add	r3, r2
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	461a      	mov	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	fbb2 f3f3 	udiv	r3, r2, r3
 8003826:	3305      	adds	r3, #5
 8003828:	613b      	str	r3, [r7, #16]
 800382a:	e00e      	b.n	800384a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	fbb2 f2f3 	udiv	r2, r2, r3
 8003834:	4613      	mov	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	461a      	mov	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	fbb2 f3f3 	udiv	r3, r2, r3
 8003846:	3305      	adds	r3, #5
 8003848:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	4a5c      	ldr	r2, [pc, #368]	; (80039c0 <HAL_I2S_Init+0x270>)
 800384e:	fba2 2303 	umull	r2, r3, r2, r3
 8003852:	08db      	lsrs	r3, r3, #3
 8003854:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	085b      	lsrs	r3, r3, #1
 8003866:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	021b      	lsls	r3, r3, #8
 800386c:	61bb      	str	r3, [r7, #24]
 800386e:	e003      	b.n	8003878 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003870:	2302      	movs	r3, #2
 8003872:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003874:	2300      	movs	r3, #0
 8003876:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d902      	bls.n	8003884 <HAL_I2S_Init+0x134>
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	2bff      	cmp	r3, #255	; 0xff
 8003882:	d907      	bls.n	8003894 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003888:	f043 0210 	orr.w	r2, r3, #16
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e08f      	b.n	80039b4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	691a      	ldr	r2, [r3, #16]
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	ea42 0103 	orr.w	r1, r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	69fa      	ldr	r2, [r7, #28]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80038b2:	f023 030f 	bic.w	r3, r3, #15
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	6851      	ldr	r1, [r2, #4]
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	6892      	ldr	r2, [r2, #8]
 80038be:	4311      	orrs	r1, r2
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	68d2      	ldr	r2, [r2, #12]
 80038c4:	4311      	orrs	r1, r2
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	6992      	ldr	r2, [r2, #24]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	431a      	orrs	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038d6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d161      	bne.n	80039a4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a38      	ldr	r2, [pc, #224]	; (80039c4 <HAL_I2S_Init+0x274>)
 80038e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a37      	ldr	r2, [pc, #220]	; (80039c8 <HAL_I2S_Init+0x278>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d101      	bne.n	80038f4 <HAL_I2S_Init+0x1a4>
 80038f0:	4b36      	ldr	r3, [pc, #216]	; (80039cc <HAL_I2S_Init+0x27c>)
 80038f2:	e001      	b.n	80038f8 <HAL_I2S_Init+0x1a8>
 80038f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038f8:	69db      	ldr	r3, [r3, #28]
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	6812      	ldr	r2, [r2, #0]
 80038fe:	4932      	ldr	r1, [pc, #200]	; (80039c8 <HAL_I2S_Init+0x278>)
 8003900:	428a      	cmp	r2, r1
 8003902:	d101      	bne.n	8003908 <HAL_I2S_Init+0x1b8>
 8003904:	4a31      	ldr	r2, [pc, #196]	; (80039cc <HAL_I2S_Init+0x27c>)
 8003906:	e001      	b.n	800390c <HAL_I2S_Init+0x1bc>
 8003908:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800390c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003910:	f023 030f 	bic.w	r3, r3, #15
 8003914:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a2b      	ldr	r2, [pc, #172]	; (80039c8 <HAL_I2S_Init+0x278>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d101      	bne.n	8003924 <HAL_I2S_Init+0x1d4>
 8003920:	4b2a      	ldr	r3, [pc, #168]	; (80039cc <HAL_I2S_Init+0x27c>)
 8003922:	e001      	b.n	8003928 <HAL_I2S_Init+0x1d8>
 8003924:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003928:	2202      	movs	r2, #2
 800392a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a25      	ldr	r2, [pc, #148]	; (80039c8 <HAL_I2S_Init+0x278>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d101      	bne.n	800393a <HAL_I2S_Init+0x1ea>
 8003936:	4b25      	ldr	r3, [pc, #148]	; (80039cc <HAL_I2S_Init+0x27c>)
 8003938:	e001      	b.n	800393e <HAL_I2S_Init+0x1ee>
 800393a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800393e:	69db      	ldr	r3, [r3, #28]
 8003940:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800394a:	d003      	beq.n	8003954 <HAL_I2S_Init+0x204>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d103      	bne.n	800395c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003954:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003958:	613b      	str	r3, [r7, #16]
 800395a:	e001      	b.n	8003960 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800395c:	2300      	movs	r3, #0
 800395e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800396a:	4313      	orrs	r3, r2
 800396c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003974:	4313      	orrs	r3, r2
 8003976:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800397e:	4313      	orrs	r3, r2
 8003980:	b29a      	uxth	r2, r3
 8003982:	897b      	ldrh	r3, [r7, #10]
 8003984:	4313      	orrs	r3, r2
 8003986:	b29b      	uxth	r3, r3
 8003988:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800398c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a0d      	ldr	r2, [pc, #52]	; (80039c8 <HAL_I2S_Init+0x278>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d101      	bne.n	800399c <HAL_I2S_Init+0x24c>
 8003998:	4b0c      	ldr	r3, [pc, #48]	; (80039cc <HAL_I2S_Init+0x27c>)
 800399a:	e001      	b.n	80039a0 <HAL_I2S_Init+0x250>
 800399c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039a0:	897a      	ldrh	r2, [r7, #10]
 80039a2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3720      	adds	r7, #32
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	08003ac7 	.word	0x08003ac7
 80039c0:	cccccccd 	.word	0xcccccccd
 80039c4:	08003bdd 	.word	0x08003bdd
 80039c8:	40003800 	.word	0x40003800
 80039cc:	40003400 	.word	0x40003400

080039d0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a18:	881a      	ldrh	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a24:	1c9a      	adds	r2, r3, #2
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	3b01      	subs	r3, #1
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10e      	bne.n	8003a60 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a50:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7ff ffb8 	bl	80039d0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003a60:	bf00      	nop
 8003a62:	3708      	adds	r7, #8
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68da      	ldr	r2, [r3, #12]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7a:	b292      	uxth	r2, r2
 8003a7c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a82:	1c9a      	adds	r2, r3, #2
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10e      	bne.n	8003abe <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003aae:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f7ff ff93 	bl	80039e4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003abe:	bf00      	nop
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b086      	sub	sp, #24
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b04      	cmp	r3, #4
 8003ae0:	d13a      	bne.n	8003b58 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d109      	bne.n	8003b00 <I2S_IRQHandler+0x3a>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af6:	2b40      	cmp	r3, #64	; 0x40
 8003af8:	d102      	bne.n	8003b00 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7ff ffb4 	bl	8003a68 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b06:	2b40      	cmp	r3, #64	; 0x40
 8003b08:	d126      	bne.n	8003b58 <I2S_IRQHandler+0x92>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f003 0320 	and.w	r3, r3, #32
 8003b14:	2b20      	cmp	r3, #32
 8003b16:	d11f      	bne.n	8003b58 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b26:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003b28:	2300      	movs	r3, #0
 8003b2a:	613b      	str	r3, [r7, #16]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	613b      	str	r3, [r7, #16]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	613b      	str	r3, [r7, #16]
 8003b3c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4a:	f043 0202 	orr.w	r2, r3, #2
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7ff ff50 	bl	80039f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b03      	cmp	r3, #3
 8003b62:	d136      	bne.n	8003bd2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d109      	bne.n	8003b82 <I2S_IRQHandler+0xbc>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b78:	2b80      	cmp	r3, #128	; 0x80
 8003b7a:	d102      	bne.n	8003b82 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f7ff ff45 	bl	8003a0c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	f003 0308 	and.w	r3, r3, #8
 8003b88:	2b08      	cmp	r3, #8
 8003b8a:	d122      	bne.n	8003bd2 <I2S_IRQHandler+0x10c>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f003 0320 	and.w	r3, r3, #32
 8003b96:	2b20      	cmp	r3, #32
 8003b98:	d11b      	bne.n	8003bd2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	685a      	ldr	r2, [r3, #4]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ba8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003baa:	2300      	movs	r3, #0
 8003bac:	60fb      	str	r3, [r7, #12]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	60fb      	str	r3, [r7, #12]
 8003bb6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc4:	f043 0204 	orr.w	r2, r3, #4
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f7ff ff13 	bl	80039f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bd2:	bf00      	nop
 8003bd4:	3718      	adds	r7, #24
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
	...

08003bdc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b088      	sub	sp, #32
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a92      	ldr	r2, [pc, #584]	; (8003e3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d101      	bne.n	8003bfa <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003bf6:	4b92      	ldr	r3, [pc, #584]	; (8003e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003bf8:	e001      	b.n	8003bfe <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003bfa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a8b      	ldr	r2, [pc, #556]	; (8003e3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d101      	bne.n	8003c18 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003c14:	4b8a      	ldr	r3, [pc, #552]	; (8003e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c16:	e001      	b.n	8003c1c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003c18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c28:	d004      	beq.n	8003c34 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f040 8099 	bne.w	8003d66 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d107      	bne.n	8003c4e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d002      	beq.n	8003c4e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 f925 	bl	8003e98 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	f003 0301 	and.w	r3, r3, #1
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d107      	bne.n	8003c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d002      	beq.n	8003c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f9c8 	bl	8003ff8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c6e:	2b40      	cmp	r3, #64	; 0x40
 8003c70:	d13a      	bne.n	8003ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	f003 0320 	and.w	r3, r3, #32
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d035      	beq.n	8003ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a6e      	ldr	r2, [pc, #440]	; (8003e3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d101      	bne.n	8003c8a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003c86:	4b6e      	ldr	r3, [pc, #440]	; (8003e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c88:	e001      	b.n	8003c8e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003c8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c8e:	685a      	ldr	r2, [r3, #4]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4969      	ldr	r1, [pc, #420]	; (8003e3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c96:	428b      	cmp	r3, r1
 8003c98:	d101      	bne.n	8003c9e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003c9a:	4b69      	ldr	r3, [pc, #420]	; (8003e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c9c:	e001      	b.n	8003ca2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003c9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ca2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ca6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003cb6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003cb8:	2300      	movs	r3, #0
 8003cba:	60fb      	str	r3, [r7, #12]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	60fb      	str	r3, [r7, #12]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	60fb      	str	r3, [r7, #12]
 8003ccc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cda:	f043 0202 	orr.w	r2, r3, #2
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f7ff fe88 	bl	80039f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	f003 0308 	and.w	r3, r3, #8
 8003cee:	2b08      	cmp	r3, #8
 8003cf0:	f040 80c3 	bne.w	8003e7a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	f003 0320 	and.w	r3, r3, #32
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f000 80bd 	beq.w	8003e7a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	685a      	ldr	r2, [r3, #4]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d0e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a49      	ldr	r2, [pc, #292]	; (8003e3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d101      	bne.n	8003d1e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003d1a:	4b49      	ldr	r3, [pc, #292]	; (8003e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d1c:	e001      	b.n	8003d22 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003d1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4944      	ldr	r1, [pc, #272]	; (8003e3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d2a:	428b      	cmp	r3, r1
 8003d2c:	d101      	bne.n	8003d32 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003d2e:	4b44      	ldr	r3, [pc, #272]	; (8003e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d30:	e001      	b.n	8003d36 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003d32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d36:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d3a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	60bb      	str	r3, [r7, #8]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	60bb      	str	r3, [r7, #8]
 8003d48:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d56:	f043 0204 	orr.w	r2, r3, #4
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f7ff fe4a 	bl	80039f8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d64:	e089      	b.n	8003e7a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d107      	bne.n	8003d80 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d002      	beq.n	8003d80 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 f8be 	bl	8003efc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d107      	bne.n	8003d9a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d002      	beq.n	8003d9a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 f8fd 	bl	8003f94 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da0:	2b40      	cmp	r3, #64	; 0x40
 8003da2:	d12f      	bne.n	8003e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	f003 0320 	and.w	r3, r3, #32
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d02a      	beq.n	8003e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	685a      	ldr	r2, [r3, #4]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003dbc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a1e      	ldr	r2, [pc, #120]	; (8003e3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d101      	bne.n	8003dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003dc8:	4b1d      	ldr	r3, [pc, #116]	; (8003e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003dca:	e001      	b.n	8003dd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003dcc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dd0:	685a      	ldr	r2, [r3, #4]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4919      	ldr	r1, [pc, #100]	; (8003e3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dd8:	428b      	cmp	r3, r1
 8003dda:	d101      	bne.n	8003de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003ddc:	4b18      	ldr	r3, [pc, #96]	; (8003e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003dde:	e001      	b.n	8003de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003de0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003de4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003de8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df6:	f043 0202 	orr.w	r2, r3, #2
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f7ff fdfa 	bl	80039f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	f003 0308 	and.w	r3, r3, #8
 8003e0a:	2b08      	cmp	r3, #8
 8003e0c:	d136      	bne.n	8003e7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	f003 0320 	and.w	r3, r3, #32
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d031      	beq.n	8003e7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a07      	ldr	r2, [pc, #28]	; (8003e3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d101      	bne.n	8003e26 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003e22:	4b07      	ldr	r3, [pc, #28]	; (8003e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e24:	e001      	b.n	8003e2a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003e26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4902      	ldr	r1, [pc, #8]	; (8003e3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e32:	428b      	cmp	r3, r1
 8003e34:	d106      	bne.n	8003e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003e36:	4b02      	ldr	r3, [pc, #8]	; (8003e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e38:	e006      	b.n	8003e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003e3a:	bf00      	nop
 8003e3c:	40003800 	.word	0x40003800
 8003e40:	40003400 	.word	0x40003400
 8003e44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e48:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e4c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e5c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6a:	f043 0204 	orr.w	r2, r3, #4
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f7ff fdc0 	bl	80039f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e78:	e000      	b.n	8003e7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e7a:	bf00      	nop
}
 8003e7c:	bf00      	nop
 8003e7e:	3720      	adds	r7, #32
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea4:	1c99      	adds	r1, r3, #2
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	6251      	str	r1, [r2, #36]	; 0x24
 8003eaa:	881a      	ldrh	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d113      	bne.n	8003ef2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	685a      	ldr	r2, [r3, #4]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ed8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d106      	bne.n	8003ef2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f7ff ffc9 	bl	8003e84 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ef2:	bf00      	nop
 8003ef4:	3708      	adds	r7, #8
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
	...

08003efc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f08:	1c99      	adds	r1, r3, #2
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	6251      	str	r1, [r2, #36]	; 0x24
 8003f0e:	8819      	ldrh	r1, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a1d      	ldr	r2, [pc, #116]	; (8003f8c <I2SEx_TxISR_I2SExt+0x90>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d101      	bne.n	8003f1e <I2SEx_TxISR_I2SExt+0x22>
 8003f1a:	4b1d      	ldr	r3, [pc, #116]	; (8003f90 <I2SEx_TxISR_I2SExt+0x94>)
 8003f1c:	e001      	b.n	8003f22 <I2SEx_TxISR_I2SExt+0x26>
 8003f1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f22:	460a      	mov	r2, r1
 8003f24:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d121      	bne.n	8003f82 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a12      	ldr	r2, [pc, #72]	; (8003f8c <I2SEx_TxISR_I2SExt+0x90>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d101      	bne.n	8003f4c <I2SEx_TxISR_I2SExt+0x50>
 8003f48:	4b11      	ldr	r3, [pc, #68]	; (8003f90 <I2SEx_TxISR_I2SExt+0x94>)
 8003f4a:	e001      	b.n	8003f50 <I2SEx_TxISR_I2SExt+0x54>
 8003f4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	490d      	ldr	r1, [pc, #52]	; (8003f8c <I2SEx_TxISR_I2SExt+0x90>)
 8003f58:	428b      	cmp	r3, r1
 8003f5a:	d101      	bne.n	8003f60 <I2SEx_TxISR_I2SExt+0x64>
 8003f5c:	4b0c      	ldr	r3, [pc, #48]	; (8003f90 <I2SEx_TxISR_I2SExt+0x94>)
 8003f5e:	e001      	b.n	8003f64 <I2SEx_TxISR_I2SExt+0x68>
 8003f60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f64:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f68:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d106      	bne.n	8003f82 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f7ff ff81 	bl	8003e84 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f82:	bf00      	nop
 8003f84:	3708      	adds	r7, #8
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	40003800 	.word	0x40003800
 8003f90:	40003400 	.word	0x40003400

08003f94 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68d8      	ldr	r0, [r3, #12]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa6:	1c99      	adds	r1, r3, #2
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003fac:	b282      	uxth	r2, r0
 8003fae:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d113      	bne.n	8003ff0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	685a      	ldr	r2, [r3, #4]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003fd6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d106      	bne.n	8003ff0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7ff ff4a 	bl	8003e84 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ff0:	bf00      	nop
 8003ff2:	3708      	adds	r7, #8
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a20      	ldr	r2, [pc, #128]	; (8004088 <I2SEx_RxISR_I2SExt+0x90>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d101      	bne.n	800400e <I2SEx_RxISR_I2SExt+0x16>
 800400a:	4b20      	ldr	r3, [pc, #128]	; (800408c <I2SEx_RxISR_I2SExt+0x94>)
 800400c:	e001      	b.n	8004012 <I2SEx_RxISR_I2SExt+0x1a>
 800400e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004012:	68d8      	ldr	r0, [r3, #12]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004018:	1c99      	adds	r1, r3, #2
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800401e:	b282      	uxth	r2, r0
 8004020:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004026:	b29b      	uxth	r3, r3
 8004028:	3b01      	subs	r3, #1
 800402a:	b29a      	uxth	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004034:	b29b      	uxth	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d121      	bne.n	800407e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a12      	ldr	r2, [pc, #72]	; (8004088 <I2SEx_RxISR_I2SExt+0x90>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d101      	bne.n	8004048 <I2SEx_RxISR_I2SExt+0x50>
 8004044:	4b11      	ldr	r3, [pc, #68]	; (800408c <I2SEx_RxISR_I2SExt+0x94>)
 8004046:	e001      	b.n	800404c <I2SEx_RxISR_I2SExt+0x54>
 8004048:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	490d      	ldr	r1, [pc, #52]	; (8004088 <I2SEx_RxISR_I2SExt+0x90>)
 8004054:	428b      	cmp	r3, r1
 8004056:	d101      	bne.n	800405c <I2SEx_RxISR_I2SExt+0x64>
 8004058:	4b0c      	ldr	r3, [pc, #48]	; (800408c <I2SEx_RxISR_I2SExt+0x94>)
 800405a:	e001      	b.n	8004060 <I2SEx_RxISR_I2SExt+0x68>
 800405c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004060:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004064:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800406a:	b29b      	uxth	r3, r3
 800406c:	2b00      	cmp	r3, #0
 800406e:	d106      	bne.n	800407e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f7ff ff03 	bl	8003e84 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800407e:	bf00      	nop
 8004080:	3708      	adds	r7, #8
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	40003800 	.word	0x40003800
 800408c:	40003400 	.word	0x40003400

08004090 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b086      	sub	sp, #24
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d101      	bne.n	80040a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e267      	b.n	8004572 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d075      	beq.n	800419a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040ae:	4b88      	ldr	r3, [pc, #544]	; (80042d0 <HAL_RCC_OscConfig+0x240>)
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f003 030c 	and.w	r3, r3, #12
 80040b6:	2b04      	cmp	r3, #4
 80040b8:	d00c      	beq.n	80040d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040ba:	4b85      	ldr	r3, [pc, #532]	; (80042d0 <HAL_RCC_OscConfig+0x240>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040c2:	2b08      	cmp	r3, #8
 80040c4:	d112      	bne.n	80040ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040c6:	4b82      	ldr	r3, [pc, #520]	; (80042d0 <HAL_RCC_OscConfig+0x240>)
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040d2:	d10b      	bne.n	80040ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040d4:	4b7e      	ldr	r3, [pc, #504]	; (80042d0 <HAL_RCC_OscConfig+0x240>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d05b      	beq.n	8004198 <HAL_RCC_OscConfig+0x108>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d157      	bne.n	8004198 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e242      	b.n	8004572 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040f4:	d106      	bne.n	8004104 <HAL_RCC_OscConfig+0x74>
 80040f6:	4b76      	ldr	r3, [pc, #472]	; (80042d0 <HAL_RCC_OscConfig+0x240>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a75      	ldr	r2, [pc, #468]	; (80042d0 <HAL_RCC_OscConfig+0x240>)
 80040fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004100:	6013      	str	r3, [r2, #0]
 8004102:	e01d      	b.n	8004140 <HAL_RCC_OscConfig+0xb0>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800410c:	d10c      	bne.n	8004128 <HAL_RCC_OscConfig+0x98>
 800410e:	4b70      	ldr	r3, [pc, #448]	; (80042d0 <HAL_RCC_OscConfig+0x240>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a6f      	ldr	r2, [pc, #444]	; (80042d0 <HAL_RCC_OscConfig+0x240>)
 8004114:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004118:	6013      	str	r3, [r2, #0]
 800411a:	4b6d      	ldr	r3, [pc, #436]	; (80042d0 <HAL_RCC_OscConfig+0x240>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a6c      	ldr	r2, [pc, #432]	; (80042d0 <HAL_RCC_OscConfig+0x240>)
 8004120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004124:	6013      	str	r3, [r2, #0]
 8004126:	e00b      	b.n	8004140 <HAL_RCC_OscConfig+0xb0>
 8004128:	4b69      	ldr	r3, [pc, #420]	; (80042d0 <HAL_RCC_OscConfig+0x240>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a68      	ldr	r2, [pc, #416]	; (80042d0 <HAL_RCC_OscConfig+0x240>)
 800412e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004132:	6013      	str	r3, [r2, #0]
 8004134:	4b66      	ldr	r3, [pc, #408]	; (80042d0 <HAL_RCC_OscConfig+0x240>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a65      	ldr	r2, [pc, #404]	; (80042d0 <HAL_RCC_OscConfig+0x240>)
 800413a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800413e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d013      	beq.n	8004170 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004148:	f7fd fa8a 	bl	8001660 <HAL_GetTick>
 800414c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800414e:	e008      	b.n	8004162 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004150:	f7fd fa86 	bl	8001660 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	2b64      	cmp	r3, #100	; 0x64
 800415c:	d901      	bls.n	8004162 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e207      	b.n	8004572 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004162:	4b5b      	ldr	r3, [pc, #364]	; (80042d0 <HAL_RCC_OscConfig+0x240>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d0f0      	beq.n	8004150 <HAL_RCC_OscConfig+0xc0>
 800416e:	e014      	b.n	800419a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004170:	f7fd fa76 	bl	8001660 <HAL_GetTick>
 8004174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004176:	e008      	b.n	800418a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004178:	f7fd fa72 	bl	8001660 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b64      	cmp	r3, #100	; 0x64
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e1f3      	b.n	8004572 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800418a:	4b51      	ldr	r3, [pc, #324]	; (80042d0 <HAL_RCC_OscConfig+0x240>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1f0      	bne.n	8004178 <HAL_RCC_OscConfig+0xe8>
 8004196:	e000      	b.n	800419a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004198:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d063      	beq.n	800426e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041a6:	4b4a      	ldr	r3, [pc, #296]	; (80042d0 <HAL_RCC_OscConfig+0x240>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f003 030c 	and.w	r3, r3, #12
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00b      	beq.n	80041ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041b2:	4b47      	ldr	r3, [pc, #284]	; (80042d0 <HAL_RCC_OscConfig+0x240>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041ba:	2b08      	cmp	r3, #8
 80041bc:	d11c      	bne.n	80041f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041be:	4b44      	ldr	r3, [pc, #272]	; (80042d0 <HAL_RCC_OscConfig+0x240>)
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d116      	bne.n	80041f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ca:	4b41      	ldr	r3, [pc, #260]	; (80042d0 <HAL_RCC_OscConfig+0x240>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d005      	beq.n	80041e2 <HAL_RCC_OscConfig+0x152>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d001      	beq.n	80041e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e1c7      	b.n	8004572 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041e2:	4b3b      	ldr	r3, [pc, #236]	; (80042d0 <HAL_RCC_OscConfig+0x240>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	4937      	ldr	r1, [pc, #220]	; (80042d0 <HAL_RCC_OscConfig+0x240>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041f6:	e03a      	b.n	800426e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d020      	beq.n	8004242 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004200:	4b34      	ldr	r3, [pc, #208]	; (80042d4 <HAL_RCC_OscConfig+0x244>)
 8004202:	2201      	movs	r2, #1
 8004204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004206:	f7fd fa2b 	bl	8001660 <HAL_GetTick>
 800420a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800420c:	e008      	b.n	8004220 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800420e:	f7fd fa27 	bl	8001660 <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	2b02      	cmp	r3, #2
 800421a:	d901      	bls.n	8004220 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e1a8      	b.n	8004572 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004220:	4b2b      	ldr	r3, [pc, #172]	; (80042d0 <HAL_RCC_OscConfig+0x240>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d0f0      	beq.n	800420e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800422c:	4b28      	ldr	r3, [pc, #160]	; (80042d0 <HAL_RCC_OscConfig+0x240>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	00db      	lsls	r3, r3, #3
 800423a:	4925      	ldr	r1, [pc, #148]	; (80042d0 <HAL_RCC_OscConfig+0x240>)
 800423c:	4313      	orrs	r3, r2
 800423e:	600b      	str	r3, [r1, #0]
 8004240:	e015      	b.n	800426e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004242:	4b24      	ldr	r3, [pc, #144]	; (80042d4 <HAL_RCC_OscConfig+0x244>)
 8004244:	2200      	movs	r2, #0
 8004246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004248:	f7fd fa0a 	bl	8001660 <HAL_GetTick>
 800424c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800424e:	e008      	b.n	8004262 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004250:	f7fd fa06 	bl	8001660 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b02      	cmp	r3, #2
 800425c:	d901      	bls.n	8004262 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e187      	b.n	8004572 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004262:	4b1b      	ldr	r3, [pc, #108]	; (80042d0 <HAL_RCC_OscConfig+0x240>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1f0      	bne.n	8004250 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0308 	and.w	r3, r3, #8
 8004276:	2b00      	cmp	r3, #0
 8004278:	d036      	beq.n	80042e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d016      	beq.n	80042b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004282:	4b15      	ldr	r3, [pc, #84]	; (80042d8 <HAL_RCC_OscConfig+0x248>)
 8004284:	2201      	movs	r2, #1
 8004286:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004288:	f7fd f9ea 	bl	8001660 <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800428e:	e008      	b.n	80042a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004290:	f7fd f9e6 	bl	8001660 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e167      	b.n	8004572 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042a2:	4b0b      	ldr	r3, [pc, #44]	; (80042d0 <HAL_RCC_OscConfig+0x240>)
 80042a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d0f0      	beq.n	8004290 <HAL_RCC_OscConfig+0x200>
 80042ae:	e01b      	b.n	80042e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042b0:	4b09      	ldr	r3, [pc, #36]	; (80042d8 <HAL_RCC_OscConfig+0x248>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042b6:	f7fd f9d3 	bl	8001660 <HAL_GetTick>
 80042ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042bc:	e00e      	b.n	80042dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042be:	f7fd f9cf 	bl	8001660 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d907      	bls.n	80042dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e150      	b.n	8004572 <HAL_RCC_OscConfig+0x4e2>
 80042d0:	40023800 	.word	0x40023800
 80042d4:	42470000 	.word	0x42470000
 80042d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042dc:	4b88      	ldr	r3, [pc, #544]	; (8004500 <HAL_RCC_OscConfig+0x470>)
 80042de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042e0:	f003 0302 	and.w	r3, r3, #2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1ea      	bne.n	80042be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0304 	and.w	r3, r3, #4
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f000 8097 	beq.w	8004424 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042f6:	2300      	movs	r3, #0
 80042f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042fa:	4b81      	ldr	r3, [pc, #516]	; (8004500 <HAL_RCC_OscConfig+0x470>)
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10f      	bne.n	8004326 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004306:	2300      	movs	r3, #0
 8004308:	60bb      	str	r3, [r7, #8]
 800430a:	4b7d      	ldr	r3, [pc, #500]	; (8004500 <HAL_RCC_OscConfig+0x470>)
 800430c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430e:	4a7c      	ldr	r2, [pc, #496]	; (8004500 <HAL_RCC_OscConfig+0x470>)
 8004310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004314:	6413      	str	r3, [r2, #64]	; 0x40
 8004316:	4b7a      	ldr	r3, [pc, #488]	; (8004500 <HAL_RCC_OscConfig+0x470>)
 8004318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800431e:	60bb      	str	r3, [r7, #8]
 8004320:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004322:	2301      	movs	r3, #1
 8004324:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004326:	4b77      	ldr	r3, [pc, #476]	; (8004504 <HAL_RCC_OscConfig+0x474>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800432e:	2b00      	cmp	r3, #0
 8004330:	d118      	bne.n	8004364 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004332:	4b74      	ldr	r3, [pc, #464]	; (8004504 <HAL_RCC_OscConfig+0x474>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a73      	ldr	r2, [pc, #460]	; (8004504 <HAL_RCC_OscConfig+0x474>)
 8004338:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800433c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800433e:	f7fd f98f 	bl	8001660 <HAL_GetTick>
 8004342:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004344:	e008      	b.n	8004358 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004346:	f7fd f98b 	bl	8001660 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d901      	bls.n	8004358 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e10c      	b.n	8004572 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004358:	4b6a      	ldr	r3, [pc, #424]	; (8004504 <HAL_RCC_OscConfig+0x474>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004360:	2b00      	cmp	r3, #0
 8004362:	d0f0      	beq.n	8004346 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d106      	bne.n	800437a <HAL_RCC_OscConfig+0x2ea>
 800436c:	4b64      	ldr	r3, [pc, #400]	; (8004500 <HAL_RCC_OscConfig+0x470>)
 800436e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004370:	4a63      	ldr	r2, [pc, #396]	; (8004500 <HAL_RCC_OscConfig+0x470>)
 8004372:	f043 0301 	orr.w	r3, r3, #1
 8004376:	6713      	str	r3, [r2, #112]	; 0x70
 8004378:	e01c      	b.n	80043b4 <HAL_RCC_OscConfig+0x324>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	2b05      	cmp	r3, #5
 8004380:	d10c      	bne.n	800439c <HAL_RCC_OscConfig+0x30c>
 8004382:	4b5f      	ldr	r3, [pc, #380]	; (8004500 <HAL_RCC_OscConfig+0x470>)
 8004384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004386:	4a5e      	ldr	r2, [pc, #376]	; (8004500 <HAL_RCC_OscConfig+0x470>)
 8004388:	f043 0304 	orr.w	r3, r3, #4
 800438c:	6713      	str	r3, [r2, #112]	; 0x70
 800438e:	4b5c      	ldr	r3, [pc, #368]	; (8004500 <HAL_RCC_OscConfig+0x470>)
 8004390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004392:	4a5b      	ldr	r2, [pc, #364]	; (8004500 <HAL_RCC_OscConfig+0x470>)
 8004394:	f043 0301 	orr.w	r3, r3, #1
 8004398:	6713      	str	r3, [r2, #112]	; 0x70
 800439a:	e00b      	b.n	80043b4 <HAL_RCC_OscConfig+0x324>
 800439c:	4b58      	ldr	r3, [pc, #352]	; (8004500 <HAL_RCC_OscConfig+0x470>)
 800439e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a0:	4a57      	ldr	r2, [pc, #348]	; (8004500 <HAL_RCC_OscConfig+0x470>)
 80043a2:	f023 0301 	bic.w	r3, r3, #1
 80043a6:	6713      	str	r3, [r2, #112]	; 0x70
 80043a8:	4b55      	ldr	r3, [pc, #340]	; (8004500 <HAL_RCC_OscConfig+0x470>)
 80043aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ac:	4a54      	ldr	r2, [pc, #336]	; (8004500 <HAL_RCC_OscConfig+0x470>)
 80043ae:	f023 0304 	bic.w	r3, r3, #4
 80043b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d015      	beq.n	80043e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043bc:	f7fd f950 	bl	8001660 <HAL_GetTick>
 80043c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043c2:	e00a      	b.n	80043da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043c4:	f7fd f94c 	bl	8001660 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e0cb      	b.n	8004572 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043da:	4b49      	ldr	r3, [pc, #292]	; (8004500 <HAL_RCC_OscConfig+0x470>)
 80043dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d0ee      	beq.n	80043c4 <HAL_RCC_OscConfig+0x334>
 80043e6:	e014      	b.n	8004412 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043e8:	f7fd f93a 	bl	8001660 <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043ee:	e00a      	b.n	8004406 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043f0:	f7fd f936 	bl	8001660 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80043fe:	4293      	cmp	r3, r2
 8004400:	d901      	bls.n	8004406 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e0b5      	b.n	8004572 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004406:	4b3e      	ldr	r3, [pc, #248]	; (8004500 <HAL_RCC_OscConfig+0x470>)
 8004408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1ee      	bne.n	80043f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004412:	7dfb      	ldrb	r3, [r7, #23]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d105      	bne.n	8004424 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004418:	4b39      	ldr	r3, [pc, #228]	; (8004500 <HAL_RCC_OscConfig+0x470>)
 800441a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441c:	4a38      	ldr	r2, [pc, #224]	; (8004500 <HAL_RCC_OscConfig+0x470>)
 800441e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004422:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	2b00      	cmp	r3, #0
 800442a:	f000 80a1 	beq.w	8004570 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800442e:	4b34      	ldr	r3, [pc, #208]	; (8004500 <HAL_RCC_OscConfig+0x470>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f003 030c 	and.w	r3, r3, #12
 8004436:	2b08      	cmp	r3, #8
 8004438:	d05c      	beq.n	80044f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	2b02      	cmp	r3, #2
 8004440:	d141      	bne.n	80044c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004442:	4b31      	ldr	r3, [pc, #196]	; (8004508 <HAL_RCC_OscConfig+0x478>)
 8004444:	2200      	movs	r2, #0
 8004446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004448:	f7fd f90a 	bl	8001660 <HAL_GetTick>
 800444c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800444e:	e008      	b.n	8004462 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004450:	f7fd f906 	bl	8001660 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b02      	cmp	r3, #2
 800445c:	d901      	bls.n	8004462 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e087      	b.n	8004572 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004462:	4b27      	ldr	r3, [pc, #156]	; (8004500 <HAL_RCC_OscConfig+0x470>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1f0      	bne.n	8004450 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	69da      	ldr	r2, [r3, #28]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	431a      	orrs	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447c:	019b      	lsls	r3, r3, #6
 800447e:	431a      	orrs	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004484:	085b      	lsrs	r3, r3, #1
 8004486:	3b01      	subs	r3, #1
 8004488:	041b      	lsls	r3, r3, #16
 800448a:	431a      	orrs	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004490:	061b      	lsls	r3, r3, #24
 8004492:	491b      	ldr	r1, [pc, #108]	; (8004500 <HAL_RCC_OscConfig+0x470>)
 8004494:	4313      	orrs	r3, r2
 8004496:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004498:	4b1b      	ldr	r3, [pc, #108]	; (8004508 <HAL_RCC_OscConfig+0x478>)
 800449a:	2201      	movs	r2, #1
 800449c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800449e:	f7fd f8df 	bl	8001660 <HAL_GetTick>
 80044a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044a4:	e008      	b.n	80044b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044a6:	f7fd f8db 	bl	8001660 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d901      	bls.n	80044b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e05c      	b.n	8004572 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044b8:	4b11      	ldr	r3, [pc, #68]	; (8004500 <HAL_RCC_OscConfig+0x470>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d0f0      	beq.n	80044a6 <HAL_RCC_OscConfig+0x416>
 80044c4:	e054      	b.n	8004570 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044c6:	4b10      	ldr	r3, [pc, #64]	; (8004508 <HAL_RCC_OscConfig+0x478>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044cc:	f7fd f8c8 	bl	8001660 <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044d2:	e008      	b.n	80044e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044d4:	f7fd f8c4 	bl	8001660 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e045      	b.n	8004572 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044e6:	4b06      	ldr	r3, [pc, #24]	; (8004500 <HAL_RCC_OscConfig+0x470>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1f0      	bne.n	80044d4 <HAL_RCC_OscConfig+0x444>
 80044f2:	e03d      	b.n	8004570 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d107      	bne.n	800450c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e038      	b.n	8004572 <HAL_RCC_OscConfig+0x4e2>
 8004500:	40023800 	.word	0x40023800
 8004504:	40007000 	.word	0x40007000
 8004508:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800450c:	4b1b      	ldr	r3, [pc, #108]	; (800457c <HAL_RCC_OscConfig+0x4ec>)
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d028      	beq.n	800456c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004524:	429a      	cmp	r2, r3
 8004526:	d121      	bne.n	800456c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004532:	429a      	cmp	r2, r3
 8004534:	d11a      	bne.n	800456c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800453c:	4013      	ands	r3, r2
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004542:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004544:	4293      	cmp	r3, r2
 8004546:	d111      	bne.n	800456c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004552:	085b      	lsrs	r3, r3, #1
 8004554:	3b01      	subs	r3, #1
 8004556:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004558:	429a      	cmp	r2, r3
 800455a:	d107      	bne.n	800456c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004566:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004568:	429a      	cmp	r2, r3
 800456a:	d001      	beq.n	8004570 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e000      	b.n	8004572 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	3718      	adds	r7, #24
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	40023800 	.word	0x40023800

08004580 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e0cc      	b.n	800472e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004594:	4b68      	ldr	r3, [pc, #416]	; (8004738 <HAL_RCC_ClockConfig+0x1b8>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0307 	and.w	r3, r3, #7
 800459c:	683a      	ldr	r2, [r7, #0]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d90c      	bls.n	80045bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045a2:	4b65      	ldr	r3, [pc, #404]	; (8004738 <HAL_RCC_ClockConfig+0x1b8>)
 80045a4:	683a      	ldr	r2, [r7, #0]
 80045a6:	b2d2      	uxtb	r2, r2
 80045a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045aa:	4b63      	ldr	r3, [pc, #396]	; (8004738 <HAL_RCC_ClockConfig+0x1b8>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0307 	and.w	r3, r3, #7
 80045b2:	683a      	ldr	r2, [r7, #0]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d001      	beq.n	80045bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e0b8      	b.n	800472e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d020      	beq.n	800460a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0304 	and.w	r3, r3, #4
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d005      	beq.n	80045e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045d4:	4b59      	ldr	r3, [pc, #356]	; (800473c <HAL_RCC_ClockConfig+0x1bc>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	4a58      	ldr	r2, [pc, #352]	; (800473c <HAL_RCC_ClockConfig+0x1bc>)
 80045da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0308 	and.w	r3, r3, #8
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d005      	beq.n	80045f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045ec:	4b53      	ldr	r3, [pc, #332]	; (800473c <HAL_RCC_ClockConfig+0x1bc>)
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	4a52      	ldr	r2, [pc, #328]	; (800473c <HAL_RCC_ClockConfig+0x1bc>)
 80045f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045f8:	4b50      	ldr	r3, [pc, #320]	; (800473c <HAL_RCC_ClockConfig+0x1bc>)
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	494d      	ldr	r1, [pc, #308]	; (800473c <HAL_RCC_ClockConfig+0x1bc>)
 8004606:	4313      	orrs	r3, r2
 8004608:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b00      	cmp	r3, #0
 8004614:	d044      	beq.n	80046a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d107      	bne.n	800462e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800461e:	4b47      	ldr	r3, [pc, #284]	; (800473c <HAL_RCC_ClockConfig+0x1bc>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d119      	bne.n	800465e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e07f      	b.n	800472e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	2b02      	cmp	r3, #2
 8004634:	d003      	beq.n	800463e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800463a:	2b03      	cmp	r3, #3
 800463c:	d107      	bne.n	800464e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800463e:	4b3f      	ldr	r3, [pc, #252]	; (800473c <HAL_RCC_ClockConfig+0x1bc>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d109      	bne.n	800465e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e06f      	b.n	800472e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800464e:	4b3b      	ldr	r3, [pc, #236]	; (800473c <HAL_RCC_ClockConfig+0x1bc>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e067      	b.n	800472e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800465e:	4b37      	ldr	r3, [pc, #220]	; (800473c <HAL_RCC_ClockConfig+0x1bc>)
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f023 0203 	bic.w	r2, r3, #3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	4934      	ldr	r1, [pc, #208]	; (800473c <HAL_RCC_ClockConfig+0x1bc>)
 800466c:	4313      	orrs	r3, r2
 800466e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004670:	f7fc fff6 	bl	8001660 <HAL_GetTick>
 8004674:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004676:	e00a      	b.n	800468e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004678:	f7fc fff2 	bl	8001660 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	f241 3288 	movw	r2, #5000	; 0x1388
 8004686:	4293      	cmp	r3, r2
 8004688:	d901      	bls.n	800468e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e04f      	b.n	800472e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800468e:	4b2b      	ldr	r3, [pc, #172]	; (800473c <HAL_RCC_ClockConfig+0x1bc>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f003 020c 	and.w	r2, r3, #12
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	429a      	cmp	r2, r3
 800469e:	d1eb      	bne.n	8004678 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046a0:	4b25      	ldr	r3, [pc, #148]	; (8004738 <HAL_RCC_ClockConfig+0x1b8>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0307 	and.w	r3, r3, #7
 80046a8:	683a      	ldr	r2, [r7, #0]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d20c      	bcs.n	80046c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ae:	4b22      	ldr	r3, [pc, #136]	; (8004738 <HAL_RCC_ClockConfig+0x1b8>)
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	b2d2      	uxtb	r2, r2
 80046b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046b6:	4b20      	ldr	r3, [pc, #128]	; (8004738 <HAL_RCC_ClockConfig+0x1b8>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0307 	and.w	r3, r3, #7
 80046be:	683a      	ldr	r2, [r7, #0]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d001      	beq.n	80046c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e032      	b.n	800472e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0304 	and.w	r3, r3, #4
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d008      	beq.n	80046e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046d4:	4b19      	ldr	r3, [pc, #100]	; (800473c <HAL_RCC_ClockConfig+0x1bc>)
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	4916      	ldr	r1, [pc, #88]	; (800473c <HAL_RCC_ClockConfig+0x1bc>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0308 	and.w	r3, r3, #8
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d009      	beq.n	8004706 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046f2:	4b12      	ldr	r3, [pc, #72]	; (800473c <HAL_RCC_ClockConfig+0x1bc>)
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	00db      	lsls	r3, r3, #3
 8004700:	490e      	ldr	r1, [pc, #56]	; (800473c <HAL_RCC_ClockConfig+0x1bc>)
 8004702:	4313      	orrs	r3, r2
 8004704:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004706:	f000 f821 	bl	800474c <HAL_RCC_GetSysClockFreq>
 800470a:	4602      	mov	r2, r0
 800470c:	4b0b      	ldr	r3, [pc, #44]	; (800473c <HAL_RCC_ClockConfig+0x1bc>)
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	091b      	lsrs	r3, r3, #4
 8004712:	f003 030f 	and.w	r3, r3, #15
 8004716:	490a      	ldr	r1, [pc, #40]	; (8004740 <HAL_RCC_ClockConfig+0x1c0>)
 8004718:	5ccb      	ldrb	r3, [r1, r3]
 800471a:	fa22 f303 	lsr.w	r3, r2, r3
 800471e:	4a09      	ldr	r2, [pc, #36]	; (8004744 <HAL_RCC_ClockConfig+0x1c4>)
 8004720:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004722:	4b09      	ldr	r3, [pc, #36]	; (8004748 <HAL_RCC_ClockConfig+0x1c8>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4618      	mov	r0, r3
 8004728:	f7fc ff56 	bl	80015d8 <HAL_InitTick>

  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3710      	adds	r7, #16
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	40023c00 	.word	0x40023c00
 800473c:	40023800 	.word	0x40023800
 8004740:	0800e720 	.word	0x0800e720
 8004744:	20000000 	.word	0x20000000
 8004748:	20000004 	.word	0x20000004

0800474c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800474c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004750:	b094      	sub	sp, #80	; 0x50
 8004752:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004754:	2300      	movs	r3, #0
 8004756:	647b      	str	r3, [r7, #68]	; 0x44
 8004758:	2300      	movs	r3, #0
 800475a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800475c:	2300      	movs	r3, #0
 800475e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004760:	2300      	movs	r3, #0
 8004762:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004764:	4b79      	ldr	r3, [pc, #484]	; (800494c <HAL_RCC_GetSysClockFreq+0x200>)
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f003 030c 	and.w	r3, r3, #12
 800476c:	2b08      	cmp	r3, #8
 800476e:	d00d      	beq.n	800478c <HAL_RCC_GetSysClockFreq+0x40>
 8004770:	2b08      	cmp	r3, #8
 8004772:	f200 80e1 	bhi.w	8004938 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004776:	2b00      	cmp	r3, #0
 8004778:	d002      	beq.n	8004780 <HAL_RCC_GetSysClockFreq+0x34>
 800477a:	2b04      	cmp	r3, #4
 800477c:	d003      	beq.n	8004786 <HAL_RCC_GetSysClockFreq+0x3a>
 800477e:	e0db      	b.n	8004938 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004780:	4b73      	ldr	r3, [pc, #460]	; (8004950 <HAL_RCC_GetSysClockFreq+0x204>)
 8004782:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004784:	e0db      	b.n	800493e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004786:	4b73      	ldr	r3, [pc, #460]	; (8004954 <HAL_RCC_GetSysClockFreq+0x208>)
 8004788:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800478a:	e0d8      	b.n	800493e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800478c:	4b6f      	ldr	r3, [pc, #444]	; (800494c <HAL_RCC_GetSysClockFreq+0x200>)
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004794:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004796:	4b6d      	ldr	r3, [pc, #436]	; (800494c <HAL_RCC_GetSysClockFreq+0x200>)
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d063      	beq.n	800486a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047a2:	4b6a      	ldr	r3, [pc, #424]	; (800494c <HAL_RCC_GetSysClockFreq+0x200>)
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	099b      	lsrs	r3, r3, #6
 80047a8:	2200      	movs	r2, #0
 80047aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80047ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80047ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047b4:	633b      	str	r3, [r7, #48]	; 0x30
 80047b6:	2300      	movs	r3, #0
 80047b8:	637b      	str	r3, [r7, #52]	; 0x34
 80047ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80047be:	4622      	mov	r2, r4
 80047c0:	462b      	mov	r3, r5
 80047c2:	f04f 0000 	mov.w	r0, #0
 80047c6:	f04f 0100 	mov.w	r1, #0
 80047ca:	0159      	lsls	r1, r3, #5
 80047cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047d0:	0150      	lsls	r0, r2, #5
 80047d2:	4602      	mov	r2, r0
 80047d4:	460b      	mov	r3, r1
 80047d6:	4621      	mov	r1, r4
 80047d8:	1a51      	subs	r1, r2, r1
 80047da:	6139      	str	r1, [r7, #16]
 80047dc:	4629      	mov	r1, r5
 80047de:	eb63 0301 	sbc.w	r3, r3, r1
 80047e2:	617b      	str	r3, [r7, #20]
 80047e4:	f04f 0200 	mov.w	r2, #0
 80047e8:	f04f 0300 	mov.w	r3, #0
 80047ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047f0:	4659      	mov	r1, fp
 80047f2:	018b      	lsls	r3, r1, #6
 80047f4:	4651      	mov	r1, sl
 80047f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047fa:	4651      	mov	r1, sl
 80047fc:	018a      	lsls	r2, r1, #6
 80047fe:	4651      	mov	r1, sl
 8004800:	ebb2 0801 	subs.w	r8, r2, r1
 8004804:	4659      	mov	r1, fp
 8004806:	eb63 0901 	sbc.w	r9, r3, r1
 800480a:	f04f 0200 	mov.w	r2, #0
 800480e:	f04f 0300 	mov.w	r3, #0
 8004812:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004816:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800481a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800481e:	4690      	mov	r8, r2
 8004820:	4699      	mov	r9, r3
 8004822:	4623      	mov	r3, r4
 8004824:	eb18 0303 	adds.w	r3, r8, r3
 8004828:	60bb      	str	r3, [r7, #8]
 800482a:	462b      	mov	r3, r5
 800482c:	eb49 0303 	adc.w	r3, r9, r3
 8004830:	60fb      	str	r3, [r7, #12]
 8004832:	f04f 0200 	mov.w	r2, #0
 8004836:	f04f 0300 	mov.w	r3, #0
 800483a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800483e:	4629      	mov	r1, r5
 8004840:	024b      	lsls	r3, r1, #9
 8004842:	4621      	mov	r1, r4
 8004844:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004848:	4621      	mov	r1, r4
 800484a:	024a      	lsls	r2, r1, #9
 800484c:	4610      	mov	r0, r2
 800484e:	4619      	mov	r1, r3
 8004850:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004852:	2200      	movs	r2, #0
 8004854:	62bb      	str	r3, [r7, #40]	; 0x28
 8004856:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004858:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800485c:	f7fb fd08 	bl	8000270 <__aeabi_uldivmod>
 8004860:	4602      	mov	r2, r0
 8004862:	460b      	mov	r3, r1
 8004864:	4613      	mov	r3, r2
 8004866:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004868:	e058      	b.n	800491c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800486a:	4b38      	ldr	r3, [pc, #224]	; (800494c <HAL_RCC_GetSysClockFreq+0x200>)
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	099b      	lsrs	r3, r3, #6
 8004870:	2200      	movs	r2, #0
 8004872:	4618      	mov	r0, r3
 8004874:	4611      	mov	r1, r2
 8004876:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800487a:	623b      	str	r3, [r7, #32]
 800487c:	2300      	movs	r3, #0
 800487e:	627b      	str	r3, [r7, #36]	; 0x24
 8004880:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004884:	4642      	mov	r2, r8
 8004886:	464b      	mov	r3, r9
 8004888:	f04f 0000 	mov.w	r0, #0
 800488c:	f04f 0100 	mov.w	r1, #0
 8004890:	0159      	lsls	r1, r3, #5
 8004892:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004896:	0150      	lsls	r0, r2, #5
 8004898:	4602      	mov	r2, r0
 800489a:	460b      	mov	r3, r1
 800489c:	4641      	mov	r1, r8
 800489e:	ebb2 0a01 	subs.w	sl, r2, r1
 80048a2:	4649      	mov	r1, r9
 80048a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80048a8:	f04f 0200 	mov.w	r2, #0
 80048ac:	f04f 0300 	mov.w	r3, #0
 80048b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80048b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80048b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80048bc:	ebb2 040a 	subs.w	r4, r2, sl
 80048c0:	eb63 050b 	sbc.w	r5, r3, fp
 80048c4:	f04f 0200 	mov.w	r2, #0
 80048c8:	f04f 0300 	mov.w	r3, #0
 80048cc:	00eb      	lsls	r3, r5, #3
 80048ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048d2:	00e2      	lsls	r2, r4, #3
 80048d4:	4614      	mov	r4, r2
 80048d6:	461d      	mov	r5, r3
 80048d8:	4643      	mov	r3, r8
 80048da:	18e3      	adds	r3, r4, r3
 80048dc:	603b      	str	r3, [r7, #0]
 80048de:	464b      	mov	r3, r9
 80048e0:	eb45 0303 	adc.w	r3, r5, r3
 80048e4:	607b      	str	r3, [r7, #4]
 80048e6:	f04f 0200 	mov.w	r2, #0
 80048ea:	f04f 0300 	mov.w	r3, #0
 80048ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048f2:	4629      	mov	r1, r5
 80048f4:	028b      	lsls	r3, r1, #10
 80048f6:	4621      	mov	r1, r4
 80048f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048fc:	4621      	mov	r1, r4
 80048fe:	028a      	lsls	r2, r1, #10
 8004900:	4610      	mov	r0, r2
 8004902:	4619      	mov	r1, r3
 8004904:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004906:	2200      	movs	r2, #0
 8004908:	61bb      	str	r3, [r7, #24]
 800490a:	61fa      	str	r2, [r7, #28]
 800490c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004910:	f7fb fcae 	bl	8000270 <__aeabi_uldivmod>
 8004914:	4602      	mov	r2, r0
 8004916:	460b      	mov	r3, r1
 8004918:	4613      	mov	r3, r2
 800491a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800491c:	4b0b      	ldr	r3, [pc, #44]	; (800494c <HAL_RCC_GetSysClockFreq+0x200>)
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	0c1b      	lsrs	r3, r3, #16
 8004922:	f003 0303 	and.w	r3, r3, #3
 8004926:	3301      	adds	r3, #1
 8004928:	005b      	lsls	r3, r3, #1
 800492a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800492c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800492e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004930:	fbb2 f3f3 	udiv	r3, r2, r3
 8004934:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004936:	e002      	b.n	800493e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004938:	4b05      	ldr	r3, [pc, #20]	; (8004950 <HAL_RCC_GetSysClockFreq+0x204>)
 800493a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800493c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800493e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004940:	4618      	mov	r0, r3
 8004942:	3750      	adds	r7, #80	; 0x50
 8004944:	46bd      	mov	sp, r7
 8004946:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800494a:	bf00      	nop
 800494c:	40023800 	.word	0x40023800
 8004950:	00f42400 	.word	0x00f42400
 8004954:	007a1200 	.word	0x007a1200

08004958 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004958:	b480      	push	{r7}
 800495a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800495c:	4b03      	ldr	r3, [pc, #12]	; (800496c <HAL_RCC_GetHCLKFreq+0x14>)
 800495e:	681b      	ldr	r3, [r3, #0]
}
 8004960:	4618      	mov	r0, r3
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	20000000 	.word	0x20000000

08004970 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004974:	f7ff fff0 	bl	8004958 <HAL_RCC_GetHCLKFreq>
 8004978:	4602      	mov	r2, r0
 800497a:	4b05      	ldr	r3, [pc, #20]	; (8004990 <HAL_RCC_GetPCLK1Freq+0x20>)
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	0a9b      	lsrs	r3, r3, #10
 8004980:	f003 0307 	and.w	r3, r3, #7
 8004984:	4903      	ldr	r1, [pc, #12]	; (8004994 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004986:	5ccb      	ldrb	r3, [r1, r3]
 8004988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800498c:	4618      	mov	r0, r3
 800498e:	bd80      	pop	{r7, pc}
 8004990:	40023800 	.word	0x40023800
 8004994:	0800e730 	.word	0x0800e730

08004998 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049a0:	2300      	movs	r3, #0
 80049a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80049a4:	2300      	movs	r3, #0
 80049a6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0301 	and.w	r3, r3, #1
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d105      	bne.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d035      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80049c0:	4b62      	ldr	r3, [pc, #392]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049c6:	f7fc fe4b 	bl	8001660 <HAL_GetTick>
 80049ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049cc:	e008      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80049ce:	f7fc fe47 	bl	8001660 <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d901      	bls.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e0b0      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049e0:	4b5b      	ldr	r3, [pc, #364]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1f0      	bne.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	019a      	lsls	r2, r3, #6
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	071b      	lsls	r3, r3, #28
 80049f8:	4955      	ldr	r1, [pc, #340]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a00:	4b52      	ldr	r3, [pc, #328]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004a02:	2201      	movs	r2, #1
 8004a04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a06:	f7fc fe2b 	bl	8001660 <HAL_GetTick>
 8004a0a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a0c:	e008      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a0e:	f7fc fe27 	bl	8001660 <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d901      	bls.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e090      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a20:	4b4b      	ldr	r3, [pc, #300]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d0f0      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0302 	and.w	r3, r3, #2
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f000 8083 	beq.w	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	60fb      	str	r3, [r7, #12]
 8004a3e:	4b44      	ldr	r3, [pc, #272]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	4a43      	ldr	r2, [pc, #268]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a48:	6413      	str	r3, [r2, #64]	; 0x40
 8004a4a:	4b41      	ldr	r3, [pc, #260]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a52:	60fb      	str	r3, [r7, #12]
 8004a54:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004a56:	4b3f      	ldr	r3, [pc, #252]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a3e      	ldr	r2, [pc, #248]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a60:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a62:	f7fc fdfd 	bl	8001660 <HAL_GetTick>
 8004a66:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004a68:	e008      	b.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004a6a:	f7fc fdf9 	bl	8001660 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d901      	bls.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e062      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004a7c:	4b35      	ldr	r3, [pc, #212]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d0f0      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a88:	4b31      	ldr	r3, [pc, #196]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a90:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d02f      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aa0:	693a      	ldr	r2, [r7, #16]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d028      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004aa6:	4b2a      	ldr	r3, [pc, #168]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aae:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ab0:	4b29      	ldr	r3, [pc, #164]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ab6:	4b28      	ldr	r3, [pc, #160]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004ab8:	2200      	movs	r2, #0
 8004aba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004abc:	4a24      	ldr	r2, [pc, #144]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ac2:	4b23      	ldr	r3, [pc, #140]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d114      	bne.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004ace:	f7fc fdc7 	bl	8001660 <HAL_GetTick>
 8004ad2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ad4:	e00a      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ad6:	f7fc fdc3 	bl	8001660 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d901      	bls.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e02a      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aec:	4b18      	ldr	r3, [pc, #96]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af0:	f003 0302 	and.w	r3, r3, #2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d0ee      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b04:	d10d      	bne.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004b06:	4b12      	ldr	r3, [pc, #72]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004b16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b1a:	490d      	ldr	r1, [pc, #52]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	608b      	str	r3, [r1, #8]
 8004b20:	e005      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004b22:	4b0b      	ldr	r3, [pc, #44]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	4a0a      	ldr	r2, [pc, #40]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b28:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004b2c:	6093      	str	r3, [r2, #8]
 8004b2e:	4b08      	ldr	r3, [pc, #32]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b30:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b3a:	4905      	ldr	r1, [pc, #20]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3718      	adds	r7, #24
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	42470068 	.word	0x42470068
 8004b50:	40023800 	.word	0x40023800
 8004b54:	40007000 	.word	0x40007000
 8004b58:	42470e40 	.word	0x42470e40

08004b5c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b087      	sub	sp, #28
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004b64:	2300      	movs	r3, #0
 8004b66:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004b70:	2300      	movs	r3, #0
 8004b72:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d13e      	bne.n	8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004b7a:	4b23      	ldr	r3, [pc, #140]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b82:	60fb      	str	r3, [r7, #12]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d005      	beq.n	8004b96 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d12f      	bne.n	8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004b90:	4b1e      	ldr	r3, [pc, #120]	; (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004b92:	617b      	str	r3, [r7, #20]
          break;
 8004b94:	e02f      	b.n	8004bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004b96:	4b1c      	ldr	r3, [pc, #112]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ba2:	d108      	bne.n	8004bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004ba4:	4b18      	ldr	r3, [pc, #96]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bac:	4a18      	ldr	r2, [pc, #96]	; (8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb2:	613b      	str	r3, [r7, #16]
 8004bb4:	e007      	b.n	8004bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004bb6:	4b14      	ldr	r3, [pc, #80]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bbe:	4a15      	ldr	r2, [pc, #84]	; (8004c14 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004bc6:	4b10      	ldr	r3, [pc, #64]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004bc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bcc:	099b      	lsrs	r3, r3, #6
 8004bce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	fb02 f303 	mul.w	r3, r2, r3
 8004bd8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004bda:	4b0b      	ldr	r3, [pc, #44]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004bdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004be0:	0f1b      	lsrs	r3, r3, #28
 8004be2:	f003 0307 	and.w	r3, r3, #7
 8004be6:	68ba      	ldr	r2, [r7, #8]
 8004be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bec:	617b      	str	r3, [r7, #20]
          break;
 8004bee:	e002      	b.n	8004bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	617b      	str	r3, [r7, #20]
          break;
 8004bf4:	bf00      	nop
        }
      }
      break;
 8004bf6:	bf00      	nop
    }
  }
  return frequency;
 8004bf8:	697b      	ldr	r3, [r7, #20]
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	371c      	adds	r7, #28
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	40023800 	.word	0x40023800
 8004c0c:	00bb8000 	.word	0x00bb8000
 8004c10:	007a1200 	.word	0x007a1200
 8004c14:	00f42400 	.word	0x00f42400

08004c18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d101      	bne.n	8004c2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e07b      	b.n	8004d22 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d108      	bne.n	8004c44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c3a:	d009      	beq.n	8004c50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	61da      	str	r2, [r3, #28]
 8004c42:	e005      	b.n	8004c50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d106      	bne.n	8004c70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7fc fb88 	bl	8001380 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2202      	movs	r2, #2
 8004c74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c86:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c98:	431a      	orrs	r2, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	431a      	orrs	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	431a      	orrs	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a1b      	ldr	r3, [r3, #32]
 8004cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd4:	ea42 0103 	orr.w	r1, r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cdc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	699b      	ldr	r3, [r3, #24]
 8004cec:	0c1b      	lsrs	r3, r3, #16
 8004cee:	f003 0104 	and.w	r1, r3, #4
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf6:	f003 0210 	and.w	r2, r3, #16
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	69da      	ldr	r2, [r3, #28]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d10:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3708      	adds	r7, #8
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b082      	sub	sp, #8
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d101      	bne.n	8004d3c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e041      	b.n	8004dc0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d106      	bne.n	8004d56 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f7fc fb5d 	bl	8001410 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2202      	movs	r2, #2
 8004d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	3304      	adds	r3, #4
 8004d66:	4619      	mov	r1, r3
 8004d68:	4610      	mov	r0, r2
 8004d6a:	f000 f82d 	bl	8004dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2201      	movs	r2, #1
 8004da2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2201      	movs	r2, #1
 8004daa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2201      	movs	r2, #1
 8004db2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2201      	movs	r2, #1
 8004dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3708      	adds	r7, #8
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a40      	ldr	r2, [pc, #256]	; (8004edc <TIM_Base_SetConfig+0x114>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d013      	beq.n	8004e08 <TIM_Base_SetConfig+0x40>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004de6:	d00f      	beq.n	8004e08 <TIM_Base_SetConfig+0x40>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a3d      	ldr	r2, [pc, #244]	; (8004ee0 <TIM_Base_SetConfig+0x118>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d00b      	beq.n	8004e08 <TIM_Base_SetConfig+0x40>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a3c      	ldr	r2, [pc, #240]	; (8004ee4 <TIM_Base_SetConfig+0x11c>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d007      	beq.n	8004e08 <TIM_Base_SetConfig+0x40>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a3b      	ldr	r2, [pc, #236]	; (8004ee8 <TIM_Base_SetConfig+0x120>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d003      	beq.n	8004e08 <TIM_Base_SetConfig+0x40>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a3a      	ldr	r2, [pc, #232]	; (8004eec <TIM_Base_SetConfig+0x124>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d108      	bne.n	8004e1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a2f      	ldr	r2, [pc, #188]	; (8004edc <TIM_Base_SetConfig+0x114>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d02b      	beq.n	8004e7a <TIM_Base_SetConfig+0xb2>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e28:	d027      	beq.n	8004e7a <TIM_Base_SetConfig+0xb2>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a2c      	ldr	r2, [pc, #176]	; (8004ee0 <TIM_Base_SetConfig+0x118>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d023      	beq.n	8004e7a <TIM_Base_SetConfig+0xb2>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a2b      	ldr	r2, [pc, #172]	; (8004ee4 <TIM_Base_SetConfig+0x11c>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d01f      	beq.n	8004e7a <TIM_Base_SetConfig+0xb2>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a2a      	ldr	r2, [pc, #168]	; (8004ee8 <TIM_Base_SetConfig+0x120>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d01b      	beq.n	8004e7a <TIM_Base_SetConfig+0xb2>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a29      	ldr	r2, [pc, #164]	; (8004eec <TIM_Base_SetConfig+0x124>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d017      	beq.n	8004e7a <TIM_Base_SetConfig+0xb2>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a28      	ldr	r2, [pc, #160]	; (8004ef0 <TIM_Base_SetConfig+0x128>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d013      	beq.n	8004e7a <TIM_Base_SetConfig+0xb2>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a27      	ldr	r2, [pc, #156]	; (8004ef4 <TIM_Base_SetConfig+0x12c>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d00f      	beq.n	8004e7a <TIM_Base_SetConfig+0xb2>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a26      	ldr	r2, [pc, #152]	; (8004ef8 <TIM_Base_SetConfig+0x130>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d00b      	beq.n	8004e7a <TIM_Base_SetConfig+0xb2>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a25      	ldr	r2, [pc, #148]	; (8004efc <TIM_Base_SetConfig+0x134>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d007      	beq.n	8004e7a <TIM_Base_SetConfig+0xb2>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a24      	ldr	r2, [pc, #144]	; (8004f00 <TIM_Base_SetConfig+0x138>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d003      	beq.n	8004e7a <TIM_Base_SetConfig+0xb2>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a23      	ldr	r2, [pc, #140]	; (8004f04 <TIM_Base_SetConfig+0x13c>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d108      	bne.n	8004e8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	689a      	ldr	r2, [r3, #8]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a0a      	ldr	r2, [pc, #40]	; (8004edc <TIM_Base_SetConfig+0x114>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d003      	beq.n	8004ec0 <TIM_Base_SetConfig+0xf8>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a0c      	ldr	r2, [pc, #48]	; (8004eec <TIM_Base_SetConfig+0x124>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d103      	bne.n	8004ec8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	691a      	ldr	r2, [r3, #16]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	615a      	str	r2, [r3, #20]
}
 8004ece:	bf00      	nop
 8004ed0:	3714      	adds	r7, #20
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	40010000 	.word	0x40010000
 8004ee0:	40000400 	.word	0x40000400
 8004ee4:	40000800 	.word	0x40000800
 8004ee8:	40000c00 	.word	0x40000c00
 8004eec:	40010400 	.word	0x40010400
 8004ef0:	40014000 	.word	0x40014000
 8004ef4:	40014400 	.word	0x40014400
 8004ef8:	40014800 	.word	0x40014800
 8004efc:	40001800 	.word	0x40001800
 8004f00:	40001c00 	.word	0x40001c00
 8004f04:	40002000 	.word	0x40002000

08004f08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d101      	bne.n	8004f20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f1c:	2302      	movs	r3, #2
 8004f1e:	e05a      	b.n	8004fd6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2202      	movs	r2, #2
 8004f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a21      	ldr	r2, [pc, #132]	; (8004fe4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d022      	beq.n	8004faa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f6c:	d01d      	beq.n	8004faa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a1d      	ldr	r2, [pc, #116]	; (8004fe8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d018      	beq.n	8004faa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a1b      	ldr	r2, [pc, #108]	; (8004fec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d013      	beq.n	8004faa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a1a      	ldr	r2, [pc, #104]	; (8004ff0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d00e      	beq.n	8004faa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a18      	ldr	r2, [pc, #96]	; (8004ff4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d009      	beq.n	8004faa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a17      	ldr	r2, [pc, #92]	; (8004ff8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d004      	beq.n	8004faa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a15      	ldr	r2, [pc, #84]	; (8004ffc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d10c      	bne.n	8004fc4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	68ba      	ldr	r2, [r7, #8]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68ba      	ldr	r2, [r7, #8]
 8004fc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3714      	adds	r7, #20
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	40010000 	.word	0x40010000
 8004fe8:	40000400 	.word	0x40000400
 8004fec:	40000800 	.word	0x40000800
 8004ff0:	40000c00 	.word	0x40000c00
 8004ff4:	40010400 	.word	0x40010400
 8004ff8:	40014000 	.word	0x40014000
 8004ffc:	40001800 	.word	0x40001800

08005000 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005000:	b084      	sub	sp, #16
 8005002:	b580      	push	{r7, lr}
 8005004:	b084      	sub	sp, #16
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
 800500a:	f107 001c 	add.w	r0, r7, #28
 800500e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005014:	2b01      	cmp	r3, #1
 8005016:	d122      	bne.n	800505e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800502c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005042:	2b01      	cmp	r3, #1
 8005044:	d105      	bne.n	8005052 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 f9c0 	bl	80053d8 <USB_CoreReset>
 8005058:	4603      	mov	r3, r0
 800505a:	73fb      	strb	r3, [r7, #15]
 800505c:	e01a      	b.n	8005094 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 f9b4 	bl	80053d8 <USB_CoreReset>
 8005070:	4603      	mov	r3, r0
 8005072:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005074:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005076:	2b00      	cmp	r3, #0
 8005078:	d106      	bne.n	8005088 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	639a      	str	r2, [r3, #56]	; 0x38
 8005086:	e005      	b.n	8005094 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005096:	2b01      	cmp	r3, #1
 8005098:	d10b      	bne.n	80050b2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f043 0206 	orr.w	r2, r3, #6
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f043 0220 	orr.w	r2, r3, #32
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80050b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3710      	adds	r7, #16
 80050b8:	46bd      	mov	sp, r7
 80050ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050be:	b004      	add	sp, #16
 80050c0:	4770      	bx	lr

080050c2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80050c2:	b480      	push	{r7}
 80050c4:	b083      	sub	sp, #12
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f043 0201 	orr.w	r2, r3, #1
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f023 0201 	bic.w	r2, r3, #1
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	370c      	adds	r7, #12
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr

08005106 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005106:	b580      	push	{r7, lr}
 8005108:	b084      	sub	sp, #16
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
 800510e:	460b      	mov	r3, r1
 8005110:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005112:	2300      	movs	r3, #0
 8005114:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005122:	78fb      	ldrb	r3, [r7, #3]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d115      	bne.n	8005154 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005134:	2001      	movs	r0, #1
 8005136:	f7fc fa9f 	bl	8001678 <HAL_Delay>
      ms++;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	3301      	adds	r3, #1
 800513e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 f93a 	bl	80053ba <USB_GetMode>
 8005146:	4603      	mov	r3, r0
 8005148:	2b01      	cmp	r3, #1
 800514a:	d01e      	beq.n	800518a <USB_SetCurrentMode+0x84>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2b31      	cmp	r3, #49	; 0x31
 8005150:	d9f0      	bls.n	8005134 <USB_SetCurrentMode+0x2e>
 8005152:	e01a      	b.n	800518a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005154:	78fb      	ldrb	r3, [r7, #3]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d115      	bne.n	8005186 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005166:	2001      	movs	r0, #1
 8005168:	f7fc fa86 	bl	8001678 <HAL_Delay>
      ms++;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	3301      	adds	r3, #1
 8005170:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f921 	bl	80053ba <USB_GetMode>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d005      	beq.n	800518a <USB_SetCurrentMode+0x84>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2b31      	cmp	r3, #49	; 0x31
 8005182:	d9f0      	bls.n	8005166 <USB_SetCurrentMode+0x60>
 8005184:	e001      	b.n	800518a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e005      	b.n	8005196 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2b32      	cmp	r3, #50	; 0x32
 800518e:	d101      	bne.n	8005194 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e000      	b.n	8005196 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3710      	adds	r7, #16
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
	...

080051a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80051aa:	2300      	movs	r3, #0
 80051ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	3301      	adds	r3, #1
 80051b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	4a13      	ldr	r2, [pc, #76]	; (8005204 <USB_FlushTxFifo+0x64>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d901      	bls.n	80051c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e01b      	b.n	80051f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	daf2      	bge.n	80051ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80051c8:	2300      	movs	r3, #0
 80051ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	019b      	lsls	r3, r3, #6
 80051d0:	f043 0220 	orr.w	r2, r3, #32
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	3301      	adds	r3, #1
 80051dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	4a08      	ldr	r2, [pc, #32]	; (8005204 <USB_FlushTxFifo+0x64>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d901      	bls.n	80051ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e006      	b.n	80051f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	f003 0320 	and.w	r3, r3, #32
 80051f2:	2b20      	cmp	r3, #32
 80051f4:	d0f0      	beq.n	80051d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3714      	adds	r7, #20
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr
 8005204:	00030d40 	.word	0x00030d40

08005208 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005210:	2300      	movs	r3, #0
 8005212:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	3301      	adds	r3, #1
 8005218:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	4a11      	ldr	r2, [pc, #68]	; (8005264 <USB_FlushRxFifo+0x5c>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d901      	bls.n	8005226 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e018      	b.n	8005258 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	2b00      	cmp	r3, #0
 800522c:	daf2      	bge.n	8005214 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800522e:	2300      	movs	r3, #0
 8005230:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2210      	movs	r2, #16
 8005236:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	3301      	adds	r3, #1
 800523c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	4a08      	ldr	r2, [pc, #32]	; (8005264 <USB_FlushRxFifo+0x5c>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d901      	bls.n	800524a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e006      	b.n	8005258 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	f003 0310 	and.w	r3, r3, #16
 8005252:	2b10      	cmp	r3, #16
 8005254:	d0f0      	beq.n	8005238 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3714      	adds	r7, #20
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr
 8005264:	00030d40 	.word	0x00030d40

08005268 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005268:	b480      	push	{r7}
 800526a:	b089      	sub	sp, #36	; 0x24
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	4611      	mov	r1, r2
 8005274:	461a      	mov	r2, r3
 8005276:	460b      	mov	r3, r1
 8005278:	71fb      	strb	r3, [r7, #7]
 800527a:	4613      	mov	r3, r2
 800527c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005286:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800528a:	2b00      	cmp	r3, #0
 800528c:	d123      	bne.n	80052d6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800528e:	88bb      	ldrh	r3, [r7, #4]
 8005290:	3303      	adds	r3, #3
 8005292:	089b      	lsrs	r3, r3, #2
 8005294:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005296:	2300      	movs	r3, #0
 8005298:	61bb      	str	r3, [r7, #24]
 800529a:	e018      	b.n	80052ce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800529c:	79fb      	ldrb	r3, [r7, #7]
 800529e:	031a      	lsls	r2, r3, #12
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	4413      	add	r3, r2
 80052a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052a8:	461a      	mov	r2, r3
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	6013      	str	r3, [r2, #0]
      pSrc++;
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	3301      	adds	r3, #1
 80052b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	3301      	adds	r3, #1
 80052ba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	3301      	adds	r3, #1
 80052c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	3301      	adds	r3, #1
 80052c6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	3301      	adds	r3, #1
 80052cc:	61bb      	str	r3, [r7, #24]
 80052ce:	69ba      	ldr	r2, [r7, #24]
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d3e2      	bcc.n	800529c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3724      	adds	r7, #36	; 0x24
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b08b      	sub	sp, #44	; 0x2c
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	4613      	mov	r3, r2
 80052f0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80052fa:	88fb      	ldrh	r3, [r7, #6]
 80052fc:	089b      	lsrs	r3, r3, #2
 80052fe:	b29b      	uxth	r3, r3
 8005300:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005302:	88fb      	ldrh	r3, [r7, #6]
 8005304:	f003 0303 	and.w	r3, r3, #3
 8005308:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800530a:	2300      	movs	r3, #0
 800530c:	623b      	str	r3, [r7, #32]
 800530e:	e014      	b.n	800533a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531a:	601a      	str	r2, [r3, #0]
    pDest++;
 800531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531e:	3301      	adds	r3, #1
 8005320:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005324:	3301      	adds	r3, #1
 8005326:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532a:	3301      	adds	r3, #1
 800532c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800532e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005330:	3301      	adds	r3, #1
 8005332:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005334:	6a3b      	ldr	r3, [r7, #32]
 8005336:	3301      	adds	r3, #1
 8005338:	623b      	str	r3, [r7, #32]
 800533a:	6a3a      	ldr	r2, [r7, #32]
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	429a      	cmp	r2, r3
 8005340:	d3e6      	bcc.n	8005310 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005342:	8bfb      	ldrh	r3, [r7, #30]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d01e      	beq.n	8005386 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005348:	2300      	movs	r3, #0
 800534a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005352:	461a      	mov	r2, r3
 8005354:	f107 0310 	add.w	r3, r7, #16
 8005358:	6812      	ldr	r2, [r2, #0]
 800535a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	6a3b      	ldr	r3, [r7, #32]
 8005360:	b2db      	uxtb	r3, r3
 8005362:	00db      	lsls	r3, r3, #3
 8005364:	fa22 f303 	lsr.w	r3, r2, r3
 8005368:	b2da      	uxtb	r2, r3
 800536a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536c:	701a      	strb	r2, [r3, #0]
      i++;
 800536e:	6a3b      	ldr	r3, [r7, #32]
 8005370:	3301      	adds	r3, #1
 8005372:	623b      	str	r3, [r7, #32]
      pDest++;
 8005374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005376:	3301      	adds	r3, #1
 8005378:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800537a:	8bfb      	ldrh	r3, [r7, #30]
 800537c:	3b01      	subs	r3, #1
 800537e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005380:	8bfb      	ldrh	r3, [r7, #30]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1ea      	bne.n	800535c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005388:	4618      	mov	r0, r3
 800538a:	372c      	adds	r7, #44	; 0x2c
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	695b      	ldr	r3, [r3, #20]
 80053a0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	4013      	ands	r3, r2
 80053aa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80053ac:	68fb      	ldr	r3, [r7, #12]
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3714      	adds	r7, #20
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80053ba:	b480      	push	{r7}
 80053bc:	b083      	sub	sp, #12
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	f003 0301 	and.w	r3, r3, #1
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	370c      	adds	r7, #12
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
	...

080053d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053e0:	2300      	movs	r3, #0
 80053e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	3301      	adds	r3, #1
 80053e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	4a13      	ldr	r2, [pc, #76]	; (800543c <USB_CoreReset+0x64>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d901      	bls.n	80053f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e01b      	b.n	800542e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	daf2      	bge.n	80053e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80053fe:	2300      	movs	r3, #0
 8005400:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	f043 0201 	orr.w	r2, r3, #1
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	3301      	adds	r3, #1
 8005412:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	4a09      	ldr	r2, [pc, #36]	; (800543c <USB_CoreReset+0x64>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d901      	bls.n	8005420 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e006      	b.n	800542e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	f003 0301 	and.w	r3, r3, #1
 8005428:	2b01      	cmp	r3, #1
 800542a:	d0f0      	beq.n	800540e <USB_CoreReset+0x36>

  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3714      	adds	r7, #20
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	00030d40 	.word	0x00030d40

08005440 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005440:	b084      	sub	sp, #16
 8005442:	b580      	push	{r7, lr}
 8005444:	b086      	sub	sp, #24
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
 800544a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800544e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005452:	2300      	movs	r3, #0
 8005454:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005460:	461a      	mov	r2, r3
 8005462:	2300      	movs	r3, #0
 8005464:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005476:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005482:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800548e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005492:	2b00      	cmp	r3, #0
 8005494:	d018      	beq.n	80054c8 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005498:	2b01      	cmp	r3, #1
 800549a:	d10a      	bne.n	80054b2 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054aa:	f043 0304 	orr.w	r3, r3, #4
 80054ae:	6013      	str	r3, [r2, #0]
 80054b0:	e014      	b.n	80054dc <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054c0:	f023 0304 	bic.w	r3, r3, #4
 80054c4:	6013      	str	r3, [r2, #0]
 80054c6:	e009      	b.n	80054dc <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054d6:	f023 0304 	bic.w	r3, r3, #4
 80054da:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80054dc:	2110      	movs	r1, #16
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f7ff fe5e 	bl	80051a0 <USB_FlushTxFifo>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d001      	beq.n	80054ee <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f7ff fe8a 	bl	8005208 <USB_FlushRxFifo>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d001      	beq.n	80054fe <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80054fe:	2300      	movs	r3, #0
 8005500:	613b      	str	r3, [r7, #16]
 8005502:	e015      	b.n	8005530 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	4413      	add	r3, r2
 800550c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005510:	461a      	mov	r2, r3
 8005512:	f04f 33ff 	mov.w	r3, #4294967295
 8005516:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	015a      	lsls	r2, r3, #5
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	4413      	add	r3, r2
 8005520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005524:	461a      	mov	r2, r3
 8005526:	2300      	movs	r3, #0
 8005528:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	3301      	adds	r3, #1
 800552e:	613b      	str	r3, [r7, #16]
 8005530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	429a      	cmp	r2, r3
 8005536:	d3e5      	bcc.n	8005504 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f04f 32ff 	mov.w	r2, #4294967295
 8005544:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800554a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00b      	beq.n	800556a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005558:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a13      	ldr	r2, [pc, #76]	; (80055ac <USB_HostInit+0x16c>)
 800555e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a13      	ldr	r2, [pc, #76]	; (80055b0 <USB_HostInit+0x170>)
 8005564:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005568:	e009      	b.n	800557e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2280      	movs	r2, #128	; 0x80
 800556e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a10      	ldr	r2, [pc, #64]	; (80055b4 <USB_HostInit+0x174>)
 8005574:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a0f      	ldr	r2, [pc, #60]	; (80055b8 <USB_HostInit+0x178>)
 800557a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800557e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005580:	2b00      	cmp	r3, #0
 8005582:	d105      	bne.n	8005590 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	f043 0210 	orr.w	r2, r3, #16
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	699a      	ldr	r2, [r3, #24]
 8005594:	4b09      	ldr	r3, [pc, #36]	; (80055bc <USB_HostInit+0x17c>)
 8005596:	4313      	orrs	r3, r2
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800559c:	7dfb      	ldrb	r3, [r7, #23]
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3718      	adds	r7, #24
 80055a2:	46bd      	mov	sp, r7
 80055a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055a8:	b004      	add	sp, #16
 80055aa:	4770      	bx	lr
 80055ac:	01000200 	.word	0x01000200
 80055b0:	00e00300 	.word	0x00e00300
 80055b4:	00600080 	.word	0x00600080
 80055b8:	004000e0 	.word	0x004000e0
 80055bc:	a3200008 	.word	0xa3200008

080055c0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	460b      	mov	r3, r1
 80055ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055de:	f023 0303 	bic.w	r3, r3, #3
 80055e2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	78fb      	ldrb	r3, [r7, #3]
 80055ee:	f003 0303 	and.w	r3, r3, #3
 80055f2:	68f9      	ldr	r1, [r7, #12]
 80055f4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80055f8:	4313      	orrs	r3, r2
 80055fa:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80055fc:	78fb      	ldrb	r3, [r7, #3]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d107      	bne.n	8005612 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005608:	461a      	mov	r2, r3
 800560a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800560e:	6053      	str	r3, [r2, #4]
 8005610:	e009      	b.n	8005626 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005612:	78fb      	ldrb	r3, [r7, #3]
 8005614:	2b02      	cmp	r3, #2
 8005616:	d106      	bne.n	8005626 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800561e:	461a      	mov	r2, r3
 8005620:	f241 7370 	movw	r3, #6000	; 0x1770
 8005624:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3714      	adds	r7, #20
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005640:	2300      	movs	r3, #0
 8005642:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005654:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800565e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005662:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005664:	2064      	movs	r0, #100	; 0x64
 8005666:	f7fc f807 	bl	8001678 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005672:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005676:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005678:	200a      	movs	r0, #10
 800567a:	f7fb fffd 	bl	8001678 <HAL_Delay>

  return HAL_OK;
 800567e:	2300      	movs	r3, #0
}
 8005680:	4618      	mov	r0, r3
 8005682:	3710      	adds	r7, #16
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	460b      	mov	r3, r1
 8005692:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005698:	2300      	movs	r3, #0
 800569a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80056ac:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d109      	bne.n	80056cc <USB_DriveVbus+0x44>
 80056b8:	78fb      	ldrb	r3, [r7, #3]
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d106      	bne.n	80056cc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80056c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80056ca:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056d6:	d109      	bne.n	80056ec <USB_DriveVbus+0x64>
 80056d8:	78fb      	ldrb	r3, [r7, #3]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d106      	bne.n	80056ec <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80056e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056ea:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3714      	adds	r7, #20
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr

080056fa <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80056fa:	b480      	push	{r7}
 80056fc:	b085      	sub	sp, #20
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005706:	2300      	movs	r3, #0
 8005708:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	0c5b      	lsrs	r3, r3, #17
 8005718:	f003 0303 	and.w	r3, r3, #3
}
 800571c:	4618      	mov	r0, r3
 800571e:	3714      	adds	r7, #20
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	b29b      	uxth	r3, r3
}
 800573e:	4618      	mov	r0, r3
 8005740:	3714      	adds	r7, #20
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
	...

0800574c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b088      	sub	sp, #32
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	4608      	mov	r0, r1
 8005756:	4611      	mov	r1, r2
 8005758:	461a      	mov	r2, r3
 800575a:	4603      	mov	r3, r0
 800575c:	70fb      	strb	r3, [r7, #3]
 800575e:	460b      	mov	r3, r1
 8005760:	70bb      	strb	r3, [r7, #2]
 8005762:	4613      	mov	r3, r2
 8005764:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005766:	2300      	movs	r3, #0
 8005768:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800576e:	78fb      	ldrb	r3, [r7, #3]
 8005770:	015a      	lsls	r2, r3, #5
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	4413      	add	r3, r2
 8005776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800577a:	461a      	mov	r2, r3
 800577c:	f04f 33ff 	mov.w	r3, #4294967295
 8005780:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005782:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005786:	2b03      	cmp	r3, #3
 8005788:	d87e      	bhi.n	8005888 <USB_HC_Init+0x13c>
 800578a:	a201      	add	r2, pc, #4	; (adr r2, 8005790 <USB_HC_Init+0x44>)
 800578c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005790:	080057a1 	.word	0x080057a1
 8005794:	0800584b 	.word	0x0800584b
 8005798:	080057a1 	.word	0x080057a1
 800579c:	0800580d 	.word	0x0800580d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80057a0:	78fb      	ldrb	r3, [r7, #3]
 80057a2:	015a      	lsls	r2, r3, #5
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	4413      	add	r3, r2
 80057a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ac:	461a      	mov	r2, r3
 80057ae:	f240 439d 	movw	r3, #1181	; 0x49d
 80057b2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80057b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	da10      	bge.n	80057de <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80057bc:	78fb      	ldrb	r3, [r7, #3]
 80057be:	015a      	lsls	r2, r3, #5
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	4413      	add	r3, r2
 80057c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	78fa      	ldrb	r2, [r7, #3]
 80057cc:	0151      	lsls	r1, r2, #5
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	440a      	add	r2, r1
 80057d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057da:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80057dc:	e057      	b.n	800588e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d051      	beq.n	800588e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80057ea:	78fb      	ldrb	r3, [r7, #3]
 80057ec:	015a      	lsls	r2, r3, #5
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	4413      	add	r3, r2
 80057f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	78fa      	ldrb	r2, [r7, #3]
 80057fa:	0151      	lsls	r1, r2, #5
 80057fc:	693a      	ldr	r2, [r7, #16]
 80057fe:	440a      	add	r2, r1
 8005800:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005804:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005808:	60d3      	str	r3, [r2, #12]
      break;
 800580a:	e040      	b.n	800588e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800580c:	78fb      	ldrb	r3, [r7, #3]
 800580e:	015a      	lsls	r2, r3, #5
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	4413      	add	r3, r2
 8005814:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005818:	461a      	mov	r2, r3
 800581a:	f240 639d 	movw	r3, #1693	; 0x69d
 800581e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005820:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005824:	2b00      	cmp	r3, #0
 8005826:	da34      	bge.n	8005892 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005828:	78fb      	ldrb	r3, [r7, #3]
 800582a:	015a      	lsls	r2, r3, #5
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	4413      	add	r3, r2
 8005830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	78fa      	ldrb	r2, [r7, #3]
 8005838:	0151      	lsls	r1, r2, #5
 800583a:	693a      	ldr	r2, [r7, #16]
 800583c:	440a      	add	r2, r1
 800583e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005842:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005846:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005848:	e023      	b.n	8005892 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800584a:	78fb      	ldrb	r3, [r7, #3]
 800584c:	015a      	lsls	r2, r3, #5
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	4413      	add	r3, r2
 8005852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005856:	461a      	mov	r2, r3
 8005858:	f240 2325 	movw	r3, #549	; 0x225
 800585c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800585e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005862:	2b00      	cmp	r3, #0
 8005864:	da17      	bge.n	8005896 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005866:	78fb      	ldrb	r3, [r7, #3]
 8005868:	015a      	lsls	r2, r3, #5
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	4413      	add	r3, r2
 800586e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	78fa      	ldrb	r2, [r7, #3]
 8005876:	0151      	lsls	r1, r2, #5
 8005878:	693a      	ldr	r2, [r7, #16]
 800587a:	440a      	add	r2, r1
 800587c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005880:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005884:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005886:	e006      	b.n	8005896 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	77fb      	strb	r3, [r7, #31]
      break;
 800588c:	e004      	b.n	8005898 <USB_HC_Init+0x14c>
      break;
 800588e:	bf00      	nop
 8005890:	e002      	b.n	8005898 <USB_HC_Init+0x14c>
      break;
 8005892:	bf00      	nop
 8005894:	e000      	b.n	8005898 <USB_HC_Init+0x14c>
      break;
 8005896:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005898:	78fb      	ldrb	r3, [r7, #3]
 800589a:	015a      	lsls	r2, r3, #5
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	4413      	add	r3, r2
 80058a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	78fa      	ldrb	r2, [r7, #3]
 80058a8:	0151      	lsls	r1, r2, #5
 80058aa:	693a      	ldr	r2, [r7, #16]
 80058ac:	440a      	add	r2, r1
 80058ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058b2:	f043 0302 	orr.w	r3, r3, #2
 80058b6:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058be:	699a      	ldr	r2, [r3, #24]
 80058c0:	78fb      	ldrb	r3, [r7, #3]
 80058c2:	f003 030f 	and.w	r3, r3, #15
 80058c6:	2101      	movs	r1, #1
 80058c8:	fa01 f303 	lsl.w	r3, r1, r3
 80058cc:	6939      	ldr	r1, [r7, #16]
 80058ce:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80058d2:	4313      	orrs	r3, r2
 80058d4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	699b      	ldr	r3, [r3, #24]
 80058da:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80058e2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	da03      	bge.n	80058f2 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80058ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058ee:	61bb      	str	r3, [r7, #24]
 80058f0:	e001      	b.n	80058f6 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80058f2:	2300      	movs	r3, #0
 80058f4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f7ff feff 	bl	80056fa <USB_GetHostSpeed>
 80058fc:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80058fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005902:	2b02      	cmp	r3, #2
 8005904:	d106      	bne.n	8005914 <USB_HC_Init+0x1c8>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2b02      	cmp	r3, #2
 800590a:	d003      	beq.n	8005914 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800590c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005910:	617b      	str	r3, [r7, #20]
 8005912:	e001      	b.n	8005918 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005914:	2300      	movs	r3, #0
 8005916:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005918:	787b      	ldrb	r3, [r7, #1]
 800591a:	059b      	lsls	r3, r3, #22
 800591c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005920:	78bb      	ldrb	r3, [r7, #2]
 8005922:	02db      	lsls	r3, r3, #11
 8005924:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005928:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800592a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800592e:	049b      	lsls	r3, r3, #18
 8005930:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005934:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005936:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005938:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800593c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005942:	78fb      	ldrb	r3, [r7, #3]
 8005944:	0159      	lsls	r1, r3, #5
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	440b      	add	r3, r1
 800594a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800594e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005954:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005956:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800595a:	2b03      	cmp	r3, #3
 800595c:	d003      	beq.n	8005966 <USB_HC_Init+0x21a>
 800595e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005962:	2b01      	cmp	r3, #1
 8005964:	d10f      	bne.n	8005986 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005966:	78fb      	ldrb	r3, [r7, #3]
 8005968:	015a      	lsls	r2, r3, #5
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	4413      	add	r3, r2
 800596e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	78fa      	ldrb	r2, [r7, #3]
 8005976:	0151      	lsls	r1, r2, #5
 8005978:	693a      	ldr	r2, [r7, #16]
 800597a:	440a      	add	r2, r1
 800597c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005980:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005984:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005986:	7ffb      	ldrb	r3, [r7, #31]
}
 8005988:	4618      	mov	r0, r3
 800598a:	3720      	adds	r7, #32
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b08c      	sub	sp, #48	; 0x30
 8005994:	af02      	add	r7, sp, #8
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	4613      	mov	r3, r2
 800599c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	785b      	ldrb	r3, [r3, #1]
 80059a6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80059a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059ac:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d02d      	beq.n	8005a16 <USB_HC_StartXfer+0x86>
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	791b      	ldrb	r3, [r3, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d129      	bne.n	8005a16 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80059c2:	79fb      	ldrb	r3, [r7, #7]
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d117      	bne.n	80059f8 <USB_HC_StartXfer+0x68>
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	79db      	ldrb	r3, [r3, #7]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d003      	beq.n	80059d8 <USB_HC_StartXfer+0x48>
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	79db      	ldrb	r3, [r3, #7]
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d10f      	bne.n	80059f8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	015a      	lsls	r2, r3, #5
 80059dc:	6a3b      	ldr	r3, [r7, #32]
 80059de:	4413      	add	r3, r2
 80059e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	69fa      	ldr	r2, [r7, #28]
 80059e8:	0151      	lsls	r1, r2, #5
 80059ea:	6a3a      	ldr	r2, [r7, #32]
 80059ec:	440a      	add	r2, r1
 80059ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059f6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80059f8:	79fb      	ldrb	r3, [r7, #7]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d10b      	bne.n	8005a16 <USB_HC_StartXfer+0x86>
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	795b      	ldrb	r3, [r3, #5]
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d107      	bne.n	8005a16 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	785b      	ldrb	r3, [r3, #1]
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	68f8      	ldr	r0, [r7, #12]
 8005a0e:	f000 fa0f 	bl	8005e30 <USB_DoPing>
      return HAL_OK;
 8005a12:	2300      	movs	r3, #0
 8005a14:	e0f8      	b.n	8005c08 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d018      	beq.n	8005a50 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	695b      	ldr	r3, [r3, #20]
 8005a22:	68ba      	ldr	r2, [r7, #8]
 8005a24:	8912      	ldrh	r2, [r2, #8]
 8005a26:	4413      	add	r3, r2
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	68ba      	ldr	r2, [r7, #8]
 8005a2c:	8912      	ldrh	r2, [r2, #8]
 8005a2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a32:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005a34:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005a36:	8b7b      	ldrh	r3, [r7, #26]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d90b      	bls.n	8005a54 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005a3c:	8b7b      	ldrh	r3, [r7, #26]
 8005a3e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005a40:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	8912      	ldrh	r2, [r2, #8]
 8005a46:	fb03 f202 	mul.w	r2, r3, r2
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	611a      	str	r2, [r3, #16]
 8005a4e:	e001      	b.n	8005a54 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005a50:	2301      	movs	r3, #1
 8005a52:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	78db      	ldrb	r3, [r3, #3]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d007      	beq.n	8005a6c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005a5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a5e:	68ba      	ldr	r2, [r7, #8]
 8005a60:	8912      	ldrh	r2, [r2, #8]
 8005a62:	fb03 f202 	mul.w	r2, r3, r2
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	611a      	str	r2, [r3, #16]
 8005a6a:	e003      	b.n	8005a74 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	695a      	ldr	r2, [r3, #20]
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005a7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a7e:	04d9      	lsls	r1, r3, #19
 8005a80:	4b63      	ldr	r3, [pc, #396]	; (8005c10 <USB_HC_StartXfer+0x280>)
 8005a82:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a84:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	7a9b      	ldrb	r3, [r3, #10]
 8005a8a:	075b      	lsls	r3, r3, #29
 8005a8c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a90:	69f9      	ldr	r1, [r7, #28]
 8005a92:	0148      	lsls	r0, r1, #5
 8005a94:	6a39      	ldr	r1, [r7, #32]
 8005a96:	4401      	add	r1, r0
 8005a98:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005a9c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a9e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005aa0:	79fb      	ldrb	r3, [r7, #7]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d009      	beq.n	8005aba <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	68d9      	ldr	r1, [r3, #12]
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	015a      	lsls	r2, r3, #5
 8005aae:	6a3b      	ldr	r3, [r7, #32]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ab6:	460a      	mov	r2, r1
 8005ab8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005aba:	6a3b      	ldr	r3, [r7, #32]
 8005abc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	bf0c      	ite	eq
 8005aca:	2301      	moveq	r3, #1
 8005acc:	2300      	movne	r3, #0
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	015a      	lsls	r2, r3, #5
 8005ad6:	6a3b      	ldr	r3, [r7, #32]
 8005ad8:	4413      	add	r3, r2
 8005ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	69fa      	ldr	r2, [r7, #28]
 8005ae2:	0151      	lsls	r1, r2, #5
 8005ae4:	6a3a      	ldr	r2, [r7, #32]
 8005ae6:	440a      	add	r2, r1
 8005ae8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005aec:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005af0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	015a      	lsls	r2, r3, #5
 8005af6:	6a3b      	ldr	r3, [r7, #32]
 8005af8:	4413      	add	r3, r2
 8005afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	7e7b      	ldrb	r3, [r7, #25]
 8005b02:	075b      	lsls	r3, r3, #29
 8005b04:	69f9      	ldr	r1, [r7, #28]
 8005b06:	0148      	lsls	r0, r1, #5
 8005b08:	6a39      	ldr	r1, [r7, #32]
 8005b0a:	4401      	add	r1, r0
 8005b0c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005b10:	4313      	orrs	r3, r2
 8005b12:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	015a      	lsls	r2, r3, #5
 8005b18:	6a3b      	ldr	r3, [r7, #32]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b2a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	78db      	ldrb	r3, [r3, #3]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d004      	beq.n	8005b3e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b3a:	613b      	str	r3, [r7, #16]
 8005b3c:	e003      	b.n	8005b46 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b44:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b4c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	015a      	lsls	r2, r3, #5
 8005b52:	6a3b      	ldr	r3, [r7, #32]
 8005b54:	4413      	add	r3, r2
 8005b56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005b60:	79fb      	ldrb	r3, [r7, #7]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d001      	beq.n	8005b6a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005b66:	2300      	movs	r3, #0
 8005b68:	e04e      	b.n	8005c08 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	78db      	ldrb	r3, [r3, #3]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d149      	bne.n	8005c06 <USB_HC_StartXfer+0x276>
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	695b      	ldr	r3, [r3, #20]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d045      	beq.n	8005c06 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	79db      	ldrb	r3, [r3, #7]
 8005b7e:	2b03      	cmp	r3, #3
 8005b80:	d830      	bhi.n	8005be4 <USB_HC_StartXfer+0x254>
 8005b82:	a201      	add	r2, pc, #4	; (adr r2, 8005b88 <USB_HC_StartXfer+0x1f8>)
 8005b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b88:	08005b99 	.word	0x08005b99
 8005b8c:	08005bbd 	.word	0x08005bbd
 8005b90:	08005b99 	.word	0x08005b99
 8005b94:	08005bbd 	.word	0x08005bbd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	695b      	ldr	r3, [r3, #20]
 8005b9c:	3303      	adds	r3, #3
 8005b9e:	089b      	lsrs	r3, r3, #2
 8005ba0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005ba2:	8afa      	ldrh	r2, [r7, #22]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d91c      	bls.n	8005be8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	f043 0220 	orr.w	r2, r3, #32
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	619a      	str	r2, [r3, #24]
        }
        break;
 8005bba:	e015      	b.n	8005be8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	695b      	ldr	r3, [r3, #20]
 8005bc0:	3303      	adds	r3, #3
 8005bc2:	089b      	lsrs	r3, r3, #2
 8005bc4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005bc6:	8afa      	ldrh	r2, [r7, #22]
 8005bc8:	6a3b      	ldr	r3, [r7, #32]
 8005bca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d90a      	bls.n	8005bec <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	619a      	str	r2, [r3, #24]
        }
        break;
 8005be2:	e003      	b.n	8005bec <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005be4:	bf00      	nop
 8005be6:	e002      	b.n	8005bee <USB_HC_StartXfer+0x25e>
        break;
 8005be8:	bf00      	nop
 8005bea:	e000      	b.n	8005bee <USB_HC_StartXfer+0x25e>
        break;
 8005bec:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	68d9      	ldr	r1, [r3, #12]
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	785a      	ldrb	r2, [r3, #1]
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	2000      	movs	r0, #0
 8005bfe:	9000      	str	r0, [sp, #0]
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	f7ff fb31 	bl	8005268 <USB_WritePacket>
  }

  return HAL_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3728      	adds	r7, #40	; 0x28
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	1ff80000 	.word	0x1ff80000

08005c14 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b085      	sub	sp, #20
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c26:	695b      	ldr	r3, [r3, #20]
 8005c28:	b29b      	uxth	r3, r3
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3714      	adds	r7, #20
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr

08005c36 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005c36:	b480      	push	{r7}
 8005c38:	b089      	sub	sp, #36	; 0x24
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
 8005c3e:	460b      	mov	r3, r1
 8005c40:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005c46:	78fb      	ldrb	r3, [r7, #3]
 8005c48:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	015a      	lsls	r2, r3, #5
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	4413      	add	r3, r2
 8005c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	0c9b      	lsrs	r3, r3, #18
 8005c5e:	f003 0303 	and.w	r3, r3, #3
 8005c62:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	015a      	lsls	r2, r3, #5
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	0fdb      	lsrs	r3, r3, #31
 8005c74:	f003 0301 	and.w	r3, r3, #1
 8005c78:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f003 0320 	and.w	r3, r3, #32
 8005c82:	2b20      	cmp	r3, #32
 8005c84:	d104      	bne.n	8005c90 <USB_HC_Halt+0x5a>
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d101      	bne.n	8005c90 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	e0c8      	b.n	8005e22 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d002      	beq.n	8005c9c <USB_HC_Halt+0x66>
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d163      	bne.n	8005d64 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	015a      	lsls	r2, r3, #5
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	69ba      	ldr	r2, [r7, #24]
 8005cac:	0151      	lsls	r1, r2, #5
 8005cae:	69fa      	ldr	r2, [r7, #28]
 8005cb0:	440a      	add	r2, r1
 8005cb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cb6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005cba:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	f003 0320 	and.w	r3, r3, #32
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	f040 80ab 	bne.w	8005e20 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d133      	bne.n	8005d3e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	015a      	lsls	r2, r3, #5
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	4413      	add	r3, r2
 8005cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	69ba      	ldr	r2, [r7, #24]
 8005ce6:	0151      	lsls	r1, r2, #5
 8005ce8:	69fa      	ldr	r2, [r7, #28]
 8005cea:	440a      	add	r2, r1
 8005cec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cf0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005cf4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	015a      	lsls	r2, r3, #5
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	69ba      	ldr	r2, [r7, #24]
 8005d06:	0151      	lsls	r1, r2, #5
 8005d08:	69fa      	ldr	r2, [r7, #28]
 8005d0a:	440a      	add	r2, r1
 8005d0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d14:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	3301      	adds	r3, #1
 8005d1a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d22:	d81d      	bhi.n	8005d60 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	015a      	lsls	r2, r3, #5
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d3a:	d0ec      	beq.n	8005d16 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005d3c:	e070      	b.n	8005e20 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	015a      	lsls	r2, r3, #5
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	4413      	add	r3, r2
 8005d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	69ba      	ldr	r2, [r7, #24]
 8005d4e:	0151      	lsls	r1, r2, #5
 8005d50:	69fa      	ldr	r2, [r7, #28]
 8005d52:	440a      	add	r2, r1
 8005d54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d5c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005d5e:	e05f      	b.n	8005e20 <USB_HC_Halt+0x1ea>
            break;
 8005d60:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005d62:	e05d      	b.n	8005e20 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	015a      	lsls	r2, r3, #5
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	69ba      	ldr	r2, [r7, #24]
 8005d74:	0151      	lsls	r1, r2, #5
 8005d76:	69fa      	ldr	r2, [r7, #28]
 8005d78:	440a      	add	r2, r1
 8005d7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d82:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d133      	bne.n	8005dfc <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	015a      	lsls	r2, r3, #5
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	69ba      	ldr	r2, [r7, #24]
 8005da4:	0151      	lsls	r1, r2, #5
 8005da6:	69fa      	ldr	r2, [r7, #28]
 8005da8:	440a      	add	r2, r1
 8005daa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005db2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	015a      	lsls	r2, r3, #5
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	4413      	add	r3, r2
 8005dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	69ba      	ldr	r2, [r7, #24]
 8005dc4:	0151      	lsls	r1, r2, #5
 8005dc6:	69fa      	ldr	r2, [r7, #28]
 8005dc8:	440a      	add	r2, r1
 8005dca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005dd2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005de0:	d81d      	bhi.n	8005e1e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	015a      	lsls	r2, r3, #5
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	4413      	add	r3, r2
 8005dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005df4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005df8:	d0ec      	beq.n	8005dd4 <USB_HC_Halt+0x19e>
 8005dfa:	e011      	b.n	8005e20 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	015a      	lsls	r2, r3, #5
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	4413      	add	r3, r2
 8005e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	69ba      	ldr	r2, [r7, #24]
 8005e0c:	0151      	lsls	r1, r2, #5
 8005e0e:	69fa      	ldr	r2, [r7, #28]
 8005e10:	440a      	add	r2, r1
 8005e12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e1a:	6013      	str	r3, [r2, #0]
 8005e1c:	e000      	b.n	8005e20 <USB_HC_Halt+0x1ea>
          break;
 8005e1e:	bf00      	nop
    }
  }

  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3724      	adds	r7, #36	; 0x24
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
	...

08005e30 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b087      	sub	sp, #28
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	460b      	mov	r3, r1
 8005e3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005e40:	78fb      	ldrb	r3, [r7, #3]
 8005e42:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005e44:	2301      	movs	r3, #1
 8005e46:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	04da      	lsls	r2, r3, #19
 8005e4c:	4b15      	ldr	r3, [pc, #84]	; (8005ea4 <USB_DoPing+0x74>)
 8005e4e:	4013      	ands	r3, r2
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	0151      	lsls	r1, r2, #5
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	440a      	add	r2, r1
 8005e58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e60:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	015a      	lsls	r2, r3, #5
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	4413      	add	r3, r2
 8005e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e78:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e80:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	015a      	lsls	r2, r3, #5
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	4413      	add	r3, r2
 8005e8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e8e:	461a      	mov	r2, r3
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	371c      	adds	r7, #28
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	1ff80000 	.word	0x1ff80000

08005ea8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b088      	sub	sp, #32
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f7ff f911 	bl	80050e4 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005ec2:	2110      	movs	r1, #16
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f7ff f96b 	bl	80051a0 <USB_FlushTxFifo>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d001      	beq.n	8005ed4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f7ff f997 	bl	8005208 <USB_FlushRxFifo>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d001      	beq.n	8005ee4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	61bb      	str	r3, [r7, #24]
 8005ee8:	e01f      	b.n	8005f2a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	015a      	lsls	r2, r3, #5
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f00:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f08:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f10:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	015a      	lsls	r2, r3, #5
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	4413      	add	r3, r2
 8005f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f1e:	461a      	mov	r2, r3
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	3301      	adds	r3, #1
 8005f28:	61bb      	str	r3, [r7, #24]
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	2b0f      	cmp	r3, #15
 8005f2e:	d9dc      	bls.n	8005eea <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005f30:	2300      	movs	r3, #0
 8005f32:	61bb      	str	r3, [r7, #24]
 8005f34:	e034      	b.n	8005fa0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	015a      	lsls	r2, r3, #5
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f4c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f54:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f5c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	015a      	lsls	r2, r3, #5
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	4413      	add	r3, r2
 8005f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	3301      	adds	r3, #1
 8005f74:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f7c:	d80c      	bhi.n	8005f98 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	015a      	lsls	r2, r3, #5
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	4413      	add	r3, r2
 8005f86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f94:	d0ec      	beq.n	8005f70 <USB_StopHost+0xc8>
 8005f96:	e000      	b.n	8005f9a <USB_StopHost+0xf2>
        break;
 8005f98:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	61bb      	str	r3, [r7, #24]
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	2b0f      	cmp	r3, #15
 8005fa4:	d9c7      	bls.n	8005f36 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fac:	461a      	mov	r2, r3
 8005fae:	f04f 33ff 	mov.w	r3, #4294967295
 8005fb2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8005fba:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f7ff f880 	bl	80050c2 <USB_EnableGlobalInt>

  return ret;
 8005fc2:	7ffb      	ldrb	r3, [r7, #31]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3720      	adds	r7, #32
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005fcc:	b590      	push	{r4, r7, lr}
 8005fce:	b089      	sub	sp, #36	; 0x24
 8005fd0:	af04      	add	r7, sp, #16
 8005fd2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	2202      	movs	r2, #2
 8005fd8:	2102      	movs	r1, #2
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 fcb2 	bl	8006944 <USBH_FindInterface>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005fe4:	7bfb      	ldrb	r3, [r7, #15]
 8005fe6:	2bff      	cmp	r3, #255	; 0xff
 8005fe8:	d002      	beq.n	8005ff0 <USBH_CDC_InterfaceInit+0x24>
 8005fea:	7bfb      	ldrb	r3, [r7, #15]
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d901      	bls.n	8005ff4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005ff0:	2302      	movs	r3, #2
 8005ff2:	e13d      	b.n	8006270 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005ff4:	7bfb      	ldrb	r3, [r7, #15]
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 fc87 	bl	800690c <USBH_SelectInterface>
 8005ffe:	4603      	mov	r3, r0
 8006000:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006002:	7bbb      	ldrb	r3, [r7, #14]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d001      	beq.n	800600c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006008:	2302      	movs	r3, #2
 800600a:	e131      	b.n	8006270 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006012:	2050      	movs	r0, #80	; 0x50
 8006014:	f005 fe36 	bl	800bc84 <malloc>
 8006018:	4603      	mov	r3, r0
 800601a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006022:	69db      	ldr	r3, [r3, #28]
 8006024:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d101      	bne.n	8006030 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800602c:	2302      	movs	r3, #2
 800602e:	e11f      	b.n	8006270 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006030:	2250      	movs	r2, #80	; 0x50
 8006032:	2100      	movs	r1, #0
 8006034:	68b8      	ldr	r0, [r7, #8]
 8006036:	f005 fe43 	bl	800bcc0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800603a:	7bfb      	ldrb	r3, [r7, #15]
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	211a      	movs	r1, #26
 8006040:	fb01 f303 	mul.w	r3, r1, r3
 8006044:	4413      	add	r3, r2
 8006046:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	b25b      	sxtb	r3, r3
 800604e:	2b00      	cmp	r3, #0
 8006050:	da15      	bge.n	800607e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006052:	7bfb      	ldrb	r3, [r7, #15]
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	211a      	movs	r1, #26
 8006058:	fb01 f303 	mul.w	r3, r1, r3
 800605c:	4413      	add	r3, r2
 800605e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006062:	781a      	ldrb	r2, [r3, #0]
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006068:	7bfb      	ldrb	r3, [r7, #15]
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	211a      	movs	r1, #26
 800606e:	fb01 f303 	mul.w	r3, r1, r3
 8006072:	4413      	add	r3, r2
 8006074:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006078:	881a      	ldrh	r2, [r3, #0]
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	785b      	ldrb	r3, [r3, #1]
 8006082:	4619      	mov	r1, r3
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f002 f984 	bl	8008392 <USBH_AllocPipe>
 800608a:	4603      	mov	r3, r0
 800608c:	461a      	mov	r2, r3
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	7819      	ldrb	r1, [r3, #0]
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	7858      	ldrb	r0, [r3, #1]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80060a6:	68ba      	ldr	r2, [r7, #8]
 80060a8:	8952      	ldrh	r2, [r2, #10]
 80060aa:	9202      	str	r2, [sp, #8]
 80060ac:	2203      	movs	r2, #3
 80060ae:	9201      	str	r2, [sp, #4]
 80060b0:	9300      	str	r3, [sp, #0]
 80060b2:	4623      	mov	r3, r4
 80060b4:	4602      	mov	r2, r0
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f002 f93c 	bl	8008334 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	2200      	movs	r2, #0
 80060c2:	4619      	mov	r1, r3
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f005 fd2f 	bl	800bb28 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80060ca:	2300      	movs	r3, #0
 80060cc:	2200      	movs	r2, #0
 80060ce:	210a      	movs	r1, #10
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 fc37 	bl	8006944 <USBH_FindInterface>
 80060d6:	4603      	mov	r3, r0
 80060d8:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80060da:	7bfb      	ldrb	r3, [r7, #15]
 80060dc:	2bff      	cmp	r3, #255	; 0xff
 80060de:	d002      	beq.n	80060e6 <USBH_CDC_InterfaceInit+0x11a>
 80060e0:	7bfb      	ldrb	r3, [r7, #15]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d901      	bls.n	80060ea <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80060e6:	2302      	movs	r3, #2
 80060e8:	e0c2      	b.n	8006270 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80060ea:	7bfb      	ldrb	r3, [r7, #15]
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	211a      	movs	r1, #26
 80060f0:	fb01 f303 	mul.w	r3, r1, r3
 80060f4:	4413      	add	r3, r2
 80060f6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	b25b      	sxtb	r3, r3
 80060fe:	2b00      	cmp	r3, #0
 8006100:	da16      	bge.n	8006130 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006102:	7bfb      	ldrb	r3, [r7, #15]
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	211a      	movs	r1, #26
 8006108:	fb01 f303 	mul.w	r3, r1, r3
 800610c:	4413      	add	r3, r2
 800610e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006112:	781a      	ldrb	r2, [r3, #0]
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006118:	7bfb      	ldrb	r3, [r7, #15]
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	211a      	movs	r1, #26
 800611e:	fb01 f303 	mul.w	r3, r1, r3
 8006122:	4413      	add	r3, r2
 8006124:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006128:	881a      	ldrh	r2, [r3, #0]
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	835a      	strh	r2, [r3, #26]
 800612e:	e015      	b.n	800615c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006130:	7bfb      	ldrb	r3, [r7, #15]
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	211a      	movs	r1, #26
 8006136:	fb01 f303 	mul.w	r3, r1, r3
 800613a:	4413      	add	r3, r2
 800613c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006140:	781a      	ldrb	r2, [r3, #0]
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006146:	7bfb      	ldrb	r3, [r7, #15]
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	211a      	movs	r1, #26
 800614c:	fb01 f303 	mul.w	r3, r1, r3
 8006150:	4413      	add	r3, r2
 8006152:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006156:	881a      	ldrh	r2, [r3, #0]
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800615c:	7bfb      	ldrb	r3, [r7, #15]
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	211a      	movs	r1, #26
 8006162:	fb01 f303 	mul.w	r3, r1, r3
 8006166:	4413      	add	r3, r2
 8006168:	f203 3356 	addw	r3, r3, #854	; 0x356
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	b25b      	sxtb	r3, r3
 8006170:	2b00      	cmp	r3, #0
 8006172:	da16      	bge.n	80061a2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006174:	7bfb      	ldrb	r3, [r7, #15]
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	211a      	movs	r1, #26
 800617a:	fb01 f303 	mul.w	r3, r1, r3
 800617e:	4413      	add	r3, r2
 8006180:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006184:	781a      	ldrb	r2, [r3, #0]
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800618a:	7bfb      	ldrb	r3, [r7, #15]
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	211a      	movs	r1, #26
 8006190:	fb01 f303 	mul.w	r3, r1, r3
 8006194:	4413      	add	r3, r2
 8006196:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800619a:	881a      	ldrh	r2, [r3, #0]
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	835a      	strh	r2, [r3, #26]
 80061a0:	e015      	b.n	80061ce <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80061a2:	7bfb      	ldrb	r3, [r7, #15]
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	211a      	movs	r1, #26
 80061a8:	fb01 f303 	mul.w	r3, r1, r3
 80061ac:	4413      	add	r3, r2
 80061ae:	f203 3356 	addw	r3, r3, #854	; 0x356
 80061b2:	781a      	ldrb	r2, [r3, #0]
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80061b8:	7bfb      	ldrb	r3, [r7, #15]
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	211a      	movs	r1, #26
 80061be:	fb01 f303 	mul.w	r3, r1, r3
 80061c2:	4413      	add	r3, r2
 80061c4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80061c8:	881a      	ldrh	r2, [r3, #0]
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	7b9b      	ldrb	r3, [r3, #14]
 80061d2:	4619      	mov	r1, r3
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f002 f8dc 	bl	8008392 <USBH_AllocPipe>
 80061da:	4603      	mov	r3, r0
 80061dc:	461a      	mov	r2, r3
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	7bdb      	ldrb	r3, [r3, #15]
 80061e6:	4619      	mov	r1, r3
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f002 f8d2 	bl	8008392 <USBH_AllocPipe>
 80061ee:	4603      	mov	r3, r0
 80061f0:	461a      	mov	r2, r3
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	7b59      	ldrb	r1, [r3, #13]
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	7b98      	ldrb	r0, [r3, #14]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800620a:	68ba      	ldr	r2, [r7, #8]
 800620c:	8b12      	ldrh	r2, [r2, #24]
 800620e:	9202      	str	r2, [sp, #8]
 8006210:	2202      	movs	r2, #2
 8006212:	9201      	str	r2, [sp, #4]
 8006214:	9300      	str	r3, [sp, #0]
 8006216:	4623      	mov	r3, r4
 8006218:	4602      	mov	r2, r0
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f002 f88a 	bl	8008334 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	7b19      	ldrb	r1, [r3, #12]
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	7bd8      	ldrb	r0, [r3, #15]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	8b52      	ldrh	r2, [r2, #26]
 8006238:	9202      	str	r2, [sp, #8]
 800623a:	2202      	movs	r2, #2
 800623c:	9201      	str	r2, [sp, #4]
 800623e:	9300      	str	r3, [sp, #0]
 8006240:	4623      	mov	r3, r4
 8006242:	4602      	mov	r2, r0
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f002 f875 	bl	8008334 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	7b5b      	ldrb	r3, [r3, #13]
 8006256:	2200      	movs	r2, #0
 8006258:	4619      	mov	r1, r3
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f005 fc64 	bl	800bb28 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	7b1b      	ldrb	r3, [r3, #12]
 8006264:	2200      	movs	r2, #0
 8006266:	4619      	mov	r1, r3
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f005 fc5d 	bl	800bb28 <USBH_LL_SetToggle>

  return USBH_OK;
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	3714      	adds	r7, #20
 8006274:	46bd      	mov	sp, r7
 8006276:	bd90      	pop	{r4, r7, pc}

08006278 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006286:	69db      	ldr	r3, [r3, #28]
 8006288:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00e      	beq.n	80062b0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	4619      	mov	r1, r3
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f002 f86a 	bl	8008372 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	4619      	mov	r1, r3
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f002 f895 	bl	80083d4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2200      	movs	r2, #0
 80062ae:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	7b1b      	ldrb	r3, [r3, #12]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d00e      	beq.n	80062d6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	7b1b      	ldrb	r3, [r3, #12]
 80062bc:	4619      	mov	r1, r3
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f002 f857 	bl	8008372 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	7b1b      	ldrb	r3, [r3, #12]
 80062c8:	4619      	mov	r1, r3
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f002 f882 	bl	80083d4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	7b5b      	ldrb	r3, [r3, #13]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00e      	beq.n	80062fc <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	7b5b      	ldrb	r3, [r3, #13]
 80062e2:	4619      	mov	r1, r3
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f002 f844 	bl	8008372 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	7b5b      	ldrb	r3, [r3, #13]
 80062ee:	4619      	mov	r1, r3
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f002 f86f 	bl	80083d4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2200      	movs	r2, #0
 80062fa:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006302:	69db      	ldr	r3, [r3, #28]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d00b      	beq.n	8006320 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800630e:	69db      	ldr	r3, [r3, #28]
 8006310:	4618      	mov	r0, r3
 8006312:	f005 fcbf 	bl	800bc94 <free>
    phost->pActiveClass->pData = 0U;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800631c:	2200      	movs	r2, #0
 800631e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}

0800632a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800632a:	b580      	push	{r7, lr}
 800632c:	b084      	sub	sp, #16
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006338:	69db      	ldr	r3, [r3, #28]
 800633a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	3340      	adds	r3, #64	; 0x40
 8006340:	4619      	mov	r1, r3
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 f8b1 	bl	80064aa <GetLineCoding>
 8006348:	4603      	mov	r3, r0
 800634a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800634c:	7afb      	ldrb	r3, [r7, #11]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d105      	bne.n	800635e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006358:	2102      	movs	r1, #2
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800635e:	7afb      	ldrb	r3, [r7, #11]
}
 8006360:	4618      	mov	r0, r3
 8006362:	3710      	adds	r7, #16
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006370:	2301      	movs	r3, #1
 8006372:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006374:	2300      	movs	r3, #0
 8006376:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800637e:	69db      	ldr	r3, [r3, #28]
 8006380:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006388:	2b04      	cmp	r3, #4
 800638a:	d877      	bhi.n	800647c <USBH_CDC_Process+0x114>
 800638c:	a201      	add	r2, pc, #4	; (adr r2, 8006394 <USBH_CDC_Process+0x2c>)
 800638e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006392:	bf00      	nop
 8006394:	080063a9 	.word	0x080063a9
 8006398:	080063af 	.word	0x080063af
 800639c:	080063df 	.word	0x080063df
 80063a0:	08006453 	.word	0x08006453
 80063a4:	08006461 	.word	0x08006461
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80063a8:	2300      	movs	r3, #0
 80063aa:	73fb      	strb	r3, [r7, #15]
      break;
 80063ac:	e06d      	b.n	800648a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063b2:	4619      	mov	r1, r3
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 f897 	bl	80064e8 <SetLineCoding>
 80063ba:	4603      	mov	r3, r0
 80063bc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80063be:	7bbb      	ldrb	r3, [r7, #14]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d104      	bne.n	80063ce <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	2202      	movs	r2, #2
 80063c8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80063cc:	e058      	b.n	8006480 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80063ce:	7bbb      	ldrb	r3, [r7, #14]
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d055      	beq.n	8006480 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	2204      	movs	r2, #4
 80063d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80063dc:	e050      	b.n	8006480 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	3340      	adds	r3, #64	; 0x40
 80063e2:	4619      	mov	r1, r3
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 f860 	bl	80064aa <GetLineCoding>
 80063ea:	4603      	mov	r3, r0
 80063ec:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80063ee:	7bbb      	ldrb	r3, [r7, #14]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d126      	bne.n	8006442 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006406:	791b      	ldrb	r3, [r3, #4]
 8006408:	429a      	cmp	r2, r3
 800640a:	d13b      	bne.n	8006484 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006416:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006418:	429a      	cmp	r2, r3
 800641a:	d133      	bne.n	8006484 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006426:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006428:	429a      	cmp	r2, r3
 800642a:	d12b      	bne.n	8006484 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006434:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006436:	429a      	cmp	r2, r3
 8006438:	d124      	bne.n	8006484 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 f982 	bl	8006744 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006440:	e020      	b.n	8006484 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006442:	7bbb      	ldrb	r3, [r7, #14]
 8006444:	2b01      	cmp	r3, #1
 8006446:	d01d      	beq.n	8006484 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	2204      	movs	r2, #4
 800644c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006450:	e018      	b.n	8006484 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 f867 	bl	8006526 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 f8f6 	bl	800664a <CDC_ProcessReception>
      break;
 800645e:	e014      	b.n	800648a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006460:	2100      	movs	r1, #0
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f001 f957 	bl	8007716 <USBH_ClrFeature>
 8006468:	4603      	mov	r3, r0
 800646a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800646c:	7bbb      	ldrb	r3, [r7, #14]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d10a      	bne.n	8006488 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800647a:	e005      	b.n	8006488 <USBH_CDC_Process+0x120>

    default:
      break;
 800647c:	bf00      	nop
 800647e:	e004      	b.n	800648a <USBH_CDC_Process+0x122>
      break;
 8006480:	bf00      	nop
 8006482:	e002      	b.n	800648a <USBH_CDC_Process+0x122>
      break;
 8006484:	bf00      	nop
 8006486:	e000      	b.n	800648a <USBH_CDC_Process+0x122>
      break;
 8006488:	bf00      	nop

  }

  return status;
 800648a:	7bfb      	ldrb	r3, [r7, #15]
}
 800648c:	4618      	mov	r0, r3
 800648e:	3710      	adds	r7, #16
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	370c      	adds	r7, #12
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr

080064aa <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80064aa:	b580      	push	{r7, lr}
 80064ac:	b082      	sub	sp, #8
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
 80064b2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	22a1      	movs	r2, #161	; 0xa1
 80064b8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2221      	movs	r2, #33	; 0x21
 80064be:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2207      	movs	r2, #7
 80064d0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	2207      	movs	r2, #7
 80064d6:	4619      	mov	r1, r3
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f001 fbe9 	bl	8007cb0 <USBH_CtlReq>
 80064de:	4603      	mov	r3, r0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3708      	adds	r7, #8
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2221      	movs	r2, #33	; 0x21
 80064f6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2220      	movs	r2, #32
 80064fc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2207      	movs	r2, #7
 800650e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	2207      	movs	r2, #7
 8006514:	4619      	mov	r1, r3
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f001 fbca 	bl	8007cb0 <USBH_CtlReq>
 800651c:	4603      	mov	r3, r0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3708      	adds	r7, #8
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006526:	b580      	push	{r7, lr}
 8006528:	b086      	sub	sp, #24
 800652a:	af02      	add	r7, sp, #8
 800652c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006534:	69db      	ldr	r3, [r3, #28]
 8006536:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006538:	2300      	movs	r3, #0
 800653a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006542:	2b01      	cmp	r3, #1
 8006544:	d002      	beq.n	800654c <CDC_ProcessTransmission+0x26>
 8006546:	2b02      	cmp	r3, #2
 8006548:	d023      	beq.n	8006592 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800654a:	e07a      	b.n	8006642 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	8b12      	ldrh	r2, [r2, #24]
 8006554:	4293      	cmp	r3, r2
 8006556:	d90b      	bls.n	8006570 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	69d9      	ldr	r1, [r3, #28]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	8b1a      	ldrh	r2, [r3, #24]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	7b5b      	ldrb	r3, [r3, #13]
 8006564:	2001      	movs	r0, #1
 8006566:	9000      	str	r0, [sp, #0]
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f001 fea0 	bl	80082ae <USBH_BulkSendData>
 800656e:	e00b      	b.n	8006588 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006578:	b29a      	uxth	r2, r3
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	7b5b      	ldrb	r3, [r3, #13]
 800657e:	2001      	movs	r0, #1
 8006580:	9000      	str	r0, [sp, #0]
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f001 fe93 	bl	80082ae <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2202      	movs	r2, #2
 800658c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006590:	e057      	b.n	8006642 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	7b5b      	ldrb	r3, [r3, #13]
 8006596:	4619      	mov	r1, r3
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f005 fa9b 	bl	800bad4 <USBH_LL_GetURBState>
 800659e:	4603      	mov	r3, r0
 80065a0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80065a2:	7afb      	ldrb	r3, [r7, #11]
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d136      	bne.n	8006616 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	8b12      	ldrh	r2, [r2, #24]
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d90e      	bls.n	80065d2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	8b12      	ldrh	r2, [r2, #24]
 80065bc:	1a9a      	subs	r2, r3, r2
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	69db      	ldr	r3, [r3, #28]
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	8b12      	ldrh	r2, [r2, #24]
 80065ca:	441a      	add	r2, r3
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	61da      	str	r2, [r3, #28]
 80065d0:	e002      	b.n	80065d8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d004      	beq.n	80065ea <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80065e8:	e006      	b.n	80065f8 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 f892 	bl	800671c <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2204      	movs	r2, #4
 80065fc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800660c:	2300      	movs	r3, #0
 800660e:	2200      	movs	r2, #0
 8006610:	f002 f980 	bl	8008914 <osMessageQueuePut>
      break;
 8006614:	e014      	b.n	8006640 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8006616:	7afb      	ldrb	r3, [r7, #11]
 8006618:	2b02      	cmp	r3, #2
 800661a:	d111      	bne.n	8006640 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2204      	movs	r2, #4
 8006628:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006638:	2300      	movs	r3, #0
 800663a:	2200      	movs	r2, #0
 800663c:	f002 f96a 	bl	8008914 <osMessageQueuePut>
      break;
 8006640:	bf00      	nop
  }
}
 8006642:	bf00      	nop
 8006644:	3710      	adds	r7, #16
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800664a:	b580      	push	{r7, lr}
 800664c:	b086      	sub	sp, #24
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006658:	69db      	ldr	r3, [r3, #28]
 800665a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800665c:	2300      	movs	r3, #0
 800665e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006666:	2b03      	cmp	r3, #3
 8006668:	d002      	beq.n	8006670 <CDC_ProcessReception+0x26>
 800666a:	2b04      	cmp	r3, #4
 800666c:	d00e      	beq.n	800668c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800666e:	e051      	b.n	8006714 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	6a19      	ldr	r1, [r3, #32]
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	8b5a      	ldrh	r2, [r3, #26]
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	7b1b      	ldrb	r3, [r3, #12]
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f001 fe3b 	bl	80082f8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	2204      	movs	r2, #4
 8006686:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800668a:	e043      	b.n	8006714 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	7b1b      	ldrb	r3, [r3, #12]
 8006690:	4619      	mov	r1, r3
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f005 fa1e 	bl	800bad4 <USBH_LL_GetURBState>
 8006698:	4603      	mov	r3, r0
 800669a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800669c:	7cfb      	ldrb	r3, [r7, #19]
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d137      	bne.n	8006712 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	7b1b      	ldrb	r3, [r3, #12]
 80066a6:	4619      	mov	r1, r3
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f005 f981 	bl	800b9b0 <USBH_LL_GetLastXferSize>
 80066ae:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d016      	beq.n	80066e8 <CDC_ProcessReception+0x9e>
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	8b5b      	ldrh	r3, [r3, #26]
 80066be:	461a      	mov	r2, r3
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d910      	bls.n	80066e8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	1ad2      	subs	r2, r2, r3
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	6a1a      	ldr	r2, [r3, #32]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	441a      	add	r2, r3
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	2203      	movs	r2, #3
 80066e2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 80066e6:	e006      	b.n	80066f6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 f81d 	bl	8006730 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2204      	movs	r2, #4
 80066fa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800670a:	2300      	movs	r3, #0
 800670c:	2200      	movs	r2, #0
 800670e:	f002 f901 	bl	8008914 <osMessageQueuePut>
      break;
 8006712:	bf00      	nop
  }
}
 8006714:	bf00      	nop
 8006716:	3718      	adds	r7, #24
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006724:	bf00      	nop
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006738:	bf00      	nop
 800673a:	370c      	adds	r7, #12
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006744:	b480      	push	{r7}
 8006746:	b083      	sub	sp, #12
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800674c:	bf00      	nop
 800674e:	370c      	adds	r7, #12
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	4613      	mov	r3, r2
 8006764:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d101      	bne.n	8006770 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800676c:	2302      	movs	r3, #2
 800676e:	e044      	b.n	80067fa <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	79fa      	ldrb	r2, [r7, #7]
 8006774:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2200      	movs	r2, #0
 800677c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2200      	movs	r2, #0
 8006784:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006788:	68f8      	ldr	r0, [r7, #12]
 800678a:	f000 f841 	bl	8006810 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d003      	beq.n	80067bc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	68ba      	ldr	r2, [r7, #8]
 80067b8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 80067bc:	2200      	movs	r2, #0
 80067be:	2104      	movs	r1, #4
 80067c0:	2010      	movs	r0, #16
 80067c2:	f002 f833 	bl	800882c <osMessageQueueNew>
 80067c6:	4602      	mov	r2, r0
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 80067ce:	4b0d      	ldr	r3, [pc, #52]	; (8006804 <USBH_Init+0xac>)
 80067d0:	4a0d      	ldr	r2, [pc, #52]	; (8006808 <USBH_Init+0xb0>)
 80067d2:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 80067d4:	4b0b      	ldr	r3, [pc, #44]	; (8006804 <USBH_Init+0xac>)
 80067d6:	2280      	movs	r2, #128	; 0x80
 80067d8:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 80067da:	4b0a      	ldr	r3, [pc, #40]	; (8006804 <USBH_Init+0xac>)
 80067dc:	2218      	movs	r2, #24
 80067de:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 80067e0:	4a08      	ldr	r2, [pc, #32]	; (8006804 <USBH_Init+0xac>)
 80067e2:	68f9      	ldr	r1, [r7, #12]
 80067e4:	4809      	ldr	r0, [pc, #36]	; (800680c <USBH_Init+0xb4>)
 80067e6:	f001 feb5 	bl	8008554 <osThreadNew>
 80067ea:	4602      	mov	r2, r0
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80067f2:	68f8      	ldr	r0, [r7, #12]
 80067f4:	f005 f828 	bl	800b848 <USBH_LL_Init>

  return USBH_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3710      	adds	r7, #16
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	20000210 	.word	0x20000210
 8006808:	0800c620 	.word	0x0800c620
 800680c:	0800748d 	.word	0x0800748d

08006810 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006810:	b480      	push	{r7}
 8006812:	b085      	sub	sp, #20
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006818:	2300      	movs	r3, #0
 800681a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800681c:	2300      	movs	r3, #0
 800681e:	60fb      	str	r3, [r7, #12]
 8006820:	e009      	b.n	8006836 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	33e0      	adds	r3, #224	; 0xe0
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	4413      	add	r3, r2
 800682c:	2200      	movs	r2, #0
 800682e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	3301      	adds	r3, #1
 8006834:	60fb      	str	r3, [r7, #12]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2b0f      	cmp	r3, #15
 800683a:	d9f2      	bls.n	8006822 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800683c:	2300      	movs	r3, #0
 800683e:	60fb      	str	r3, [r7, #12]
 8006840:	e009      	b.n	8006856 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	4413      	add	r3, r2
 8006848:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800684c:	2200      	movs	r2, #0
 800684e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	3301      	adds	r3, #1
 8006854:	60fb      	str	r3, [r7, #12]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800685c:	d3f1      	bcc.n	8006842 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2201      	movs	r2, #1
 800686e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2240      	movs	r2, #64	; 0x40
 8006882:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3714      	adds	r7, #20
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b085      	sub	sp, #20
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80068c2:	2300      	movs	r3, #0
 80068c4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d016      	beq.n	80068fa <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d10e      	bne.n	80068f4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80068dc:	1c59      	adds	r1, r3, #1
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	33de      	adds	r3, #222	; 0xde
 80068e8:	6839      	ldr	r1, [r7, #0]
 80068ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80068ee:	2300      	movs	r3, #0
 80068f0:	73fb      	strb	r3, [r7, #15]
 80068f2:	e004      	b.n	80068fe <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80068f4:	2302      	movs	r3, #2
 80068f6:	73fb      	strb	r3, [r7, #15]
 80068f8:	e001      	b.n	80068fe <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80068fa:	2302      	movs	r3, #2
 80068fc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80068fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006900:	4618      	mov	r0, r3
 8006902:	3714      	adds	r7, #20
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800690c:	b480      	push	{r7}
 800690e:	b085      	sub	sp, #20
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	460b      	mov	r3, r1
 8006916:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006918:	2300      	movs	r3, #0
 800691a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006922:	78fa      	ldrb	r2, [r7, #3]
 8006924:	429a      	cmp	r2, r3
 8006926:	d204      	bcs.n	8006932 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	78fa      	ldrb	r2, [r7, #3]
 800692c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006930:	e001      	b.n	8006936 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006932:	2302      	movs	r3, #2
 8006934:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006936:	7bfb      	ldrb	r3, [r7, #15]
}
 8006938:	4618      	mov	r0, r3
 800693a:	3714      	adds	r7, #20
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006944:	b480      	push	{r7}
 8006946:	b087      	sub	sp, #28
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	4608      	mov	r0, r1
 800694e:	4611      	mov	r1, r2
 8006950:	461a      	mov	r2, r3
 8006952:	4603      	mov	r3, r0
 8006954:	70fb      	strb	r3, [r7, #3]
 8006956:	460b      	mov	r3, r1
 8006958:	70bb      	strb	r3, [r7, #2]
 800695a:	4613      	mov	r3, r2
 800695c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800695e:	2300      	movs	r3, #0
 8006960:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006962:	2300      	movs	r3, #0
 8006964:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800696c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800696e:	e025      	b.n	80069bc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006970:	7dfb      	ldrb	r3, [r7, #23]
 8006972:	221a      	movs	r2, #26
 8006974:	fb02 f303 	mul.w	r3, r2, r3
 8006978:	3308      	adds	r3, #8
 800697a:	68fa      	ldr	r2, [r7, #12]
 800697c:	4413      	add	r3, r2
 800697e:	3302      	adds	r3, #2
 8006980:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	795b      	ldrb	r3, [r3, #5]
 8006986:	78fa      	ldrb	r2, [r7, #3]
 8006988:	429a      	cmp	r2, r3
 800698a:	d002      	beq.n	8006992 <USBH_FindInterface+0x4e>
 800698c:	78fb      	ldrb	r3, [r7, #3]
 800698e:	2bff      	cmp	r3, #255	; 0xff
 8006990:	d111      	bne.n	80069b6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006996:	78ba      	ldrb	r2, [r7, #2]
 8006998:	429a      	cmp	r2, r3
 800699a:	d002      	beq.n	80069a2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800699c:	78bb      	ldrb	r3, [r7, #2]
 800699e:	2bff      	cmp	r3, #255	; 0xff
 80069a0:	d109      	bne.n	80069b6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80069a6:	787a      	ldrb	r2, [r7, #1]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d002      	beq.n	80069b2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80069ac:	787b      	ldrb	r3, [r7, #1]
 80069ae:	2bff      	cmp	r3, #255	; 0xff
 80069b0:	d101      	bne.n	80069b6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80069b2:	7dfb      	ldrb	r3, [r7, #23]
 80069b4:	e006      	b.n	80069c4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80069b6:	7dfb      	ldrb	r3, [r7, #23]
 80069b8:	3301      	adds	r3, #1
 80069ba:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80069bc:	7dfb      	ldrb	r3, [r7, #23]
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d9d6      	bls.n	8006970 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80069c2:	23ff      	movs	r3, #255	; 0xff
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	371c      	adds	r7, #28
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f004 ff71 	bl	800b8c0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80069de:	2101      	movs	r1, #1
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f005 f88a 	bl	800bafa <USBH_LL_DriverVBUS>

  return USBH_OK;
 80069e6:	2300      	movs	r3, #0
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3708      	adds	r7, #8
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b088      	sub	sp, #32
 80069f4:	af04      	add	r7, sp, #16
 80069f6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80069f8:	2302      	movs	r3, #2
 80069fa:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80069fc:	2300      	movs	r3, #0
 80069fe:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d102      	bne.n	8006a12 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2203      	movs	r2, #3
 8006a10:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	2b0b      	cmp	r3, #11
 8006a1a:	f200 8247 	bhi.w	8006eac <USBH_Process+0x4bc>
 8006a1e:	a201      	add	r2, pc, #4	; (adr r2, 8006a24 <USBH_Process+0x34>)
 8006a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a24:	08006a55 	.word	0x08006a55
 8006a28:	08006aa3 	.word	0x08006aa3
 8006a2c:	08006b27 	.word	0x08006b27
 8006a30:	08006e2b 	.word	0x08006e2b
 8006a34:	08006ead 	.word	0x08006ead
 8006a38:	08006be7 	.word	0x08006be7
 8006a3c:	08006db5 	.word	0x08006db5
 8006a40:	08006c39 	.word	0x08006c39
 8006a44:	08006c75 	.word	0x08006c75
 8006a48:	08006caf 	.word	0x08006caf
 8006a4c:	08006d0d 	.word	0x08006d0d
 8006a50:	08006e13 	.word	0x08006e13
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	f000 8227 	beq.w	8006eb0 <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2201      	movs	r2, #1
 8006a66:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006a68:	20c8      	movs	r0, #200	; 0xc8
 8006a6a:	f005 f88d 	bl	800bb88 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f004 ff83 	bl	800b97a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006a98:	2300      	movs	r3, #0
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f001 ff3a 	bl	8008914 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8006aa0:	e206      	b.n	8006eb0 <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d107      	bne.n	8006abc <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2202      	movs	r2, #2
 8006ab8:	701a      	strb	r2, [r3, #0]
 8006aba:	e025      	b.n	8006b08 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006ac2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ac6:	d914      	bls.n	8006af2 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006ace:	3301      	adds	r3, #1
 8006ad0:	b2da      	uxtb	r2, r3
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006ade:	2b03      	cmp	r3, #3
 8006ae0:	d903      	bls.n	8006aea <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	220d      	movs	r2, #13
 8006ae6:	701a      	strb	r2, [r3, #0]
 8006ae8:	e00e      	b.n	8006b08 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	701a      	strb	r2, [r3, #0]
 8006af0:	e00a      	b.n	8006b08 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006af8:	f103 020a 	add.w	r2, r3, #10
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006b02:	200a      	movs	r0, #10
 8006b04:	f005 f840 	bl	800bb88 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f001 fef8 	bl	8008914 <osMessageQueuePut>
#endif
#endif
      break;
 8006b24:	e1cb      	b.n	8006ebe <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d005      	beq.n	8006b3c <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b36:	2104      	movs	r1, #4
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006b3c:	2064      	movs	r0, #100	; 0x64
 8006b3e:	f005 f823 	bl	800bb88 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f004 fef2 	bl	800b92c <USBH_LL_GetSpeed>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2205      	movs	r2, #5
 8006b56:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006b58:	2100      	movs	r1, #0
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f001 fc19 	bl	8008392 <USBH_AllocPipe>
 8006b60:	4603      	mov	r3, r0
 8006b62:	461a      	mov	r2, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006b68:	2180      	movs	r1, #128	; 0x80
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f001 fc11 	bl	8008392 <USBH_AllocPipe>
 8006b70:	4603      	mov	r3, r0
 8006b72:	461a      	mov	r2, r3
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	7919      	ldrb	r1, [r3, #4]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006b8c:	b292      	uxth	r2, r2
 8006b8e:	9202      	str	r2, [sp, #8]
 8006b90:	2200      	movs	r2, #0
 8006b92:	9201      	str	r2, [sp, #4]
 8006b94:	9300      	str	r3, [sp, #0]
 8006b96:	4603      	mov	r3, r0
 8006b98:	2280      	movs	r2, #128	; 0x80
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f001 fbca 	bl	8008334 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	7959      	ldrb	r1, [r3, #5]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006bb4:	b292      	uxth	r2, r2
 8006bb6:	9202      	str	r2, [sp, #8]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	9201      	str	r2, [sp, #4]
 8006bbc:	9300      	str	r3, [sp, #0]
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f001 fbb6 	bl	8008334 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006bdc:	2300      	movs	r3, #0
 8006bde:	2200      	movs	r2, #0
 8006be0:	f001 fe98 	bl	8008914 <osMessageQueuePut>
#endif
#endif
      break;
 8006be4:	e16b      	b.n	8006ebe <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 f96e 	bl	8006ec8 <USBH_HandleEnum>
 8006bec:	4603      	mov	r3, r0
 8006bee:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006bf0:	7bbb      	ldrb	r3, [r7, #14]
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	f040 815d 	bne.w	8006eb4 <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d103      	bne.n	8006c14 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2208      	movs	r2, #8
 8006c10:	701a      	strb	r2, [r3, #0]
 8006c12:	e002      	b.n	8006c1a <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2207      	movs	r2, #7
 8006c18:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2205      	movs	r2, #5
 8006c1e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006c2e:	2300      	movs	r3, #0
 8006c30:	2200      	movs	r2, #0
 8006c32:	f001 fe6f 	bl	8008914 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8006c36:	e13d      	b.n	8006eb4 <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	f000 813a 	beq.w	8006eb8 <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c4a:	2101      	movs	r1, #1
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2208      	movs	r2, #8
 8006c54:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2205      	movs	r2, #5
 8006c5a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f001 fe51 	bl	8008914 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 8006c72:	e121      	b.n	8006eb8 <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 fd02 	bl	8007688 <USBH_SetCfg>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d102      	bne.n	8006c90 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2209      	movs	r2, #9
 8006c8e:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f001 fe34 	bl	8008914 <osMessageQueuePut>
#endif
#endif
      break;
 8006cac:	e107      	b.n	8006ebe <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006cb4:	f003 0320 	and.w	r3, r3, #32
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d015      	beq.n	8006ce8 <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006cbc:	2101      	movs	r1, #1
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 fd05 	bl	80076ce <USBH_SetFeature>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006cc8:	7bbb      	ldrb	r3, [r7, #14]
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d103      	bne.n	8006cd8 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	220a      	movs	r2, #10
 8006cd4:	701a      	strb	r2, [r3, #0]
 8006cd6:	e00a      	b.n	8006cee <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 8006cd8:	7bbb      	ldrb	r3, [r7, #14]
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	2b03      	cmp	r3, #3
 8006cde:	d106      	bne.n	8006cee <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	220a      	movs	r2, #10
 8006ce4:	701a      	strb	r2, [r3, #0]
 8006ce6:	e002      	b.n	8006cee <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	220a      	movs	r2, #10
 8006cec:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006d02:	2300      	movs	r3, #0
 8006d04:	2200      	movs	r2, #0
 8006d06:	f001 fe05 	bl	8008914 <osMessageQueuePut>
#endif
#endif
      break;
 8006d0a:	e0d8      	b.n	8006ebe <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d03f      	beq.n	8006d96 <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006d1e:	2300      	movs	r3, #0
 8006d20:	73fb      	strb	r3, [r7, #15]
 8006d22:	e016      	b.n	8006d52 <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006d24:	7bfa      	ldrb	r2, [r7, #15]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	32de      	adds	r2, #222	; 0xde
 8006d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d2e:	791a      	ldrb	r2, [r3, #4]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d108      	bne.n	8006d4c <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006d3a:	7bfa      	ldrb	r2, [r7, #15]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	32de      	adds	r2, #222	; 0xde
 8006d40:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006d4a:	e005      	b.n	8006d58 <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006d4c:	7bfb      	ldrb	r3, [r7, #15]
 8006d4e:	3301      	adds	r3, #1
 8006d50:	73fb      	strb	r3, [r7, #15]
 8006d52:	7bfb      	ldrb	r3, [r7, #15]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d0e5      	beq.n	8006d24 <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d016      	beq.n	8006d90 <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	4798      	blx	r3
 8006d6e:	4603      	mov	r3, r0
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d109      	bne.n	8006d88 <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2206      	movs	r2, #6
 8006d78:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006d80:	2103      	movs	r1, #3
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	4798      	blx	r3
 8006d86:	e006      	b.n	8006d96 <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	220d      	movs	r2, #13
 8006d8c:	701a      	strb	r2, [r3, #0]
 8006d8e:	e002      	b.n	8006d96 <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	220d      	movs	r2, #13
 8006d94:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2205      	movs	r2, #5
 8006d9a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006daa:	2300      	movs	r3, #0
 8006dac:	2200      	movs	r2, #0
 8006dae:	f001 fdb1 	bl	8008914 <osMessageQueuePut>
#endif
#endif
      break;
 8006db2:	e084      	b.n	8006ebe <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d017      	beq.n	8006dee <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	4798      	blx	r3
 8006dca:	4603      	mov	r3, r0
 8006dcc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006dce:	7bbb      	ldrb	r3, [r7, #14]
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d103      	bne.n	8006dde <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	220b      	movs	r2, #11
 8006dda:	701a      	strb	r2, [r3, #0]
 8006ddc:	e00a      	b.n	8006df4 <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 8006dde:	7bbb      	ldrb	r3, [r7, #14]
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	2b02      	cmp	r3, #2
 8006de4:	d106      	bne.n	8006df4 <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	220d      	movs	r2, #13
 8006dea:	701a      	strb	r2, [r3, #0]
 8006dec:	e002      	b.n	8006df4 <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	220d      	movs	r2, #13
 8006df2:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2205      	movs	r2, #5
 8006df8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006e08:	2300      	movs	r3, #0
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f001 fd82 	bl	8008914 <osMessageQueuePut>
#endif
#endif
      break;
 8006e10:	e055      	b.n	8006ebe <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d04f      	beq.n	8006ebc <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e22:	695b      	ldr	r3, [r3, #20]
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	4798      	blx	r3
      }
      break;
 8006e28:	e048      	b.n	8006ebc <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f7ff fcec 	bl	8006810 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d009      	beq.n	8006e56 <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d005      	beq.n	8006e6c <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e66:	2105      	movs	r1, #5
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d107      	bne.n	8006e88 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f7ff fda5 	bl	80069d0 <USBH_Start>
 8006e86:	e002      	b.n	8006e8e <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f004 fd19 	bl	800b8c0 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2201      	movs	r2, #1
 8006e92:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f001 fd35 	bl	8008914 <osMessageQueuePut>
#endif
#endif
      break;
 8006eaa:	e008      	b.n	8006ebe <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 8006eac:	bf00      	nop
 8006eae:	e006      	b.n	8006ebe <USBH_Process+0x4ce>
      break;
 8006eb0:	bf00      	nop
 8006eb2:	e004      	b.n	8006ebe <USBH_Process+0x4ce>
      break;
 8006eb4:	bf00      	nop
 8006eb6:	e002      	b.n	8006ebe <USBH_Process+0x4ce>
    break;
 8006eb8:	bf00      	nop
 8006eba:	e000      	b.n	8006ebe <USBH_Process+0x4ce>
      break;
 8006ebc:	bf00      	nop
  }
  return USBH_OK;
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3710      	adds	r7, #16
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b088      	sub	sp, #32
 8006ecc:	af04      	add	r7, sp, #16
 8006ece:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	785b      	ldrb	r3, [r3, #1]
 8006edc:	2b07      	cmp	r3, #7
 8006ede:	f200 8208 	bhi.w	80072f2 <USBH_HandleEnum+0x42a>
 8006ee2:	a201      	add	r2, pc, #4	; (adr r2, 8006ee8 <USBH_HandleEnum+0x20>)
 8006ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ee8:	08006f09 	.word	0x08006f09
 8006eec:	08006fc7 	.word	0x08006fc7
 8006ef0:	08007031 	.word	0x08007031
 8006ef4:	080070bf 	.word	0x080070bf
 8006ef8:	08007129 	.word	0x08007129
 8006efc:	08007199 	.word	0x08007199
 8006f00:	08007235 	.word	0x08007235
 8006f04:	080072b3 	.word	0x080072b3
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006f08:	2108      	movs	r1, #8
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 faec 	bl	80074e8 <USBH_Get_DevDesc>
 8006f10:	4603      	mov	r3, r0
 8006f12:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006f14:	7bbb      	ldrb	r3, [r7, #14]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d130      	bne.n	8006f7c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	7919      	ldrb	r1, [r3, #4]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006f3e:	b292      	uxth	r2, r2
 8006f40:	9202      	str	r2, [sp, #8]
 8006f42:	2200      	movs	r2, #0
 8006f44:	9201      	str	r2, [sp, #4]
 8006f46:	9300      	str	r3, [sp, #0]
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2280      	movs	r2, #128	; 0x80
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f001 f9f1 	bl	8008334 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	7959      	ldrb	r1, [r3, #5]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006f66:	b292      	uxth	r2, r2
 8006f68:	9202      	str	r2, [sp, #8]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	9201      	str	r2, [sp, #4]
 8006f6e:	9300      	str	r3, [sp, #0]
 8006f70:	4603      	mov	r3, r0
 8006f72:	2200      	movs	r2, #0
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f001 f9dd 	bl	8008334 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006f7a:	e1bc      	b.n	80072f6 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f7c:	7bbb      	ldrb	r3, [r7, #14]
 8006f7e:	2b03      	cmp	r3, #3
 8006f80:	f040 81b9 	bne.w	80072f6 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	b2da      	uxtb	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006f9a:	2b03      	cmp	r3, #3
 8006f9c:	d903      	bls.n	8006fa6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	220d      	movs	r2, #13
 8006fa2:	701a      	strb	r2, [r3, #0]
      break;
 8006fa4:	e1a7      	b.n	80072f6 <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	795b      	ldrb	r3, [r3, #5]
 8006faa:	4619      	mov	r1, r3
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f001 fa11 	bl	80083d4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	791b      	ldrb	r3, [r3, #4]
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f001 fa0b 	bl	80083d4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	701a      	strb	r2, [r3, #0]
      break;
 8006fc4:	e197      	b.n	80072f6 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006fc6:	2112      	movs	r1, #18
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 fa8d 	bl	80074e8 <USBH_Get_DevDesc>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006fd2:	7bbb      	ldrb	r3, [r7, #14]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d103      	bne.n	8006fe0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2202      	movs	r2, #2
 8006fdc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006fde:	e18c      	b.n	80072fa <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006fe0:	7bbb      	ldrb	r3, [r7, #14]
 8006fe2:	2b03      	cmp	r3, #3
 8006fe4:	f040 8189 	bne.w	80072fa <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006fee:	3301      	adds	r3, #1
 8006ff0:	b2da      	uxtb	r2, r3
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006ffe:	2b03      	cmp	r3, #3
 8007000:	d903      	bls.n	800700a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	220d      	movs	r2, #13
 8007006:	701a      	strb	r2, [r3, #0]
      break;
 8007008:	e177      	b.n	80072fa <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	795b      	ldrb	r3, [r3, #5]
 800700e:	4619      	mov	r1, r3
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f001 f9df 	bl	80083d4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	791b      	ldrb	r3, [r3, #4]
 800701a:	4619      	mov	r1, r3
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f001 f9d9 	bl	80083d4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	701a      	strb	r2, [r3, #0]
      break;
 800702e:	e164      	b.n	80072fa <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007030:	2101      	movs	r1, #1
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 fb04 	bl	8007640 <USBH_SetAddress>
 8007038:	4603      	mov	r3, r0
 800703a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800703c:	7bbb      	ldrb	r3, [r7, #14]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d132      	bne.n	80070a8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007042:	2002      	movs	r0, #2
 8007044:	f004 fda0 	bl	800bb88 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2203      	movs	r2, #3
 8007054:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	7919      	ldrb	r1, [r3, #4]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800706a:	b292      	uxth	r2, r2
 800706c:	9202      	str	r2, [sp, #8]
 800706e:	2200      	movs	r2, #0
 8007070:	9201      	str	r2, [sp, #4]
 8007072:	9300      	str	r3, [sp, #0]
 8007074:	4603      	mov	r3, r0
 8007076:	2280      	movs	r2, #128	; 0x80
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f001 f95b 	bl	8008334 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	7959      	ldrb	r1, [r3, #5]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007092:	b292      	uxth	r2, r2
 8007094:	9202      	str	r2, [sp, #8]
 8007096:	2200      	movs	r2, #0
 8007098:	9201      	str	r2, [sp, #4]
 800709a:	9300      	str	r3, [sp, #0]
 800709c:	4603      	mov	r3, r0
 800709e:	2200      	movs	r2, #0
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f001 f947 	bl	8008334 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80070a6:	e12a      	b.n	80072fe <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80070a8:	7bbb      	ldrb	r3, [r7, #14]
 80070aa:	2b03      	cmp	r3, #3
 80070ac:	f040 8127 	bne.w	80072fe <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	220d      	movs	r2, #13
 80070b4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	705a      	strb	r2, [r3, #1]
      break;
 80070bc:	e11f      	b.n	80072fe <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80070be:	2109      	movs	r1, #9
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 fa39 	bl	8007538 <USBH_Get_CfgDesc>
 80070c6:	4603      	mov	r3, r0
 80070c8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80070ca:	7bbb      	ldrb	r3, [r7, #14]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d103      	bne.n	80070d8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2204      	movs	r2, #4
 80070d4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80070d6:	e114      	b.n	8007302 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80070d8:	7bbb      	ldrb	r3, [r7, #14]
 80070da:	2b03      	cmp	r3, #3
 80070dc:	f040 8111 	bne.w	8007302 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80070e6:	3301      	adds	r3, #1
 80070e8:	b2da      	uxtb	r2, r3
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80070f6:	2b03      	cmp	r3, #3
 80070f8:	d903      	bls.n	8007102 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	220d      	movs	r2, #13
 80070fe:	701a      	strb	r2, [r3, #0]
      break;
 8007100:	e0ff      	b.n	8007302 <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	795b      	ldrb	r3, [r3, #5]
 8007106:	4619      	mov	r1, r3
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f001 f963 	bl	80083d4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	791b      	ldrb	r3, [r3, #4]
 8007112:	4619      	mov	r1, r3
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f001 f95d 	bl	80083d4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	701a      	strb	r2, [r3, #0]
      break;
 8007126:	e0ec      	b.n	8007302 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800712e:	4619      	mov	r1, r3
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 fa01 	bl	8007538 <USBH_Get_CfgDesc>
 8007136:	4603      	mov	r3, r0
 8007138:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800713a:	7bbb      	ldrb	r3, [r7, #14]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d103      	bne.n	8007148 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2205      	movs	r2, #5
 8007144:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007146:	e0de      	b.n	8007306 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007148:	7bbb      	ldrb	r3, [r7, #14]
 800714a:	2b03      	cmp	r3, #3
 800714c:	f040 80db 	bne.w	8007306 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007156:	3301      	adds	r3, #1
 8007158:	b2da      	uxtb	r2, r3
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007166:	2b03      	cmp	r3, #3
 8007168:	d903      	bls.n	8007172 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	220d      	movs	r2, #13
 800716e:	701a      	strb	r2, [r3, #0]
      break;
 8007170:	e0c9      	b.n	8007306 <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	795b      	ldrb	r3, [r3, #5]
 8007176:	4619      	mov	r1, r3
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f001 f92b 	bl	80083d4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	791b      	ldrb	r3, [r3, #4]
 8007182:	4619      	mov	r1, r3
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f001 f925 	bl	80083d4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	701a      	strb	r2, [r3, #0]
      break;
 8007196:	e0b6      	b.n	8007306 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d036      	beq.n	8007210 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80071ae:	23ff      	movs	r3, #255	; 0xff
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 f9e5 	bl	8007580 <USBH_Get_StringDesc>
 80071b6:	4603      	mov	r3, r0
 80071b8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80071ba:	7bbb      	ldrb	r3, [r7, #14]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d111      	bne.n	80071e4 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2206      	movs	r2, #6
 80071c4:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2205      	movs	r2, #5
 80071ca:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80071da:	2300      	movs	r3, #0
 80071dc:	2200      	movs	r2, #0
 80071de:	f001 fb99 	bl	8008914 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80071e2:	e092      	b.n	800730a <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80071e4:	7bbb      	ldrb	r3, [r7, #14]
 80071e6:	2b03      	cmp	r3, #3
 80071e8:	f040 808f 	bne.w	800730a <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2206      	movs	r2, #6
 80071f0:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2205      	movs	r2, #5
 80071f6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007206:	2300      	movs	r3, #0
 8007208:	2200      	movs	r2, #0
 800720a:	f001 fb83 	bl	8008914 <osMessageQueuePut>
      break;
 800720e:	e07c      	b.n	800730a <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2206      	movs	r2, #6
 8007214:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2205      	movs	r2, #5
 800721a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800722a:	2300      	movs	r3, #0
 800722c:	2200      	movs	r2, #0
 800722e:	f001 fb71 	bl	8008914 <osMessageQueuePut>
      break;
 8007232:	e06a      	b.n	800730a <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800723a:	2b00      	cmp	r3, #0
 800723c:	d027      	beq.n	800728e <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800724a:	23ff      	movs	r3, #255	; 0xff
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 f997 	bl	8007580 <USBH_Get_StringDesc>
 8007252:	4603      	mov	r3, r0
 8007254:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007256:	7bbb      	ldrb	r3, [r7, #14]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d103      	bne.n	8007264 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2207      	movs	r2, #7
 8007260:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007262:	e054      	b.n	800730e <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007264:	7bbb      	ldrb	r3, [r7, #14]
 8007266:	2b03      	cmp	r3, #3
 8007268:	d151      	bne.n	800730e <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2207      	movs	r2, #7
 800726e:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2205      	movs	r2, #5
 8007274:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007284:	2300      	movs	r3, #0
 8007286:	2200      	movs	r2, #0
 8007288:	f001 fb44 	bl	8008914 <osMessageQueuePut>
      break;
 800728c:	e03f      	b.n	800730e <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2207      	movs	r2, #7
 8007292:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2205      	movs	r2, #5
 8007298:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80072a8:	2300      	movs	r3, #0
 80072aa:	2200      	movs	r2, #0
 80072ac:	f001 fb32 	bl	8008914 <osMessageQueuePut>
      break;
 80072b0:	e02d      	b.n	800730e <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d017      	beq.n	80072ec <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80072c8:	23ff      	movs	r3, #255	; 0xff
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 f958 	bl	8007580 <USBH_Get_StringDesc>
 80072d0:	4603      	mov	r3, r0
 80072d2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80072d4:	7bbb      	ldrb	r3, [r7, #14]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d102      	bne.n	80072e0 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80072da:	2300      	movs	r3, #0
 80072dc:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80072de:	e018      	b.n	8007312 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072e0:	7bbb      	ldrb	r3, [r7, #14]
 80072e2:	2b03      	cmp	r3, #3
 80072e4:	d115      	bne.n	8007312 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 80072e6:	2300      	movs	r3, #0
 80072e8:	73fb      	strb	r3, [r7, #15]
      break;
 80072ea:	e012      	b.n	8007312 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 80072ec:	2300      	movs	r3, #0
 80072ee:	73fb      	strb	r3, [r7, #15]
      break;
 80072f0:	e00f      	b.n	8007312 <USBH_HandleEnum+0x44a>

    default:
      break;
 80072f2:	bf00      	nop
 80072f4:	e00e      	b.n	8007314 <USBH_HandleEnum+0x44c>
      break;
 80072f6:	bf00      	nop
 80072f8:	e00c      	b.n	8007314 <USBH_HandleEnum+0x44c>
      break;
 80072fa:	bf00      	nop
 80072fc:	e00a      	b.n	8007314 <USBH_HandleEnum+0x44c>
      break;
 80072fe:	bf00      	nop
 8007300:	e008      	b.n	8007314 <USBH_HandleEnum+0x44c>
      break;
 8007302:	bf00      	nop
 8007304:	e006      	b.n	8007314 <USBH_HandleEnum+0x44c>
      break;
 8007306:	bf00      	nop
 8007308:	e004      	b.n	8007314 <USBH_HandleEnum+0x44c>
      break;
 800730a:	bf00      	nop
 800730c:	e002      	b.n	8007314 <USBH_HandleEnum+0x44c>
      break;
 800730e:	bf00      	nop
 8007310:	e000      	b.n	8007314 <USBH_HandleEnum+0x44c>
      break;
 8007312:	bf00      	nop
  }
  return Status;
 8007314:	7bfb      	ldrb	r3, [r7, #15]
}
 8007316:	4618      	mov	r0, r3
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop

08007320 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	683a      	ldr	r2, [r7, #0]
 800732e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007332:	bf00      	nop
 8007334:	370c      	adds	r7, #12
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr

0800733e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800733e:	b580      	push	{r7, lr}
 8007340:	b082      	sub	sp, #8
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800734c:	1c5a      	adds	r2, r3, #1
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 f804 	bl	8007362 <USBH_HandleSof>
}
 800735a:	bf00      	nop
 800735c:	3708      	adds	r7, #8
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}

08007362 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007362:	b580      	push	{r7, lr}
 8007364:	b082      	sub	sp, #8
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	b2db      	uxtb	r3, r3
 8007370:	2b0b      	cmp	r3, #11
 8007372:	d10a      	bne.n	800738a <USBH_HandleSof+0x28>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800737a:	2b00      	cmp	r3, #0
 800737c:	d005      	beq.n	800738a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007384:	699b      	ldr	r3, [r3, #24]
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	4798      	blx	r3
  }
}
 800738a:	bf00      	nop
 800738c:	3708      	adds	r7, #8
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}

08007392 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007392:	b580      	push	{r7, lr}
 8007394:	b082      	sub	sp, #8
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2201      	movs	r2, #1
 800739e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2201      	movs	r2, #1
 80073a6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80073b6:	2300      	movs	r3, #0
 80073b8:	2200      	movs	r2, #0
 80073ba:	f001 faab 	bl	8008914 <osMessageQueuePut>
#endif
#endif

  return;
 80073be:	bf00      	nop
}
 80073c0:	3708      	adds	r7, #8
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80073c6:	b480      	push	{r7}
 80073c8:	b083      	sub	sp, #12
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80073d6:	bf00      	nop
}
 80073d8:	370c      	adds	r7, #12
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr

080073e2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b082      	sub	sp, #8
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2201      	movs	r2, #1
 80073ee:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2201      	movs	r2, #1
 8007406:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007416:	2300      	movs	r3, #0
 8007418:	2200      	movs	r2, #0
 800741a:	f001 fa7b 	bl	8008914 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800741e:	2300      	movs	r3, #0
}
 8007420:	4618      	mov	r0, r3
 8007422:	3708      	adds	r7, #8
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2201      	movs	r2, #1
 8007434:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f004 fa54 	bl	800b8f6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	791b      	ldrb	r3, [r3, #4]
 8007452:	4619      	mov	r1, r3
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 ffbd 	bl	80083d4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	795b      	ldrb	r3, [r3, #5]
 800745e:	4619      	mov	r1, r3
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 ffb7 	bl	80083d4 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2201      	movs	r2, #1
 800746a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800747a:	2300      	movs	r3, #0
 800747c:	2200      	movs	r2, #0
 800747e:	f001 fa49 	bl	8008914 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8007482:	2300      	movs	r3, #0
}
 8007484:	4618      	mov	r0, r3
 8007486:	3708      	adds	r7, #8
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 80074a0:	f04f 33ff 	mov.w	r3, #4294967295
 80074a4:	2200      	movs	r2, #0
 80074a6:	f001 fa95 	bl	80089d4 <osMessageQueueGet>
 80074aa:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d1f0      	bne.n	8007494 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f7ff fa9c 	bl	80069f0 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 80074b8:	e7ec      	b.n	8007494 <USBH_Process_OS+0x8>

080074ba <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b082      	sub	sp, #8
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2201      	movs	r2, #1
 80074c6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80074d6:	2300      	movs	r3, #0
 80074d8:	2200      	movs	r2, #0
 80074da:	f001 fa1b 	bl	8008914 <osMessageQueuePut>
#endif

  return USBH_OK;
 80074de:	2300      	movs	r3, #0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3708      	adds	r7, #8
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b086      	sub	sp, #24
 80074ec:	af02      	add	r7, sp, #8
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	460b      	mov	r3, r1
 80074f2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80074fa:	78fb      	ldrb	r3, [r7, #3]
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	9300      	str	r3, [sp, #0]
 8007500:	4613      	mov	r3, r2
 8007502:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007506:	2100      	movs	r1, #0
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 f864 	bl	80075d6 <USBH_GetDescriptor>
 800750e:	4603      	mov	r3, r0
 8007510:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8007512:	7bfb      	ldrb	r3, [r7, #15]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d10a      	bne.n	800752e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007524:	78fa      	ldrb	r2, [r7, #3]
 8007526:	b292      	uxth	r2, r2
 8007528:	4619      	mov	r1, r3
 800752a:	f000 f918 	bl	800775e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800752e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007530:	4618      	mov	r0, r3
 8007532:	3710      	adds	r7, #16
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007538:	b580      	push	{r7, lr}
 800753a:	b086      	sub	sp, #24
 800753c:	af02      	add	r7, sp, #8
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	460b      	mov	r3, r1
 8007542:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	331c      	adds	r3, #28
 8007548:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800754a:	887b      	ldrh	r3, [r7, #2]
 800754c:	9300      	str	r3, [sp, #0]
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007554:	2100      	movs	r1, #0
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 f83d 	bl	80075d6 <USBH_GetDescriptor>
 800755c:	4603      	mov	r3, r0
 800755e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007560:	7bfb      	ldrb	r3, [r7, #15]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d107      	bne.n	8007576 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007566:	887b      	ldrh	r3, [r7, #2]
 8007568:	461a      	mov	r2, r3
 800756a:	68b9      	ldr	r1, [r7, #8]
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 f987 	bl	8007880 <USBH_ParseCfgDesc>
 8007572:	4603      	mov	r3, r0
 8007574:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007576:	7bfb      	ldrb	r3, [r7, #15]
}
 8007578:	4618      	mov	r0, r3
 800757a:	3710      	adds	r7, #16
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b088      	sub	sp, #32
 8007584:	af02      	add	r7, sp, #8
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	607a      	str	r2, [r7, #4]
 800758a:	461a      	mov	r2, r3
 800758c:	460b      	mov	r3, r1
 800758e:	72fb      	strb	r3, [r7, #11]
 8007590:	4613      	mov	r3, r2
 8007592:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007594:	7afb      	ldrb	r3, [r7, #11]
 8007596:	b29b      	uxth	r3, r3
 8007598:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800759c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80075a4:	893b      	ldrh	r3, [r7, #8]
 80075a6:	9300      	str	r3, [sp, #0]
 80075a8:	460b      	mov	r3, r1
 80075aa:	2100      	movs	r1, #0
 80075ac:	68f8      	ldr	r0, [r7, #12]
 80075ae:	f000 f812 	bl	80075d6 <USBH_GetDescriptor>
 80075b2:	4603      	mov	r3, r0
 80075b4:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80075b6:	7dfb      	ldrb	r3, [r7, #23]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d107      	bne.n	80075cc <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80075c2:	893a      	ldrh	r2, [r7, #8]
 80075c4:	6879      	ldr	r1, [r7, #4]
 80075c6:	4618      	mov	r0, r3
 80075c8:	f000 fb24 	bl	8007c14 <USBH_ParseStringDesc>
  }

  return status;
 80075cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3718      	adds	r7, #24
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b084      	sub	sp, #16
 80075da:	af00      	add	r7, sp, #0
 80075dc:	60f8      	str	r0, [r7, #12]
 80075de:	607b      	str	r3, [r7, #4]
 80075e0:	460b      	mov	r3, r1
 80075e2:	72fb      	strb	r3, [r7, #11]
 80075e4:	4613      	mov	r3, r2
 80075e6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	789b      	ldrb	r3, [r3, #2]
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d11c      	bne.n	800762a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80075f0:	7afb      	ldrb	r3, [r7, #11]
 80075f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80075f6:	b2da      	uxtb	r2, r3
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2206      	movs	r2, #6
 8007600:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	893a      	ldrh	r2, [r7, #8]
 8007606:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007608:	893b      	ldrh	r3, [r7, #8]
 800760a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800760e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007612:	d104      	bne.n	800761e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f240 4209 	movw	r2, #1033	; 0x409
 800761a:	829a      	strh	r2, [r3, #20]
 800761c:	e002      	b.n	8007624 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2200      	movs	r2, #0
 8007622:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	8b3a      	ldrh	r2, [r7, #24]
 8007628:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800762a:	8b3b      	ldrh	r3, [r7, #24]
 800762c:	461a      	mov	r2, r3
 800762e:	6879      	ldr	r1, [r7, #4]
 8007630:	68f8      	ldr	r0, [r7, #12]
 8007632:	f000 fb3d 	bl	8007cb0 <USBH_CtlReq>
 8007636:	4603      	mov	r3, r0
}
 8007638:	4618      	mov	r0, r3
 800763a:	3710      	adds	r7, #16
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	460b      	mov	r3, r1
 800764a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	789b      	ldrb	r3, [r3, #2]
 8007650:	2b01      	cmp	r3, #1
 8007652:	d10f      	bne.n	8007674 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2205      	movs	r2, #5
 800765e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007660:	78fb      	ldrb	r3, [r7, #3]
 8007662:	b29a      	uxth	r2, r3
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007674:	2200      	movs	r2, #0
 8007676:	2100      	movs	r1, #0
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 fb19 	bl	8007cb0 <USBH_CtlReq>
 800767e:	4603      	mov	r3, r0
}
 8007680:	4618      	mov	r0, r3
 8007682:	3708      	adds	r7, #8
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b082      	sub	sp, #8
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	460b      	mov	r3, r1
 8007692:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	789b      	ldrb	r3, [r3, #2]
 8007698:	2b01      	cmp	r3, #1
 800769a:	d10e      	bne.n	80076ba <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2209      	movs	r2, #9
 80076a6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	887a      	ldrh	r2, [r7, #2]
 80076ac:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80076ba:	2200      	movs	r2, #0
 80076bc:	2100      	movs	r1, #0
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 faf6 	bl	8007cb0 <USBH_CtlReq>
 80076c4:	4603      	mov	r3, r0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3708      	adds	r7, #8
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}

080076ce <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b082      	sub	sp, #8
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
 80076d6:	460b      	mov	r3, r1
 80076d8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	789b      	ldrb	r3, [r3, #2]
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d10f      	bne.n	8007702 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2203      	movs	r2, #3
 80076ec:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80076ee:	78fb      	ldrb	r3, [r7, #3]
 80076f0:	b29a      	uxth	r2, r3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007702:	2200      	movs	r2, #0
 8007704:	2100      	movs	r1, #0
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 fad2 	bl	8007cb0 <USBH_CtlReq>
 800770c:	4603      	mov	r3, r0
}
 800770e:	4618      	mov	r0, r3
 8007710:	3708      	adds	r7, #8
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007716:	b580      	push	{r7, lr}
 8007718:	b082      	sub	sp, #8
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
 800771e:	460b      	mov	r3, r1
 8007720:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	789b      	ldrb	r3, [r3, #2]
 8007726:	2b01      	cmp	r3, #1
 8007728:	d10f      	bne.n	800774a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2202      	movs	r2, #2
 800772e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2201      	movs	r2, #1
 8007734:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800773c:	78fb      	ldrb	r3, [r7, #3]
 800773e:	b29a      	uxth	r2, r3
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800774a:	2200      	movs	r2, #0
 800774c:	2100      	movs	r1, #0
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 faae 	bl	8007cb0 <USBH_CtlReq>
 8007754:	4603      	mov	r3, r0
}
 8007756:	4618      	mov	r0, r3
 8007758:	3708      	adds	r7, #8
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}

0800775e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800775e:	b480      	push	{r7}
 8007760:	b085      	sub	sp, #20
 8007762:	af00      	add	r7, sp, #0
 8007764:	60f8      	str	r0, [r7, #12]
 8007766:	60b9      	str	r1, [r7, #8]
 8007768:	4613      	mov	r3, r2
 800776a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	781a      	ldrb	r2, [r3, #0]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	785a      	ldrb	r2, [r3, #1]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	3302      	adds	r3, #2
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	b29a      	uxth	r2, r3
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	3303      	adds	r3, #3
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	b29b      	uxth	r3, r3
 800778c:	021b      	lsls	r3, r3, #8
 800778e:	b29b      	uxth	r3, r3
 8007790:	4313      	orrs	r3, r2
 8007792:	b29a      	uxth	r2, r3
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	791a      	ldrb	r2, [r3, #4]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	795a      	ldrb	r2, [r3, #5]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	799a      	ldrb	r2, [r3, #6]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	79da      	ldrb	r2, [r3, #7]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	79db      	ldrb	r3, [r3, #7]
 80077bc:	2b20      	cmp	r3, #32
 80077be:	dc11      	bgt.n	80077e4 <USBH_ParseDevDesc+0x86>
 80077c0:	2b08      	cmp	r3, #8
 80077c2:	db16      	blt.n	80077f2 <USBH_ParseDevDesc+0x94>
 80077c4:	3b08      	subs	r3, #8
 80077c6:	2201      	movs	r2, #1
 80077c8:	fa02 f303 	lsl.w	r3, r2, r3
 80077cc:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80077d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	bf14      	ite	ne
 80077d8:	2301      	movne	r3, #1
 80077da:	2300      	moveq	r3, #0
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d102      	bne.n	80077e8 <USBH_ParseDevDesc+0x8a>
 80077e2:	e006      	b.n	80077f2 <USBH_ParseDevDesc+0x94>
 80077e4:	2b40      	cmp	r3, #64	; 0x40
 80077e6:	d104      	bne.n	80077f2 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	79da      	ldrb	r2, [r3, #7]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	71da      	strb	r2, [r3, #7]
      break;
 80077f0:	e003      	b.n	80077fa <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2240      	movs	r2, #64	; 0x40
 80077f6:	71da      	strb	r2, [r3, #7]
      break;
 80077f8:	bf00      	nop
  }

  if (length > 8U)
 80077fa:	88fb      	ldrh	r3, [r7, #6]
 80077fc:	2b08      	cmp	r3, #8
 80077fe:	d939      	bls.n	8007874 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	3308      	adds	r3, #8
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	b29a      	uxth	r2, r3
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	3309      	adds	r3, #9
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	b29b      	uxth	r3, r3
 8007810:	021b      	lsls	r3, r3, #8
 8007812:	b29b      	uxth	r3, r3
 8007814:	4313      	orrs	r3, r2
 8007816:	b29a      	uxth	r2, r3
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	330a      	adds	r3, #10
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	b29a      	uxth	r2, r3
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	330b      	adds	r3, #11
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	b29b      	uxth	r3, r3
 800782c:	021b      	lsls	r3, r3, #8
 800782e:	b29b      	uxth	r3, r3
 8007830:	4313      	orrs	r3, r2
 8007832:	b29a      	uxth	r2, r3
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	330c      	adds	r3, #12
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	b29a      	uxth	r2, r3
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	330d      	adds	r3, #13
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	b29b      	uxth	r3, r3
 8007848:	021b      	lsls	r3, r3, #8
 800784a:	b29b      	uxth	r3, r3
 800784c:	4313      	orrs	r3, r2
 800784e:	b29a      	uxth	r2, r3
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	7b9a      	ldrb	r2, [r3, #14]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	7bda      	ldrb	r2, [r3, #15]
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	7c1a      	ldrb	r2, [r3, #16]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	7c5a      	ldrb	r2, [r3, #17]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	745a      	strb	r2, [r3, #17]
  }
}
 8007874:	bf00      	nop
 8007876:	3714      	adds	r7, #20
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr

08007880 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b08c      	sub	sp, #48	; 0x30
 8007884:	af00      	add	r7, sp, #0
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	60b9      	str	r1, [r7, #8]
 800788a:	4613      	mov	r3, r2
 800788c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007894:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007896:	2300      	movs	r3, #0
 8007898:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80078a0:	2300      	movs	r3, #0
 80078a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80078a6:	2300      	movs	r3, #0
 80078a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	781a      	ldrb	r2, [r3, #0]
 80078b4:	6a3b      	ldr	r3, [r7, #32]
 80078b6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	785a      	ldrb	r2, [r3, #1]
 80078bc:	6a3b      	ldr	r3, [r7, #32]
 80078be:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	3302      	adds	r3, #2
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	b29a      	uxth	r2, r3
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	3303      	adds	r3, #3
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	021b      	lsls	r3, r3, #8
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	4313      	orrs	r3, r2
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078dc:	bf28      	it	cs
 80078de:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80078e2:	b29a      	uxth	r2, r3
 80078e4:	6a3b      	ldr	r3, [r7, #32]
 80078e6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	791a      	ldrb	r2, [r3, #4]
 80078ec:	6a3b      	ldr	r3, [r7, #32]
 80078ee:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	795a      	ldrb	r2, [r3, #5]
 80078f4:	6a3b      	ldr	r3, [r7, #32]
 80078f6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	799a      	ldrb	r2, [r3, #6]
 80078fc:	6a3b      	ldr	r3, [r7, #32]
 80078fe:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	79da      	ldrb	r2, [r3, #7]
 8007904:	6a3b      	ldr	r3, [r7, #32]
 8007906:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	7a1a      	ldrb	r2, [r3, #8]
 800790c:	6a3b      	ldr	r3, [r7, #32]
 800790e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007910:	6a3b      	ldr	r3, [r7, #32]
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	2b09      	cmp	r3, #9
 8007916:	d002      	beq.n	800791e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007918:	6a3b      	ldr	r3, [r7, #32]
 800791a:	2209      	movs	r2, #9
 800791c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800791e:	88fb      	ldrh	r3, [r7, #6]
 8007920:	2b09      	cmp	r3, #9
 8007922:	f240 809d 	bls.w	8007a60 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007926:	2309      	movs	r3, #9
 8007928:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800792a:	2300      	movs	r3, #0
 800792c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800792e:	e081      	b.n	8007a34 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007930:	f107 0316 	add.w	r3, r7, #22
 8007934:	4619      	mov	r1, r3
 8007936:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007938:	f000 f99f 	bl	8007c7a <USBH_GetNextDesc>
 800793c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800793e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007940:	785b      	ldrb	r3, [r3, #1]
 8007942:	2b04      	cmp	r3, #4
 8007944:	d176      	bne.n	8007a34 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	2b09      	cmp	r3, #9
 800794c:	d002      	beq.n	8007954 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800794e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007950:	2209      	movs	r2, #9
 8007952:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007954:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007958:	221a      	movs	r2, #26
 800795a:	fb02 f303 	mul.w	r3, r2, r3
 800795e:	3308      	adds	r3, #8
 8007960:	6a3a      	ldr	r2, [r7, #32]
 8007962:	4413      	add	r3, r2
 8007964:	3302      	adds	r3, #2
 8007966:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007968:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800796a:	69f8      	ldr	r0, [r7, #28]
 800796c:	f000 f87e 	bl	8007a6c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007970:	2300      	movs	r3, #0
 8007972:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007976:	2300      	movs	r3, #0
 8007978:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800797a:	e043      	b.n	8007a04 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800797c:	f107 0316 	add.w	r3, r7, #22
 8007980:	4619      	mov	r1, r3
 8007982:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007984:	f000 f979 	bl	8007c7a <USBH_GetNextDesc>
 8007988:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800798a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800798c:	785b      	ldrb	r3, [r3, #1]
 800798e:	2b05      	cmp	r3, #5
 8007990:	d138      	bne.n	8007a04 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	795b      	ldrb	r3, [r3, #5]
 8007996:	2b01      	cmp	r3, #1
 8007998:	d10f      	bne.n	80079ba <USBH_ParseCfgDesc+0x13a>
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	799b      	ldrb	r3, [r3, #6]
 800799e:	2b02      	cmp	r3, #2
 80079a0:	d10b      	bne.n	80079ba <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80079a2:	69fb      	ldr	r3, [r7, #28]
 80079a4:	79db      	ldrb	r3, [r3, #7]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d10f      	bne.n	80079ca <USBH_ParseCfgDesc+0x14a>
 80079aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	2b09      	cmp	r3, #9
 80079b0:	d00b      	beq.n	80079ca <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 80079b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b4:	2209      	movs	r2, #9
 80079b6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80079b8:	e007      	b.n	80079ca <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 80079ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	2b07      	cmp	r3, #7
 80079c0:	d004      	beq.n	80079cc <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80079c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c4:	2207      	movs	r2, #7
 80079c6:	701a      	strb	r2, [r3, #0]
 80079c8:	e000      	b.n	80079cc <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80079ca:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80079cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079d0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80079d4:	3201      	adds	r2, #1
 80079d6:	00d2      	lsls	r2, r2, #3
 80079d8:	211a      	movs	r1, #26
 80079da:	fb01 f303 	mul.w	r3, r1, r3
 80079de:	4413      	add	r3, r2
 80079e0:	3308      	adds	r3, #8
 80079e2:	6a3a      	ldr	r2, [r7, #32]
 80079e4:	4413      	add	r3, r2
 80079e6:	3304      	adds	r3, #4
 80079e8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80079ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079ec:	69b9      	ldr	r1, [r7, #24]
 80079ee:	68f8      	ldr	r0, [r7, #12]
 80079f0:	f000 f86b 	bl	8007aca <USBH_ParseEPDesc>
 80079f4:	4603      	mov	r3, r0
 80079f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80079fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80079fe:	3301      	adds	r3, #1
 8007a00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007a04:	69fb      	ldr	r3, [r7, #28]
 8007a06:	791b      	ldrb	r3, [r3, #4]
 8007a08:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d204      	bcs.n	8007a1a <USBH_ParseCfgDesc+0x19a>
 8007a10:	6a3b      	ldr	r3, [r7, #32]
 8007a12:	885a      	ldrh	r2, [r3, #2]
 8007a14:	8afb      	ldrh	r3, [r7, #22]
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d8b0      	bhi.n	800797c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007a1a:	69fb      	ldr	r3, [r7, #28]
 8007a1c:	791b      	ldrb	r3, [r3, #4]
 8007a1e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d201      	bcs.n	8007a2a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007a26:	2303      	movs	r3, #3
 8007a28:	e01c      	b.n	8007a64 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007a2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a2e:	3301      	adds	r3, #1
 8007a30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007a34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d805      	bhi.n	8007a48 <USBH_ParseCfgDesc+0x1c8>
 8007a3c:	6a3b      	ldr	r3, [r7, #32]
 8007a3e:	885a      	ldrh	r2, [r3, #2]
 8007a40:	8afb      	ldrh	r3, [r7, #22]
 8007a42:	429a      	cmp	r2, r3
 8007a44:	f63f af74 	bhi.w	8007930 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007a48:	6a3b      	ldr	r3, [r7, #32]
 8007a4a:	791b      	ldrb	r3, [r3, #4]
 8007a4c:	2b02      	cmp	r3, #2
 8007a4e:	bf28      	it	cs
 8007a50:	2302      	movcs	r3, #2
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d201      	bcs.n	8007a60 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007a5c:	2303      	movs	r3, #3
 8007a5e:	e001      	b.n	8007a64 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007a60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3730      	adds	r7, #48	; 0x30
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	781a      	ldrb	r2, [r3, #0]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	785a      	ldrb	r2, [r3, #1]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	789a      	ldrb	r2, [r3, #2]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	78da      	ldrb	r2, [r3, #3]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	791a      	ldrb	r2, [r3, #4]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	795a      	ldrb	r2, [r3, #5]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	799a      	ldrb	r2, [r3, #6]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	79da      	ldrb	r2, [r3, #7]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	7a1a      	ldrb	r2, [r3, #8]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	721a      	strb	r2, [r3, #8]
}
 8007abe:	bf00      	nop
 8007ac0:	370c      	adds	r7, #12
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr

08007aca <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007aca:	b480      	push	{r7}
 8007acc:	b087      	sub	sp, #28
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	60f8      	str	r0, [r7, #12]
 8007ad2:	60b9      	str	r1, [r7, #8]
 8007ad4:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	781a      	ldrb	r2, [r3, #0]
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	785a      	ldrb	r2, [r3, #1]
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	789a      	ldrb	r2, [r3, #2]
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	78da      	ldrb	r2, [r3, #3]
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	3304      	adds	r3, #4
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	b29a      	uxth	r2, r3
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	3305      	adds	r3, #5
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	021b      	lsls	r3, r3, #8
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	b29a      	uxth	r2, r3
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	799a      	ldrb	r2, [r3, #6]
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	889b      	ldrh	r3, [r3, #4]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d102      	bne.n	8007b2c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007b26:	2303      	movs	r3, #3
 8007b28:	75fb      	strb	r3, [r7, #23]
 8007b2a:	e033      	b.n	8007b94 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	889b      	ldrh	r3, [r3, #4]
 8007b30:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007b34:	f023 0307 	bic.w	r3, r3, #7
 8007b38:	b29a      	uxth	r2, r3
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	889b      	ldrh	r3, [r3, #4]
 8007b42:	b21a      	sxth	r2, r3
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	3304      	adds	r3, #4
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	b299      	uxth	r1, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	3305      	adds	r3, #5
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	021b      	lsls	r3, r3, #8
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	430b      	orrs	r3, r1
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d110      	bne.n	8007b86 <USBH_ParseEPDesc+0xbc>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	3304      	adds	r3, #4
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	b299      	uxth	r1, r3
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	3305      	adds	r3, #5
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	021b      	lsls	r3, r3, #8
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	430b      	orrs	r3, r1
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	b21b      	sxth	r3, r3
 8007b7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b82:	b21b      	sxth	r3, r3
 8007b84:	e001      	b.n	8007b8a <USBH_ParseEPDesc+0xc0>
 8007b86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	b21b      	sxth	r3, r3
 8007b8e:	b29a      	uxth	r2, r3
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d116      	bne.n	8007bcc <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	78db      	ldrb	r3, [r3, #3]
 8007ba2:	f003 0303 	and.w	r3, r3, #3
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d005      	beq.n	8007bb6 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	78db      	ldrb	r3, [r3, #3]
 8007bae:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007bb2:	2b03      	cmp	r3, #3
 8007bb4:	d127      	bne.n	8007c06 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	799b      	ldrb	r3, [r3, #6]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d003      	beq.n	8007bc6 <USBH_ParseEPDesc+0xfc>
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	799b      	ldrb	r3, [r3, #6]
 8007bc2:	2b10      	cmp	r3, #16
 8007bc4:	d91f      	bls.n	8007c06 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007bc6:	2303      	movs	r3, #3
 8007bc8:	75fb      	strb	r3, [r7, #23]
 8007bca:	e01c      	b.n	8007c06 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	78db      	ldrb	r3, [r3, #3]
 8007bd0:	f003 0303 	and.w	r3, r3, #3
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d10a      	bne.n	8007bee <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	799b      	ldrb	r3, [r3, #6]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d003      	beq.n	8007be8 <USBH_ParseEPDesc+0x11e>
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	799b      	ldrb	r3, [r3, #6]
 8007be4:	2b10      	cmp	r3, #16
 8007be6:	d90e      	bls.n	8007c06 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007be8:	2303      	movs	r3, #3
 8007bea:	75fb      	strb	r3, [r7, #23]
 8007bec:	e00b      	b.n	8007c06 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	78db      	ldrb	r3, [r3, #3]
 8007bf2:	f003 0303 	and.w	r3, r3, #3
 8007bf6:	2b03      	cmp	r3, #3
 8007bf8:	d105      	bne.n	8007c06 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	799b      	ldrb	r3, [r3, #6]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d101      	bne.n	8007c06 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007c02:	2303      	movs	r3, #3
 8007c04:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8007c06:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	371c      	adds	r7, #28
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr

08007c14 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b087      	sub	sp, #28
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	4613      	mov	r3, r2
 8007c20:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	3301      	adds	r3, #1
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	2b03      	cmp	r3, #3
 8007c2a:	d120      	bne.n	8007c6e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	1e9a      	subs	r2, r3, #2
 8007c32:	88fb      	ldrh	r3, [r7, #6]
 8007c34:	4293      	cmp	r3, r2
 8007c36:	bf28      	it	cs
 8007c38:	4613      	movcs	r3, r2
 8007c3a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	3302      	adds	r3, #2
 8007c40:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007c42:	2300      	movs	r3, #0
 8007c44:	82fb      	strh	r3, [r7, #22]
 8007c46:	e00b      	b.n	8007c60 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007c48:	8afb      	ldrh	r3, [r7, #22]
 8007c4a:	68fa      	ldr	r2, [r7, #12]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	781a      	ldrb	r2, [r3, #0]
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	3301      	adds	r3, #1
 8007c58:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007c5a:	8afb      	ldrh	r3, [r7, #22]
 8007c5c:	3302      	adds	r3, #2
 8007c5e:	82fb      	strh	r3, [r7, #22]
 8007c60:	8afa      	ldrh	r2, [r7, #22]
 8007c62:	8abb      	ldrh	r3, [r7, #20]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d3ef      	bcc.n	8007c48 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	701a      	strb	r2, [r3, #0]
  }
}
 8007c6e:	bf00      	nop
 8007c70:	371c      	adds	r7, #28
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr

08007c7a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007c7a:	b480      	push	{r7}
 8007c7c:	b085      	sub	sp, #20
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
 8007c82:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	881a      	ldrh	r2, [r3, #0]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	4413      	add	r3, r2
 8007c90:	b29a      	uxth	r2, r3
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4413      	add	r3, r2
 8007ca0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3714      	adds	r7, #20
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b086      	sub	sp, #24
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	60b9      	str	r1, [r7, #8]
 8007cba:	4613      	mov	r3, r2
 8007cbc:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	789b      	ldrb	r3, [r3, #2]
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d002      	beq.n	8007cd0 <USBH_CtlReq+0x20>
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	d01d      	beq.n	8007d0a <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8007cce:	e043      	b.n	8007d58 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	68ba      	ldr	r2, [r7, #8]
 8007cd4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	88fa      	ldrh	r2, [r7, #6]
 8007cda:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2202      	movs	r2, #2
 8007ce6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2203      	movs	r2, #3
 8007cf0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007d00:	2300      	movs	r3, #0
 8007d02:	2200      	movs	r2, #0
 8007d04:	f000 fe06 	bl	8008914 <osMessageQueuePut>
      break;
 8007d08:	e026      	b.n	8007d58 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8007d0a:	68f8      	ldr	r0, [r7, #12]
 8007d0c:	f000 f82a 	bl	8007d64 <USBH_HandleControl>
 8007d10:	4603      	mov	r3, r0
 8007d12:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007d14:	7dfb      	ldrb	r3, [r7, #23]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d002      	beq.n	8007d20 <USBH_CtlReq+0x70>
 8007d1a:	7dfb      	ldrb	r3, [r7, #23]
 8007d1c:	2b03      	cmp	r3, #3
 8007d1e:	d106      	bne.n	8007d2e <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2201      	movs	r2, #1
 8007d24:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	761a      	strb	r2, [r3, #24]
 8007d2c:	e005      	b.n	8007d3a <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8007d2e:	7dfb      	ldrb	r3, [r7, #23]
 8007d30:	2b02      	cmp	r3, #2
 8007d32:	d102      	bne.n	8007d3a <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2201      	movs	r2, #1
 8007d38:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2203      	movs	r2, #3
 8007d3e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007d4e:	2300      	movs	r3, #0
 8007d50:	2200      	movs	r2, #0
 8007d52:	f000 fddf 	bl	8008914 <osMessageQueuePut>
      break;
 8007d56:	bf00      	nop
  }
  return status;
 8007d58:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3718      	adds	r7, #24
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
	...

08007d64 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b086      	sub	sp, #24
 8007d68:	af02      	add	r7, sp, #8
 8007d6a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007d70:	2300      	movs	r3, #0
 8007d72:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	7e1b      	ldrb	r3, [r3, #24]
 8007d78:	3b01      	subs	r3, #1
 8007d7a:	2b0a      	cmp	r3, #10
 8007d7c:	f200 8229 	bhi.w	80081d2 <USBH_HandleControl+0x46e>
 8007d80:	a201      	add	r2, pc, #4	; (adr r2, 8007d88 <USBH_HandleControl+0x24>)
 8007d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d86:	bf00      	nop
 8007d88:	08007db5 	.word	0x08007db5
 8007d8c:	08007dcf 	.word	0x08007dcf
 8007d90:	08007e71 	.word	0x08007e71
 8007d94:	08007e97 	.word	0x08007e97
 8007d98:	08007f23 	.word	0x08007f23
 8007d9c:	08007f4d 	.word	0x08007f4d
 8007da0:	0800800f 	.word	0x0800800f
 8007da4:	08008031 	.word	0x08008031
 8007da8:	080080c3 	.word	0x080080c3
 8007dac:	080080e9 	.word	0x080080e9
 8007db0:	0800817b 	.word	0x0800817b
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f103 0110 	add.w	r1, r3, #16
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	795b      	ldrb	r3, [r3, #5]
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 fa17 	bl	80081f4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2202      	movs	r2, #2
 8007dca:	761a      	strb	r2, [r3, #24]
      break;
 8007dcc:	e20c      	b.n	80081e8 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	795b      	ldrb	r3, [r3, #5]
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f003 fe7d 	bl	800bad4 <USBH_LL_GetURBState>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007dde:	7bbb      	ldrb	r3, [r7, #14]
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d12c      	bne.n	8007e3e <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	7c1b      	ldrb	r3, [r3, #16]
 8007de8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007dec:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	8adb      	ldrh	r3, [r3, #22]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d00a      	beq.n	8007e0c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007df6:	7b7b      	ldrb	r3, [r7, #13]
 8007df8:	2b80      	cmp	r3, #128	; 0x80
 8007dfa:	d103      	bne.n	8007e04 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2203      	movs	r2, #3
 8007e00:	761a      	strb	r2, [r3, #24]
 8007e02:	e00d      	b.n	8007e20 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2205      	movs	r2, #5
 8007e08:	761a      	strb	r2, [r3, #24]
 8007e0a:	e009      	b.n	8007e20 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8007e0c:	7b7b      	ldrb	r3, [r7, #13]
 8007e0e:	2b80      	cmp	r3, #128	; 0x80
 8007e10:	d103      	bne.n	8007e1a <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2209      	movs	r2, #9
 8007e16:	761a      	strb	r2, [r3, #24]
 8007e18:	e002      	b.n	8007e20 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2207      	movs	r2, #7
 8007e1e:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2203      	movs	r2, #3
 8007e24:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007e34:	2300      	movs	r3, #0
 8007e36:	2200      	movs	r2, #0
 8007e38:	f000 fd6c 	bl	8008914 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007e3c:	e1cb      	b.n	80081d6 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007e3e:	7bbb      	ldrb	r3, [r7, #14]
 8007e40:	2b04      	cmp	r3, #4
 8007e42:	d003      	beq.n	8007e4c <USBH_HandleControl+0xe8>
 8007e44:	7bbb      	ldrb	r3, [r7, #14]
 8007e46:	2b02      	cmp	r3, #2
 8007e48:	f040 81c5 	bne.w	80081d6 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	220b      	movs	r2, #11
 8007e50:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2203      	movs	r2, #3
 8007e56:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007e66:	2300      	movs	r3, #0
 8007e68:	2200      	movs	r2, #0
 8007e6a:	f000 fd53 	bl	8008914 <osMessageQueuePut>
      break;
 8007e6e:	e1b2      	b.n	80081d6 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e76:	b29a      	uxth	r2, r3
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6899      	ldr	r1, [r3, #8]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	899a      	ldrh	r2, [r3, #12]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	791b      	ldrb	r3, [r3, #4]
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 f9f2 	bl	8008272 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2204      	movs	r2, #4
 8007e92:	761a      	strb	r2, [r3, #24]
      break;
 8007e94:	e1a8      	b.n	80081e8 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	791b      	ldrb	r3, [r3, #4]
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f003 fe19 	bl	800bad4 <USBH_LL_GetURBState>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007ea6:	7bbb      	ldrb	r3, [r7, #14]
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d110      	bne.n	8007ece <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2209      	movs	r2, #9
 8007eb0:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2203      	movs	r2, #3
 8007eb6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	2200      	movs	r2, #0
 8007eca:	f000 fd23 	bl	8008914 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007ece:	7bbb      	ldrb	r3, [r7, #14]
 8007ed0:	2b05      	cmp	r3, #5
 8007ed2:	d110      	bne.n	8007ef6 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007ed4:	2303      	movs	r3, #3
 8007ed6:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2203      	movs	r2, #3
 8007edc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007eec:	2300      	movs	r3, #0
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f000 fd10 	bl	8008914 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007ef4:	e171      	b.n	80081da <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 8007ef6:	7bbb      	ldrb	r3, [r7, #14]
 8007ef8:	2b04      	cmp	r3, #4
 8007efa:	f040 816e 	bne.w	80081da <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	220b      	movs	r2, #11
 8007f02:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2203      	movs	r2, #3
 8007f08:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007f18:	2300      	movs	r3, #0
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f000 fcfa 	bl	8008914 <osMessageQueuePut>
      break;
 8007f20:	e15b      	b.n	80081da <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6899      	ldr	r1, [r3, #8]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	899a      	ldrh	r2, [r3, #12]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	795b      	ldrb	r3, [r3, #5]
 8007f2e:	2001      	movs	r0, #1
 8007f30:	9000      	str	r0, [sp, #0]
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 f978 	bl	8008228 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007f3e:	b29a      	uxth	r2, r3
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2206      	movs	r2, #6
 8007f48:	761a      	strb	r2, [r3, #24]
      break;
 8007f4a:	e14d      	b.n	80081e8 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	795b      	ldrb	r3, [r3, #5]
 8007f50:	4619      	mov	r1, r3
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f003 fdbe 	bl	800bad4 <USBH_LL_GetURBState>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007f5c:	7bbb      	ldrb	r3, [r7, #14]
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d111      	bne.n	8007f86 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2207      	movs	r2, #7
 8007f66:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2203      	movs	r2, #3
 8007f6c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f000 fcc8 	bl	8008914 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007f84:	e12b      	b.n	80081de <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8007f86:	7bbb      	ldrb	r3, [r7, #14]
 8007f88:	2b05      	cmp	r3, #5
 8007f8a:	d113      	bne.n	8007fb4 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	220c      	movs	r2, #12
 8007f90:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007f92:	2303      	movs	r3, #3
 8007f94:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2203      	movs	r2, #3
 8007f9a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007faa:	2300      	movs	r3, #0
 8007fac:	2200      	movs	r2, #0
 8007fae:	f000 fcb1 	bl	8008914 <osMessageQueuePut>
      break;
 8007fb2:	e114      	b.n	80081de <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007fb4:	7bbb      	ldrb	r3, [r7, #14]
 8007fb6:	2b02      	cmp	r3, #2
 8007fb8:	d111      	bne.n	8007fde <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2205      	movs	r2, #5
 8007fbe:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2203      	movs	r2, #3
 8007fc4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	f000 fc9c 	bl	8008914 <osMessageQueuePut>
      break;
 8007fdc:	e0ff      	b.n	80081de <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8007fde:	7bbb      	ldrb	r3, [r7, #14]
 8007fe0:	2b04      	cmp	r3, #4
 8007fe2:	f040 80fc 	bne.w	80081de <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	220b      	movs	r2, #11
 8007fea:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007fec:	2302      	movs	r3, #2
 8007fee:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2203      	movs	r2, #3
 8007ff4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008004:	2300      	movs	r3, #0
 8008006:	2200      	movs	r2, #0
 8008008:	f000 fc84 	bl	8008914 <osMessageQueuePut>
      break;
 800800c:	e0e7      	b.n	80081de <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	791b      	ldrb	r3, [r3, #4]
 8008012:	2200      	movs	r2, #0
 8008014:	2100      	movs	r1, #0
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 f92b 	bl	8008272 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008022:	b29a      	uxth	r2, r3
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2208      	movs	r2, #8
 800802c:	761a      	strb	r2, [r3, #24]

      break;
 800802e:	e0db      	b.n	80081e8 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	791b      	ldrb	r3, [r3, #4]
 8008034:	4619      	mov	r1, r3
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f003 fd4c 	bl	800bad4 <USBH_LL_GetURBState>
 800803c:	4603      	mov	r3, r0
 800803e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008040:	7bbb      	ldrb	r3, [r7, #14]
 8008042:	2b01      	cmp	r3, #1
 8008044:	d113      	bne.n	800806e <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	220d      	movs	r2, #13
 800804a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800804c:	2300      	movs	r3, #0
 800804e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2203      	movs	r2, #3
 8008054:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008064:	2300      	movs	r3, #0
 8008066:	2200      	movs	r2, #0
 8008068:	f000 fc54 	bl	8008914 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800806c:	e0b9      	b.n	80081e2 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800806e:	7bbb      	ldrb	r3, [r7, #14]
 8008070:	2b04      	cmp	r3, #4
 8008072:	d111      	bne.n	8008098 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	220b      	movs	r2, #11
 8008078:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2203      	movs	r2, #3
 800807e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800808e:	2300      	movs	r3, #0
 8008090:	2200      	movs	r2, #0
 8008092:	f000 fc3f 	bl	8008914 <osMessageQueuePut>
      break;
 8008096:	e0a4      	b.n	80081e2 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8008098:	7bbb      	ldrb	r3, [r7, #14]
 800809a:	2b05      	cmp	r3, #5
 800809c:	f040 80a1 	bne.w	80081e2 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 80080a0:	2303      	movs	r3, #3
 80080a2:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2203      	movs	r2, #3
 80080a8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80080b8:	2300      	movs	r3, #0
 80080ba:	2200      	movs	r2, #0
 80080bc:	f000 fc2a 	bl	8008914 <osMessageQueuePut>
      break;
 80080c0:	e08f      	b.n	80081e2 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	795b      	ldrb	r3, [r3, #5]
 80080c6:	2201      	movs	r2, #1
 80080c8:	9200      	str	r2, [sp, #0]
 80080ca:	2200      	movs	r2, #0
 80080cc:	2100      	movs	r1, #0
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 f8aa 	bl	8008228 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80080da:	b29a      	uxth	r2, r3
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	220a      	movs	r2, #10
 80080e4:	761a      	strb	r2, [r3, #24]
      break;
 80080e6:	e07f      	b.n	80081e8 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	795b      	ldrb	r3, [r3, #5]
 80080ec:	4619      	mov	r1, r3
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f003 fcf0 	bl	800bad4 <USBH_LL_GetURBState>
 80080f4:	4603      	mov	r3, r0
 80080f6:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80080f8:	7bbb      	ldrb	r3, [r7, #14]
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d113      	bne.n	8008126 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 80080fe:	2300      	movs	r3, #0
 8008100:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	220d      	movs	r2, #13
 8008106:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2203      	movs	r2, #3
 800810c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800811c:	2300      	movs	r3, #0
 800811e:	2200      	movs	r2, #0
 8008120:	f000 fbf8 	bl	8008914 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008124:	e05f      	b.n	80081e6 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008126:	7bbb      	ldrb	r3, [r7, #14]
 8008128:	2b02      	cmp	r3, #2
 800812a:	d111      	bne.n	8008150 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2209      	movs	r2, #9
 8008130:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2203      	movs	r2, #3
 8008136:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008146:	2300      	movs	r3, #0
 8008148:	2200      	movs	r2, #0
 800814a:	f000 fbe3 	bl	8008914 <osMessageQueuePut>
      break;
 800814e:	e04a      	b.n	80081e6 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8008150:	7bbb      	ldrb	r3, [r7, #14]
 8008152:	2b04      	cmp	r3, #4
 8008154:	d147      	bne.n	80081e6 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	220b      	movs	r2, #11
 800815a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2203      	movs	r2, #3
 8008160:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008170:	2300      	movs	r3, #0
 8008172:	2200      	movs	r2, #0
 8008174:	f000 fbce 	bl	8008914 <osMessageQueuePut>
      break;
 8008178:	e035      	b.n	80081e6 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	7e5b      	ldrb	r3, [r3, #25]
 800817e:	3301      	adds	r3, #1
 8008180:	b2da      	uxtb	r2, r3
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	765a      	strb	r2, [r3, #25]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	7e5b      	ldrb	r3, [r3, #25]
 800818a:	2b02      	cmp	r3, #2
 800818c:	d806      	bhi.n	800819c <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2201      	movs	r2, #1
 8008192:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800819a:	e025      	b.n	80081e8 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80081a2:	2106      	movs	r1, #6
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	795b      	ldrb	r3, [r3, #5]
 80081b2:	4619      	mov	r1, r3
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 f90d 	bl	80083d4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	791b      	ldrb	r3, [r3, #4]
 80081be:	4619      	mov	r1, r3
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 f907 	bl	80083d4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80081cc:	2302      	movs	r3, #2
 80081ce:	73fb      	strb	r3, [r7, #15]
      break;
 80081d0:	e00a      	b.n	80081e8 <USBH_HandleControl+0x484>

    default:
      break;
 80081d2:	bf00      	nop
 80081d4:	e008      	b.n	80081e8 <USBH_HandleControl+0x484>
      break;
 80081d6:	bf00      	nop
 80081d8:	e006      	b.n	80081e8 <USBH_HandleControl+0x484>
      break;
 80081da:	bf00      	nop
 80081dc:	e004      	b.n	80081e8 <USBH_HandleControl+0x484>
      break;
 80081de:	bf00      	nop
 80081e0:	e002      	b.n	80081e8 <USBH_HandleControl+0x484>
      break;
 80081e2:	bf00      	nop
 80081e4:	e000      	b.n	80081e8 <USBH_HandleControl+0x484>
      break;
 80081e6:	bf00      	nop
  }

  return status;
 80081e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3710      	adds	r7, #16
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	bf00      	nop

080081f4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b088      	sub	sp, #32
 80081f8:	af04      	add	r7, sp, #16
 80081fa:	60f8      	str	r0, [r7, #12]
 80081fc:	60b9      	str	r1, [r7, #8]
 80081fe:	4613      	mov	r3, r2
 8008200:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008202:	79f9      	ldrb	r1, [r7, #7]
 8008204:	2300      	movs	r3, #0
 8008206:	9303      	str	r3, [sp, #12]
 8008208:	2308      	movs	r3, #8
 800820a:	9302      	str	r3, [sp, #8]
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	9301      	str	r3, [sp, #4]
 8008210:	2300      	movs	r3, #0
 8008212:	9300      	str	r3, [sp, #0]
 8008214:	2300      	movs	r3, #0
 8008216:	2200      	movs	r2, #0
 8008218:	68f8      	ldr	r0, [r7, #12]
 800821a:	f003 fc2a 	bl	800ba72 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800821e:	2300      	movs	r3, #0
}
 8008220:	4618      	mov	r0, r3
 8008222:	3710      	adds	r7, #16
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b088      	sub	sp, #32
 800822c:	af04      	add	r7, sp, #16
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	4611      	mov	r1, r2
 8008234:	461a      	mov	r2, r3
 8008236:	460b      	mov	r3, r1
 8008238:	80fb      	strh	r3, [r7, #6]
 800823a:	4613      	mov	r3, r2
 800823c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008244:	2b00      	cmp	r3, #0
 8008246:	d001      	beq.n	800824c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008248:	2300      	movs	r3, #0
 800824a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800824c:	7979      	ldrb	r1, [r7, #5]
 800824e:	7e3b      	ldrb	r3, [r7, #24]
 8008250:	9303      	str	r3, [sp, #12]
 8008252:	88fb      	ldrh	r3, [r7, #6]
 8008254:	9302      	str	r3, [sp, #8]
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	9301      	str	r3, [sp, #4]
 800825a:	2301      	movs	r3, #1
 800825c:	9300      	str	r3, [sp, #0]
 800825e:	2300      	movs	r3, #0
 8008260:	2200      	movs	r2, #0
 8008262:	68f8      	ldr	r0, [r7, #12]
 8008264:	f003 fc05 	bl	800ba72 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	3710      	adds	r7, #16
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}

08008272 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b088      	sub	sp, #32
 8008276:	af04      	add	r7, sp, #16
 8008278:	60f8      	str	r0, [r7, #12]
 800827a:	60b9      	str	r1, [r7, #8]
 800827c:	4611      	mov	r1, r2
 800827e:	461a      	mov	r2, r3
 8008280:	460b      	mov	r3, r1
 8008282:	80fb      	strh	r3, [r7, #6]
 8008284:	4613      	mov	r3, r2
 8008286:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008288:	7979      	ldrb	r1, [r7, #5]
 800828a:	2300      	movs	r3, #0
 800828c:	9303      	str	r3, [sp, #12]
 800828e:	88fb      	ldrh	r3, [r7, #6]
 8008290:	9302      	str	r3, [sp, #8]
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	9301      	str	r3, [sp, #4]
 8008296:	2301      	movs	r3, #1
 8008298:	9300      	str	r3, [sp, #0]
 800829a:	2300      	movs	r3, #0
 800829c:	2201      	movs	r2, #1
 800829e:	68f8      	ldr	r0, [r7, #12]
 80082a0:	f003 fbe7 	bl	800ba72 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80082a4:	2300      	movs	r3, #0

}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3710      	adds	r7, #16
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}

080082ae <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b088      	sub	sp, #32
 80082b2:	af04      	add	r7, sp, #16
 80082b4:	60f8      	str	r0, [r7, #12]
 80082b6:	60b9      	str	r1, [r7, #8]
 80082b8:	4611      	mov	r1, r2
 80082ba:	461a      	mov	r2, r3
 80082bc:	460b      	mov	r3, r1
 80082be:	80fb      	strh	r3, [r7, #6]
 80082c0:	4613      	mov	r3, r2
 80082c2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d001      	beq.n	80082d2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80082ce:	2300      	movs	r3, #0
 80082d0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80082d2:	7979      	ldrb	r1, [r7, #5]
 80082d4:	7e3b      	ldrb	r3, [r7, #24]
 80082d6:	9303      	str	r3, [sp, #12]
 80082d8:	88fb      	ldrh	r3, [r7, #6]
 80082da:	9302      	str	r3, [sp, #8]
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	9301      	str	r3, [sp, #4]
 80082e0:	2301      	movs	r3, #1
 80082e2:	9300      	str	r3, [sp, #0]
 80082e4:	2302      	movs	r3, #2
 80082e6:	2200      	movs	r2, #0
 80082e8:	68f8      	ldr	r0, [r7, #12]
 80082ea:	f003 fbc2 	bl	800ba72 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80082ee:	2300      	movs	r3, #0
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3710      	adds	r7, #16
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b088      	sub	sp, #32
 80082fc:	af04      	add	r7, sp, #16
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	60b9      	str	r1, [r7, #8]
 8008302:	4611      	mov	r1, r2
 8008304:	461a      	mov	r2, r3
 8008306:	460b      	mov	r3, r1
 8008308:	80fb      	strh	r3, [r7, #6]
 800830a:	4613      	mov	r3, r2
 800830c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800830e:	7979      	ldrb	r1, [r7, #5]
 8008310:	2300      	movs	r3, #0
 8008312:	9303      	str	r3, [sp, #12]
 8008314:	88fb      	ldrh	r3, [r7, #6]
 8008316:	9302      	str	r3, [sp, #8]
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	9301      	str	r3, [sp, #4]
 800831c:	2301      	movs	r3, #1
 800831e:	9300      	str	r3, [sp, #0]
 8008320:	2302      	movs	r3, #2
 8008322:	2201      	movs	r2, #1
 8008324:	68f8      	ldr	r0, [r7, #12]
 8008326:	f003 fba4 	bl	800ba72 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800832a:	2300      	movs	r3, #0
}
 800832c:	4618      	mov	r0, r3
 800832e:	3710      	adds	r7, #16
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b086      	sub	sp, #24
 8008338:	af04      	add	r7, sp, #16
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	4608      	mov	r0, r1
 800833e:	4611      	mov	r1, r2
 8008340:	461a      	mov	r2, r3
 8008342:	4603      	mov	r3, r0
 8008344:	70fb      	strb	r3, [r7, #3]
 8008346:	460b      	mov	r3, r1
 8008348:	70bb      	strb	r3, [r7, #2]
 800834a:	4613      	mov	r3, r2
 800834c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800834e:	7878      	ldrb	r0, [r7, #1]
 8008350:	78ba      	ldrb	r2, [r7, #2]
 8008352:	78f9      	ldrb	r1, [r7, #3]
 8008354:	8b3b      	ldrh	r3, [r7, #24]
 8008356:	9302      	str	r3, [sp, #8]
 8008358:	7d3b      	ldrb	r3, [r7, #20]
 800835a:	9301      	str	r3, [sp, #4]
 800835c:	7c3b      	ldrb	r3, [r7, #16]
 800835e:	9300      	str	r3, [sp, #0]
 8008360:	4603      	mov	r3, r0
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f003 fb37 	bl	800b9d6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008368:	2300      	movs	r3, #0
}
 800836a:	4618      	mov	r0, r3
 800836c:	3708      	adds	r7, #8
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}

08008372 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008372:	b580      	push	{r7, lr}
 8008374:	b082      	sub	sp, #8
 8008376:	af00      	add	r7, sp, #0
 8008378:	6078      	str	r0, [r7, #4]
 800837a:	460b      	mov	r3, r1
 800837c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800837e:	78fb      	ldrb	r3, [r7, #3]
 8008380:	4619      	mov	r1, r3
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f003 fb56 	bl	800ba34 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008388:	2300      	movs	r3, #0
}
 800838a:	4618      	mov	r0, r3
 800838c:	3708      	adds	r7, #8
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}

08008392 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008392:	b580      	push	{r7, lr}
 8008394:	b084      	sub	sp, #16
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
 800839a:	460b      	mov	r3, r1
 800839c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 f836 	bl	8008410 <USBH_GetFreePipe>
 80083a4:	4603      	mov	r3, r0
 80083a6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80083a8:	89fb      	ldrh	r3, [r7, #14]
 80083aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d00a      	beq.n	80083c8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80083b2:	78fa      	ldrb	r2, [r7, #3]
 80083b4:	89fb      	ldrh	r3, [r7, #14]
 80083b6:	f003 030f 	and.w	r3, r3, #15
 80083ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80083be:	6879      	ldr	r1, [r7, #4]
 80083c0:	33e0      	adds	r3, #224	; 0xe0
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	440b      	add	r3, r1
 80083c6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80083c8:	89fb      	ldrh	r3, [r7, #14]
 80083ca:	b2db      	uxtb	r3, r3
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3710      	adds	r7, #16
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	460b      	mov	r3, r1
 80083de:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80083e0:	78fb      	ldrb	r3, [r7, #3]
 80083e2:	2b0f      	cmp	r3, #15
 80083e4:	d80d      	bhi.n	8008402 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80083e6:	78fb      	ldrb	r3, [r7, #3]
 80083e8:	687a      	ldr	r2, [r7, #4]
 80083ea:	33e0      	adds	r3, #224	; 0xe0
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	4413      	add	r3, r2
 80083f0:	685a      	ldr	r2, [r3, #4]
 80083f2:	78fb      	ldrb	r3, [r7, #3]
 80083f4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80083f8:	6879      	ldr	r1, [r7, #4]
 80083fa:	33e0      	adds	r3, #224	; 0xe0
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	440b      	add	r3, r1
 8008400:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008402:	2300      	movs	r3, #0
}
 8008404:	4618      	mov	r0, r3
 8008406:	370c      	adds	r7, #12
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr

08008410 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008410:	b480      	push	{r7}
 8008412:	b085      	sub	sp, #20
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008418:	2300      	movs	r3, #0
 800841a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800841c:	2300      	movs	r3, #0
 800841e:	73fb      	strb	r3, [r7, #15]
 8008420:	e00f      	b.n	8008442 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008422:	7bfb      	ldrb	r3, [r7, #15]
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	33e0      	adds	r3, #224	; 0xe0
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	4413      	add	r3, r2
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008432:	2b00      	cmp	r3, #0
 8008434:	d102      	bne.n	800843c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008436:	7bfb      	ldrb	r3, [r7, #15]
 8008438:	b29b      	uxth	r3, r3
 800843a:	e007      	b.n	800844c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800843c:	7bfb      	ldrb	r3, [r7, #15]
 800843e:	3301      	adds	r3, #1
 8008440:	73fb      	strb	r3, [r7, #15]
 8008442:	7bfb      	ldrb	r3, [r7, #15]
 8008444:	2b0f      	cmp	r3, #15
 8008446:	d9ec      	bls.n	8008422 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008448:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800844c:	4618      	mov	r0, r3
 800844e:	3714      	adds	r7, #20
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <__NVIC_SetPriority>:
{
 8008458:	b480      	push	{r7}
 800845a:	b083      	sub	sp, #12
 800845c:	af00      	add	r7, sp, #0
 800845e:	4603      	mov	r3, r0
 8008460:	6039      	str	r1, [r7, #0]
 8008462:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008468:	2b00      	cmp	r3, #0
 800846a:	db0a      	blt.n	8008482 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	b2da      	uxtb	r2, r3
 8008470:	490c      	ldr	r1, [pc, #48]	; (80084a4 <__NVIC_SetPriority+0x4c>)
 8008472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008476:	0112      	lsls	r2, r2, #4
 8008478:	b2d2      	uxtb	r2, r2
 800847a:	440b      	add	r3, r1
 800847c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008480:	e00a      	b.n	8008498 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	b2da      	uxtb	r2, r3
 8008486:	4908      	ldr	r1, [pc, #32]	; (80084a8 <__NVIC_SetPriority+0x50>)
 8008488:	79fb      	ldrb	r3, [r7, #7]
 800848a:	f003 030f 	and.w	r3, r3, #15
 800848e:	3b04      	subs	r3, #4
 8008490:	0112      	lsls	r2, r2, #4
 8008492:	b2d2      	uxtb	r2, r2
 8008494:	440b      	add	r3, r1
 8008496:	761a      	strb	r2, [r3, #24]
}
 8008498:	bf00      	nop
 800849a:	370c      	adds	r7, #12
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr
 80084a4:	e000e100 	.word	0xe000e100
 80084a8:	e000ed00 	.word	0xe000ed00

080084ac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80084ac:	b580      	push	{r7, lr}
 80084ae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80084b0:	2100      	movs	r1, #0
 80084b2:	f06f 0004 	mvn.w	r0, #4
 80084b6:	f7ff ffcf 	bl	8008458 <__NVIC_SetPriority>
#endif
}
 80084ba:	bf00      	nop
 80084bc:	bd80      	pop	{r7, pc}
	...

080084c0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80084c0:	b480      	push	{r7}
 80084c2:	b083      	sub	sp, #12
 80084c4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084c6:	f3ef 8305 	mrs	r3, IPSR
 80084ca:	603b      	str	r3, [r7, #0]
  return(result);
 80084cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d003      	beq.n	80084da <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80084d2:	f06f 0305 	mvn.w	r3, #5
 80084d6:	607b      	str	r3, [r7, #4]
 80084d8:	e00c      	b.n	80084f4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80084da:	4b0a      	ldr	r3, [pc, #40]	; (8008504 <osKernelInitialize+0x44>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d105      	bne.n	80084ee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80084e2:	4b08      	ldr	r3, [pc, #32]	; (8008504 <osKernelInitialize+0x44>)
 80084e4:	2201      	movs	r2, #1
 80084e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80084e8:	2300      	movs	r3, #0
 80084ea:	607b      	str	r3, [r7, #4]
 80084ec:	e002      	b.n	80084f4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80084ee:	f04f 33ff 	mov.w	r3, #4294967295
 80084f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80084f4:	687b      	ldr	r3, [r7, #4]
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	370c      	adds	r7, #12
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr
 8008502:	bf00      	nop
 8008504:	20000234 	.word	0x20000234

08008508 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008508:	b580      	push	{r7, lr}
 800850a:	b082      	sub	sp, #8
 800850c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800850e:	f3ef 8305 	mrs	r3, IPSR
 8008512:	603b      	str	r3, [r7, #0]
  return(result);
 8008514:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008516:	2b00      	cmp	r3, #0
 8008518:	d003      	beq.n	8008522 <osKernelStart+0x1a>
    stat = osErrorISR;
 800851a:	f06f 0305 	mvn.w	r3, #5
 800851e:	607b      	str	r3, [r7, #4]
 8008520:	e010      	b.n	8008544 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008522:	4b0b      	ldr	r3, [pc, #44]	; (8008550 <osKernelStart+0x48>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	2b01      	cmp	r3, #1
 8008528:	d109      	bne.n	800853e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800852a:	f7ff ffbf 	bl	80084ac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800852e:	4b08      	ldr	r3, [pc, #32]	; (8008550 <osKernelStart+0x48>)
 8008530:	2202      	movs	r2, #2
 8008532:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008534:	f001 fb10 	bl	8009b58 <vTaskStartScheduler>
      stat = osOK;
 8008538:	2300      	movs	r3, #0
 800853a:	607b      	str	r3, [r7, #4]
 800853c:	e002      	b.n	8008544 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800853e:	f04f 33ff 	mov.w	r3, #4294967295
 8008542:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008544:	687b      	ldr	r3, [r7, #4]
}
 8008546:	4618      	mov	r0, r3
 8008548:	3708      	adds	r7, #8
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
 800854e:	bf00      	nop
 8008550:	20000234 	.word	0x20000234

08008554 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008554:	b580      	push	{r7, lr}
 8008556:	b08e      	sub	sp, #56	; 0x38
 8008558:	af04      	add	r7, sp, #16
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	60b9      	str	r1, [r7, #8]
 800855e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008560:	2300      	movs	r3, #0
 8008562:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008564:	f3ef 8305 	mrs	r3, IPSR
 8008568:	617b      	str	r3, [r7, #20]
  return(result);
 800856a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800856c:	2b00      	cmp	r3, #0
 800856e:	d17e      	bne.n	800866e <osThreadNew+0x11a>
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d07b      	beq.n	800866e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008576:	2380      	movs	r3, #128	; 0x80
 8008578:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800857a:	2318      	movs	r3, #24
 800857c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800857e:	2300      	movs	r3, #0
 8008580:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008582:	f04f 33ff 	mov.w	r3, #4294967295
 8008586:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d045      	beq.n	800861a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d002      	beq.n	800859c <osThreadNew+0x48>
        name = attr->name;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	699b      	ldr	r3, [r3, #24]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d002      	beq.n	80085aa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	699b      	ldr	r3, [r3, #24]
 80085a8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80085aa:	69fb      	ldr	r3, [r7, #28]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d008      	beq.n	80085c2 <osThreadNew+0x6e>
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	2b38      	cmp	r3, #56	; 0x38
 80085b4:	d805      	bhi.n	80085c2 <osThreadNew+0x6e>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	f003 0301 	and.w	r3, r3, #1
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d001      	beq.n	80085c6 <osThreadNew+0x72>
        return (NULL);
 80085c2:	2300      	movs	r3, #0
 80085c4:	e054      	b.n	8008670 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	695b      	ldr	r3, [r3, #20]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d003      	beq.n	80085d6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	695b      	ldr	r3, [r3, #20]
 80085d2:	089b      	lsrs	r3, r3, #2
 80085d4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d00e      	beq.n	80085fc <osThreadNew+0xa8>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	68db      	ldr	r3, [r3, #12]
 80085e2:	2b5b      	cmp	r3, #91	; 0x5b
 80085e4:	d90a      	bls.n	80085fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d006      	beq.n	80085fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	695b      	ldr	r3, [r3, #20]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d002      	beq.n	80085fc <osThreadNew+0xa8>
        mem = 1;
 80085f6:	2301      	movs	r3, #1
 80085f8:	61bb      	str	r3, [r7, #24]
 80085fa:	e010      	b.n	800861e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d10c      	bne.n	800861e <osThreadNew+0xca>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d108      	bne.n	800861e <osThreadNew+0xca>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	691b      	ldr	r3, [r3, #16]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d104      	bne.n	800861e <osThreadNew+0xca>
          mem = 0;
 8008614:	2300      	movs	r3, #0
 8008616:	61bb      	str	r3, [r7, #24]
 8008618:	e001      	b.n	800861e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800861a:	2300      	movs	r3, #0
 800861c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800861e:	69bb      	ldr	r3, [r7, #24]
 8008620:	2b01      	cmp	r3, #1
 8008622:	d110      	bne.n	8008646 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800862c:	9202      	str	r2, [sp, #8]
 800862e:	9301      	str	r3, [sp, #4]
 8008630:	69fb      	ldr	r3, [r7, #28]
 8008632:	9300      	str	r3, [sp, #0]
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	6a3a      	ldr	r2, [r7, #32]
 8008638:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800863a:	68f8      	ldr	r0, [r7, #12]
 800863c:	f001 f8b6 	bl	80097ac <xTaskCreateStatic>
 8008640:	4603      	mov	r3, r0
 8008642:	613b      	str	r3, [r7, #16]
 8008644:	e013      	b.n	800866e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008646:	69bb      	ldr	r3, [r7, #24]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d110      	bne.n	800866e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800864c:	6a3b      	ldr	r3, [r7, #32]
 800864e:	b29a      	uxth	r2, r3
 8008650:	f107 0310 	add.w	r3, r7, #16
 8008654:	9301      	str	r3, [sp, #4]
 8008656:	69fb      	ldr	r3, [r7, #28]
 8008658:	9300      	str	r3, [sp, #0]
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800865e:	68f8      	ldr	r0, [r7, #12]
 8008660:	f001 f901 	bl	8009866 <xTaskCreate>
 8008664:	4603      	mov	r3, r0
 8008666:	2b01      	cmp	r3, #1
 8008668:	d001      	beq.n	800866e <osThreadNew+0x11a>
            hTask = NULL;
 800866a:	2300      	movs	r3, #0
 800866c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800866e:	693b      	ldr	r3, [r7, #16]
}
 8008670:	4618      	mov	r0, r3
 8008672:	3728      	adds	r7, #40	; 0x28
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008678:	b580      	push	{r7, lr}
 800867a:	b084      	sub	sp, #16
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008680:	f3ef 8305 	mrs	r3, IPSR
 8008684:	60bb      	str	r3, [r7, #8]
  return(result);
 8008686:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008688:	2b00      	cmp	r3, #0
 800868a:	d003      	beq.n	8008694 <osDelay+0x1c>
    stat = osErrorISR;
 800868c:	f06f 0305 	mvn.w	r3, #5
 8008690:	60fb      	str	r3, [r7, #12]
 8008692:	e007      	b.n	80086a4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008694:	2300      	movs	r3, #0
 8008696:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d002      	beq.n	80086a4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f001 fa26 	bl	8009af0 <vTaskDelay>
    }
  }

  return (stat);
 80086a4:	68fb      	ldr	r3, [r7, #12]
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3710      	adds	r7, #16
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}

080086ae <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 80086ae:	b580      	push	{r7, lr}
 80086b0:	b084      	sub	sp, #16
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f002 fb5e 	bl	800ad78 <pvTimerGetTimerID>
 80086bc:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d005      	beq.n	80086d0 <TimerCallback+0x22>
    callb->func (callb->arg);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	68fa      	ldr	r2, [r7, #12]
 80086ca:	6852      	ldr	r2, [r2, #4]
 80086cc:	4610      	mov	r0, r2
 80086ce:	4798      	blx	r3
  }
}
 80086d0:	bf00      	nop
 80086d2:	3710      	adds	r7, #16
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80086d8:	b580      	push	{r7, lr}
 80086da:	b08c      	sub	sp, #48	; 0x30
 80086dc:	af02      	add	r7, sp, #8
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	607a      	str	r2, [r7, #4]
 80086e2:	603b      	str	r3, [r7, #0]
 80086e4:	460b      	mov	r3, r1
 80086e6:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80086e8:	2300      	movs	r3, #0
 80086ea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086ec:	f3ef 8305 	mrs	r3, IPSR
 80086f0:	613b      	str	r3, [r7, #16]
  return(result);
 80086f2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d163      	bne.n	80087c0 <osTimerNew+0xe8>
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d060      	beq.n	80087c0 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80086fe:	2008      	movs	r0, #8
 8008700:	f002 fdaa 	bl	800b258 <pvPortMalloc>
 8008704:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d059      	beq.n	80087c0 <osTimerNew+0xe8>
      callb->func = func;
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	68fa      	ldr	r2, [r7, #12]
 8008710:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8008718:	7afb      	ldrb	r3, [r7, #11]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d102      	bne.n	8008724 <osTimerNew+0x4c>
        reload = pdFALSE;
 800871e:	2300      	movs	r3, #0
 8008720:	61fb      	str	r3, [r7, #28]
 8008722:	e001      	b.n	8008728 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8008724:	2301      	movs	r3, #1
 8008726:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8008728:	f04f 33ff 	mov.w	r3, #4294967295
 800872c:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800872e:	2300      	movs	r3, #0
 8008730:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d01c      	beq.n	8008772 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d002      	beq.n	8008746 <osTimerNew+0x6e>
          name = attr->name;
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d006      	beq.n	800875c <osTimerNew+0x84>
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	68db      	ldr	r3, [r3, #12]
 8008752:	2b2b      	cmp	r3, #43	; 0x2b
 8008754:	d902      	bls.n	800875c <osTimerNew+0x84>
          mem = 1;
 8008756:	2301      	movs	r3, #1
 8008758:	61bb      	str	r3, [r7, #24]
 800875a:	e00c      	b.n	8008776 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d108      	bne.n	8008776 <osTimerNew+0x9e>
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d104      	bne.n	8008776 <osTimerNew+0x9e>
            mem = 0;
 800876c:	2300      	movs	r3, #0
 800876e:	61bb      	str	r3, [r7, #24]
 8008770:	e001      	b.n	8008776 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8008772:	2300      	movs	r3, #0
 8008774:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	2b01      	cmp	r3, #1
 800877a:	d10c      	bne.n	8008796 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	689b      	ldr	r3, [r3, #8]
 8008780:	9301      	str	r3, [sp, #4]
 8008782:	4b12      	ldr	r3, [pc, #72]	; (80087cc <osTimerNew+0xf4>)
 8008784:	9300      	str	r3, [sp, #0]
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	69fa      	ldr	r2, [r7, #28]
 800878a:	2101      	movs	r1, #1
 800878c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800878e:	f001 ff74 	bl	800a67a <xTimerCreateStatic>
 8008792:	6238      	str	r0, [r7, #32]
 8008794:	e00b      	b.n	80087ae <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8008796:	69bb      	ldr	r3, [r7, #24]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d108      	bne.n	80087ae <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800879c:	4b0b      	ldr	r3, [pc, #44]	; (80087cc <osTimerNew+0xf4>)
 800879e:	9300      	str	r3, [sp, #0]
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	69fa      	ldr	r2, [r7, #28]
 80087a4:	2101      	movs	r1, #1
 80087a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80087a8:	f001 ff46 	bl	800a638 <xTimerCreate>
 80087ac:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 80087ae:	6a3b      	ldr	r3, [r7, #32]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d105      	bne.n	80087c0 <osTimerNew+0xe8>
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d002      	beq.n	80087c0 <osTimerNew+0xe8>
        vPortFree (callb);
 80087ba:	6978      	ldr	r0, [r7, #20]
 80087bc:	f002 fe18 	bl	800b3f0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80087c0:	6a3b      	ldr	r3, [r7, #32]
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3728      	adds	r7, #40	; 0x28
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	080086af 	.word	0x080086af

080087d0 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b088      	sub	sp, #32
 80087d4:	af02      	add	r7, sp, #8
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087de:	f3ef 8305 	mrs	r3, IPSR
 80087e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80087e4:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d003      	beq.n	80087f2 <osTimerStart+0x22>
    stat = osErrorISR;
 80087ea:	f06f 0305 	mvn.w	r3, #5
 80087ee:	617b      	str	r3, [r7, #20]
 80087f0:	e017      	b.n	8008822 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d103      	bne.n	8008800 <osTimerStart+0x30>
    stat = osErrorParameter;
 80087f8:	f06f 0303 	mvn.w	r3, #3
 80087fc:	617b      	str	r3, [r7, #20]
 80087fe:	e010      	b.n	8008822 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8008800:	2300      	movs	r3, #0
 8008802:	9300      	str	r3, [sp, #0]
 8008804:	2300      	movs	r3, #0
 8008806:	683a      	ldr	r2, [r7, #0]
 8008808:	2104      	movs	r1, #4
 800880a:	6938      	ldr	r0, [r7, #16]
 800880c:	f001 ffae 	bl	800a76c <xTimerGenericCommand>
 8008810:	4603      	mov	r3, r0
 8008812:	2b01      	cmp	r3, #1
 8008814:	d102      	bne.n	800881c <osTimerStart+0x4c>
      stat = osOK;
 8008816:	2300      	movs	r3, #0
 8008818:	617b      	str	r3, [r7, #20]
 800881a:	e002      	b.n	8008822 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800881c:	f06f 0302 	mvn.w	r3, #2
 8008820:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008822:	697b      	ldr	r3, [r7, #20]
}
 8008824:	4618      	mov	r0, r3
 8008826:	3718      	adds	r7, #24
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800882c:	b580      	push	{r7, lr}
 800882e:	b08a      	sub	sp, #40	; 0x28
 8008830:	af02      	add	r7, sp, #8
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	60b9      	str	r1, [r7, #8]
 8008836:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008838:	2300      	movs	r3, #0
 800883a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800883c:	f3ef 8305 	mrs	r3, IPSR
 8008840:	613b      	str	r3, [r7, #16]
  return(result);
 8008842:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008844:	2b00      	cmp	r3, #0
 8008846:	d15f      	bne.n	8008908 <osMessageQueueNew+0xdc>
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d05c      	beq.n	8008908 <osMessageQueueNew+0xdc>
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d059      	beq.n	8008908 <osMessageQueueNew+0xdc>
    mem = -1;
 8008854:	f04f 33ff 	mov.w	r3, #4294967295
 8008858:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d029      	beq.n	80088b4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	689b      	ldr	r3, [r3, #8]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d012      	beq.n	800888e <osMessageQueueNew+0x62>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	68db      	ldr	r3, [r3, #12]
 800886c:	2b4f      	cmp	r3, #79	; 0x4f
 800886e:	d90e      	bls.n	800888e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008874:	2b00      	cmp	r3, #0
 8008876:	d00a      	beq.n	800888e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	695a      	ldr	r2, [r3, #20]
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	68b9      	ldr	r1, [r7, #8]
 8008880:	fb01 f303 	mul.w	r3, r1, r3
 8008884:	429a      	cmp	r2, r3
 8008886:	d302      	bcc.n	800888e <osMessageQueueNew+0x62>
        mem = 1;
 8008888:	2301      	movs	r3, #1
 800888a:	61bb      	str	r3, [r7, #24]
 800888c:	e014      	b.n	80088b8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	689b      	ldr	r3, [r3, #8]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d110      	bne.n	80088b8 <osMessageQueueNew+0x8c>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	68db      	ldr	r3, [r3, #12]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d10c      	bne.n	80088b8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d108      	bne.n	80088b8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	695b      	ldr	r3, [r3, #20]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d104      	bne.n	80088b8 <osMessageQueueNew+0x8c>
          mem = 0;
 80088ae:	2300      	movs	r3, #0
 80088b0:	61bb      	str	r3, [r7, #24]
 80088b2:	e001      	b.n	80088b8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80088b4:	2300      	movs	r3, #0
 80088b6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80088b8:	69bb      	ldr	r3, [r7, #24]
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d10b      	bne.n	80088d6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	691a      	ldr	r2, [r3, #16]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	689b      	ldr	r3, [r3, #8]
 80088c6:	2100      	movs	r1, #0
 80088c8:	9100      	str	r1, [sp, #0]
 80088ca:	68b9      	ldr	r1, [r7, #8]
 80088cc:	68f8      	ldr	r0, [r7, #12]
 80088ce:	f000 fa2f 	bl	8008d30 <xQueueGenericCreateStatic>
 80088d2:	61f8      	str	r0, [r7, #28]
 80088d4:	e008      	b.n	80088e8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80088d6:	69bb      	ldr	r3, [r7, #24]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d105      	bne.n	80088e8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80088dc:	2200      	movs	r2, #0
 80088de:	68b9      	ldr	r1, [r7, #8]
 80088e0:	68f8      	ldr	r0, [r7, #12]
 80088e2:	f000 fa9d 	bl	8008e20 <xQueueGenericCreate>
 80088e6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80088e8:	69fb      	ldr	r3, [r7, #28]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d00c      	beq.n	8008908 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d003      	beq.n	80088fc <osMessageQueueNew+0xd0>
        name = attr->name;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	617b      	str	r3, [r7, #20]
 80088fa:	e001      	b.n	8008900 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80088fc:	2300      	movs	r3, #0
 80088fe:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008900:	6979      	ldr	r1, [r7, #20]
 8008902:	69f8      	ldr	r0, [r7, #28]
 8008904:	f000 fef4 	bl	80096f0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008908:	69fb      	ldr	r3, [r7, #28]
}
 800890a:	4618      	mov	r0, r3
 800890c:	3720      	adds	r7, #32
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
	...

08008914 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008914:	b580      	push	{r7, lr}
 8008916:	b088      	sub	sp, #32
 8008918:	af00      	add	r7, sp, #0
 800891a:	60f8      	str	r0, [r7, #12]
 800891c:	60b9      	str	r1, [r7, #8]
 800891e:	603b      	str	r3, [r7, #0]
 8008920:	4613      	mov	r3, r2
 8008922:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008928:	2300      	movs	r3, #0
 800892a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800892c:	f3ef 8305 	mrs	r3, IPSR
 8008930:	617b      	str	r3, [r7, #20]
  return(result);
 8008932:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008934:	2b00      	cmp	r3, #0
 8008936:	d028      	beq.n	800898a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008938:	69bb      	ldr	r3, [r7, #24]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d005      	beq.n	800894a <osMessageQueuePut+0x36>
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d002      	beq.n	800894a <osMessageQueuePut+0x36>
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d003      	beq.n	8008952 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800894a:	f06f 0303 	mvn.w	r3, #3
 800894e:	61fb      	str	r3, [r7, #28]
 8008950:	e038      	b.n	80089c4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008952:	2300      	movs	r3, #0
 8008954:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008956:	f107 0210 	add.w	r2, r7, #16
 800895a:	2300      	movs	r3, #0
 800895c:	68b9      	ldr	r1, [r7, #8]
 800895e:	69b8      	ldr	r0, [r7, #24]
 8008960:	f000 fbba 	bl	80090d8 <xQueueGenericSendFromISR>
 8008964:	4603      	mov	r3, r0
 8008966:	2b01      	cmp	r3, #1
 8008968:	d003      	beq.n	8008972 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800896a:	f06f 0302 	mvn.w	r3, #2
 800896e:	61fb      	str	r3, [r7, #28]
 8008970:	e028      	b.n	80089c4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d025      	beq.n	80089c4 <osMessageQueuePut+0xb0>
 8008978:	4b15      	ldr	r3, [pc, #84]	; (80089d0 <osMessageQueuePut+0xbc>)
 800897a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800897e:	601a      	str	r2, [r3, #0]
 8008980:	f3bf 8f4f 	dsb	sy
 8008984:	f3bf 8f6f 	isb	sy
 8008988:	e01c      	b.n	80089c4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800898a:	69bb      	ldr	r3, [r7, #24]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d002      	beq.n	8008996 <osMessageQueuePut+0x82>
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d103      	bne.n	800899e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8008996:	f06f 0303 	mvn.w	r3, #3
 800899a:	61fb      	str	r3, [r7, #28]
 800899c:	e012      	b.n	80089c4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800899e:	2300      	movs	r3, #0
 80089a0:	683a      	ldr	r2, [r7, #0]
 80089a2:	68b9      	ldr	r1, [r7, #8]
 80089a4:	69b8      	ldr	r0, [r7, #24]
 80089a6:	f000 fa99 	bl	8008edc <xQueueGenericSend>
 80089aa:	4603      	mov	r3, r0
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d009      	beq.n	80089c4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d003      	beq.n	80089be <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80089b6:	f06f 0301 	mvn.w	r3, #1
 80089ba:	61fb      	str	r3, [r7, #28]
 80089bc:	e002      	b.n	80089c4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80089be:	f06f 0302 	mvn.w	r3, #2
 80089c2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80089c4:	69fb      	ldr	r3, [r7, #28]
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3720      	adds	r7, #32
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
 80089ce:	bf00      	nop
 80089d0:	e000ed04 	.word	0xe000ed04

080089d4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b088      	sub	sp, #32
 80089d8:	af00      	add	r7, sp, #0
 80089da:	60f8      	str	r0, [r7, #12]
 80089dc:	60b9      	str	r1, [r7, #8]
 80089de:	607a      	str	r2, [r7, #4]
 80089e0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80089e6:	2300      	movs	r3, #0
 80089e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089ea:	f3ef 8305 	mrs	r3, IPSR
 80089ee:	617b      	str	r3, [r7, #20]
  return(result);
 80089f0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d028      	beq.n	8008a48 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80089f6:	69bb      	ldr	r3, [r7, #24]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d005      	beq.n	8008a08 <osMessageQueueGet+0x34>
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d002      	beq.n	8008a08 <osMessageQueueGet+0x34>
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d003      	beq.n	8008a10 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8008a08:	f06f 0303 	mvn.w	r3, #3
 8008a0c:	61fb      	str	r3, [r7, #28]
 8008a0e:	e037      	b.n	8008a80 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008a10:	2300      	movs	r3, #0
 8008a12:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008a14:	f107 0310 	add.w	r3, r7, #16
 8008a18:	461a      	mov	r2, r3
 8008a1a:	68b9      	ldr	r1, [r7, #8]
 8008a1c:	69b8      	ldr	r0, [r7, #24]
 8008a1e:	f000 fcd7 	bl	80093d0 <xQueueReceiveFromISR>
 8008a22:	4603      	mov	r3, r0
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d003      	beq.n	8008a30 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008a28:	f06f 0302 	mvn.w	r3, #2
 8008a2c:	61fb      	str	r3, [r7, #28]
 8008a2e:	e027      	b.n	8008a80 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d024      	beq.n	8008a80 <osMessageQueueGet+0xac>
 8008a36:	4b15      	ldr	r3, [pc, #84]	; (8008a8c <osMessageQueueGet+0xb8>)
 8008a38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a3c:	601a      	str	r2, [r3, #0]
 8008a3e:	f3bf 8f4f 	dsb	sy
 8008a42:	f3bf 8f6f 	isb	sy
 8008a46:	e01b      	b.n	8008a80 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008a48:	69bb      	ldr	r3, [r7, #24]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d002      	beq.n	8008a54 <osMessageQueueGet+0x80>
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d103      	bne.n	8008a5c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008a54:	f06f 0303 	mvn.w	r3, #3
 8008a58:	61fb      	str	r3, [r7, #28]
 8008a5a:	e011      	b.n	8008a80 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008a5c:	683a      	ldr	r2, [r7, #0]
 8008a5e:	68b9      	ldr	r1, [r7, #8]
 8008a60:	69b8      	ldr	r0, [r7, #24]
 8008a62:	f000 fbd5 	bl	8009210 <xQueueReceive>
 8008a66:	4603      	mov	r3, r0
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d009      	beq.n	8008a80 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d003      	beq.n	8008a7a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8008a72:	f06f 0301 	mvn.w	r3, #1
 8008a76:	61fb      	str	r3, [r7, #28]
 8008a78:	e002      	b.n	8008a80 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008a7a:	f06f 0302 	mvn.w	r3, #2
 8008a7e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008a80:	69fb      	ldr	r3, [r7, #28]
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3720      	adds	r7, #32
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	e000ed04 	.word	0xe000ed04

08008a90 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008a90:	b480      	push	{r7}
 8008a92:	b085      	sub	sp, #20
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	60f8      	str	r0, [r7, #12]
 8008a98:	60b9      	str	r1, [r7, #8]
 8008a9a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	4a07      	ldr	r2, [pc, #28]	; (8008abc <vApplicationGetIdleTaskMemory+0x2c>)
 8008aa0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	4a06      	ldr	r2, [pc, #24]	; (8008ac0 <vApplicationGetIdleTaskMemory+0x30>)
 8008aa6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2280      	movs	r2, #128	; 0x80
 8008aac:	601a      	str	r2, [r3, #0]
}
 8008aae:	bf00      	nop
 8008ab0:	3714      	adds	r7, #20
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr
 8008aba:	bf00      	nop
 8008abc:	20000238 	.word	0x20000238
 8008ac0:	20000294 	.word	0x20000294

08008ac4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008ac4:	b480      	push	{r7}
 8008ac6:	b085      	sub	sp, #20
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	60f8      	str	r0, [r7, #12]
 8008acc:	60b9      	str	r1, [r7, #8]
 8008ace:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	4a07      	ldr	r2, [pc, #28]	; (8008af0 <vApplicationGetTimerTaskMemory+0x2c>)
 8008ad4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	4a06      	ldr	r2, [pc, #24]	; (8008af4 <vApplicationGetTimerTaskMemory+0x30>)
 8008ada:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008ae2:	601a      	str	r2, [r3, #0]
}
 8008ae4:	bf00      	nop
 8008ae6:	3714      	adds	r7, #20
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr
 8008af0:	20000494 	.word	0x20000494
 8008af4:	200004f0 	.word	0x200004f0

08008af8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f103 0208 	add.w	r2, r3, #8
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b10:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f103 0208 	add.w	r2, r3, #8
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f103 0208 	add.w	r2, r3, #8
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008b2c:	bf00      	nop
 8008b2e:	370c      	adds	r7, #12
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr

08008b38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2200      	movs	r2, #0
 8008b44:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008b46:	bf00      	nop
 8008b48:	370c      	adds	r7, #12
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b50:	4770      	bx	lr

08008b52 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008b52:	b480      	push	{r7}
 8008b54:	b085      	sub	sp, #20
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	6078      	str	r0, [r7, #4]
 8008b5a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	68fa      	ldr	r2, [r7, #12]
 8008b66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	689a      	ldr	r2, [r3, #8]
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	683a      	ldr	r2, [r7, #0]
 8008b76:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	683a      	ldr	r2, [r7, #0]
 8008b7c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	1c5a      	adds	r2, r3, #1
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	601a      	str	r2, [r3, #0]
}
 8008b8e:	bf00      	nop
 8008b90:	3714      	adds	r7, #20
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr

08008b9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008b9a:	b480      	push	{r7}
 8008b9c:	b085      	sub	sp, #20
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
 8008ba2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bb0:	d103      	bne.n	8008bba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	691b      	ldr	r3, [r3, #16]
 8008bb6:	60fb      	str	r3, [r7, #12]
 8008bb8:	e00c      	b.n	8008bd4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	3308      	adds	r3, #8
 8008bbe:	60fb      	str	r3, [r7, #12]
 8008bc0:	e002      	b.n	8008bc8 <vListInsert+0x2e>
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	60fb      	str	r3, [r7, #12]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	68ba      	ldr	r2, [r7, #8]
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d2f6      	bcs.n	8008bc2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	685a      	ldr	r2, [r3, #4]
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	683a      	ldr	r2, [r7, #0]
 8008be2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	68fa      	ldr	r2, [r7, #12]
 8008be8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	683a      	ldr	r2, [r7, #0]
 8008bee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	687a      	ldr	r2, [r7, #4]
 8008bf4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	1c5a      	adds	r2, r3, #1
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	601a      	str	r2, [r3, #0]
}
 8008c00:	bf00      	nop
 8008c02:	3714      	adds	r7, #20
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr

08008c0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b085      	sub	sp, #20
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	691b      	ldr	r3, [r3, #16]
 8008c18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	6892      	ldr	r2, [r2, #8]
 8008c22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	687a      	ldr	r2, [r7, #4]
 8008c2a:	6852      	ldr	r2, [r2, #4]
 8008c2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	687a      	ldr	r2, [r7, #4]
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d103      	bne.n	8008c40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	689a      	ldr	r2, [r3, #8]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	1e5a      	subs	r2, r3, #1
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3714      	adds	r7, #20
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr

08008c60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b084      	sub	sp, #16
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d10a      	bne.n	8008c8a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c78:	f383 8811 	msr	BASEPRI, r3
 8008c7c:	f3bf 8f6f 	isb	sy
 8008c80:	f3bf 8f4f 	dsb	sy
 8008c84:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008c86:	bf00      	nop
 8008c88:	e7fe      	b.n	8008c88 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008c8a:	f002 f9c3 	bl	800b014 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681a      	ldr	r2, [r3, #0]
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c96:	68f9      	ldr	r1, [r7, #12]
 8008c98:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008c9a:	fb01 f303 	mul.w	r3, r1, r3
 8008c9e:	441a      	add	r2, r3
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681a      	ldr	r2, [r3, #0]
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681a      	ldr	r2, [r3, #0]
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cba:	3b01      	subs	r3, #1
 8008cbc:	68f9      	ldr	r1, [r7, #12]
 8008cbe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008cc0:	fb01 f303 	mul.w	r3, r1, r3
 8008cc4:	441a      	add	r2, r3
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	22ff      	movs	r2, #255	; 0xff
 8008cce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	22ff      	movs	r2, #255	; 0xff
 8008cd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d114      	bne.n	8008d0a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	691b      	ldr	r3, [r3, #16]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d01a      	beq.n	8008d1e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	3310      	adds	r3, #16
 8008cec:	4618      	mov	r0, r3
 8008cee:	f001 f9bd 	bl	800a06c <xTaskRemoveFromEventList>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d012      	beq.n	8008d1e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008cf8:	4b0c      	ldr	r3, [pc, #48]	; (8008d2c <xQueueGenericReset+0xcc>)
 8008cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cfe:	601a      	str	r2, [r3, #0]
 8008d00:	f3bf 8f4f 	dsb	sy
 8008d04:	f3bf 8f6f 	isb	sy
 8008d08:	e009      	b.n	8008d1e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	3310      	adds	r3, #16
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f7ff fef2 	bl	8008af8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	3324      	adds	r3, #36	; 0x24
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f7ff feed 	bl	8008af8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008d1e:	f002 f9a9 	bl	800b074 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008d22:	2301      	movs	r3, #1
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3710      	adds	r7, #16
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}
 8008d2c:	e000ed04 	.word	0xe000ed04

08008d30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b08e      	sub	sp, #56	; 0x38
 8008d34:	af02      	add	r7, sp, #8
 8008d36:	60f8      	str	r0, [r7, #12]
 8008d38:	60b9      	str	r1, [r7, #8]
 8008d3a:	607a      	str	r2, [r7, #4]
 8008d3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d10a      	bne.n	8008d5a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d48:	f383 8811 	msr	BASEPRI, r3
 8008d4c:	f3bf 8f6f 	isb	sy
 8008d50:	f3bf 8f4f 	dsb	sy
 8008d54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008d56:	bf00      	nop
 8008d58:	e7fe      	b.n	8008d58 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d10a      	bne.n	8008d76 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d64:	f383 8811 	msr	BASEPRI, r3
 8008d68:	f3bf 8f6f 	isb	sy
 8008d6c:	f3bf 8f4f 	dsb	sy
 8008d70:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008d72:	bf00      	nop
 8008d74:	e7fe      	b.n	8008d74 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d002      	beq.n	8008d82 <xQueueGenericCreateStatic+0x52>
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d001      	beq.n	8008d86 <xQueueGenericCreateStatic+0x56>
 8008d82:	2301      	movs	r3, #1
 8008d84:	e000      	b.n	8008d88 <xQueueGenericCreateStatic+0x58>
 8008d86:	2300      	movs	r3, #0
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d10a      	bne.n	8008da2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d90:	f383 8811 	msr	BASEPRI, r3
 8008d94:	f3bf 8f6f 	isb	sy
 8008d98:	f3bf 8f4f 	dsb	sy
 8008d9c:	623b      	str	r3, [r7, #32]
}
 8008d9e:	bf00      	nop
 8008da0:	e7fe      	b.n	8008da0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d102      	bne.n	8008dae <xQueueGenericCreateStatic+0x7e>
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d101      	bne.n	8008db2 <xQueueGenericCreateStatic+0x82>
 8008dae:	2301      	movs	r3, #1
 8008db0:	e000      	b.n	8008db4 <xQueueGenericCreateStatic+0x84>
 8008db2:	2300      	movs	r3, #0
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d10a      	bne.n	8008dce <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dbc:	f383 8811 	msr	BASEPRI, r3
 8008dc0:	f3bf 8f6f 	isb	sy
 8008dc4:	f3bf 8f4f 	dsb	sy
 8008dc8:	61fb      	str	r3, [r7, #28]
}
 8008dca:	bf00      	nop
 8008dcc:	e7fe      	b.n	8008dcc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008dce:	2350      	movs	r3, #80	; 0x50
 8008dd0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	2b50      	cmp	r3, #80	; 0x50
 8008dd6:	d00a      	beq.n	8008dee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ddc:	f383 8811 	msr	BASEPRI, r3
 8008de0:	f3bf 8f6f 	isb	sy
 8008de4:	f3bf 8f4f 	dsb	sy
 8008de8:	61bb      	str	r3, [r7, #24]
}
 8008dea:	bf00      	nop
 8008dec:	e7fe      	b.n	8008dec <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008dee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d00d      	beq.n	8008e16 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008e02:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e08:	9300      	str	r3, [sp, #0]
 8008e0a:	4613      	mov	r3, r2
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	68b9      	ldr	r1, [r7, #8]
 8008e10:	68f8      	ldr	r0, [r7, #12]
 8008e12:	f000 f83f 	bl	8008e94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3730      	adds	r7, #48	; 0x30
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b08a      	sub	sp, #40	; 0x28
 8008e24:	af02      	add	r7, sp, #8
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	4613      	mov	r3, r2
 8008e2c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d10a      	bne.n	8008e4a <xQueueGenericCreate+0x2a>
	__asm volatile
 8008e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e38:	f383 8811 	msr	BASEPRI, r3
 8008e3c:	f3bf 8f6f 	isb	sy
 8008e40:	f3bf 8f4f 	dsb	sy
 8008e44:	613b      	str	r3, [r7, #16]
}
 8008e46:	bf00      	nop
 8008e48:	e7fe      	b.n	8008e48 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	68ba      	ldr	r2, [r7, #8]
 8008e4e:	fb02 f303 	mul.w	r3, r2, r3
 8008e52:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008e54:	69fb      	ldr	r3, [r7, #28]
 8008e56:	3350      	adds	r3, #80	; 0x50
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f002 f9fd 	bl	800b258 <pvPortMalloc>
 8008e5e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008e60:	69bb      	ldr	r3, [r7, #24]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d011      	beq.n	8008e8a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008e66:	69bb      	ldr	r3, [r7, #24]
 8008e68:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	3350      	adds	r3, #80	; 0x50
 8008e6e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008e70:	69bb      	ldr	r3, [r7, #24]
 8008e72:	2200      	movs	r2, #0
 8008e74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008e78:	79fa      	ldrb	r2, [r7, #7]
 8008e7a:	69bb      	ldr	r3, [r7, #24]
 8008e7c:	9300      	str	r3, [sp, #0]
 8008e7e:	4613      	mov	r3, r2
 8008e80:	697a      	ldr	r2, [r7, #20]
 8008e82:	68b9      	ldr	r1, [r7, #8]
 8008e84:	68f8      	ldr	r0, [r7, #12]
 8008e86:	f000 f805 	bl	8008e94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008e8a:	69bb      	ldr	r3, [r7, #24]
	}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3720      	adds	r7, #32
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	60f8      	str	r0, [r7, #12]
 8008e9c:	60b9      	str	r1, [r7, #8]
 8008e9e:	607a      	str	r2, [r7, #4]
 8008ea0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d103      	bne.n	8008eb0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008ea8:	69bb      	ldr	r3, [r7, #24]
 8008eaa:	69ba      	ldr	r2, [r7, #24]
 8008eac:	601a      	str	r2, [r3, #0]
 8008eae:	e002      	b.n	8008eb6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008eb0:	69bb      	ldr	r3, [r7, #24]
 8008eb2:	687a      	ldr	r2, [r7, #4]
 8008eb4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008eb6:	69bb      	ldr	r3, [r7, #24]
 8008eb8:	68fa      	ldr	r2, [r7, #12]
 8008eba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	68ba      	ldr	r2, [r7, #8]
 8008ec0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008ec2:	2101      	movs	r1, #1
 8008ec4:	69b8      	ldr	r0, [r7, #24]
 8008ec6:	f7ff fecb 	bl	8008c60 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008eca:	69bb      	ldr	r3, [r7, #24]
 8008ecc:	78fa      	ldrb	r2, [r7, #3]
 8008ece:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008ed2:	bf00      	nop
 8008ed4:	3710      	adds	r7, #16
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}
	...

08008edc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b08e      	sub	sp, #56	; 0x38
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	60f8      	str	r0, [r7, #12]
 8008ee4:	60b9      	str	r1, [r7, #8]
 8008ee6:	607a      	str	r2, [r7, #4]
 8008ee8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008eea:	2300      	movs	r3, #0
 8008eec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d10a      	bne.n	8008f0e <xQueueGenericSend+0x32>
	__asm volatile
 8008ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008efc:	f383 8811 	msr	BASEPRI, r3
 8008f00:	f3bf 8f6f 	isb	sy
 8008f04:	f3bf 8f4f 	dsb	sy
 8008f08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008f0a:	bf00      	nop
 8008f0c:	e7fe      	b.n	8008f0c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d103      	bne.n	8008f1c <xQueueGenericSend+0x40>
 8008f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d101      	bne.n	8008f20 <xQueueGenericSend+0x44>
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	e000      	b.n	8008f22 <xQueueGenericSend+0x46>
 8008f20:	2300      	movs	r3, #0
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d10a      	bne.n	8008f3c <xQueueGenericSend+0x60>
	__asm volatile
 8008f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f2a:	f383 8811 	msr	BASEPRI, r3
 8008f2e:	f3bf 8f6f 	isb	sy
 8008f32:	f3bf 8f4f 	dsb	sy
 8008f36:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008f38:	bf00      	nop
 8008f3a:	e7fe      	b.n	8008f3a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	2b02      	cmp	r3, #2
 8008f40:	d103      	bne.n	8008f4a <xQueueGenericSend+0x6e>
 8008f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	d101      	bne.n	8008f4e <xQueueGenericSend+0x72>
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	e000      	b.n	8008f50 <xQueueGenericSend+0x74>
 8008f4e:	2300      	movs	r3, #0
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d10a      	bne.n	8008f6a <xQueueGenericSend+0x8e>
	__asm volatile
 8008f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f58:	f383 8811 	msr	BASEPRI, r3
 8008f5c:	f3bf 8f6f 	isb	sy
 8008f60:	f3bf 8f4f 	dsb	sy
 8008f64:	623b      	str	r3, [r7, #32]
}
 8008f66:	bf00      	nop
 8008f68:	e7fe      	b.n	8008f68 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f6a:	f001 fa3d 	bl	800a3e8 <xTaskGetSchedulerState>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d102      	bne.n	8008f7a <xQueueGenericSend+0x9e>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d101      	bne.n	8008f7e <xQueueGenericSend+0xa2>
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	e000      	b.n	8008f80 <xQueueGenericSend+0xa4>
 8008f7e:	2300      	movs	r3, #0
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d10a      	bne.n	8008f9a <xQueueGenericSend+0xbe>
	__asm volatile
 8008f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f88:	f383 8811 	msr	BASEPRI, r3
 8008f8c:	f3bf 8f6f 	isb	sy
 8008f90:	f3bf 8f4f 	dsb	sy
 8008f94:	61fb      	str	r3, [r7, #28]
}
 8008f96:	bf00      	nop
 8008f98:	e7fe      	b.n	8008f98 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f9a:	f002 f83b 	bl	800b014 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	d302      	bcc.n	8008fb0 <xQueueGenericSend+0xd4>
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	2b02      	cmp	r3, #2
 8008fae:	d129      	bne.n	8009004 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008fb0:	683a      	ldr	r2, [r7, #0]
 8008fb2:	68b9      	ldr	r1, [r7, #8]
 8008fb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008fb6:	f000 fa8b 	bl	80094d0 <prvCopyDataToQueue>
 8008fba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d010      	beq.n	8008fe6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc6:	3324      	adds	r3, #36	; 0x24
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f001 f84f 	bl	800a06c <xTaskRemoveFromEventList>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d013      	beq.n	8008ffc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008fd4:	4b3f      	ldr	r3, [pc, #252]	; (80090d4 <xQueueGenericSend+0x1f8>)
 8008fd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fda:	601a      	str	r2, [r3, #0]
 8008fdc:	f3bf 8f4f 	dsb	sy
 8008fe0:	f3bf 8f6f 	isb	sy
 8008fe4:	e00a      	b.n	8008ffc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d007      	beq.n	8008ffc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008fec:	4b39      	ldr	r3, [pc, #228]	; (80090d4 <xQueueGenericSend+0x1f8>)
 8008fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ff2:	601a      	str	r2, [r3, #0]
 8008ff4:	f3bf 8f4f 	dsb	sy
 8008ff8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008ffc:	f002 f83a 	bl	800b074 <vPortExitCritical>
				return pdPASS;
 8009000:	2301      	movs	r3, #1
 8009002:	e063      	b.n	80090cc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d103      	bne.n	8009012 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800900a:	f002 f833 	bl	800b074 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800900e:	2300      	movs	r3, #0
 8009010:	e05c      	b.n	80090cc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009014:	2b00      	cmp	r3, #0
 8009016:	d106      	bne.n	8009026 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009018:	f107 0314 	add.w	r3, r7, #20
 800901c:	4618      	mov	r0, r3
 800901e:	f001 f889 	bl	800a134 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009022:	2301      	movs	r3, #1
 8009024:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009026:	f002 f825 	bl	800b074 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800902a:	f000 fdfb 	bl	8009c24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800902e:	f001 fff1 	bl	800b014 <vPortEnterCritical>
 8009032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009034:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009038:	b25b      	sxtb	r3, r3
 800903a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800903e:	d103      	bne.n	8009048 <xQueueGenericSend+0x16c>
 8009040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009042:	2200      	movs	r2, #0
 8009044:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800904e:	b25b      	sxtb	r3, r3
 8009050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009054:	d103      	bne.n	800905e <xQueueGenericSend+0x182>
 8009056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009058:	2200      	movs	r2, #0
 800905a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800905e:	f002 f809 	bl	800b074 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009062:	1d3a      	adds	r2, r7, #4
 8009064:	f107 0314 	add.w	r3, r7, #20
 8009068:	4611      	mov	r1, r2
 800906a:	4618      	mov	r0, r3
 800906c:	f001 f878 	bl	800a160 <xTaskCheckForTimeOut>
 8009070:	4603      	mov	r3, r0
 8009072:	2b00      	cmp	r3, #0
 8009074:	d124      	bne.n	80090c0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009076:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009078:	f000 fb22 	bl	80096c0 <prvIsQueueFull>
 800907c:	4603      	mov	r3, r0
 800907e:	2b00      	cmp	r3, #0
 8009080:	d018      	beq.n	80090b4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009084:	3310      	adds	r3, #16
 8009086:	687a      	ldr	r2, [r7, #4]
 8009088:	4611      	mov	r1, r2
 800908a:	4618      	mov	r0, r3
 800908c:	f000 ff9e 	bl	8009fcc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009090:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009092:	f000 faad 	bl	80095f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009096:	f000 fdd3 	bl	8009c40 <xTaskResumeAll>
 800909a:	4603      	mov	r3, r0
 800909c:	2b00      	cmp	r3, #0
 800909e:	f47f af7c 	bne.w	8008f9a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80090a2:	4b0c      	ldr	r3, [pc, #48]	; (80090d4 <xQueueGenericSend+0x1f8>)
 80090a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090a8:	601a      	str	r2, [r3, #0]
 80090aa:	f3bf 8f4f 	dsb	sy
 80090ae:	f3bf 8f6f 	isb	sy
 80090b2:	e772      	b.n	8008f9a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80090b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090b6:	f000 fa9b 	bl	80095f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80090ba:	f000 fdc1 	bl	8009c40 <xTaskResumeAll>
 80090be:	e76c      	b.n	8008f9a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80090c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090c2:	f000 fa95 	bl	80095f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80090c6:	f000 fdbb 	bl	8009c40 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80090ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3738      	adds	r7, #56	; 0x38
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}
 80090d4:	e000ed04 	.word	0xe000ed04

080090d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b090      	sub	sp, #64	; 0x40
 80090dc:	af00      	add	r7, sp, #0
 80090de:	60f8      	str	r0, [r7, #12]
 80090e0:	60b9      	str	r1, [r7, #8]
 80090e2:	607a      	str	r2, [r7, #4]
 80090e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80090ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d10a      	bne.n	8009106 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80090f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f4:	f383 8811 	msr	BASEPRI, r3
 80090f8:	f3bf 8f6f 	isb	sy
 80090fc:	f3bf 8f4f 	dsb	sy
 8009100:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009102:	bf00      	nop
 8009104:	e7fe      	b.n	8009104 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d103      	bne.n	8009114 <xQueueGenericSendFromISR+0x3c>
 800910c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800910e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009110:	2b00      	cmp	r3, #0
 8009112:	d101      	bne.n	8009118 <xQueueGenericSendFromISR+0x40>
 8009114:	2301      	movs	r3, #1
 8009116:	e000      	b.n	800911a <xQueueGenericSendFromISR+0x42>
 8009118:	2300      	movs	r3, #0
 800911a:	2b00      	cmp	r3, #0
 800911c:	d10a      	bne.n	8009134 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800911e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009122:	f383 8811 	msr	BASEPRI, r3
 8009126:	f3bf 8f6f 	isb	sy
 800912a:	f3bf 8f4f 	dsb	sy
 800912e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009130:	bf00      	nop
 8009132:	e7fe      	b.n	8009132 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	2b02      	cmp	r3, #2
 8009138:	d103      	bne.n	8009142 <xQueueGenericSendFromISR+0x6a>
 800913a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800913c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800913e:	2b01      	cmp	r3, #1
 8009140:	d101      	bne.n	8009146 <xQueueGenericSendFromISR+0x6e>
 8009142:	2301      	movs	r3, #1
 8009144:	e000      	b.n	8009148 <xQueueGenericSendFromISR+0x70>
 8009146:	2300      	movs	r3, #0
 8009148:	2b00      	cmp	r3, #0
 800914a:	d10a      	bne.n	8009162 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800914c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009150:	f383 8811 	msr	BASEPRI, r3
 8009154:	f3bf 8f6f 	isb	sy
 8009158:	f3bf 8f4f 	dsb	sy
 800915c:	623b      	str	r3, [r7, #32]
}
 800915e:	bf00      	nop
 8009160:	e7fe      	b.n	8009160 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009162:	f002 f839 	bl	800b1d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009166:	f3ef 8211 	mrs	r2, BASEPRI
 800916a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800916e:	f383 8811 	msr	BASEPRI, r3
 8009172:	f3bf 8f6f 	isb	sy
 8009176:	f3bf 8f4f 	dsb	sy
 800917a:	61fa      	str	r2, [r7, #28]
 800917c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800917e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009180:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009184:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800918a:	429a      	cmp	r2, r3
 800918c:	d302      	bcc.n	8009194 <xQueueGenericSendFromISR+0xbc>
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	2b02      	cmp	r3, #2
 8009192:	d12f      	bne.n	80091f4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009196:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800919a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800919e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091a2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80091a4:	683a      	ldr	r2, [r7, #0]
 80091a6:	68b9      	ldr	r1, [r7, #8]
 80091a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80091aa:	f000 f991 	bl	80094d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80091ae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80091b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091b6:	d112      	bne.n	80091de <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80091b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d016      	beq.n	80091ee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80091c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c2:	3324      	adds	r3, #36	; 0x24
 80091c4:	4618      	mov	r0, r3
 80091c6:	f000 ff51 	bl	800a06c <xTaskRemoveFromEventList>
 80091ca:	4603      	mov	r3, r0
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d00e      	beq.n	80091ee <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d00b      	beq.n	80091ee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2201      	movs	r2, #1
 80091da:	601a      	str	r2, [r3, #0]
 80091dc:	e007      	b.n	80091ee <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80091de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80091e2:	3301      	adds	r3, #1
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	b25a      	sxtb	r2, r3
 80091e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80091ee:	2301      	movs	r3, #1
 80091f0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80091f2:	e001      	b.n	80091f8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80091f4:	2300      	movs	r3, #0
 80091f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091fa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009202:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009206:	4618      	mov	r0, r3
 8009208:	3740      	adds	r7, #64	; 0x40
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
	...

08009210 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b08c      	sub	sp, #48	; 0x30
 8009214:	af00      	add	r7, sp, #0
 8009216:	60f8      	str	r0, [r7, #12]
 8009218:	60b9      	str	r1, [r7, #8]
 800921a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800921c:	2300      	movs	r3, #0
 800921e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009226:	2b00      	cmp	r3, #0
 8009228:	d10a      	bne.n	8009240 <xQueueReceive+0x30>
	__asm volatile
 800922a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800922e:	f383 8811 	msr	BASEPRI, r3
 8009232:	f3bf 8f6f 	isb	sy
 8009236:	f3bf 8f4f 	dsb	sy
 800923a:	623b      	str	r3, [r7, #32]
}
 800923c:	bf00      	nop
 800923e:	e7fe      	b.n	800923e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d103      	bne.n	800924e <xQueueReceive+0x3e>
 8009246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800924a:	2b00      	cmp	r3, #0
 800924c:	d101      	bne.n	8009252 <xQueueReceive+0x42>
 800924e:	2301      	movs	r3, #1
 8009250:	e000      	b.n	8009254 <xQueueReceive+0x44>
 8009252:	2300      	movs	r3, #0
 8009254:	2b00      	cmp	r3, #0
 8009256:	d10a      	bne.n	800926e <xQueueReceive+0x5e>
	__asm volatile
 8009258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800925c:	f383 8811 	msr	BASEPRI, r3
 8009260:	f3bf 8f6f 	isb	sy
 8009264:	f3bf 8f4f 	dsb	sy
 8009268:	61fb      	str	r3, [r7, #28]
}
 800926a:	bf00      	nop
 800926c:	e7fe      	b.n	800926c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800926e:	f001 f8bb 	bl	800a3e8 <xTaskGetSchedulerState>
 8009272:	4603      	mov	r3, r0
 8009274:	2b00      	cmp	r3, #0
 8009276:	d102      	bne.n	800927e <xQueueReceive+0x6e>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d101      	bne.n	8009282 <xQueueReceive+0x72>
 800927e:	2301      	movs	r3, #1
 8009280:	e000      	b.n	8009284 <xQueueReceive+0x74>
 8009282:	2300      	movs	r3, #0
 8009284:	2b00      	cmp	r3, #0
 8009286:	d10a      	bne.n	800929e <xQueueReceive+0x8e>
	__asm volatile
 8009288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800928c:	f383 8811 	msr	BASEPRI, r3
 8009290:	f3bf 8f6f 	isb	sy
 8009294:	f3bf 8f4f 	dsb	sy
 8009298:	61bb      	str	r3, [r7, #24]
}
 800929a:	bf00      	nop
 800929c:	e7fe      	b.n	800929c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800929e:	f001 feb9 	bl	800b014 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80092a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092a6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80092a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d01f      	beq.n	80092ee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80092ae:	68b9      	ldr	r1, [r7, #8]
 80092b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092b2:	f000 f977 	bl	80095a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80092b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b8:	1e5a      	subs	r2, r3, #1
 80092ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092bc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c0:	691b      	ldr	r3, [r3, #16]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d00f      	beq.n	80092e6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80092c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c8:	3310      	adds	r3, #16
 80092ca:	4618      	mov	r0, r3
 80092cc:	f000 fece 	bl	800a06c <xTaskRemoveFromEventList>
 80092d0:	4603      	mov	r3, r0
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d007      	beq.n	80092e6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80092d6:	4b3d      	ldr	r3, [pc, #244]	; (80093cc <xQueueReceive+0x1bc>)
 80092d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092dc:	601a      	str	r2, [r3, #0]
 80092de:	f3bf 8f4f 	dsb	sy
 80092e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80092e6:	f001 fec5 	bl	800b074 <vPortExitCritical>
				return pdPASS;
 80092ea:	2301      	movs	r3, #1
 80092ec:	e069      	b.n	80093c2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d103      	bne.n	80092fc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80092f4:	f001 febe 	bl	800b074 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80092f8:	2300      	movs	r3, #0
 80092fa:	e062      	b.n	80093c2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80092fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d106      	bne.n	8009310 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009302:	f107 0310 	add.w	r3, r7, #16
 8009306:	4618      	mov	r0, r3
 8009308:	f000 ff14 	bl	800a134 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800930c:	2301      	movs	r3, #1
 800930e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009310:	f001 feb0 	bl	800b074 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009314:	f000 fc86 	bl	8009c24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009318:	f001 fe7c 	bl	800b014 <vPortEnterCritical>
 800931c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800931e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009322:	b25b      	sxtb	r3, r3
 8009324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009328:	d103      	bne.n	8009332 <xQueueReceive+0x122>
 800932a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800932c:	2200      	movs	r2, #0
 800932e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009334:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009338:	b25b      	sxtb	r3, r3
 800933a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800933e:	d103      	bne.n	8009348 <xQueueReceive+0x138>
 8009340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009342:	2200      	movs	r2, #0
 8009344:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009348:	f001 fe94 	bl	800b074 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800934c:	1d3a      	adds	r2, r7, #4
 800934e:	f107 0310 	add.w	r3, r7, #16
 8009352:	4611      	mov	r1, r2
 8009354:	4618      	mov	r0, r3
 8009356:	f000 ff03 	bl	800a160 <xTaskCheckForTimeOut>
 800935a:	4603      	mov	r3, r0
 800935c:	2b00      	cmp	r3, #0
 800935e:	d123      	bne.n	80093a8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009360:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009362:	f000 f997 	bl	8009694 <prvIsQueueEmpty>
 8009366:	4603      	mov	r3, r0
 8009368:	2b00      	cmp	r3, #0
 800936a:	d017      	beq.n	800939c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800936c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800936e:	3324      	adds	r3, #36	; 0x24
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	4611      	mov	r1, r2
 8009374:	4618      	mov	r0, r3
 8009376:	f000 fe29 	bl	8009fcc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800937a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800937c:	f000 f938 	bl	80095f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009380:	f000 fc5e 	bl	8009c40 <xTaskResumeAll>
 8009384:	4603      	mov	r3, r0
 8009386:	2b00      	cmp	r3, #0
 8009388:	d189      	bne.n	800929e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800938a:	4b10      	ldr	r3, [pc, #64]	; (80093cc <xQueueReceive+0x1bc>)
 800938c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009390:	601a      	str	r2, [r3, #0]
 8009392:	f3bf 8f4f 	dsb	sy
 8009396:	f3bf 8f6f 	isb	sy
 800939a:	e780      	b.n	800929e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800939c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800939e:	f000 f927 	bl	80095f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80093a2:	f000 fc4d 	bl	8009c40 <xTaskResumeAll>
 80093a6:	e77a      	b.n	800929e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80093a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093aa:	f000 f921 	bl	80095f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80093ae:	f000 fc47 	bl	8009c40 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80093b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093b4:	f000 f96e 	bl	8009694 <prvIsQueueEmpty>
 80093b8:	4603      	mov	r3, r0
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	f43f af6f 	beq.w	800929e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80093c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3730      	adds	r7, #48	; 0x30
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	e000ed04 	.word	0xe000ed04

080093d0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b08e      	sub	sp, #56	; 0x38
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	60f8      	str	r0, [r7, #12]
 80093d8:	60b9      	str	r1, [r7, #8]
 80093da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80093e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d10a      	bne.n	80093fc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80093e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ea:	f383 8811 	msr	BASEPRI, r3
 80093ee:	f3bf 8f6f 	isb	sy
 80093f2:	f3bf 8f4f 	dsb	sy
 80093f6:	623b      	str	r3, [r7, #32]
}
 80093f8:	bf00      	nop
 80093fa:	e7fe      	b.n	80093fa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d103      	bne.n	800940a <xQueueReceiveFromISR+0x3a>
 8009402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009406:	2b00      	cmp	r3, #0
 8009408:	d101      	bne.n	800940e <xQueueReceiveFromISR+0x3e>
 800940a:	2301      	movs	r3, #1
 800940c:	e000      	b.n	8009410 <xQueueReceiveFromISR+0x40>
 800940e:	2300      	movs	r3, #0
 8009410:	2b00      	cmp	r3, #0
 8009412:	d10a      	bne.n	800942a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009418:	f383 8811 	msr	BASEPRI, r3
 800941c:	f3bf 8f6f 	isb	sy
 8009420:	f3bf 8f4f 	dsb	sy
 8009424:	61fb      	str	r3, [r7, #28]
}
 8009426:	bf00      	nop
 8009428:	e7fe      	b.n	8009428 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800942a:	f001 fed5 	bl	800b1d8 <vPortValidateInterruptPriority>
	__asm volatile
 800942e:	f3ef 8211 	mrs	r2, BASEPRI
 8009432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009436:	f383 8811 	msr	BASEPRI, r3
 800943a:	f3bf 8f6f 	isb	sy
 800943e:	f3bf 8f4f 	dsb	sy
 8009442:	61ba      	str	r2, [r7, #24]
 8009444:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009446:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009448:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800944a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800944c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800944e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009452:	2b00      	cmp	r3, #0
 8009454:	d02f      	beq.n	80094b6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009458:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800945c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009460:	68b9      	ldr	r1, [r7, #8]
 8009462:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009464:	f000 f89e 	bl	80095a4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800946a:	1e5a      	subs	r2, r3, #1
 800946c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800946e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009470:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009478:	d112      	bne.n	80094a0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800947a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800947c:	691b      	ldr	r3, [r3, #16]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d016      	beq.n	80094b0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009484:	3310      	adds	r3, #16
 8009486:	4618      	mov	r0, r3
 8009488:	f000 fdf0 	bl	800a06c <xTaskRemoveFromEventList>
 800948c:	4603      	mov	r3, r0
 800948e:	2b00      	cmp	r3, #0
 8009490:	d00e      	beq.n	80094b0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d00b      	beq.n	80094b0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2201      	movs	r2, #1
 800949c:	601a      	str	r2, [r3, #0]
 800949e:	e007      	b.n	80094b0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80094a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094a4:	3301      	adds	r3, #1
 80094a6:	b2db      	uxtb	r3, r3
 80094a8:	b25a      	sxtb	r2, r3
 80094aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80094b0:	2301      	movs	r3, #1
 80094b2:	637b      	str	r3, [r7, #52]	; 0x34
 80094b4:	e001      	b.n	80094ba <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80094b6:	2300      	movs	r3, #0
 80094b8:	637b      	str	r3, [r7, #52]	; 0x34
 80094ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094bc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	f383 8811 	msr	BASEPRI, r3
}
 80094c4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80094c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3738      	adds	r7, #56	; 0x38
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}

080094d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b086      	sub	sp, #24
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	60f8      	str	r0, [r7, #12]
 80094d8:	60b9      	str	r1, [r7, #8]
 80094da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80094dc:	2300      	movs	r3, #0
 80094de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d10d      	bne.n	800950a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d14d      	bne.n	8009592 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	689b      	ldr	r3, [r3, #8]
 80094fa:	4618      	mov	r0, r3
 80094fc:	f000 ff92 	bl	800a424 <xTaskPriorityDisinherit>
 8009500:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2200      	movs	r2, #0
 8009506:	609a      	str	r2, [r3, #8]
 8009508:	e043      	b.n	8009592 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d119      	bne.n	8009544 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	6858      	ldr	r0, [r3, #4]
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009518:	461a      	mov	r2, r3
 800951a:	68b9      	ldr	r1, [r7, #8]
 800951c:	f002 fbc2 	bl	800bca4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	685a      	ldr	r2, [r3, #4]
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009528:	441a      	add	r2, r3
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	685a      	ldr	r2, [r3, #4]
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	689b      	ldr	r3, [r3, #8]
 8009536:	429a      	cmp	r2, r3
 8009538:	d32b      	bcc.n	8009592 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681a      	ldr	r2, [r3, #0]
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	605a      	str	r2, [r3, #4]
 8009542:	e026      	b.n	8009592 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	68d8      	ldr	r0, [r3, #12]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800954c:	461a      	mov	r2, r3
 800954e:	68b9      	ldr	r1, [r7, #8]
 8009550:	f002 fba8 	bl	800bca4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	68da      	ldr	r2, [r3, #12]
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800955c:	425b      	negs	r3, r3
 800955e:	441a      	add	r2, r3
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	68da      	ldr	r2, [r3, #12]
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	429a      	cmp	r2, r3
 800956e:	d207      	bcs.n	8009580 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	689a      	ldr	r2, [r3, #8]
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009578:	425b      	negs	r3, r3
 800957a:	441a      	add	r2, r3
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2b02      	cmp	r3, #2
 8009584:	d105      	bne.n	8009592 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d002      	beq.n	8009592 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	3b01      	subs	r3, #1
 8009590:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	1c5a      	adds	r2, r3, #1
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800959a:	697b      	ldr	r3, [r7, #20]
}
 800959c:	4618      	mov	r0, r3
 800959e:	3718      	adds	r7, #24
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b082      	sub	sp, #8
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d018      	beq.n	80095e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	68da      	ldr	r2, [r3, #12]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095be:	441a      	add	r2, r3
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	68da      	ldr	r2, [r3, #12]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d303      	bcc.n	80095d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681a      	ldr	r2, [r3, #0]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	68d9      	ldr	r1, [r3, #12]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095e0:	461a      	mov	r2, r3
 80095e2:	6838      	ldr	r0, [r7, #0]
 80095e4:	f002 fb5e 	bl	800bca4 <memcpy>
	}
}
 80095e8:	bf00      	nop
 80095ea:	3708      	adds	r7, #8
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b084      	sub	sp, #16
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80095f8:	f001 fd0c 	bl	800b014 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009602:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009604:	e011      	b.n	800962a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800960a:	2b00      	cmp	r3, #0
 800960c:	d012      	beq.n	8009634 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	3324      	adds	r3, #36	; 0x24
 8009612:	4618      	mov	r0, r3
 8009614:	f000 fd2a 	bl	800a06c <xTaskRemoveFromEventList>
 8009618:	4603      	mov	r3, r0
 800961a:	2b00      	cmp	r3, #0
 800961c:	d001      	beq.n	8009622 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800961e:	f000 fe01 	bl	800a224 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009622:	7bfb      	ldrb	r3, [r7, #15]
 8009624:	3b01      	subs	r3, #1
 8009626:	b2db      	uxtb	r3, r3
 8009628:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800962a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800962e:	2b00      	cmp	r3, #0
 8009630:	dce9      	bgt.n	8009606 <prvUnlockQueue+0x16>
 8009632:	e000      	b.n	8009636 <prvUnlockQueue+0x46>
					break;
 8009634:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	22ff      	movs	r2, #255	; 0xff
 800963a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800963e:	f001 fd19 	bl	800b074 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009642:	f001 fce7 	bl	800b014 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800964c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800964e:	e011      	b.n	8009674 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	691b      	ldr	r3, [r3, #16]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d012      	beq.n	800967e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	3310      	adds	r3, #16
 800965c:	4618      	mov	r0, r3
 800965e:	f000 fd05 	bl	800a06c <xTaskRemoveFromEventList>
 8009662:	4603      	mov	r3, r0
 8009664:	2b00      	cmp	r3, #0
 8009666:	d001      	beq.n	800966c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009668:	f000 fddc 	bl	800a224 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800966c:	7bbb      	ldrb	r3, [r7, #14]
 800966e:	3b01      	subs	r3, #1
 8009670:	b2db      	uxtb	r3, r3
 8009672:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009674:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009678:	2b00      	cmp	r3, #0
 800967a:	dce9      	bgt.n	8009650 <prvUnlockQueue+0x60>
 800967c:	e000      	b.n	8009680 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800967e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	22ff      	movs	r2, #255	; 0xff
 8009684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009688:	f001 fcf4 	bl	800b074 <vPortExitCritical>
}
 800968c:	bf00      	nop
 800968e:	3710      	adds	r7, #16
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b084      	sub	sp, #16
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800969c:	f001 fcba 	bl	800b014 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d102      	bne.n	80096ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80096a8:	2301      	movs	r3, #1
 80096aa:	60fb      	str	r3, [r7, #12]
 80096ac:	e001      	b.n	80096b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80096ae:	2300      	movs	r3, #0
 80096b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80096b2:	f001 fcdf 	bl	800b074 <vPortExitCritical>

	return xReturn;
 80096b6:	68fb      	ldr	r3, [r7, #12]
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3710      	adds	r7, #16
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b084      	sub	sp, #16
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80096c8:	f001 fca4 	bl	800b014 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d102      	bne.n	80096de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80096d8:	2301      	movs	r3, #1
 80096da:	60fb      	str	r3, [r7, #12]
 80096dc:	e001      	b.n	80096e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80096de:	2300      	movs	r3, #0
 80096e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80096e2:	f001 fcc7 	bl	800b074 <vPortExitCritical>

	return xReturn;
 80096e6:	68fb      	ldr	r3, [r7, #12]
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	3710      	adds	r7, #16
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80096f0:	b480      	push	{r7}
 80096f2:	b085      	sub	sp, #20
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80096fa:	2300      	movs	r3, #0
 80096fc:	60fb      	str	r3, [r7, #12]
 80096fe:	e014      	b.n	800972a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009700:	4a0f      	ldr	r2, [pc, #60]	; (8009740 <vQueueAddToRegistry+0x50>)
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d10b      	bne.n	8009724 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800970c:	490c      	ldr	r1, [pc, #48]	; (8009740 <vQueueAddToRegistry+0x50>)
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	683a      	ldr	r2, [r7, #0]
 8009712:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009716:	4a0a      	ldr	r2, [pc, #40]	; (8009740 <vQueueAddToRegistry+0x50>)
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	00db      	lsls	r3, r3, #3
 800971c:	4413      	add	r3, r2
 800971e:	687a      	ldr	r2, [r7, #4]
 8009720:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009722:	e006      	b.n	8009732 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	3301      	adds	r3, #1
 8009728:	60fb      	str	r3, [r7, #12]
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2b07      	cmp	r3, #7
 800972e:	d9e7      	bls.n	8009700 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009730:	bf00      	nop
 8009732:	bf00      	nop
 8009734:	3714      	adds	r7, #20
 8009736:	46bd      	mov	sp, r7
 8009738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973c:	4770      	bx	lr
 800973e:	bf00      	nop
 8009740:	200008f0 	.word	0x200008f0

08009744 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009744:	b580      	push	{r7, lr}
 8009746:	b086      	sub	sp, #24
 8009748:	af00      	add	r7, sp, #0
 800974a:	60f8      	str	r0, [r7, #12]
 800974c:	60b9      	str	r1, [r7, #8]
 800974e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009754:	f001 fc5e 	bl	800b014 <vPortEnterCritical>
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800975e:	b25b      	sxtb	r3, r3
 8009760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009764:	d103      	bne.n	800976e <vQueueWaitForMessageRestricted+0x2a>
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	2200      	movs	r2, #0
 800976a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009774:	b25b      	sxtb	r3, r3
 8009776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800977a:	d103      	bne.n	8009784 <vQueueWaitForMessageRestricted+0x40>
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	2200      	movs	r2, #0
 8009780:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009784:	f001 fc76 	bl	800b074 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800978c:	2b00      	cmp	r3, #0
 800978e:	d106      	bne.n	800979e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	3324      	adds	r3, #36	; 0x24
 8009794:	687a      	ldr	r2, [r7, #4]
 8009796:	68b9      	ldr	r1, [r7, #8]
 8009798:	4618      	mov	r0, r3
 800979a:	f000 fc3b 	bl	800a014 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800979e:	6978      	ldr	r0, [r7, #20]
 80097a0:	f7ff ff26 	bl	80095f0 <prvUnlockQueue>
	}
 80097a4:	bf00      	nop
 80097a6:	3718      	adds	r7, #24
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}

080097ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b08e      	sub	sp, #56	; 0x38
 80097b0:	af04      	add	r7, sp, #16
 80097b2:	60f8      	str	r0, [r7, #12]
 80097b4:	60b9      	str	r1, [r7, #8]
 80097b6:	607a      	str	r2, [r7, #4]
 80097b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80097ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d10a      	bne.n	80097d6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80097c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c4:	f383 8811 	msr	BASEPRI, r3
 80097c8:	f3bf 8f6f 	isb	sy
 80097cc:	f3bf 8f4f 	dsb	sy
 80097d0:	623b      	str	r3, [r7, #32]
}
 80097d2:	bf00      	nop
 80097d4:	e7fe      	b.n	80097d4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80097d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d10a      	bne.n	80097f2 <xTaskCreateStatic+0x46>
	__asm volatile
 80097dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e0:	f383 8811 	msr	BASEPRI, r3
 80097e4:	f3bf 8f6f 	isb	sy
 80097e8:	f3bf 8f4f 	dsb	sy
 80097ec:	61fb      	str	r3, [r7, #28]
}
 80097ee:	bf00      	nop
 80097f0:	e7fe      	b.n	80097f0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80097f2:	235c      	movs	r3, #92	; 0x5c
 80097f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	2b5c      	cmp	r3, #92	; 0x5c
 80097fa:	d00a      	beq.n	8009812 <xTaskCreateStatic+0x66>
	__asm volatile
 80097fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009800:	f383 8811 	msr	BASEPRI, r3
 8009804:	f3bf 8f6f 	isb	sy
 8009808:	f3bf 8f4f 	dsb	sy
 800980c:	61bb      	str	r3, [r7, #24]
}
 800980e:	bf00      	nop
 8009810:	e7fe      	b.n	8009810 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009812:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009816:	2b00      	cmp	r3, #0
 8009818:	d01e      	beq.n	8009858 <xTaskCreateStatic+0xac>
 800981a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800981c:	2b00      	cmp	r3, #0
 800981e:	d01b      	beq.n	8009858 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009822:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009826:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009828:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800982a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982c:	2202      	movs	r2, #2
 800982e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009832:	2300      	movs	r3, #0
 8009834:	9303      	str	r3, [sp, #12]
 8009836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009838:	9302      	str	r3, [sp, #8]
 800983a:	f107 0314 	add.w	r3, r7, #20
 800983e:	9301      	str	r3, [sp, #4]
 8009840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009842:	9300      	str	r3, [sp, #0]
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	68b9      	ldr	r1, [r7, #8]
 800984a:	68f8      	ldr	r0, [r7, #12]
 800984c:	f000 f850 	bl	80098f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009850:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009852:	f000 f8dd 	bl	8009a10 <prvAddNewTaskToReadyList>
 8009856:	e001      	b.n	800985c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009858:	2300      	movs	r3, #0
 800985a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800985c:	697b      	ldr	r3, [r7, #20]
	}
 800985e:	4618      	mov	r0, r3
 8009860:	3728      	adds	r7, #40	; 0x28
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}

08009866 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009866:	b580      	push	{r7, lr}
 8009868:	b08c      	sub	sp, #48	; 0x30
 800986a:	af04      	add	r7, sp, #16
 800986c:	60f8      	str	r0, [r7, #12]
 800986e:	60b9      	str	r1, [r7, #8]
 8009870:	603b      	str	r3, [r7, #0]
 8009872:	4613      	mov	r3, r2
 8009874:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009876:	88fb      	ldrh	r3, [r7, #6]
 8009878:	009b      	lsls	r3, r3, #2
 800987a:	4618      	mov	r0, r3
 800987c:	f001 fcec 	bl	800b258 <pvPortMalloc>
 8009880:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d00e      	beq.n	80098a6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009888:	205c      	movs	r0, #92	; 0x5c
 800988a:	f001 fce5 	bl	800b258 <pvPortMalloc>
 800988e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009890:	69fb      	ldr	r3, [r7, #28]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d003      	beq.n	800989e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009896:	69fb      	ldr	r3, [r7, #28]
 8009898:	697a      	ldr	r2, [r7, #20]
 800989a:	631a      	str	r2, [r3, #48]	; 0x30
 800989c:	e005      	b.n	80098aa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800989e:	6978      	ldr	r0, [r7, #20]
 80098a0:	f001 fda6 	bl	800b3f0 <vPortFree>
 80098a4:	e001      	b.n	80098aa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80098a6:	2300      	movs	r3, #0
 80098a8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80098aa:	69fb      	ldr	r3, [r7, #28]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d017      	beq.n	80098e0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80098b0:	69fb      	ldr	r3, [r7, #28]
 80098b2:	2200      	movs	r2, #0
 80098b4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80098b8:	88fa      	ldrh	r2, [r7, #6]
 80098ba:	2300      	movs	r3, #0
 80098bc:	9303      	str	r3, [sp, #12]
 80098be:	69fb      	ldr	r3, [r7, #28]
 80098c0:	9302      	str	r3, [sp, #8]
 80098c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098c4:	9301      	str	r3, [sp, #4]
 80098c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c8:	9300      	str	r3, [sp, #0]
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	68b9      	ldr	r1, [r7, #8]
 80098ce:	68f8      	ldr	r0, [r7, #12]
 80098d0:	f000 f80e 	bl	80098f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80098d4:	69f8      	ldr	r0, [r7, #28]
 80098d6:	f000 f89b 	bl	8009a10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80098da:	2301      	movs	r3, #1
 80098dc:	61bb      	str	r3, [r7, #24]
 80098de:	e002      	b.n	80098e6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80098e0:	f04f 33ff 	mov.w	r3, #4294967295
 80098e4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80098e6:	69bb      	ldr	r3, [r7, #24]
	}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3720      	adds	r7, #32
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b088      	sub	sp, #32
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	60f8      	str	r0, [r7, #12]
 80098f8:	60b9      	str	r1, [r7, #8]
 80098fa:	607a      	str	r2, [r7, #4]
 80098fc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80098fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009900:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	461a      	mov	r2, r3
 8009908:	21a5      	movs	r1, #165	; 0xa5
 800990a:	f002 f9d9 	bl	800bcc0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800990e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009910:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009918:	3b01      	subs	r3, #1
 800991a:	009b      	lsls	r3, r3, #2
 800991c:	4413      	add	r3, r2
 800991e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009920:	69bb      	ldr	r3, [r7, #24]
 8009922:	f023 0307 	bic.w	r3, r3, #7
 8009926:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009928:	69bb      	ldr	r3, [r7, #24]
 800992a:	f003 0307 	and.w	r3, r3, #7
 800992e:	2b00      	cmp	r3, #0
 8009930:	d00a      	beq.n	8009948 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009936:	f383 8811 	msr	BASEPRI, r3
 800993a:	f3bf 8f6f 	isb	sy
 800993e:	f3bf 8f4f 	dsb	sy
 8009942:	617b      	str	r3, [r7, #20]
}
 8009944:	bf00      	nop
 8009946:	e7fe      	b.n	8009946 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d01f      	beq.n	800998e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800994e:	2300      	movs	r3, #0
 8009950:	61fb      	str	r3, [r7, #28]
 8009952:	e012      	b.n	800997a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009954:	68ba      	ldr	r2, [r7, #8]
 8009956:	69fb      	ldr	r3, [r7, #28]
 8009958:	4413      	add	r3, r2
 800995a:	7819      	ldrb	r1, [r3, #0]
 800995c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800995e:	69fb      	ldr	r3, [r7, #28]
 8009960:	4413      	add	r3, r2
 8009962:	3334      	adds	r3, #52	; 0x34
 8009964:	460a      	mov	r2, r1
 8009966:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009968:	68ba      	ldr	r2, [r7, #8]
 800996a:	69fb      	ldr	r3, [r7, #28]
 800996c:	4413      	add	r3, r2
 800996e:	781b      	ldrb	r3, [r3, #0]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d006      	beq.n	8009982 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009974:	69fb      	ldr	r3, [r7, #28]
 8009976:	3301      	adds	r3, #1
 8009978:	61fb      	str	r3, [r7, #28]
 800997a:	69fb      	ldr	r3, [r7, #28]
 800997c:	2b0f      	cmp	r3, #15
 800997e:	d9e9      	bls.n	8009954 <prvInitialiseNewTask+0x64>
 8009980:	e000      	b.n	8009984 <prvInitialiseNewTask+0x94>
			{
				break;
 8009982:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009986:	2200      	movs	r2, #0
 8009988:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800998c:	e003      	b.n	8009996 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800998e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009990:	2200      	movs	r2, #0
 8009992:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009998:	2b37      	cmp	r3, #55	; 0x37
 800999a:	d901      	bls.n	80099a0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800999c:	2337      	movs	r3, #55	; 0x37
 800999e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80099a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80099a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099aa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80099ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ae:	2200      	movs	r2, #0
 80099b0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80099b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b4:	3304      	adds	r3, #4
 80099b6:	4618      	mov	r0, r3
 80099b8:	f7ff f8be 	bl	8008b38 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80099bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099be:	3318      	adds	r3, #24
 80099c0:	4618      	mov	r0, r3
 80099c2:	f7ff f8b9 	bl	8008b38 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80099c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80099d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80099d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80099dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099de:	2200      	movs	r2, #0
 80099e0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80099e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e4:	2200      	movs	r2, #0
 80099e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80099ea:	683a      	ldr	r2, [r7, #0]
 80099ec:	68f9      	ldr	r1, [r7, #12]
 80099ee:	69b8      	ldr	r0, [r7, #24]
 80099f0:	f001 f9e2 	bl	800adb8 <pxPortInitialiseStack>
 80099f4:	4602      	mov	r2, r0
 80099f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80099fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d002      	beq.n	8009a06 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a06:	bf00      	nop
 8009a08:	3720      	adds	r7, #32
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}
	...

08009a10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b082      	sub	sp, #8
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009a18:	f001 fafc 	bl	800b014 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009a1c:	4b2d      	ldr	r3, [pc, #180]	; (8009ad4 <prvAddNewTaskToReadyList+0xc4>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	3301      	adds	r3, #1
 8009a22:	4a2c      	ldr	r2, [pc, #176]	; (8009ad4 <prvAddNewTaskToReadyList+0xc4>)
 8009a24:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009a26:	4b2c      	ldr	r3, [pc, #176]	; (8009ad8 <prvAddNewTaskToReadyList+0xc8>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d109      	bne.n	8009a42 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009a2e:	4a2a      	ldr	r2, [pc, #168]	; (8009ad8 <prvAddNewTaskToReadyList+0xc8>)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009a34:	4b27      	ldr	r3, [pc, #156]	; (8009ad4 <prvAddNewTaskToReadyList+0xc4>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d110      	bne.n	8009a5e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009a3c:	f000 fc16 	bl	800a26c <prvInitialiseTaskLists>
 8009a40:	e00d      	b.n	8009a5e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009a42:	4b26      	ldr	r3, [pc, #152]	; (8009adc <prvAddNewTaskToReadyList+0xcc>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d109      	bne.n	8009a5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009a4a:	4b23      	ldr	r3, [pc, #140]	; (8009ad8 <prvAddNewTaskToReadyList+0xc8>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d802      	bhi.n	8009a5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009a58:	4a1f      	ldr	r2, [pc, #124]	; (8009ad8 <prvAddNewTaskToReadyList+0xc8>)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009a5e:	4b20      	ldr	r3, [pc, #128]	; (8009ae0 <prvAddNewTaskToReadyList+0xd0>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	3301      	adds	r3, #1
 8009a64:	4a1e      	ldr	r2, [pc, #120]	; (8009ae0 <prvAddNewTaskToReadyList+0xd0>)
 8009a66:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009a68:	4b1d      	ldr	r3, [pc, #116]	; (8009ae0 <prvAddNewTaskToReadyList+0xd0>)
 8009a6a:	681a      	ldr	r2, [r3, #0]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a74:	4b1b      	ldr	r3, [pc, #108]	; (8009ae4 <prvAddNewTaskToReadyList+0xd4>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	429a      	cmp	r2, r3
 8009a7a:	d903      	bls.n	8009a84 <prvAddNewTaskToReadyList+0x74>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a80:	4a18      	ldr	r2, [pc, #96]	; (8009ae4 <prvAddNewTaskToReadyList+0xd4>)
 8009a82:	6013      	str	r3, [r2, #0]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a88:	4613      	mov	r3, r2
 8009a8a:	009b      	lsls	r3, r3, #2
 8009a8c:	4413      	add	r3, r2
 8009a8e:	009b      	lsls	r3, r3, #2
 8009a90:	4a15      	ldr	r2, [pc, #84]	; (8009ae8 <prvAddNewTaskToReadyList+0xd8>)
 8009a92:	441a      	add	r2, r3
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	3304      	adds	r3, #4
 8009a98:	4619      	mov	r1, r3
 8009a9a:	4610      	mov	r0, r2
 8009a9c:	f7ff f859 	bl	8008b52 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009aa0:	f001 fae8 	bl	800b074 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009aa4:	4b0d      	ldr	r3, [pc, #52]	; (8009adc <prvAddNewTaskToReadyList+0xcc>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d00e      	beq.n	8009aca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009aac:	4b0a      	ldr	r3, [pc, #40]	; (8009ad8 <prvAddNewTaskToReadyList+0xc8>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	d207      	bcs.n	8009aca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009aba:	4b0c      	ldr	r3, [pc, #48]	; (8009aec <prvAddNewTaskToReadyList+0xdc>)
 8009abc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ac0:	601a      	str	r2, [r3, #0]
 8009ac2:	f3bf 8f4f 	dsb	sy
 8009ac6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009aca:	bf00      	nop
 8009acc:	3708      	adds	r7, #8
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop
 8009ad4:	20000e04 	.word	0x20000e04
 8009ad8:	20000930 	.word	0x20000930
 8009adc:	20000e10 	.word	0x20000e10
 8009ae0:	20000e20 	.word	0x20000e20
 8009ae4:	20000e0c 	.word	0x20000e0c
 8009ae8:	20000934 	.word	0x20000934
 8009aec:	e000ed04 	.word	0xe000ed04

08009af0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b084      	sub	sp, #16
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009af8:	2300      	movs	r3, #0
 8009afa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d017      	beq.n	8009b32 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009b02:	4b13      	ldr	r3, [pc, #76]	; (8009b50 <vTaskDelay+0x60>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d00a      	beq.n	8009b20 <vTaskDelay+0x30>
	__asm volatile
 8009b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b0e:	f383 8811 	msr	BASEPRI, r3
 8009b12:	f3bf 8f6f 	isb	sy
 8009b16:	f3bf 8f4f 	dsb	sy
 8009b1a:	60bb      	str	r3, [r7, #8]
}
 8009b1c:	bf00      	nop
 8009b1e:	e7fe      	b.n	8009b1e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009b20:	f000 f880 	bl	8009c24 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009b24:	2100      	movs	r1, #0
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 fcea 	bl	800a500 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009b2c:	f000 f888 	bl	8009c40 <xTaskResumeAll>
 8009b30:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d107      	bne.n	8009b48 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009b38:	4b06      	ldr	r3, [pc, #24]	; (8009b54 <vTaskDelay+0x64>)
 8009b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b3e:	601a      	str	r2, [r3, #0]
 8009b40:	f3bf 8f4f 	dsb	sy
 8009b44:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009b48:	bf00      	nop
 8009b4a:	3710      	adds	r7, #16
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}
 8009b50:	20000e2c 	.word	0x20000e2c
 8009b54:	e000ed04 	.word	0xe000ed04

08009b58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b08a      	sub	sp, #40	; 0x28
 8009b5c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009b62:	2300      	movs	r3, #0
 8009b64:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009b66:	463a      	mov	r2, r7
 8009b68:	1d39      	adds	r1, r7, #4
 8009b6a:	f107 0308 	add.w	r3, r7, #8
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f7fe ff8e 	bl	8008a90 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009b74:	6839      	ldr	r1, [r7, #0]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	68ba      	ldr	r2, [r7, #8]
 8009b7a:	9202      	str	r2, [sp, #8]
 8009b7c:	9301      	str	r3, [sp, #4]
 8009b7e:	2300      	movs	r3, #0
 8009b80:	9300      	str	r3, [sp, #0]
 8009b82:	2300      	movs	r3, #0
 8009b84:	460a      	mov	r2, r1
 8009b86:	4921      	ldr	r1, [pc, #132]	; (8009c0c <vTaskStartScheduler+0xb4>)
 8009b88:	4821      	ldr	r0, [pc, #132]	; (8009c10 <vTaskStartScheduler+0xb8>)
 8009b8a:	f7ff fe0f 	bl	80097ac <xTaskCreateStatic>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	4a20      	ldr	r2, [pc, #128]	; (8009c14 <vTaskStartScheduler+0xbc>)
 8009b92:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009b94:	4b1f      	ldr	r3, [pc, #124]	; (8009c14 <vTaskStartScheduler+0xbc>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d002      	beq.n	8009ba2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	617b      	str	r3, [r7, #20]
 8009ba0:	e001      	b.n	8009ba6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	d102      	bne.n	8009bb2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009bac:	f000 fcfc 	bl	800a5a8 <xTimerCreateTimerTask>
 8009bb0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	2b01      	cmp	r3, #1
 8009bb6:	d116      	bne.n	8009be6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8009bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bbc:	f383 8811 	msr	BASEPRI, r3
 8009bc0:	f3bf 8f6f 	isb	sy
 8009bc4:	f3bf 8f4f 	dsb	sy
 8009bc8:	613b      	str	r3, [r7, #16]
}
 8009bca:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009bcc:	4b12      	ldr	r3, [pc, #72]	; (8009c18 <vTaskStartScheduler+0xc0>)
 8009bce:	f04f 32ff 	mov.w	r2, #4294967295
 8009bd2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009bd4:	4b11      	ldr	r3, [pc, #68]	; (8009c1c <vTaskStartScheduler+0xc4>)
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009bda:	4b11      	ldr	r3, [pc, #68]	; (8009c20 <vTaskStartScheduler+0xc8>)
 8009bdc:	2200      	movs	r2, #0
 8009bde:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009be0:	f001 f976 	bl	800aed0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009be4:	e00e      	b.n	8009c04 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bec:	d10a      	bne.n	8009c04 <vTaskStartScheduler+0xac>
	__asm volatile
 8009bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf2:	f383 8811 	msr	BASEPRI, r3
 8009bf6:	f3bf 8f6f 	isb	sy
 8009bfa:	f3bf 8f4f 	dsb	sy
 8009bfe:	60fb      	str	r3, [r7, #12]
}
 8009c00:	bf00      	nop
 8009c02:	e7fe      	b.n	8009c02 <vTaskStartScheduler+0xaa>
}
 8009c04:	bf00      	nop
 8009c06:	3718      	adds	r7, #24
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}
 8009c0c:	0800c62c 	.word	0x0800c62c
 8009c10:	0800a23d 	.word	0x0800a23d
 8009c14:	20000e28 	.word	0x20000e28
 8009c18:	20000e24 	.word	0x20000e24
 8009c1c:	20000e10 	.word	0x20000e10
 8009c20:	20000e08 	.word	0x20000e08

08009c24 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009c24:	b480      	push	{r7}
 8009c26:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009c28:	4b04      	ldr	r3, [pc, #16]	; (8009c3c <vTaskSuspendAll+0x18>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	3301      	adds	r3, #1
 8009c2e:	4a03      	ldr	r2, [pc, #12]	; (8009c3c <vTaskSuspendAll+0x18>)
 8009c30:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009c32:	bf00      	nop
 8009c34:	46bd      	mov	sp, r7
 8009c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3a:	4770      	bx	lr
 8009c3c:	20000e2c 	.word	0x20000e2c

08009c40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b084      	sub	sp, #16
 8009c44:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009c46:	2300      	movs	r3, #0
 8009c48:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009c4e:	4b42      	ldr	r3, [pc, #264]	; (8009d58 <xTaskResumeAll+0x118>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d10a      	bne.n	8009c6c <xTaskResumeAll+0x2c>
	__asm volatile
 8009c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c5a:	f383 8811 	msr	BASEPRI, r3
 8009c5e:	f3bf 8f6f 	isb	sy
 8009c62:	f3bf 8f4f 	dsb	sy
 8009c66:	603b      	str	r3, [r7, #0]
}
 8009c68:	bf00      	nop
 8009c6a:	e7fe      	b.n	8009c6a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009c6c:	f001 f9d2 	bl	800b014 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009c70:	4b39      	ldr	r3, [pc, #228]	; (8009d58 <xTaskResumeAll+0x118>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	3b01      	subs	r3, #1
 8009c76:	4a38      	ldr	r2, [pc, #224]	; (8009d58 <xTaskResumeAll+0x118>)
 8009c78:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c7a:	4b37      	ldr	r3, [pc, #220]	; (8009d58 <xTaskResumeAll+0x118>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d162      	bne.n	8009d48 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009c82:	4b36      	ldr	r3, [pc, #216]	; (8009d5c <xTaskResumeAll+0x11c>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d05e      	beq.n	8009d48 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009c8a:	e02f      	b.n	8009cec <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c8c:	4b34      	ldr	r3, [pc, #208]	; (8009d60 <xTaskResumeAll+0x120>)
 8009c8e:	68db      	ldr	r3, [r3, #12]
 8009c90:	68db      	ldr	r3, [r3, #12]
 8009c92:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	3318      	adds	r3, #24
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f7fe ffb7 	bl	8008c0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	3304      	adds	r3, #4
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f7fe ffb2 	bl	8008c0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cac:	4b2d      	ldr	r3, [pc, #180]	; (8009d64 <xTaskResumeAll+0x124>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d903      	bls.n	8009cbc <xTaskResumeAll+0x7c>
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cb8:	4a2a      	ldr	r2, [pc, #168]	; (8009d64 <xTaskResumeAll+0x124>)
 8009cba:	6013      	str	r3, [r2, #0]
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cc0:	4613      	mov	r3, r2
 8009cc2:	009b      	lsls	r3, r3, #2
 8009cc4:	4413      	add	r3, r2
 8009cc6:	009b      	lsls	r3, r3, #2
 8009cc8:	4a27      	ldr	r2, [pc, #156]	; (8009d68 <xTaskResumeAll+0x128>)
 8009cca:	441a      	add	r2, r3
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	3304      	adds	r3, #4
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	4610      	mov	r0, r2
 8009cd4:	f7fe ff3d 	bl	8008b52 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cdc:	4b23      	ldr	r3, [pc, #140]	; (8009d6c <xTaskResumeAll+0x12c>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d302      	bcc.n	8009cec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009ce6:	4b22      	ldr	r3, [pc, #136]	; (8009d70 <xTaskResumeAll+0x130>)
 8009ce8:	2201      	movs	r2, #1
 8009cea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009cec:	4b1c      	ldr	r3, [pc, #112]	; (8009d60 <xTaskResumeAll+0x120>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d1cb      	bne.n	8009c8c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d001      	beq.n	8009cfe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009cfa:	f000 fb55 	bl	800a3a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009cfe:	4b1d      	ldr	r3, [pc, #116]	; (8009d74 <xTaskResumeAll+0x134>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d010      	beq.n	8009d2c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009d0a:	f000 f847 	bl	8009d9c <xTaskIncrementTick>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d002      	beq.n	8009d1a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009d14:	4b16      	ldr	r3, [pc, #88]	; (8009d70 <xTaskResumeAll+0x130>)
 8009d16:	2201      	movs	r2, #1
 8009d18:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	3b01      	subs	r3, #1
 8009d1e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d1f1      	bne.n	8009d0a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009d26:	4b13      	ldr	r3, [pc, #76]	; (8009d74 <xTaskResumeAll+0x134>)
 8009d28:	2200      	movs	r2, #0
 8009d2a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009d2c:	4b10      	ldr	r3, [pc, #64]	; (8009d70 <xTaskResumeAll+0x130>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d009      	beq.n	8009d48 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009d34:	2301      	movs	r3, #1
 8009d36:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009d38:	4b0f      	ldr	r3, [pc, #60]	; (8009d78 <xTaskResumeAll+0x138>)
 8009d3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d3e:	601a      	str	r2, [r3, #0]
 8009d40:	f3bf 8f4f 	dsb	sy
 8009d44:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d48:	f001 f994 	bl	800b074 <vPortExitCritical>

	return xAlreadyYielded;
 8009d4c:	68bb      	ldr	r3, [r7, #8]
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3710      	adds	r7, #16
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
 8009d56:	bf00      	nop
 8009d58:	20000e2c 	.word	0x20000e2c
 8009d5c:	20000e04 	.word	0x20000e04
 8009d60:	20000dc4 	.word	0x20000dc4
 8009d64:	20000e0c 	.word	0x20000e0c
 8009d68:	20000934 	.word	0x20000934
 8009d6c:	20000930 	.word	0x20000930
 8009d70:	20000e18 	.word	0x20000e18
 8009d74:	20000e14 	.word	0x20000e14
 8009d78:	e000ed04 	.word	0xe000ed04

08009d7c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b083      	sub	sp, #12
 8009d80:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009d82:	4b05      	ldr	r3, [pc, #20]	; (8009d98 <xTaskGetTickCount+0x1c>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009d88:	687b      	ldr	r3, [r7, #4]
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	370c      	adds	r7, #12
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr
 8009d96:	bf00      	nop
 8009d98:	20000e08 	.word	0x20000e08

08009d9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b086      	sub	sp, #24
 8009da0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009da2:	2300      	movs	r3, #0
 8009da4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009da6:	4b4f      	ldr	r3, [pc, #316]	; (8009ee4 <xTaskIncrementTick+0x148>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	f040 808f 	bne.w	8009ece <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009db0:	4b4d      	ldr	r3, [pc, #308]	; (8009ee8 <xTaskIncrementTick+0x14c>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	3301      	adds	r3, #1
 8009db6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009db8:	4a4b      	ldr	r2, [pc, #300]	; (8009ee8 <xTaskIncrementTick+0x14c>)
 8009dba:	693b      	ldr	r3, [r7, #16]
 8009dbc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d120      	bne.n	8009e06 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009dc4:	4b49      	ldr	r3, [pc, #292]	; (8009eec <xTaskIncrementTick+0x150>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d00a      	beq.n	8009de4 <xTaskIncrementTick+0x48>
	__asm volatile
 8009dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd2:	f383 8811 	msr	BASEPRI, r3
 8009dd6:	f3bf 8f6f 	isb	sy
 8009dda:	f3bf 8f4f 	dsb	sy
 8009dde:	603b      	str	r3, [r7, #0]
}
 8009de0:	bf00      	nop
 8009de2:	e7fe      	b.n	8009de2 <xTaskIncrementTick+0x46>
 8009de4:	4b41      	ldr	r3, [pc, #260]	; (8009eec <xTaskIncrementTick+0x150>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	60fb      	str	r3, [r7, #12]
 8009dea:	4b41      	ldr	r3, [pc, #260]	; (8009ef0 <xTaskIncrementTick+0x154>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	4a3f      	ldr	r2, [pc, #252]	; (8009eec <xTaskIncrementTick+0x150>)
 8009df0:	6013      	str	r3, [r2, #0]
 8009df2:	4a3f      	ldr	r2, [pc, #252]	; (8009ef0 <xTaskIncrementTick+0x154>)
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	6013      	str	r3, [r2, #0]
 8009df8:	4b3e      	ldr	r3, [pc, #248]	; (8009ef4 <xTaskIncrementTick+0x158>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	4a3d      	ldr	r2, [pc, #244]	; (8009ef4 <xTaskIncrementTick+0x158>)
 8009e00:	6013      	str	r3, [r2, #0]
 8009e02:	f000 fad1 	bl	800a3a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009e06:	4b3c      	ldr	r3, [pc, #240]	; (8009ef8 <xTaskIncrementTick+0x15c>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	693a      	ldr	r2, [r7, #16]
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d349      	bcc.n	8009ea4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e10:	4b36      	ldr	r3, [pc, #216]	; (8009eec <xTaskIncrementTick+0x150>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d104      	bne.n	8009e24 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e1a:	4b37      	ldr	r3, [pc, #220]	; (8009ef8 <xTaskIncrementTick+0x15c>)
 8009e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8009e20:	601a      	str	r2, [r3, #0]
					break;
 8009e22:	e03f      	b.n	8009ea4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e24:	4b31      	ldr	r3, [pc, #196]	; (8009eec <xTaskIncrementTick+0x150>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	68db      	ldr	r3, [r3, #12]
 8009e2a:	68db      	ldr	r3, [r3, #12]
 8009e2c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	685b      	ldr	r3, [r3, #4]
 8009e32:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009e34:	693a      	ldr	r2, [r7, #16]
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d203      	bcs.n	8009e44 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009e3c:	4a2e      	ldr	r2, [pc, #184]	; (8009ef8 <xTaskIncrementTick+0x15c>)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009e42:	e02f      	b.n	8009ea4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	3304      	adds	r3, #4
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f7fe fedf 	bl	8008c0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d004      	beq.n	8009e60 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	3318      	adds	r3, #24
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f7fe fed6 	bl	8008c0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e64:	4b25      	ldr	r3, [pc, #148]	; (8009efc <xTaskIncrementTick+0x160>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	429a      	cmp	r2, r3
 8009e6a:	d903      	bls.n	8009e74 <xTaskIncrementTick+0xd8>
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e70:	4a22      	ldr	r2, [pc, #136]	; (8009efc <xTaskIncrementTick+0x160>)
 8009e72:	6013      	str	r3, [r2, #0]
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e78:	4613      	mov	r3, r2
 8009e7a:	009b      	lsls	r3, r3, #2
 8009e7c:	4413      	add	r3, r2
 8009e7e:	009b      	lsls	r3, r3, #2
 8009e80:	4a1f      	ldr	r2, [pc, #124]	; (8009f00 <xTaskIncrementTick+0x164>)
 8009e82:	441a      	add	r2, r3
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	3304      	adds	r3, #4
 8009e88:	4619      	mov	r1, r3
 8009e8a:	4610      	mov	r0, r2
 8009e8c:	f7fe fe61 	bl	8008b52 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e94:	4b1b      	ldr	r3, [pc, #108]	; (8009f04 <xTaskIncrementTick+0x168>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	d3b8      	bcc.n	8009e10 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ea2:	e7b5      	b.n	8009e10 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009ea4:	4b17      	ldr	r3, [pc, #92]	; (8009f04 <xTaskIncrementTick+0x168>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eaa:	4915      	ldr	r1, [pc, #84]	; (8009f00 <xTaskIncrementTick+0x164>)
 8009eac:	4613      	mov	r3, r2
 8009eae:	009b      	lsls	r3, r3, #2
 8009eb0:	4413      	add	r3, r2
 8009eb2:	009b      	lsls	r3, r3, #2
 8009eb4:	440b      	add	r3, r1
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	d901      	bls.n	8009ec0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009ec0:	4b11      	ldr	r3, [pc, #68]	; (8009f08 <xTaskIncrementTick+0x16c>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d007      	beq.n	8009ed8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009ec8:	2301      	movs	r3, #1
 8009eca:	617b      	str	r3, [r7, #20]
 8009ecc:	e004      	b.n	8009ed8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009ece:	4b0f      	ldr	r3, [pc, #60]	; (8009f0c <xTaskIncrementTick+0x170>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	3301      	adds	r3, #1
 8009ed4:	4a0d      	ldr	r2, [pc, #52]	; (8009f0c <xTaskIncrementTick+0x170>)
 8009ed6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009ed8:	697b      	ldr	r3, [r7, #20]
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3718      	adds	r7, #24
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}
 8009ee2:	bf00      	nop
 8009ee4:	20000e2c 	.word	0x20000e2c
 8009ee8:	20000e08 	.word	0x20000e08
 8009eec:	20000dbc 	.word	0x20000dbc
 8009ef0:	20000dc0 	.word	0x20000dc0
 8009ef4:	20000e1c 	.word	0x20000e1c
 8009ef8:	20000e24 	.word	0x20000e24
 8009efc:	20000e0c 	.word	0x20000e0c
 8009f00:	20000934 	.word	0x20000934
 8009f04:	20000930 	.word	0x20000930
 8009f08:	20000e18 	.word	0x20000e18
 8009f0c:	20000e14 	.word	0x20000e14

08009f10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009f10:	b480      	push	{r7}
 8009f12:	b085      	sub	sp, #20
 8009f14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009f16:	4b28      	ldr	r3, [pc, #160]	; (8009fb8 <vTaskSwitchContext+0xa8>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d003      	beq.n	8009f26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009f1e:	4b27      	ldr	r3, [pc, #156]	; (8009fbc <vTaskSwitchContext+0xac>)
 8009f20:	2201      	movs	r2, #1
 8009f22:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009f24:	e041      	b.n	8009faa <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8009f26:	4b25      	ldr	r3, [pc, #148]	; (8009fbc <vTaskSwitchContext+0xac>)
 8009f28:	2200      	movs	r2, #0
 8009f2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f2c:	4b24      	ldr	r3, [pc, #144]	; (8009fc0 <vTaskSwitchContext+0xb0>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	60fb      	str	r3, [r7, #12]
 8009f32:	e010      	b.n	8009f56 <vTaskSwitchContext+0x46>
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d10a      	bne.n	8009f50 <vTaskSwitchContext+0x40>
	__asm volatile
 8009f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f3e:	f383 8811 	msr	BASEPRI, r3
 8009f42:	f3bf 8f6f 	isb	sy
 8009f46:	f3bf 8f4f 	dsb	sy
 8009f4a:	607b      	str	r3, [r7, #4]
}
 8009f4c:	bf00      	nop
 8009f4e:	e7fe      	b.n	8009f4e <vTaskSwitchContext+0x3e>
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	3b01      	subs	r3, #1
 8009f54:	60fb      	str	r3, [r7, #12]
 8009f56:	491b      	ldr	r1, [pc, #108]	; (8009fc4 <vTaskSwitchContext+0xb4>)
 8009f58:	68fa      	ldr	r2, [r7, #12]
 8009f5a:	4613      	mov	r3, r2
 8009f5c:	009b      	lsls	r3, r3, #2
 8009f5e:	4413      	add	r3, r2
 8009f60:	009b      	lsls	r3, r3, #2
 8009f62:	440b      	add	r3, r1
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d0e4      	beq.n	8009f34 <vTaskSwitchContext+0x24>
 8009f6a:	68fa      	ldr	r2, [r7, #12]
 8009f6c:	4613      	mov	r3, r2
 8009f6e:	009b      	lsls	r3, r3, #2
 8009f70:	4413      	add	r3, r2
 8009f72:	009b      	lsls	r3, r3, #2
 8009f74:	4a13      	ldr	r2, [pc, #76]	; (8009fc4 <vTaskSwitchContext+0xb4>)
 8009f76:	4413      	add	r3, r2
 8009f78:	60bb      	str	r3, [r7, #8]
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	685a      	ldr	r2, [r3, #4]
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	605a      	str	r2, [r3, #4]
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	685a      	ldr	r2, [r3, #4]
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	3308      	adds	r3, #8
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	d104      	bne.n	8009f9a <vTaskSwitchContext+0x8a>
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	685b      	ldr	r3, [r3, #4]
 8009f94:	685a      	ldr	r2, [r3, #4]
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	605a      	str	r2, [r3, #4]
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	685b      	ldr	r3, [r3, #4]
 8009f9e:	68db      	ldr	r3, [r3, #12]
 8009fa0:	4a09      	ldr	r2, [pc, #36]	; (8009fc8 <vTaskSwitchContext+0xb8>)
 8009fa2:	6013      	str	r3, [r2, #0]
 8009fa4:	4a06      	ldr	r2, [pc, #24]	; (8009fc0 <vTaskSwitchContext+0xb0>)
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	6013      	str	r3, [r2, #0]
}
 8009faa:	bf00      	nop
 8009fac:	3714      	adds	r7, #20
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb4:	4770      	bx	lr
 8009fb6:	bf00      	nop
 8009fb8:	20000e2c 	.word	0x20000e2c
 8009fbc:	20000e18 	.word	0x20000e18
 8009fc0:	20000e0c 	.word	0x20000e0c
 8009fc4:	20000934 	.word	0x20000934
 8009fc8:	20000930 	.word	0x20000930

08009fcc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b084      	sub	sp, #16
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d10a      	bne.n	8009ff2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe0:	f383 8811 	msr	BASEPRI, r3
 8009fe4:	f3bf 8f6f 	isb	sy
 8009fe8:	f3bf 8f4f 	dsb	sy
 8009fec:	60fb      	str	r3, [r7, #12]
}
 8009fee:	bf00      	nop
 8009ff0:	e7fe      	b.n	8009ff0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009ff2:	4b07      	ldr	r3, [pc, #28]	; (800a010 <vTaskPlaceOnEventList+0x44>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	3318      	adds	r3, #24
 8009ff8:	4619      	mov	r1, r3
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f7fe fdcd 	bl	8008b9a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a000:	2101      	movs	r1, #1
 800a002:	6838      	ldr	r0, [r7, #0]
 800a004:	f000 fa7c 	bl	800a500 <prvAddCurrentTaskToDelayedList>
}
 800a008:	bf00      	nop
 800a00a:	3710      	adds	r7, #16
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}
 800a010:	20000930 	.word	0x20000930

0800a014 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a014:	b580      	push	{r7, lr}
 800a016:	b086      	sub	sp, #24
 800a018:	af00      	add	r7, sp, #0
 800a01a:	60f8      	str	r0, [r7, #12]
 800a01c:	60b9      	str	r1, [r7, #8]
 800a01e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d10a      	bne.n	800a03c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a02a:	f383 8811 	msr	BASEPRI, r3
 800a02e:	f3bf 8f6f 	isb	sy
 800a032:	f3bf 8f4f 	dsb	sy
 800a036:	617b      	str	r3, [r7, #20]
}
 800a038:	bf00      	nop
 800a03a:	e7fe      	b.n	800a03a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a03c:	4b0a      	ldr	r3, [pc, #40]	; (800a068 <vTaskPlaceOnEventListRestricted+0x54>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	3318      	adds	r3, #24
 800a042:	4619      	mov	r1, r3
 800a044:	68f8      	ldr	r0, [r7, #12]
 800a046:	f7fe fd84 	bl	8008b52 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d002      	beq.n	800a056 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a050:	f04f 33ff 	mov.w	r3, #4294967295
 800a054:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a056:	6879      	ldr	r1, [r7, #4]
 800a058:	68b8      	ldr	r0, [r7, #8]
 800a05a:	f000 fa51 	bl	800a500 <prvAddCurrentTaskToDelayedList>
	}
 800a05e:	bf00      	nop
 800a060:	3718      	adds	r7, #24
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}
 800a066:	bf00      	nop
 800a068:	20000930 	.word	0x20000930

0800a06c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b086      	sub	sp, #24
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	68db      	ldr	r3, [r3, #12]
 800a078:	68db      	ldr	r3, [r3, #12]
 800a07a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d10a      	bne.n	800a098 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a086:	f383 8811 	msr	BASEPRI, r3
 800a08a:	f3bf 8f6f 	isb	sy
 800a08e:	f3bf 8f4f 	dsb	sy
 800a092:	60fb      	str	r3, [r7, #12]
}
 800a094:	bf00      	nop
 800a096:	e7fe      	b.n	800a096 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	3318      	adds	r3, #24
 800a09c:	4618      	mov	r0, r3
 800a09e:	f7fe fdb5 	bl	8008c0c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0a2:	4b1e      	ldr	r3, [pc, #120]	; (800a11c <xTaskRemoveFromEventList+0xb0>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d11d      	bne.n	800a0e6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a0aa:	693b      	ldr	r3, [r7, #16]
 800a0ac:	3304      	adds	r3, #4
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f7fe fdac 	bl	8008c0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a0b4:	693b      	ldr	r3, [r7, #16]
 800a0b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0b8:	4b19      	ldr	r3, [pc, #100]	; (800a120 <xTaskRemoveFromEventList+0xb4>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	d903      	bls.n	800a0c8 <xTaskRemoveFromEventList+0x5c>
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0c4:	4a16      	ldr	r2, [pc, #88]	; (800a120 <xTaskRemoveFromEventList+0xb4>)
 800a0c6:	6013      	str	r3, [r2, #0]
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0cc:	4613      	mov	r3, r2
 800a0ce:	009b      	lsls	r3, r3, #2
 800a0d0:	4413      	add	r3, r2
 800a0d2:	009b      	lsls	r3, r3, #2
 800a0d4:	4a13      	ldr	r2, [pc, #76]	; (800a124 <xTaskRemoveFromEventList+0xb8>)
 800a0d6:	441a      	add	r2, r3
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	3304      	adds	r3, #4
 800a0dc:	4619      	mov	r1, r3
 800a0de:	4610      	mov	r0, r2
 800a0e0:	f7fe fd37 	bl	8008b52 <vListInsertEnd>
 800a0e4:	e005      	b.n	800a0f2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	3318      	adds	r3, #24
 800a0ea:	4619      	mov	r1, r3
 800a0ec:	480e      	ldr	r0, [pc, #56]	; (800a128 <xTaskRemoveFromEventList+0xbc>)
 800a0ee:	f7fe fd30 	bl	8008b52 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0f6:	4b0d      	ldr	r3, [pc, #52]	; (800a12c <xTaskRemoveFromEventList+0xc0>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	d905      	bls.n	800a10c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a100:	2301      	movs	r3, #1
 800a102:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a104:	4b0a      	ldr	r3, [pc, #40]	; (800a130 <xTaskRemoveFromEventList+0xc4>)
 800a106:	2201      	movs	r2, #1
 800a108:	601a      	str	r2, [r3, #0]
 800a10a:	e001      	b.n	800a110 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a10c:	2300      	movs	r3, #0
 800a10e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a110:	697b      	ldr	r3, [r7, #20]
}
 800a112:	4618      	mov	r0, r3
 800a114:	3718      	adds	r7, #24
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}
 800a11a:	bf00      	nop
 800a11c:	20000e2c 	.word	0x20000e2c
 800a120:	20000e0c 	.word	0x20000e0c
 800a124:	20000934 	.word	0x20000934
 800a128:	20000dc4 	.word	0x20000dc4
 800a12c:	20000930 	.word	0x20000930
 800a130:	20000e18 	.word	0x20000e18

0800a134 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a134:	b480      	push	{r7}
 800a136:	b083      	sub	sp, #12
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a13c:	4b06      	ldr	r3, [pc, #24]	; (800a158 <vTaskInternalSetTimeOutState+0x24>)
 800a13e:	681a      	ldr	r2, [r3, #0]
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a144:	4b05      	ldr	r3, [pc, #20]	; (800a15c <vTaskInternalSetTimeOutState+0x28>)
 800a146:	681a      	ldr	r2, [r3, #0]
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	605a      	str	r2, [r3, #4]
}
 800a14c:	bf00      	nop
 800a14e:	370c      	adds	r7, #12
 800a150:	46bd      	mov	sp, r7
 800a152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a156:	4770      	bx	lr
 800a158:	20000e1c 	.word	0x20000e1c
 800a15c:	20000e08 	.word	0x20000e08

0800a160 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b088      	sub	sp, #32
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d10a      	bne.n	800a186 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a174:	f383 8811 	msr	BASEPRI, r3
 800a178:	f3bf 8f6f 	isb	sy
 800a17c:	f3bf 8f4f 	dsb	sy
 800a180:	613b      	str	r3, [r7, #16]
}
 800a182:	bf00      	nop
 800a184:	e7fe      	b.n	800a184 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d10a      	bne.n	800a1a2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a190:	f383 8811 	msr	BASEPRI, r3
 800a194:	f3bf 8f6f 	isb	sy
 800a198:	f3bf 8f4f 	dsb	sy
 800a19c:	60fb      	str	r3, [r7, #12]
}
 800a19e:	bf00      	nop
 800a1a0:	e7fe      	b.n	800a1a0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a1a2:	f000 ff37 	bl	800b014 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a1a6:	4b1d      	ldr	r3, [pc, #116]	; (800a21c <xTaskCheckForTimeOut+0xbc>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	69ba      	ldr	r2, [r7, #24]
 800a1b2:	1ad3      	subs	r3, r2, r3
 800a1b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1be:	d102      	bne.n	800a1c6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	61fb      	str	r3, [r7, #28]
 800a1c4:	e023      	b.n	800a20e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681a      	ldr	r2, [r3, #0]
 800a1ca:	4b15      	ldr	r3, [pc, #84]	; (800a220 <xTaskCheckForTimeOut+0xc0>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	d007      	beq.n	800a1e2 <xTaskCheckForTimeOut+0x82>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	685b      	ldr	r3, [r3, #4]
 800a1d6:	69ba      	ldr	r2, [r7, #24]
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d302      	bcc.n	800a1e2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a1dc:	2301      	movs	r3, #1
 800a1de:	61fb      	str	r3, [r7, #28]
 800a1e0:	e015      	b.n	800a20e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	697a      	ldr	r2, [r7, #20]
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d20b      	bcs.n	800a204 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	681a      	ldr	r2, [r3, #0]
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	1ad2      	subs	r2, r2, r3
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f7ff ff9b 	bl	800a134 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a1fe:	2300      	movs	r3, #0
 800a200:	61fb      	str	r3, [r7, #28]
 800a202:	e004      	b.n	800a20e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	2200      	movs	r2, #0
 800a208:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a20a:	2301      	movs	r3, #1
 800a20c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a20e:	f000 ff31 	bl	800b074 <vPortExitCritical>

	return xReturn;
 800a212:	69fb      	ldr	r3, [r7, #28]
}
 800a214:	4618      	mov	r0, r3
 800a216:	3720      	adds	r7, #32
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}
 800a21c:	20000e08 	.word	0x20000e08
 800a220:	20000e1c 	.word	0x20000e1c

0800a224 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a224:	b480      	push	{r7}
 800a226:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a228:	4b03      	ldr	r3, [pc, #12]	; (800a238 <vTaskMissedYield+0x14>)
 800a22a:	2201      	movs	r2, #1
 800a22c:	601a      	str	r2, [r3, #0]
}
 800a22e:	bf00      	nop
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr
 800a238:	20000e18 	.word	0x20000e18

0800a23c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b082      	sub	sp, #8
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a244:	f000 f852 	bl	800a2ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a248:	4b06      	ldr	r3, [pc, #24]	; (800a264 <prvIdleTask+0x28>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	2b01      	cmp	r3, #1
 800a24e:	d9f9      	bls.n	800a244 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a250:	4b05      	ldr	r3, [pc, #20]	; (800a268 <prvIdleTask+0x2c>)
 800a252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a256:	601a      	str	r2, [r3, #0]
 800a258:	f3bf 8f4f 	dsb	sy
 800a25c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a260:	e7f0      	b.n	800a244 <prvIdleTask+0x8>
 800a262:	bf00      	nop
 800a264:	20000934 	.word	0x20000934
 800a268:	e000ed04 	.word	0xe000ed04

0800a26c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b082      	sub	sp, #8
 800a270:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a272:	2300      	movs	r3, #0
 800a274:	607b      	str	r3, [r7, #4]
 800a276:	e00c      	b.n	800a292 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a278:	687a      	ldr	r2, [r7, #4]
 800a27a:	4613      	mov	r3, r2
 800a27c:	009b      	lsls	r3, r3, #2
 800a27e:	4413      	add	r3, r2
 800a280:	009b      	lsls	r3, r3, #2
 800a282:	4a12      	ldr	r2, [pc, #72]	; (800a2cc <prvInitialiseTaskLists+0x60>)
 800a284:	4413      	add	r3, r2
 800a286:	4618      	mov	r0, r3
 800a288:	f7fe fc36 	bl	8008af8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	3301      	adds	r3, #1
 800a290:	607b      	str	r3, [r7, #4]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2b37      	cmp	r3, #55	; 0x37
 800a296:	d9ef      	bls.n	800a278 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a298:	480d      	ldr	r0, [pc, #52]	; (800a2d0 <prvInitialiseTaskLists+0x64>)
 800a29a:	f7fe fc2d 	bl	8008af8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a29e:	480d      	ldr	r0, [pc, #52]	; (800a2d4 <prvInitialiseTaskLists+0x68>)
 800a2a0:	f7fe fc2a 	bl	8008af8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a2a4:	480c      	ldr	r0, [pc, #48]	; (800a2d8 <prvInitialiseTaskLists+0x6c>)
 800a2a6:	f7fe fc27 	bl	8008af8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a2aa:	480c      	ldr	r0, [pc, #48]	; (800a2dc <prvInitialiseTaskLists+0x70>)
 800a2ac:	f7fe fc24 	bl	8008af8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a2b0:	480b      	ldr	r0, [pc, #44]	; (800a2e0 <prvInitialiseTaskLists+0x74>)
 800a2b2:	f7fe fc21 	bl	8008af8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a2b6:	4b0b      	ldr	r3, [pc, #44]	; (800a2e4 <prvInitialiseTaskLists+0x78>)
 800a2b8:	4a05      	ldr	r2, [pc, #20]	; (800a2d0 <prvInitialiseTaskLists+0x64>)
 800a2ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a2bc:	4b0a      	ldr	r3, [pc, #40]	; (800a2e8 <prvInitialiseTaskLists+0x7c>)
 800a2be:	4a05      	ldr	r2, [pc, #20]	; (800a2d4 <prvInitialiseTaskLists+0x68>)
 800a2c0:	601a      	str	r2, [r3, #0]
}
 800a2c2:	bf00      	nop
 800a2c4:	3708      	adds	r7, #8
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}
 800a2ca:	bf00      	nop
 800a2cc:	20000934 	.word	0x20000934
 800a2d0:	20000d94 	.word	0x20000d94
 800a2d4:	20000da8 	.word	0x20000da8
 800a2d8:	20000dc4 	.word	0x20000dc4
 800a2dc:	20000dd8 	.word	0x20000dd8
 800a2e0:	20000df0 	.word	0x20000df0
 800a2e4:	20000dbc 	.word	0x20000dbc
 800a2e8:	20000dc0 	.word	0x20000dc0

0800a2ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b082      	sub	sp, #8
 800a2f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a2f2:	e019      	b.n	800a328 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a2f4:	f000 fe8e 	bl	800b014 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2f8:	4b10      	ldr	r3, [pc, #64]	; (800a33c <prvCheckTasksWaitingTermination+0x50>)
 800a2fa:	68db      	ldr	r3, [r3, #12]
 800a2fc:	68db      	ldr	r3, [r3, #12]
 800a2fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	3304      	adds	r3, #4
 800a304:	4618      	mov	r0, r3
 800a306:	f7fe fc81 	bl	8008c0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a30a:	4b0d      	ldr	r3, [pc, #52]	; (800a340 <prvCheckTasksWaitingTermination+0x54>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	3b01      	subs	r3, #1
 800a310:	4a0b      	ldr	r2, [pc, #44]	; (800a340 <prvCheckTasksWaitingTermination+0x54>)
 800a312:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a314:	4b0b      	ldr	r3, [pc, #44]	; (800a344 <prvCheckTasksWaitingTermination+0x58>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	3b01      	subs	r3, #1
 800a31a:	4a0a      	ldr	r2, [pc, #40]	; (800a344 <prvCheckTasksWaitingTermination+0x58>)
 800a31c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a31e:	f000 fea9 	bl	800b074 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f000 f810 	bl	800a348 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a328:	4b06      	ldr	r3, [pc, #24]	; (800a344 <prvCheckTasksWaitingTermination+0x58>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d1e1      	bne.n	800a2f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a330:	bf00      	nop
 800a332:	bf00      	nop
 800a334:	3708      	adds	r7, #8
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}
 800a33a:	bf00      	nop
 800a33c:	20000dd8 	.word	0x20000dd8
 800a340:	20000e04 	.word	0x20000e04
 800a344:	20000dec 	.word	0x20000dec

0800a348 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b084      	sub	sp, #16
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a356:	2b00      	cmp	r3, #0
 800a358:	d108      	bne.n	800a36c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a35e:	4618      	mov	r0, r3
 800a360:	f001 f846 	bl	800b3f0 <vPortFree>
				vPortFree( pxTCB );
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f001 f843 	bl	800b3f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a36a:	e018      	b.n	800a39e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a372:	2b01      	cmp	r3, #1
 800a374:	d103      	bne.n	800a37e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f001 f83a 	bl	800b3f0 <vPortFree>
	}
 800a37c:	e00f      	b.n	800a39e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a384:	2b02      	cmp	r3, #2
 800a386:	d00a      	beq.n	800a39e <prvDeleteTCB+0x56>
	__asm volatile
 800a388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a38c:	f383 8811 	msr	BASEPRI, r3
 800a390:	f3bf 8f6f 	isb	sy
 800a394:	f3bf 8f4f 	dsb	sy
 800a398:	60fb      	str	r3, [r7, #12]
}
 800a39a:	bf00      	nop
 800a39c:	e7fe      	b.n	800a39c <prvDeleteTCB+0x54>
	}
 800a39e:	bf00      	nop
 800a3a0:	3710      	adds	r7, #16
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
	...

0800a3a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b083      	sub	sp, #12
 800a3ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a3ae:	4b0c      	ldr	r3, [pc, #48]	; (800a3e0 <prvResetNextTaskUnblockTime+0x38>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d104      	bne.n	800a3c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a3b8:	4b0a      	ldr	r3, [pc, #40]	; (800a3e4 <prvResetNextTaskUnblockTime+0x3c>)
 800a3ba:	f04f 32ff 	mov.w	r2, #4294967295
 800a3be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a3c0:	e008      	b.n	800a3d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3c2:	4b07      	ldr	r3, [pc, #28]	; (800a3e0 <prvResetNextTaskUnblockTime+0x38>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	68db      	ldr	r3, [r3, #12]
 800a3c8:	68db      	ldr	r3, [r3, #12]
 800a3ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	685b      	ldr	r3, [r3, #4]
 800a3d0:	4a04      	ldr	r2, [pc, #16]	; (800a3e4 <prvResetNextTaskUnblockTime+0x3c>)
 800a3d2:	6013      	str	r3, [r2, #0]
}
 800a3d4:	bf00      	nop
 800a3d6:	370c      	adds	r7, #12
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3de:	4770      	bx	lr
 800a3e0:	20000dbc 	.word	0x20000dbc
 800a3e4:	20000e24 	.word	0x20000e24

0800a3e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b083      	sub	sp, #12
 800a3ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a3ee:	4b0b      	ldr	r3, [pc, #44]	; (800a41c <xTaskGetSchedulerState+0x34>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d102      	bne.n	800a3fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	607b      	str	r3, [r7, #4]
 800a3fa:	e008      	b.n	800a40e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3fc:	4b08      	ldr	r3, [pc, #32]	; (800a420 <xTaskGetSchedulerState+0x38>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d102      	bne.n	800a40a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a404:	2302      	movs	r3, #2
 800a406:	607b      	str	r3, [r7, #4]
 800a408:	e001      	b.n	800a40e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a40a:	2300      	movs	r3, #0
 800a40c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a40e:	687b      	ldr	r3, [r7, #4]
	}
 800a410:	4618      	mov	r0, r3
 800a412:	370c      	adds	r7, #12
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr
 800a41c:	20000e10 	.word	0x20000e10
 800a420:	20000e2c 	.word	0x20000e2c

0800a424 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a424:	b580      	push	{r7, lr}
 800a426:	b086      	sub	sp, #24
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a430:	2300      	movs	r3, #0
 800a432:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d056      	beq.n	800a4e8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a43a:	4b2e      	ldr	r3, [pc, #184]	; (800a4f4 <xTaskPriorityDisinherit+0xd0>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	693a      	ldr	r2, [r7, #16]
 800a440:	429a      	cmp	r2, r3
 800a442:	d00a      	beq.n	800a45a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a448:	f383 8811 	msr	BASEPRI, r3
 800a44c:	f3bf 8f6f 	isb	sy
 800a450:	f3bf 8f4f 	dsb	sy
 800a454:	60fb      	str	r3, [r7, #12]
}
 800a456:	bf00      	nop
 800a458:	e7fe      	b.n	800a458 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d10a      	bne.n	800a478 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a462:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a466:	f383 8811 	msr	BASEPRI, r3
 800a46a:	f3bf 8f6f 	isb	sy
 800a46e:	f3bf 8f4f 	dsb	sy
 800a472:	60bb      	str	r3, [r7, #8]
}
 800a474:	bf00      	nop
 800a476:	e7fe      	b.n	800a476 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a47c:	1e5a      	subs	r2, r3, #1
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a486:	693b      	ldr	r3, [r7, #16]
 800a488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a48a:	429a      	cmp	r2, r3
 800a48c:	d02c      	beq.n	800a4e8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a48e:	693b      	ldr	r3, [r7, #16]
 800a490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a492:	2b00      	cmp	r3, #0
 800a494:	d128      	bne.n	800a4e8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	3304      	adds	r3, #4
 800a49a:	4618      	mov	r0, r3
 800a49c:	f7fe fbb6 	bl	8008c0c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a4a4:	693b      	ldr	r3, [r7, #16]
 800a4a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4b8:	4b0f      	ldr	r3, [pc, #60]	; (800a4f8 <xTaskPriorityDisinherit+0xd4>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d903      	bls.n	800a4c8 <xTaskPriorityDisinherit+0xa4>
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4c4:	4a0c      	ldr	r2, [pc, #48]	; (800a4f8 <xTaskPriorityDisinherit+0xd4>)
 800a4c6:	6013      	str	r3, [r2, #0]
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4cc:	4613      	mov	r3, r2
 800a4ce:	009b      	lsls	r3, r3, #2
 800a4d0:	4413      	add	r3, r2
 800a4d2:	009b      	lsls	r3, r3, #2
 800a4d4:	4a09      	ldr	r2, [pc, #36]	; (800a4fc <xTaskPriorityDisinherit+0xd8>)
 800a4d6:	441a      	add	r2, r3
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	3304      	adds	r3, #4
 800a4dc:	4619      	mov	r1, r3
 800a4de:	4610      	mov	r0, r2
 800a4e0:	f7fe fb37 	bl	8008b52 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a4e8:	697b      	ldr	r3, [r7, #20]
	}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3718      	adds	r7, #24
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}
 800a4f2:	bf00      	nop
 800a4f4:	20000930 	.word	0x20000930
 800a4f8:	20000e0c 	.word	0x20000e0c
 800a4fc:	20000934 	.word	0x20000934

0800a500 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b084      	sub	sp, #16
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a50a:	4b21      	ldr	r3, [pc, #132]	; (800a590 <prvAddCurrentTaskToDelayedList+0x90>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a510:	4b20      	ldr	r3, [pc, #128]	; (800a594 <prvAddCurrentTaskToDelayedList+0x94>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	3304      	adds	r3, #4
 800a516:	4618      	mov	r0, r3
 800a518:	f7fe fb78 	bl	8008c0c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a522:	d10a      	bne.n	800a53a <prvAddCurrentTaskToDelayedList+0x3a>
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d007      	beq.n	800a53a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a52a:	4b1a      	ldr	r3, [pc, #104]	; (800a594 <prvAddCurrentTaskToDelayedList+0x94>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	3304      	adds	r3, #4
 800a530:	4619      	mov	r1, r3
 800a532:	4819      	ldr	r0, [pc, #100]	; (800a598 <prvAddCurrentTaskToDelayedList+0x98>)
 800a534:	f7fe fb0d 	bl	8008b52 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a538:	e026      	b.n	800a588 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a53a:	68fa      	ldr	r2, [r7, #12]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	4413      	add	r3, r2
 800a540:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a542:	4b14      	ldr	r3, [pc, #80]	; (800a594 <prvAddCurrentTaskToDelayedList+0x94>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	68ba      	ldr	r2, [r7, #8]
 800a548:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a54a:	68ba      	ldr	r2, [r7, #8]
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	429a      	cmp	r2, r3
 800a550:	d209      	bcs.n	800a566 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a552:	4b12      	ldr	r3, [pc, #72]	; (800a59c <prvAddCurrentTaskToDelayedList+0x9c>)
 800a554:	681a      	ldr	r2, [r3, #0]
 800a556:	4b0f      	ldr	r3, [pc, #60]	; (800a594 <prvAddCurrentTaskToDelayedList+0x94>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	3304      	adds	r3, #4
 800a55c:	4619      	mov	r1, r3
 800a55e:	4610      	mov	r0, r2
 800a560:	f7fe fb1b 	bl	8008b9a <vListInsert>
}
 800a564:	e010      	b.n	800a588 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a566:	4b0e      	ldr	r3, [pc, #56]	; (800a5a0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a568:	681a      	ldr	r2, [r3, #0]
 800a56a:	4b0a      	ldr	r3, [pc, #40]	; (800a594 <prvAddCurrentTaskToDelayedList+0x94>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	3304      	adds	r3, #4
 800a570:	4619      	mov	r1, r3
 800a572:	4610      	mov	r0, r2
 800a574:	f7fe fb11 	bl	8008b9a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a578:	4b0a      	ldr	r3, [pc, #40]	; (800a5a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	68ba      	ldr	r2, [r7, #8]
 800a57e:	429a      	cmp	r2, r3
 800a580:	d202      	bcs.n	800a588 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a582:	4a08      	ldr	r2, [pc, #32]	; (800a5a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	6013      	str	r3, [r2, #0]
}
 800a588:	bf00      	nop
 800a58a:	3710      	adds	r7, #16
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}
 800a590:	20000e08 	.word	0x20000e08
 800a594:	20000930 	.word	0x20000930
 800a598:	20000df0 	.word	0x20000df0
 800a59c:	20000dc0 	.word	0x20000dc0
 800a5a0:	20000dbc 	.word	0x20000dbc
 800a5a4:	20000e24 	.word	0x20000e24

0800a5a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b08a      	sub	sp, #40	; 0x28
 800a5ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a5b2:	f000 fba1 	bl	800acf8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a5b6:	4b1c      	ldr	r3, [pc, #112]	; (800a628 <xTimerCreateTimerTask+0x80>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d021      	beq.n	800a602 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a5c6:	1d3a      	adds	r2, r7, #4
 800a5c8:	f107 0108 	add.w	r1, r7, #8
 800a5cc:	f107 030c 	add.w	r3, r7, #12
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f7fe fa77 	bl	8008ac4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a5d6:	6879      	ldr	r1, [r7, #4]
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	68fa      	ldr	r2, [r7, #12]
 800a5dc:	9202      	str	r2, [sp, #8]
 800a5de:	9301      	str	r3, [sp, #4]
 800a5e0:	2302      	movs	r3, #2
 800a5e2:	9300      	str	r3, [sp, #0]
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	460a      	mov	r2, r1
 800a5e8:	4910      	ldr	r1, [pc, #64]	; (800a62c <xTimerCreateTimerTask+0x84>)
 800a5ea:	4811      	ldr	r0, [pc, #68]	; (800a630 <xTimerCreateTimerTask+0x88>)
 800a5ec:	f7ff f8de 	bl	80097ac <xTaskCreateStatic>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	4a10      	ldr	r2, [pc, #64]	; (800a634 <xTimerCreateTimerTask+0x8c>)
 800a5f4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a5f6:	4b0f      	ldr	r3, [pc, #60]	; (800a634 <xTimerCreateTimerTask+0x8c>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d001      	beq.n	800a602 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a5fe:	2301      	movs	r3, #1
 800a600:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d10a      	bne.n	800a61e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a60c:	f383 8811 	msr	BASEPRI, r3
 800a610:	f3bf 8f6f 	isb	sy
 800a614:	f3bf 8f4f 	dsb	sy
 800a618:	613b      	str	r3, [r7, #16]
}
 800a61a:	bf00      	nop
 800a61c:	e7fe      	b.n	800a61c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a61e:	697b      	ldr	r3, [r7, #20]
}
 800a620:	4618      	mov	r0, r3
 800a622:	3718      	adds	r7, #24
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}
 800a628:	20000e60 	.word	0x20000e60
 800a62c:	0800c634 	.word	0x0800c634
 800a630:	0800a8a1 	.word	0x0800a8a1
 800a634:	20000e64 	.word	0x20000e64

0800a638 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b088      	sub	sp, #32
 800a63c:	af02      	add	r7, sp, #8
 800a63e:	60f8      	str	r0, [r7, #12]
 800a640:	60b9      	str	r1, [r7, #8]
 800a642:	607a      	str	r2, [r7, #4]
 800a644:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800a646:	202c      	movs	r0, #44	; 0x2c
 800a648:	f000 fe06 	bl	800b258 <pvPortMalloc>
 800a64c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d00d      	beq.n	800a670 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	2200      	movs	r2, #0
 800a658:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	9301      	str	r3, [sp, #4]
 800a660:	6a3b      	ldr	r3, [r7, #32]
 800a662:	9300      	str	r3, [sp, #0]
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	687a      	ldr	r2, [r7, #4]
 800a668:	68b9      	ldr	r1, [r7, #8]
 800a66a:	68f8      	ldr	r0, [r7, #12]
 800a66c:	f000 f843 	bl	800a6f6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800a670:	697b      	ldr	r3, [r7, #20]
	}
 800a672:	4618      	mov	r0, r3
 800a674:	3718      	adds	r7, #24
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}

0800a67a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800a67a:	b580      	push	{r7, lr}
 800a67c:	b08a      	sub	sp, #40	; 0x28
 800a67e:	af02      	add	r7, sp, #8
 800a680:	60f8      	str	r0, [r7, #12]
 800a682:	60b9      	str	r1, [r7, #8]
 800a684:	607a      	str	r2, [r7, #4]
 800a686:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800a688:	232c      	movs	r3, #44	; 0x2c
 800a68a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	2b2c      	cmp	r3, #44	; 0x2c
 800a690:	d00a      	beq.n	800a6a8 <xTimerCreateStatic+0x2e>
	__asm volatile
 800a692:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a696:	f383 8811 	msr	BASEPRI, r3
 800a69a:	f3bf 8f6f 	isb	sy
 800a69e:	f3bf 8f4f 	dsb	sy
 800a6a2:	61bb      	str	r3, [r7, #24]
}
 800a6a4:	bf00      	nop
 800a6a6:	e7fe      	b.n	800a6a6 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a6a8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800a6aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d10a      	bne.n	800a6c6 <xTimerCreateStatic+0x4c>
	__asm volatile
 800a6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b4:	f383 8811 	msr	BASEPRI, r3
 800a6b8:	f3bf 8f6f 	isb	sy
 800a6bc:	f3bf 8f4f 	dsb	sy
 800a6c0:	617b      	str	r3, [r7, #20]
}
 800a6c2:	bf00      	nop
 800a6c4:	e7fe      	b.n	800a6c4 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800a6c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6c8:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800a6ca:	69fb      	ldr	r3, [r7, #28]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d00d      	beq.n	800a6ec <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800a6d0:	69fb      	ldr	r3, [r7, #28]
 800a6d2:	2202      	movs	r2, #2
 800a6d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a6d8:	69fb      	ldr	r3, [r7, #28]
 800a6da:	9301      	str	r3, [sp, #4]
 800a6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6de:	9300      	str	r3, [sp, #0]
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	687a      	ldr	r2, [r7, #4]
 800a6e4:	68b9      	ldr	r1, [r7, #8]
 800a6e6:	68f8      	ldr	r0, [r7, #12]
 800a6e8:	f000 f805 	bl	800a6f6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800a6ec:	69fb      	ldr	r3, [r7, #28]
	}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3720      	adds	r7, #32
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}

0800a6f6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800a6f6:	b580      	push	{r7, lr}
 800a6f8:	b086      	sub	sp, #24
 800a6fa:	af00      	add	r7, sp, #0
 800a6fc:	60f8      	str	r0, [r7, #12]
 800a6fe:	60b9      	str	r1, [r7, #8]
 800a700:	607a      	str	r2, [r7, #4]
 800a702:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d10a      	bne.n	800a720 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800a70a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a70e:	f383 8811 	msr	BASEPRI, r3
 800a712:	f3bf 8f6f 	isb	sy
 800a716:	f3bf 8f4f 	dsb	sy
 800a71a:	617b      	str	r3, [r7, #20]
}
 800a71c:	bf00      	nop
 800a71e:	e7fe      	b.n	800a71e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800a720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a722:	2b00      	cmp	r3, #0
 800a724:	d01e      	beq.n	800a764 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800a726:	f000 fae7 	bl	800acf8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800a72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a72c:	68fa      	ldr	r2, [r7, #12]
 800a72e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800a730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a732:	68ba      	ldr	r2, [r7, #8]
 800a734:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800a736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a738:	683a      	ldr	r2, [r7, #0]
 800a73a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800a73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a73e:	6a3a      	ldr	r2, [r7, #32]
 800a740:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800a742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a744:	3304      	adds	r3, #4
 800a746:	4618      	mov	r0, r3
 800a748:	f7fe f9f6 	bl	8008b38 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d008      	beq.n	800a764 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800a752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a754:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a758:	f043 0304 	orr.w	r3, r3, #4
 800a75c:	b2da      	uxtb	r2, r3
 800a75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a760:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800a764:	bf00      	nop
 800a766:	3718      	adds	r7, #24
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}

0800a76c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b08a      	sub	sp, #40	; 0x28
 800a770:	af00      	add	r7, sp, #0
 800a772:	60f8      	str	r0, [r7, #12]
 800a774:	60b9      	str	r1, [r7, #8]
 800a776:	607a      	str	r2, [r7, #4]
 800a778:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a77a:	2300      	movs	r3, #0
 800a77c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d10a      	bne.n	800a79a <xTimerGenericCommand+0x2e>
	__asm volatile
 800a784:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a788:	f383 8811 	msr	BASEPRI, r3
 800a78c:	f3bf 8f6f 	isb	sy
 800a790:	f3bf 8f4f 	dsb	sy
 800a794:	623b      	str	r3, [r7, #32]
}
 800a796:	bf00      	nop
 800a798:	e7fe      	b.n	800a798 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a79a:	4b1a      	ldr	r3, [pc, #104]	; (800a804 <xTimerGenericCommand+0x98>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d02a      	beq.n	800a7f8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a7a2:	68bb      	ldr	r3, [r7, #8]
 800a7a4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	2b05      	cmp	r3, #5
 800a7b2:	dc18      	bgt.n	800a7e6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a7b4:	f7ff fe18 	bl	800a3e8 <xTaskGetSchedulerState>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	2b02      	cmp	r3, #2
 800a7bc:	d109      	bne.n	800a7d2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a7be:	4b11      	ldr	r3, [pc, #68]	; (800a804 <xTimerGenericCommand+0x98>)
 800a7c0:	6818      	ldr	r0, [r3, #0]
 800a7c2:	f107 0110 	add.w	r1, r7, #16
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7ca:	f7fe fb87 	bl	8008edc <xQueueGenericSend>
 800a7ce:	6278      	str	r0, [r7, #36]	; 0x24
 800a7d0:	e012      	b.n	800a7f8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a7d2:	4b0c      	ldr	r3, [pc, #48]	; (800a804 <xTimerGenericCommand+0x98>)
 800a7d4:	6818      	ldr	r0, [r3, #0]
 800a7d6:	f107 0110 	add.w	r1, r7, #16
 800a7da:	2300      	movs	r3, #0
 800a7dc:	2200      	movs	r2, #0
 800a7de:	f7fe fb7d 	bl	8008edc <xQueueGenericSend>
 800a7e2:	6278      	str	r0, [r7, #36]	; 0x24
 800a7e4:	e008      	b.n	800a7f8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a7e6:	4b07      	ldr	r3, [pc, #28]	; (800a804 <xTimerGenericCommand+0x98>)
 800a7e8:	6818      	ldr	r0, [r3, #0]
 800a7ea:	f107 0110 	add.w	r1, r7, #16
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	683a      	ldr	r2, [r7, #0]
 800a7f2:	f7fe fc71 	bl	80090d8 <xQueueGenericSendFromISR>
 800a7f6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	3728      	adds	r7, #40	; 0x28
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd80      	pop	{r7, pc}
 800a802:	bf00      	nop
 800a804:	20000e60 	.word	0x20000e60

0800a808 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b088      	sub	sp, #32
 800a80c:	af02      	add	r7, sp, #8
 800a80e:	6078      	str	r0, [r7, #4]
 800a810:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a812:	4b22      	ldr	r3, [pc, #136]	; (800a89c <prvProcessExpiredTimer+0x94>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	68db      	ldr	r3, [r3, #12]
 800a818:	68db      	ldr	r3, [r3, #12]
 800a81a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	3304      	adds	r3, #4
 800a820:	4618      	mov	r0, r3
 800a822:	f7fe f9f3 	bl	8008c0c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a82c:	f003 0304 	and.w	r3, r3, #4
 800a830:	2b00      	cmp	r3, #0
 800a832:	d022      	beq.n	800a87a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	699a      	ldr	r2, [r3, #24]
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	18d1      	adds	r1, r2, r3
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	683a      	ldr	r2, [r7, #0]
 800a840:	6978      	ldr	r0, [r7, #20]
 800a842:	f000 f8d1 	bl	800a9e8 <prvInsertTimerInActiveList>
 800a846:	4603      	mov	r3, r0
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d01f      	beq.n	800a88c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a84c:	2300      	movs	r3, #0
 800a84e:	9300      	str	r3, [sp, #0]
 800a850:	2300      	movs	r3, #0
 800a852:	687a      	ldr	r2, [r7, #4]
 800a854:	2100      	movs	r1, #0
 800a856:	6978      	ldr	r0, [r7, #20]
 800a858:	f7ff ff88 	bl	800a76c <xTimerGenericCommand>
 800a85c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d113      	bne.n	800a88c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a864:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a868:	f383 8811 	msr	BASEPRI, r3
 800a86c:	f3bf 8f6f 	isb	sy
 800a870:	f3bf 8f4f 	dsb	sy
 800a874:	60fb      	str	r3, [r7, #12]
}
 800a876:	bf00      	nop
 800a878:	e7fe      	b.n	800a878 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a880:	f023 0301 	bic.w	r3, r3, #1
 800a884:	b2da      	uxtb	r2, r3
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	6a1b      	ldr	r3, [r3, #32]
 800a890:	6978      	ldr	r0, [r7, #20]
 800a892:	4798      	blx	r3
}
 800a894:	bf00      	nop
 800a896:	3718      	adds	r7, #24
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}
 800a89c:	20000e58 	.word	0x20000e58

0800a8a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b084      	sub	sp, #16
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a8a8:	f107 0308 	add.w	r3, r7, #8
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f000 f857 	bl	800a960 <prvGetNextExpireTime>
 800a8b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	4619      	mov	r1, r3
 800a8b8:	68f8      	ldr	r0, [r7, #12]
 800a8ba:	f000 f803 	bl	800a8c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a8be:	f000 f8d5 	bl	800aa6c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a8c2:	e7f1      	b.n	800a8a8 <prvTimerTask+0x8>

0800a8c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b084      	sub	sp, #16
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a8ce:	f7ff f9a9 	bl	8009c24 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a8d2:	f107 0308 	add.w	r3, r7, #8
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f000 f866 	bl	800a9a8 <prvSampleTimeNow>
 800a8dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a8de:	68bb      	ldr	r3, [r7, #8]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d130      	bne.n	800a946 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d10a      	bne.n	800a900 <prvProcessTimerOrBlockTask+0x3c>
 800a8ea:	687a      	ldr	r2, [r7, #4]
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	429a      	cmp	r2, r3
 800a8f0:	d806      	bhi.n	800a900 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a8f2:	f7ff f9a5 	bl	8009c40 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a8f6:	68f9      	ldr	r1, [r7, #12]
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f7ff ff85 	bl	800a808 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a8fe:	e024      	b.n	800a94a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d008      	beq.n	800a918 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a906:	4b13      	ldr	r3, [pc, #76]	; (800a954 <prvProcessTimerOrBlockTask+0x90>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d101      	bne.n	800a914 <prvProcessTimerOrBlockTask+0x50>
 800a910:	2301      	movs	r3, #1
 800a912:	e000      	b.n	800a916 <prvProcessTimerOrBlockTask+0x52>
 800a914:	2300      	movs	r3, #0
 800a916:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a918:	4b0f      	ldr	r3, [pc, #60]	; (800a958 <prvProcessTimerOrBlockTask+0x94>)
 800a91a:	6818      	ldr	r0, [r3, #0]
 800a91c:	687a      	ldr	r2, [r7, #4]
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	1ad3      	subs	r3, r2, r3
 800a922:	683a      	ldr	r2, [r7, #0]
 800a924:	4619      	mov	r1, r3
 800a926:	f7fe ff0d 	bl	8009744 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a92a:	f7ff f989 	bl	8009c40 <xTaskResumeAll>
 800a92e:	4603      	mov	r3, r0
 800a930:	2b00      	cmp	r3, #0
 800a932:	d10a      	bne.n	800a94a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a934:	4b09      	ldr	r3, [pc, #36]	; (800a95c <prvProcessTimerOrBlockTask+0x98>)
 800a936:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a93a:	601a      	str	r2, [r3, #0]
 800a93c:	f3bf 8f4f 	dsb	sy
 800a940:	f3bf 8f6f 	isb	sy
}
 800a944:	e001      	b.n	800a94a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a946:	f7ff f97b 	bl	8009c40 <xTaskResumeAll>
}
 800a94a:	bf00      	nop
 800a94c:	3710      	adds	r7, #16
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}
 800a952:	bf00      	nop
 800a954:	20000e5c 	.word	0x20000e5c
 800a958:	20000e60 	.word	0x20000e60
 800a95c:	e000ed04 	.word	0xe000ed04

0800a960 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a960:	b480      	push	{r7}
 800a962:	b085      	sub	sp, #20
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a968:	4b0e      	ldr	r3, [pc, #56]	; (800a9a4 <prvGetNextExpireTime+0x44>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d101      	bne.n	800a976 <prvGetNextExpireTime+0x16>
 800a972:	2201      	movs	r2, #1
 800a974:	e000      	b.n	800a978 <prvGetNextExpireTime+0x18>
 800a976:	2200      	movs	r2, #0
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d105      	bne.n	800a990 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a984:	4b07      	ldr	r3, [pc, #28]	; (800a9a4 <prvGetNextExpireTime+0x44>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	68db      	ldr	r3, [r3, #12]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	60fb      	str	r3, [r7, #12]
 800a98e:	e001      	b.n	800a994 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a990:	2300      	movs	r3, #0
 800a992:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a994:	68fb      	ldr	r3, [r7, #12]
}
 800a996:	4618      	mov	r0, r3
 800a998:	3714      	adds	r7, #20
 800a99a:	46bd      	mov	sp, r7
 800a99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a0:	4770      	bx	lr
 800a9a2:	bf00      	nop
 800a9a4:	20000e58 	.word	0x20000e58

0800a9a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b084      	sub	sp, #16
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a9b0:	f7ff f9e4 	bl	8009d7c <xTaskGetTickCount>
 800a9b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a9b6:	4b0b      	ldr	r3, [pc, #44]	; (800a9e4 <prvSampleTimeNow+0x3c>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	68fa      	ldr	r2, [r7, #12]
 800a9bc:	429a      	cmp	r2, r3
 800a9be:	d205      	bcs.n	800a9cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a9c0:	f000 f936 	bl	800ac30 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2201      	movs	r2, #1
 800a9c8:	601a      	str	r2, [r3, #0]
 800a9ca:	e002      	b.n	800a9d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a9d2:	4a04      	ldr	r2, [pc, #16]	; (800a9e4 <prvSampleTimeNow+0x3c>)
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	3710      	adds	r7, #16
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}
 800a9e2:	bf00      	nop
 800a9e4:	20000e68 	.word	0x20000e68

0800a9e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b086      	sub	sp, #24
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	60f8      	str	r0, [r7, #12]
 800a9f0:	60b9      	str	r1, [r7, #8]
 800a9f2:	607a      	str	r2, [r7, #4]
 800a9f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	68ba      	ldr	r2, [r7, #8]
 800a9fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	68fa      	ldr	r2, [r7, #12]
 800aa04:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800aa06:	68ba      	ldr	r2, [r7, #8]
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	429a      	cmp	r2, r3
 800aa0c:	d812      	bhi.n	800aa34 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa0e:	687a      	ldr	r2, [r7, #4]
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	1ad2      	subs	r2, r2, r3
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	699b      	ldr	r3, [r3, #24]
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	d302      	bcc.n	800aa22 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	617b      	str	r3, [r7, #20]
 800aa20:	e01b      	b.n	800aa5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800aa22:	4b10      	ldr	r3, [pc, #64]	; (800aa64 <prvInsertTimerInActiveList+0x7c>)
 800aa24:	681a      	ldr	r2, [r3, #0]
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	3304      	adds	r3, #4
 800aa2a:	4619      	mov	r1, r3
 800aa2c:	4610      	mov	r0, r2
 800aa2e:	f7fe f8b4 	bl	8008b9a <vListInsert>
 800aa32:	e012      	b.n	800aa5a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800aa34:	687a      	ldr	r2, [r7, #4]
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d206      	bcs.n	800aa4a <prvInsertTimerInActiveList+0x62>
 800aa3c:	68ba      	ldr	r2, [r7, #8]
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	429a      	cmp	r2, r3
 800aa42:	d302      	bcc.n	800aa4a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800aa44:	2301      	movs	r3, #1
 800aa46:	617b      	str	r3, [r7, #20]
 800aa48:	e007      	b.n	800aa5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aa4a:	4b07      	ldr	r3, [pc, #28]	; (800aa68 <prvInsertTimerInActiveList+0x80>)
 800aa4c:	681a      	ldr	r2, [r3, #0]
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	3304      	adds	r3, #4
 800aa52:	4619      	mov	r1, r3
 800aa54:	4610      	mov	r0, r2
 800aa56:	f7fe f8a0 	bl	8008b9a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800aa5a:	697b      	ldr	r3, [r7, #20]
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3718      	adds	r7, #24
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}
 800aa64:	20000e5c 	.word	0x20000e5c
 800aa68:	20000e58 	.word	0x20000e58

0800aa6c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b08e      	sub	sp, #56	; 0x38
 800aa70:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aa72:	e0ca      	b.n	800ac0a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	da18      	bge.n	800aaac <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800aa7a:	1d3b      	adds	r3, r7, #4
 800aa7c:	3304      	adds	r3, #4
 800aa7e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800aa80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d10a      	bne.n	800aa9c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800aa86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa8a:	f383 8811 	msr	BASEPRI, r3
 800aa8e:	f3bf 8f6f 	isb	sy
 800aa92:	f3bf 8f4f 	dsb	sy
 800aa96:	61fb      	str	r3, [r7, #28]
}
 800aa98:	bf00      	nop
 800aa9a:	e7fe      	b.n	800aa9a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800aa9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aaa2:	6850      	ldr	r0, [r2, #4]
 800aaa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aaa6:	6892      	ldr	r2, [r2, #8]
 800aaa8:	4611      	mov	r1, r2
 800aaaa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	f2c0 80aa 	blt.w	800ac08 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800aab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaba:	695b      	ldr	r3, [r3, #20]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d004      	beq.n	800aaca <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac2:	3304      	adds	r3, #4
 800aac4:	4618      	mov	r0, r3
 800aac6:	f7fe f8a1 	bl	8008c0c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aaca:	463b      	mov	r3, r7
 800aacc:	4618      	mov	r0, r3
 800aace:	f7ff ff6b 	bl	800a9a8 <prvSampleTimeNow>
 800aad2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2b09      	cmp	r3, #9
 800aad8:	f200 8097 	bhi.w	800ac0a <prvProcessReceivedCommands+0x19e>
 800aadc:	a201      	add	r2, pc, #4	; (adr r2, 800aae4 <prvProcessReceivedCommands+0x78>)
 800aade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aae2:	bf00      	nop
 800aae4:	0800ab0d 	.word	0x0800ab0d
 800aae8:	0800ab0d 	.word	0x0800ab0d
 800aaec:	0800ab0d 	.word	0x0800ab0d
 800aaf0:	0800ab81 	.word	0x0800ab81
 800aaf4:	0800ab95 	.word	0x0800ab95
 800aaf8:	0800abdf 	.word	0x0800abdf
 800aafc:	0800ab0d 	.word	0x0800ab0d
 800ab00:	0800ab0d 	.word	0x0800ab0d
 800ab04:	0800ab81 	.word	0x0800ab81
 800ab08:	0800ab95 	.word	0x0800ab95
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ab0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab12:	f043 0301 	orr.w	r3, r3, #1
 800ab16:	b2da      	uxtb	r2, r3
 800ab18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ab1e:	68ba      	ldr	r2, [r7, #8]
 800ab20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab22:	699b      	ldr	r3, [r3, #24]
 800ab24:	18d1      	adds	r1, r2, r3
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab2c:	f7ff ff5c 	bl	800a9e8 <prvInsertTimerInActiveList>
 800ab30:	4603      	mov	r3, r0
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d069      	beq.n	800ac0a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ab36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab38:	6a1b      	ldr	r3, [r3, #32]
 800ab3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab3c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ab3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab44:	f003 0304 	and.w	r3, r3, #4
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d05e      	beq.n	800ac0a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ab4c:	68ba      	ldr	r2, [r7, #8]
 800ab4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab50:	699b      	ldr	r3, [r3, #24]
 800ab52:	441a      	add	r2, r3
 800ab54:	2300      	movs	r3, #0
 800ab56:	9300      	str	r3, [sp, #0]
 800ab58:	2300      	movs	r3, #0
 800ab5a:	2100      	movs	r1, #0
 800ab5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab5e:	f7ff fe05 	bl	800a76c <xTimerGenericCommand>
 800ab62:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ab64:	6a3b      	ldr	r3, [r7, #32]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d14f      	bne.n	800ac0a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ab6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab6e:	f383 8811 	msr	BASEPRI, r3
 800ab72:	f3bf 8f6f 	isb	sy
 800ab76:	f3bf 8f4f 	dsb	sy
 800ab7a:	61bb      	str	r3, [r7, #24]
}
 800ab7c:	bf00      	nop
 800ab7e:	e7fe      	b.n	800ab7e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ab80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab86:	f023 0301 	bic.w	r3, r3, #1
 800ab8a:	b2da      	uxtb	r2, r3
 800ab8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ab92:	e03a      	b.n	800ac0a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ab94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab9a:	f043 0301 	orr.w	r3, r3, #1
 800ab9e:	b2da      	uxtb	r2, r3
 800aba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800aba6:	68ba      	ldr	r2, [r7, #8]
 800aba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abaa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800abac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abae:	699b      	ldr	r3, [r3, #24]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d10a      	bne.n	800abca <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800abb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb8:	f383 8811 	msr	BASEPRI, r3
 800abbc:	f3bf 8f6f 	isb	sy
 800abc0:	f3bf 8f4f 	dsb	sy
 800abc4:	617b      	str	r3, [r7, #20]
}
 800abc6:	bf00      	nop
 800abc8:	e7fe      	b.n	800abc8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800abca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abcc:	699a      	ldr	r2, [r3, #24]
 800abce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd0:	18d1      	adds	r1, r2, r3
 800abd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abd8:	f7ff ff06 	bl	800a9e8 <prvInsertTimerInActiveList>
					break;
 800abdc:	e015      	b.n	800ac0a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800abde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abe0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800abe4:	f003 0302 	and.w	r3, r3, #2
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d103      	bne.n	800abf4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800abec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abee:	f000 fbff 	bl	800b3f0 <vPortFree>
 800abf2:	e00a      	b.n	800ac0a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800abf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800abfa:	f023 0301 	bic.w	r3, r3, #1
 800abfe:	b2da      	uxtb	r2, r3
 800ac00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ac06:	e000      	b.n	800ac0a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ac08:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ac0a:	4b08      	ldr	r3, [pc, #32]	; (800ac2c <prvProcessReceivedCommands+0x1c0>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	1d39      	adds	r1, r7, #4
 800ac10:	2200      	movs	r2, #0
 800ac12:	4618      	mov	r0, r3
 800ac14:	f7fe fafc 	bl	8009210 <xQueueReceive>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	f47f af2a 	bne.w	800aa74 <prvProcessReceivedCommands+0x8>
	}
}
 800ac20:	bf00      	nop
 800ac22:	bf00      	nop
 800ac24:	3730      	adds	r7, #48	; 0x30
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}
 800ac2a:	bf00      	nop
 800ac2c:	20000e60 	.word	0x20000e60

0800ac30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b088      	sub	sp, #32
 800ac34:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ac36:	e048      	b.n	800acca <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ac38:	4b2d      	ldr	r3, [pc, #180]	; (800acf0 <prvSwitchTimerLists+0xc0>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	68db      	ldr	r3, [r3, #12]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac42:	4b2b      	ldr	r3, [pc, #172]	; (800acf0 <prvSwitchTimerLists+0xc0>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	68db      	ldr	r3, [r3, #12]
 800ac48:	68db      	ldr	r3, [r3, #12]
 800ac4a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	3304      	adds	r3, #4
 800ac50:	4618      	mov	r0, r3
 800ac52:	f7fd ffdb 	bl	8008c0c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	6a1b      	ldr	r3, [r3, #32]
 800ac5a:	68f8      	ldr	r0, [r7, #12]
 800ac5c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac64:	f003 0304 	and.w	r3, r3, #4
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d02e      	beq.n	800acca <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	699b      	ldr	r3, [r3, #24]
 800ac70:	693a      	ldr	r2, [r7, #16]
 800ac72:	4413      	add	r3, r2
 800ac74:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ac76:	68ba      	ldr	r2, [r7, #8]
 800ac78:	693b      	ldr	r3, [r7, #16]
 800ac7a:	429a      	cmp	r2, r3
 800ac7c:	d90e      	bls.n	800ac9c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	68ba      	ldr	r2, [r7, #8]
 800ac82:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	68fa      	ldr	r2, [r7, #12]
 800ac88:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ac8a:	4b19      	ldr	r3, [pc, #100]	; (800acf0 <prvSwitchTimerLists+0xc0>)
 800ac8c:	681a      	ldr	r2, [r3, #0]
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	3304      	adds	r3, #4
 800ac92:	4619      	mov	r1, r3
 800ac94:	4610      	mov	r0, r2
 800ac96:	f7fd ff80 	bl	8008b9a <vListInsert>
 800ac9a:	e016      	b.n	800acca <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	9300      	str	r3, [sp, #0]
 800aca0:	2300      	movs	r3, #0
 800aca2:	693a      	ldr	r2, [r7, #16]
 800aca4:	2100      	movs	r1, #0
 800aca6:	68f8      	ldr	r0, [r7, #12]
 800aca8:	f7ff fd60 	bl	800a76c <xTimerGenericCommand>
 800acac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d10a      	bne.n	800acca <prvSwitchTimerLists+0x9a>
	__asm volatile
 800acb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb8:	f383 8811 	msr	BASEPRI, r3
 800acbc:	f3bf 8f6f 	isb	sy
 800acc0:	f3bf 8f4f 	dsb	sy
 800acc4:	603b      	str	r3, [r7, #0]
}
 800acc6:	bf00      	nop
 800acc8:	e7fe      	b.n	800acc8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800acca:	4b09      	ldr	r3, [pc, #36]	; (800acf0 <prvSwitchTimerLists+0xc0>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d1b1      	bne.n	800ac38 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800acd4:	4b06      	ldr	r3, [pc, #24]	; (800acf0 <prvSwitchTimerLists+0xc0>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800acda:	4b06      	ldr	r3, [pc, #24]	; (800acf4 <prvSwitchTimerLists+0xc4>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	4a04      	ldr	r2, [pc, #16]	; (800acf0 <prvSwitchTimerLists+0xc0>)
 800ace0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ace2:	4a04      	ldr	r2, [pc, #16]	; (800acf4 <prvSwitchTimerLists+0xc4>)
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	6013      	str	r3, [r2, #0]
}
 800ace8:	bf00      	nop
 800acea:	3718      	adds	r7, #24
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}
 800acf0:	20000e58 	.word	0x20000e58
 800acf4:	20000e5c 	.word	0x20000e5c

0800acf8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b082      	sub	sp, #8
 800acfc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800acfe:	f000 f989 	bl	800b014 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ad02:	4b15      	ldr	r3, [pc, #84]	; (800ad58 <prvCheckForValidListAndQueue+0x60>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d120      	bne.n	800ad4c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ad0a:	4814      	ldr	r0, [pc, #80]	; (800ad5c <prvCheckForValidListAndQueue+0x64>)
 800ad0c:	f7fd fef4 	bl	8008af8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ad10:	4813      	ldr	r0, [pc, #76]	; (800ad60 <prvCheckForValidListAndQueue+0x68>)
 800ad12:	f7fd fef1 	bl	8008af8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ad16:	4b13      	ldr	r3, [pc, #76]	; (800ad64 <prvCheckForValidListAndQueue+0x6c>)
 800ad18:	4a10      	ldr	r2, [pc, #64]	; (800ad5c <prvCheckForValidListAndQueue+0x64>)
 800ad1a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ad1c:	4b12      	ldr	r3, [pc, #72]	; (800ad68 <prvCheckForValidListAndQueue+0x70>)
 800ad1e:	4a10      	ldr	r2, [pc, #64]	; (800ad60 <prvCheckForValidListAndQueue+0x68>)
 800ad20:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ad22:	2300      	movs	r3, #0
 800ad24:	9300      	str	r3, [sp, #0]
 800ad26:	4b11      	ldr	r3, [pc, #68]	; (800ad6c <prvCheckForValidListAndQueue+0x74>)
 800ad28:	4a11      	ldr	r2, [pc, #68]	; (800ad70 <prvCheckForValidListAndQueue+0x78>)
 800ad2a:	2110      	movs	r1, #16
 800ad2c:	200a      	movs	r0, #10
 800ad2e:	f7fd ffff 	bl	8008d30 <xQueueGenericCreateStatic>
 800ad32:	4603      	mov	r3, r0
 800ad34:	4a08      	ldr	r2, [pc, #32]	; (800ad58 <prvCheckForValidListAndQueue+0x60>)
 800ad36:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ad38:	4b07      	ldr	r3, [pc, #28]	; (800ad58 <prvCheckForValidListAndQueue+0x60>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d005      	beq.n	800ad4c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ad40:	4b05      	ldr	r3, [pc, #20]	; (800ad58 <prvCheckForValidListAndQueue+0x60>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	490b      	ldr	r1, [pc, #44]	; (800ad74 <prvCheckForValidListAndQueue+0x7c>)
 800ad46:	4618      	mov	r0, r3
 800ad48:	f7fe fcd2 	bl	80096f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ad4c:	f000 f992 	bl	800b074 <vPortExitCritical>
}
 800ad50:	bf00      	nop
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}
 800ad56:	bf00      	nop
 800ad58:	20000e60 	.word	0x20000e60
 800ad5c:	20000e30 	.word	0x20000e30
 800ad60:	20000e44 	.word	0x20000e44
 800ad64:	20000e58 	.word	0x20000e58
 800ad68:	20000e5c 	.word	0x20000e5c
 800ad6c:	20000f0c 	.word	0x20000f0c
 800ad70:	20000e6c 	.word	0x20000e6c
 800ad74:	0800c63c 	.word	0x0800c63c

0800ad78 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b086      	sub	sp, #24
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d10a      	bne.n	800ada0 <pvTimerGetTimerID+0x28>
	__asm volatile
 800ad8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad8e:	f383 8811 	msr	BASEPRI, r3
 800ad92:	f3bf 8f6f 	isb	sy
 800ad96:	f3bf 8f4f 	dsb	sy
 800ad9a:	60fb      	str	r3, [r7, #12]
}
 800ad9c:	bf00      	nop
 800ad9e:	e7fe      	b.n	800ad9e <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800ada0:	f000 f938 	bl	800b014 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	69db      	ldr	r3, [r3, #28]
 800ada8:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800adaa:	f000 f963 	bl	800b074 <vPortExitCritical>

	return pvReturn;
 800adae:	693b      	ldr	r3, [r7, #16]
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3718      	adds	r7, #24
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}

0800adb8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800adb8:	b480      	push	{r7}
 800adba:	b085      	sub	sp, #20
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	60f8      	str	r0, [r7, #12]
 800adc0:	60b9      	str	r1, [r7, #8]
 800adc2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	3b04      	subs	r3, #4
 800adc8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800add0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	3b04      	subs	r3, #4
 800add6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	f023 0201 	bic.w	r2, r3, #1
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	3b04      	subs	r3, #4
 800ade6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ade8:	4a0c      	ldr	r2, [pc, #48]	; (800ae1c <pxPortInitialiseStack+0x64>)
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	3b14      	subs	r3, #20
 800adf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800adf4:	687a      	ldr	r2, [r7, #4]
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	3b04      	subs	r3, #4
 800adfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f06f 0202 	mvn.w	r2, #2
 800ae06:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	3b20      	subs	r3, #32
 800ae0c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	3714      	adds	r7, #20
 800ae14:	46bd      	mov	sp, r7
 800ae16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1a:	4770      	bx	lr
 800ae1c:	0800ae21 	.word	0x0800ae21

0800ae20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ae20:	b480      	push	{r7}
 800ae22:	b085      	sub	sp, #20
 800ae24:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ae26:	2300      	movs	r3, #0
 800ae28:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ae2a:	4b12      	ldr	r3, [pc, #72]	; (800ae74 <prvTaskExitError+0x54>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae32:	d00a      	beq.n	800ae4a <prvTaskExitError+0x2a>
	__asm volatile
 800ae34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae38:	f383 8811 	msr	BASEPRI, r3
 800ae3c:	f3bf 8f6f 	isb	sy
 800ae40:	f3bf 8f4f 	dsb	sy
 800ae44:	60fb      	str	r3, [r7, #12]
}
 800ae46:	bf00      	nop
 800ae48:	e7fe      	b.n	800ae48 <prvTaskExitError+0x28>
	__asm volatile
 800ae4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae4e:	f383 8811 	msr	BASEPRI, r3
 800ae52:	f3bf 8f6f 	isb	sy
 800ae56:	f3bf 8f4f 	dsb	sy
 800ae5a:	60bb      	str	r3, [r7, #8]
}
 800ae5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ae5e:	bf00      	nop
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d0fc      	beq.n	800ae60 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ae66:	bf00      	nop
 800ae68:	bf00      	nop
 800ae6a:	3714      	adds	r7, #20
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae72:	4770      	bx	lr
 800ae74:	2000002c 	.word	0x2000002c
	...

0800ae80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ae80:	4b07      	ldr	r3, [pc, #28]	; (800aea0 <pxCurrentTCBConst2>)
 800ae82:	6819      	ldr	r1, [r3, #0]
 800ae84:	6808      	ldr	r0, [r1, #0]
 800ae86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae8a:	f380 8809 	msr	PSP, r0
 800ae8e:	f3bf 8f6f 	isb	sy
 800ae92:	f04f 0000 	mov.w	r0, #0
 800ae96:	f380 8811 	msr	BASEPRI, r0
 800ae9a:	4770      	bx	lr
 800ae9c:	f3af 8000 	nop.w

0800aea0 <pxCurrentTCBConst2>:
 800aea0:	20000930 	.word	0x20000930
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aea4:	bf00      	nop
 800aea6:	bf00      	nop

0800aea8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800aea8:	4808      	ldr	r0, [pc, #32]	; (800aecc <prvPortStartFirstTask+0x24>)
 800aeaa:	6800      	ldr	r0, [r0, #0]
 800aeac:	6800      	ldr	r0, [r0, #0]
 800aeae:	f380 8808 	msr	MSP, r0
 800aeb2:	f04f 0000 	mov.w	r0, #0
 800aeb6:	f380 8814 	msr	CONTROL, r0
 800aeba:	b662      	cpsie	i
 800aebc:	b661      	cpsie	f
 800aebe:	f3bf 8f4f 	dsb	sy
 800aec2:	f3bf 8f6f 	isb	sy
 800aec6:	df00      	svc	0
 800aec8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800aeca:	bf00      	nop
 800aecc:	e000ed08 	.word	0xe000ed08

0800aed0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b086      	sub	sp, #24
 800aed4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800aed6:	4b46      	ldr	r3, [pc, #280]	; (800aff0 <xPortStartScheduler+0x120>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	4a46      	ldr	r2, [pc, #280]	; (800aff4 <xPortStartScheduler+0x124>)
 800aedc:	4293      	cmp	r3, r2
 800aede:	d10a      	bne.n	800aef6 <xPortStartScheduler+0x26>
	__asm volatile
 800aee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aee4:	f383 8811 	msr	BASEPRI, r3
 800aee8:	f3bf 8f6f 	isb	sy
 800aeec:	f3bf 8f4f 	dsb	sy
 800aef0:	613b      	str	r3, [r7, #16]
}
 800aef2:	bf00      	nop
 800aef4:	e7fe      	b.n	800aef4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800aef6:	4b3e      	ldr	r3, [pc, #248]	; (800aff0 <xPortStartScheduler+0x120>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	4a3f      	ldr	r2, [pc, #252]	; (800aff8 <xPortStartScheduler+0x128>)
 800aefc:	4293      	cmp	r3, r2
 800aefe:	d10a      	bne.n	800af16 <xPortStartScheduler+0x46>
	__asm volatile
 800af00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af04:	f383 8811 	msr	BASEPRI, r3
 800af08:	f3bf 8f6f 	isb	sy
 800af0c:	f3bf 8f4f 	dsb	sy
 800af10:	60fb      	str	r3, [r7, #12]
}
 800af12:	bf00      	nop
 800af14:	e7fe      	b.n	800af14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800af16:	4b39      	ldr	r3, [pc, #228]	; (800affc <xPortStartScheduler+0x12c>)
 800af18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	781b      	ldrb	r3, [r3, #0]
 800af1e:	b2db      	uxtb	r3, r3
 800af20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	22ff      	movs	r2, #255	; 0xff
 800af26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	781b      	ldrb	r3, [r3, #0]
 800af2c:	b2db      	uxtb	r3, r3
 800af2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800af30:	78fb      	ldrb	r3, [r7, #3]
 800af32:	b2db      	uxtb	r3, r3
 800af34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800af38:	b2da      	uxtb	r2, r3
 800af3a:	4b31      	ldr	r3, [pc, #196]	; (800b000 <xPortStartScheduler+0x130>)
 800af3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800af3e:	4b31      	ldr	r3, [pc, #196]	; (800b004 <xPortStartScheduler+0x134>)
 800af40:	2207      	movs	r2, #7
 800af42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800af44:	e009      	b.n	800af5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800af46:	4b2f      	ldr	r3, [pc, #188]	; (800b004 <xPortStartScheduler+0x134>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	3b01      	subs	r3, #1
 800af4c:	4a2d      	ldr	r2, [pc, #180]	; (800b004 <xPortStartScheduler+0x134>)
 800af4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800af50:	78fb      	ldrb	r3, [r7, #3]
 800af52:	b2db      	uxtb	r3, r3
 800af54:	005b      	lsls	r3, r3, #1
 800af56:	b2db      	uxtb	r3, r3
 800af58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800af5a:	78fb      	ldrb	r3, [r7, #3]
 800af5c:	b2db      	uxtb	r3, r3
 800af5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af62:	2b80      	cmp	r3, #128	; 0x80
 800af64:	d0ef      	beq.n	800af46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800af66:	4b27      	ldr	r3, [pc, #156]	; (800b004 <xPortStartScheduler+0x134>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f1c3 0307 	rsb	r3, r3, #7
 800af6e:	2b04      	cmp	r3, #4
 800af70:	d00a      	beq.n	800af88 <xPortStartScheduler+0xb8>
	__asm volatile
 800af72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af76:	f383 8811 	msr	BASEPRI, r3
 800af7a:	f3bf 8f6f 	isb	sy
 800af7e:	f3bf 8f4f 	dsb	sy
 800af82:	60bb      	str	r3, [r7, #8]
}
 800af84:	bf00      	nop
 800af86:	e7fe      	b.n	800af86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800af88:	4b1e      	ldr	r3, [pc, #120]	; (800b004 <xPortStartScheduler+0x134>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	021b      	lsls	r3, r3, #8
 800af8e:	4a1d      	ldr	r2, [pc, #116]	; (800b004 <xPortStartScheduler+0x134>)
 800af90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800af92:	4b1c      	ldr	r3, [pc, #112]	; (800b004 <xPortStartScheduler+0x134>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800af9a:	4a1a      	ldr	r2, [pc, #104]	; (800b004 <xPortStartScheduler+0x134>)
 800af9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	b2da      	uxtb	r2, r3
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800afa6:	4b18      	ldr	r3, [pc, #96]	; (800b008 <xPortStartScheduler+0x138>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	4a17      	ldr	r2, [pc, #92]	; (800b008 <xPortStartScheduler+0x138>)
 800afac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800afb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800afb2:	4b15      	ldr	r3, [pc, #84]	; (800b008 <xPortStartScheduler+0x138>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	4a14      	ldr	r2, [pc, #80]	; (800b008 <xPortStartScheduler+0x138>)
 800afb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800afbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800afbe:	f000 f8dd 	bl	800b17c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800afc2:	4b12      	ldr	r3, [pc, #72]	; (800b00c <xPortStartScheduler+0x13c>)
 800afc4:	2200      	movs	r2, #0
 800afc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800afc8:	f000 f8fc 	bl	800b1c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800afcc:	4b10      	ldr	r3, [pc, #64]	; (800b010 <xPortStartScheduler+0x140>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	4a0f      	ldr	r2, [pc, #60]	; (800b010 <xPortStartScheduler+0x140>)
 800afd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800afd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800afd8:	f7ff ff66 	bl	800aea8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800afdc:	f7fe ff98 	bl	8009f10 <vTaskSwitchContext>
	prvTaskExitError();
 800afe0:	f7ff ff1e 	bl	800ae20 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800afe4:	2300      	movs	r3, #0
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3718      	adds	r7, #24
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}
 800afee:	bf00      	nop
 800aff0:	e000ed00 	.word	0xe000ed00
 800aff4:	410fc271 	.word	0x410fc271
 800aff8:	410fc270 	.word	0x410fc270
 800affc:	e000e400 	.word	0xe000e400
 800b000:	20000f5c 	.word	0x20000f5c
 800b004:	20000f60 	.word	0x20000f60
 800b008:	e000ed20 	.word	0xe000ed20
 800b00c:	2000002c 	.word	0x2000002c
 800b010:	e000ef34 	.word	0xe000ef34

0800b014 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b014:	b480      	push	{r7}
 800b016:	b083      	sub	sp, #12
 800b018:	af00      	add	r7, sp, #0
	__asm volatile
 800b01a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b01e:	f383 8811 	msr	BASEPRI, r3
 800b022:	f3bf 8f6f 	isb	sy
 800b026:	f3bf 8f4f 	dsb	sy
 800b02a:	607b      	str	r3, [r7, #4]
}
 800b02c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b02e:	4b0f      	ldr	r3, [pc, #60]	; (800b06c <vPortEnterCritical+0x58>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	3301      	adds	r3, #1
 800b034:	4a0d      	ldr	r2, [pc, #52]	; (800b06c <vPortEnterCritical+0x58>)
 800b036:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b038:	4b0c      	ldr	r3, [pc, #48]	; (800b06c <vPortEnterCritical+0x58>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	2b01      	cmp	r3, #1
 800b03e:	d10f      	bne.n	800b060 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b040:	4b0b      	ldr	r3, [pc, #44]	; (800b070 <vPortEnterCritical+0x5c>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	b2db      	uxtb	r3, r3
 800b046:	2b00      	cmp	r3, #0
 800b048:	d00a      	beq.n	800b060 <vPortEnterCritical+0x4c>
	__asm volatile
 800b04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b04e:	f383 8811 	msr	BASEPRI, r3
 800b052:	f3bf 8f6f 	isb	sy
 800b056:	f3bf 8f4f 	dsb	sy
 800b05a:	603b      	str	r3, [r7, #0]
}
 800b05c:	bf00      	nop
 800b05e:	e7fe      	b.n	800b05e <vPortEnterCritical+0x4a>
	}
}
 800b060:	bf00      	nop
 800b062:	370c      	adds	r7, #12
 800b064:	46bd      	mov	sp, r7
 800b066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06a:	4770      	bx	lr
 800b06c:	2000002c 	.word	0x2000002c
 800b070:	e000ed04 	.word	0xe000ed04

0800b074 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b074:	b480      	push	{r7}
 800b076:	b083      	sub	sp, #12
 800b078:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b07a:	4b12      	ldr	r3, [pc, #72]	; (800b0c4 <vPortExitCritical+0x50>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d10a      	bne.n	800b098 <vPortExitCritical+0x24>
	__asm volatile
 800b082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b086:	f383 8811 	msr	BASEPRI, r3
 800b08a:	f3bf 8f6f 	isb	sy
 800b08e:	f3bf 8f4f 	dsb	sy
 800b092:	607b      	str	r3, [r7, #4]
}
 800b094:	bf00      	nop
 800b096:	e7fe      	b.n	800b096 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b098:	4b0a      	ldr	r3, [pc, #40]	; (800b0c4 <vPortExitCritical+0x50>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	3b01      	subs	r3, #1
 800b09e:	4a09      	ldr	r2, [pc, #36]	; (800b0c4 <vPortExitCritical+0x50>)
 800b0a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b0a2:	4b08      	ldr	r3, [pc, #32]	; (800b0c4 <vPortExitCritical+0x50>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d105      	bne.n	800b0b6 <vPortExitCritical+0x42>
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	f383 8811 	msr	BASEPRI, r3
}
 800b0b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b0b6:	bf00      	nop
 800b0b8:	370c      	adds	r7, #12
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c0:	4770      	bx	lr
 800b0c2:	bf00      	nop
 800b0c4:	2000002c 	.word	0x2000002c
	...

0800b0d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b0d0:	f3ef 8009 	mrs	r0, PSP
 800b0d4:	f3bf 8f6f 	isb	sy
 800b0d8:	4b15      	ldr	r3, [pc, #84]	; (800b130 <pxCurrentTCBConst>)
 800b0da:	681a      	ldr	r2, [r3, #0]
 800b0dc:	f01e 0f10 	tst.w	lr, #16
 800b0e0:	bf08      	it	eq
 800b0e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b0e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0ea:	6010      	str	r0, [r2, #0]
 800b0ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b0f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b0f4:	f380 8811 	msr	BASEPRI, r0
 800b0f8:	f3bf 8f4f 	dsb	sy
 800b0fc:	f3bf 8f6f 	isb	sy
 800b100:	f7fe ff06 	bl	8009f10 <vTaskSwitchContext>
 800b104:	f04f 0000 	mov.w	r0, #0
 800b108:	f380 8811 	msr	BASEPRI, r0
 800b10c:	bc09      	pop	{r0, r3}
 800b10e:	6819      	ldr	r1, [r3, #0]
 800b110:	6808      	ldr	r0, [r1, #0]
 800b112:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b116:	f01e 0f10 	tst.w	lr, #16
 800b11a:	bf08      	it	eq
 800b11c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b120:	f380 8809 	msr	PSP, r0
 800b124:	f3bf 8f6f 	isb	sy
 800b128:	4770      	bx	lr
 800b12a:	bf00      	nop
 800b12c:	f3af 8000 	nop.w

0800b130 <pxCurrentTCBConst>:
 800b130:	20000930 	.word	0x20000930
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b134:	bf00      	nop
 800b136:	bf00      	nop

0800b138 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b082      	sub	sp, #8
 800b13c:	af00      	add	r7, sp, #0
	__asm volatile
 800b13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b142:	f383 8811 	msr	BASEPRI, r3
 800b146:	f3bf 8f6f 	isb	sy
 800b14a:	f3bf 8f4f 	dsb	sy
 800b14e:	607b      	str	r3, [r7, #4]
}
 800b150:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b152:	f7fe fe23 	bl	8009d9c <xTaskIncrementTick>
 800b156:	4603      	mov	r3, r0
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d003      	beq.n	800b164 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b15c:	4b06      	ldr	r3, [pc, #24]	; (800b178 <xPortSysTickHandler+0x40>)
 800b15e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b162:	601a      	str	r2, [r3, #0]
 800b164:	2300      	movs	r3, #0
 800b166:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	f383 8811 	msr	BASEPRI, r3
}
 800b16e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b170:	bf00      	nop
 800b172:	3708      	adds	r7, #8
 800b174:	46bd      	mov	sp, r7
 800b176:	bd80      	pop	{r7, pc}
 800b178:	e000ed04 	.word	0xe000ed04

0800b17c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b17c:	b480      	push	{r7}
 800b17e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b180:	4b0b      	ldr	r3, [pc, #44]	; (800b1b0 <vPortSetupTimerInterrupt+0x34>)
 800b182:	2200      	movs	r2, #0
 800b184:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b186:	4b0b      	ldr	r3, [pc, #44]	; (800b1b4 <vPortSetupTimerInterrupt+0x38>)
 800b188:	2200      	movs	r2, #0
 800b18a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b18c:	4b0a      	ldr	r3, [pc, #40]	; (800b1b8 <vPortSetupTimerInterrupt+0x3c>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	4a0a      	ldr	r2, [pc, #40]	; (800b1bc <vPortSetupTimerInterrupt+0x40>)
 800b192:	fba2 2303 	umull	r2, r3, r2, r3
 800b196:	099b      	lsrs	r3, r3, #6
 800b198:	4a09      	ldr	r2, [pc, #36]	; (800b1c0 <vPortSetupTimerInterrupt+0x44>)
 800b19a:	3b01      	subs	r3, #1
 800b19c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b19e:	4b04      	ldr	r3, [pc, #16]	; (800b1b0 <vPortSetupTimerInterrupt+0x34>)
 800b1a0:	2207      	movs	r2, #7
 800b1a2:	601a      	str	r2, [r3, #0]
}
 800b1a4:	bf00      	nop
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ac:	4770      	bx	lr
 800b1ae:	bf00      	nop
 800b1b0:	e000e010 	.word	0xe000e010
 800b1b4:	e000e018 	.word	0xe000e018
 800b1b8:	20000000 	.word	0x20000000
 800b1bc:	10624dd3 	.word	0x10624dd3
 800b1c0:	e000e014 	.word	0xe000e014

0800b1c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b1c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b1d4 <vPortEnableVFP+0x10>
 800b1c8:	6801      	ldr	r1, [r0, #0]
 800b1ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b1ce:	6001      	str	r1, [r0, #0]
 800b1d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b1d2:	bf00      	nop
 800b1d4:	e000ed88 	.word	0xe000ed88

0800b1d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b1d8:	b480      	push	{r7}
 800b1da:	b085      	sub	sp, #20
 800b1dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b1de:	f3ef 8305 	mrs	r3, IPSR
 800b1e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	2b0f      	cmp	r3, #15
 800b1e8:	d914      	bls.n	800b214 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b1ea:	4a17      	ldr	r2, [pc, #92]	; (800b248 <vPortValidateInterruptPriority+0x70>)
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	4413      	add	r3, r2
 800b1f0:	781b      	ldrb	r3, [r3, #0]
 800b1f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b1f4:	4b15      	ldr	r3, [pc, #84]	; (800b24c <vPortValidateInterruptPriority+0x74>)
 800b1f6:	781b      	ldrb	r3, [r3, #0]
 800b1f8:	7afa      	ldrb	r2, [r7, #11]
 800b1fa:	429a      	cmp	r2, r3
 800b1fc:	d20a      	bcs.n	800b214 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b202:	f383 8811 	msr	BASEPRI, r3
 800b206:	f3bf 8f6f 	isb	sy
 800b20a:	f3bf 8f4f 	dsb	sy
 800b20e:	607b      	str	r3, [r7, #4]
}
 800b210:	bf00      	nop
 800b212:	e7fe      	b.n	800b212 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b214:	4b0e      	ldr	r3, [pc, #56]	; (800b250 <vPortValidateInterruptPriority+0x78>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b21c:	4b0d      	ldr	r3, [pc, #52]	; (800b254 <vPortValidateInterruptPriority+0x7c>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	429a      	cmp	r2, r3
 800b222:	d90a      	bls.n	800b23a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b224:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b228:	f383 8811 	msr	BASEPRI, r3
 800b22c:	f3bf 8f6f 	isb	sy
 800b230:	f3bf 8f4f 	dsb	sy
 800b234:	603b      	str	r3, [r7, #0]
}
 800b236:	bf00      	nop
 800b238:	e7fe      	b.n	800b238 <vPortValidateInterruptPriority+0x60>
	}
 800b23a:	bf00      	nop
 800b23c:	3714      	adds	r7, #20
 800b23e:	46bd      	mov	sp, r7
 800b240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b244:	4770      	bx	lr
 800b246:	bf00      	nop
 800b248:	e000e3f0 	.word	0xe000e3f0
 800b24c:	20000f5c 	.word	0x20000f5c
 800b250:	e000ed0c 	.word	0xe000ed0c
 800b254:	20000f60 	.word	0x20000f60

0800b258 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b08a      	sub	sp, #40	; 0x28
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b260:	2300      	movs	r3, #0
 800b262:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b264:	f7fe fcde 	bl	8009c24 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b268:	4b5b      	ldr	r3, [pc, #364]	; (800b3d8 <pvPortMalloc+0x180>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d101      	bne.n	800b274 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b270:	f000 f920 	bl	800b4b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b274:	4b59      	ldr	r3, [pc, #356]	; (800b3dc <pvPortMalloc+0x184>)
 800b276:	681a      	ldr	r2, [r3, #0]
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	4013      	ands	r3, r2
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	f040 8093 	bne.w	800b3a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d01d      	beq.n	800b2c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b288:	2208      	movs	r2, #8
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	4413      	add	r3, r2
 800b28e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f003 0307 	and.w	r3, r3, #7
 800b296:	2b00      	cmp	r3, #0
 800b298:	d014      	beq.n	800b2c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f023 0307 	bic.w	r3, r3, #7
 800b2a0:	3308      	adds	r3, #8
 800b2a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f003 0307 	and.w	r3, r3, #7
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d00a      	beq.n	800b2c4 <pvPortMalloc+0x6c>
	__asm volatile
 800b2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2b2:	f383 8811 	msr	BASEPRI, r3
 800b2b6:	f3bf 8f6f 	isb	sy
 800b2ba:	f3bf 8f4f 	dsb	sy
 800b2be:	617b      	str	r3, [r7, #20]
}
 800b2c0:	bf00      	nop
 800b2c2:	e7fe      	b.n	800b2c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d06e      	beq.n	800b3a8 <pvPortMalloc+0x150>
 800b2ca:	4b45      	ldr	r3, [pc, #276]	; (800b3e0 <pvPortMalloc+0x188>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	687a      	ldr	r2, [r7, #4]
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d869      	bhi.n	800b3a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b2d4:	4b43      	ldr	r3, [pc, #268]	; (800b3e4 <pvPortMalloc+0x18c>)
 800b2d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b2d8:	4b42      	ldr	r3, [pc, #264]	; (800b3e4 <pvPortMalloc+0x18c>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b2de:	e004      	b.n	800b2ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ec:	685b      	ldr	r3, [r3, #4]
 800b2ee:	687a      	ldr	r2, [r7, #4]
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	d903      	bls.n	800b2fc <pvPortMalloc+0xa4>
 800b2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d1f1      	bne.n	800b2e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b2fc:	4b36      	ldr	r3, [pc, #216]	; (800b3d8 <pvPortMalloc+0x180>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b302:	429a      	cmp	r2, r3
 800b304:	d050      	beq.n	800b3a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b306:	6a3b      	ldr	r3, [r7, #32]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	2208      	movs	r2, #8
 800b30c:	4413      	add	r3, r2
 800b30e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b312:	681a      	ldr	r2, [r3, #0]
 800b314:	6a3b      	ldr	r3, [r7, #32]
 800b316:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b31a:	685a      	ldr	r2, [r3, #4]
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	1ad2      	subs	r2, r2, r3
 800b320:	2308      	movs	r3, #8
 800b322:	005b      	lsls	r3, r3, #1
 800b324:	429a      	cmp	r2, r3
 800b326:	d91f      	bls.n	800b368 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	4413      	add	r3, r2
 800b32e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b330:	69bb      	ldr	r3, [r7, #24]
 800b332:	f003 0307 	and.w	r3, r3, #7
 800b336:	2b00      	cmp	r3, #0
 800b338:	d00a      	beq.n	800b350 <pvPortMalloc+0xf8>
	__asm volatile
 800b33a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b33e:	f383 8811 	msr	BASEPRI, r3
 800b342:	f3bf 8f6f 	isb	sy
 800b346:	f3bf 8f4f 	dsb	sy
 800b34a:	613b      	str	r3, [r7, #16]
}
 800b34c:	bf00      	nop
 800b34e:	e7fe      	b.n	800b34e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b352:	685a      	ldr	r2, [r3, #4]
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	1ad2      	subs	r2, r2, r3
 800b358:	69bb      	ldr	r3, [r7, #24]
 800b35a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b35e:	687a      	ldr	r2, [r7, #4]
 800b360:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b362:	69b8      	ldr	r0, [r7, #24]
 800b364:	f000 f908 	bl	800b578 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b368:	4b1d      	ldr	r3, [pc, #116]	; (800b3e0 <pvPortMalloc+0x188>)
 800b36a:	681a      	ldr	r2, [r3, #0]
 800b36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b36e:	685b      	ldr	r3, [r3, #4]
 800b370:	1ad3      	subs	r3, r2, r3
 800b372:	4a1b      	ldr	r2, [pc, #108]	; (800b3e0 <pvPortMalloc+0x188>)
 800b374:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b376:	4b1a      	ldr	r3, [pc, #104]	; (800b3e0 <pvPortMalloc+0x188>)
 800b378:	681a      	ldr	r2, [r3, #0]
 800b37a:	4b1b      	ldr	r3, [pc, #108]	; (800b3e8 <pvPortMalloc+0x190>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	429a      	cmp	r2, r3
 800b380:	d203      	bcs.n	800b38a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b382:	4b17      	ldr	r3, [pc, #92]	; (800b3e0 <pvPortMalloc+0x188>)
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	4a18      	ldr	r2, [pc, #96]	; (800b3e8 <pvPortMalloc+0x190>)
 800b388:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b38c:	685a      	ldr	r2, [r3, #4]
 800b38e:	4b13      	ldr	r3, [pc, #76]	; (800b3dc <pvPortMalloc+0x184>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	431a      	orrs	r2, r3
 800b394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b396:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b39a:	2200      	movs	r2, #0
 800b39c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b39e:	4b13      	ldr	r3, [pc, #76]	; (800b3ec <pvPortMalloc+0x194>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	3301      	adds	r3, #1
 800b3a4:	4a11      	ldr	r2, [pc, #68]	; (800b3ec <pvPortMalloc+0x194>)
 800b3a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b3a8:	f7fe fc4a 	bl	8009c40 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b3ac:	69fb      	ldr	r3, [r7, #28]
 800b3ae:	f003 0307 	and.w	r3, r3, #7
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d00a      	beq.n	800b3cc <pvPortMalloc+0x174>
	__asm volatile
 800b3b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ba:	f383 8811 	msr	BASEPRI, r3
 800b3be:	f3bf 8f6f 	isb	sy
 800b3c2:	f3bf 8f4f 	dsb	sy
 800b3c6:	60fb      	str	r3, [r7, #12]
}
 800b3c8:	bf00      	nop
 800b3ca:	e7fe      	b.n	800b3ca <pvPortMalloc+0x172>
	return pvReturn;
 800b3cc:	69fb      	ldr	r3, [r7, #28]
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3728      	adds	r7, #40	; 0x28
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}
 800b3d6:	bf00      	nop
 800b3d8:	20004b6c 	.word	0x20004b6c
 800b3dc:	20004b80 	.word	0x20004b80
 800b3e0:	20004b70 	.word	0x20004b70
 800b3e4:	20004b64 	.word	0x20004b64
 800b3e8:	20004b74 	.word	0x20004b74
 800b3ec:	20004b78 	.word	0x20004b78

0800b3f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b086      	sub	sp, #24
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d04d      	beq.n	800b49e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b402:	2308      	movs	r3, #8
 800b404:	425b      	negs	r3, r3
 800b406:	697a      	ldr	r2, [r7, #20]
 800b408:	4413      	add	r3, r2
 800b40a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b410:	693b      	ldr	r3, [r7, #16]
 800b412:	685a      	ldr	r2, [r3, #4]
 800b414:	4b24      	ldr	r3, [pc, #144]	; (800b4a8 <vPortFree+0xb8>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	4013      	ands	r3, r2
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d10a      	bne.n	800b434 <vPortFree+0x44>
	__asm volatile
 800b41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b422:	f383 8811 	msr	BASEPRI, r3
 800b426:	f3bf 8f6f 	isb	sy
 800b42a:	f3bf 8f4f 	dsb	sy
 800b42e:	60fb      	str	r3, [r7, #12]
}
 800b430:	bf00      	nop
 800b432:	e7fe      	b.n	800b432 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d00a      	beq.n	800b452 <vPortFree+0x62>
	__asm volatile
 800b43c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b440:	f383 8811 	msr	BASEPRI, r3
 800b444:	f3bf 8f6f 	isb	sy
 800b448:	f3bf 8f4f 	dsb	sy
 800b44c:	60bb      	str	r3, [r7, #8]
}
 800b44e:	bf00      	nop
 800b450:	e7fe      	b.n	800b450 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b452:	693b      	ldr	r3, [r7, #16]
 800b454:	685a      	ldr	r2, [r3, #4]
 800b456:	4b14      	ldr	r3, [pc, #80]	; (800b4a8 <vPortFree+0xb8>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	4013      	ands	r3, r2
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d01e      	beq.n	800b49e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b460:	693b      	ldr	r3, [r7, #16]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d11a      	bne.n	800b49e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b468:	693b      	ldr	r3, [r7, #16]
 800b46a:	685a      	ldr	r2, [r3, #4]
 800b46c:	4b0e      	ldr	r3, [pc, #56]	; (800b4a8 <vPortFree+0xb8>)
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	43db      	mvns	r3, r3
 800b472:	401a      	ands	r2, r3
 800b474:	693b      	ldr	r3, [r7, #16]
 800b476:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b478:	f7fe fbd4 	bl	8009c24 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	685a      	ldr	r2, [r3, #4]
 800b480:	4b0a      	ldr	r3, [pc, #40]	; (800b4ac <vPortFree+0xbc>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	4413      	add	r3, r2
 800b486:	4a09      	ldr	r2, [pc, #36]	; (800b4ac <vPortFree+0xbc>)
 800b488:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b48a:	6938      	ldr	r0, [r7, #16]
 800b48c:	f000 f874 	bl	800b578 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b490:	4b07      	ldr	r3, [pc, #28]	; (800b4b0 <vPortFree+0xc0>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	3301      	adds	r3, #1
 800b496:	4a06      	ldr	r2, [pc, #24]	; (800b4b0 <vPortFree+0xc0>)
 800b498:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b49a:	f7fe fbd1 	bl	8009c40 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b49e:	bf00      	nop
 800b4a0:	3718      	adds	r7, #24
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}
 800b4a6:	bf00      	nop
 800b4a8:	20004b80 	.word	0x20004b80
 800b4ac:	20004b70 	.word	0x20004b70
 800b4b0:	20004b7c 	.word	0x20004b7c

0800b4b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b085      	sub	sp, #20
 800b4b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b4ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b4be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b4c0:	4b27      	ldr	r3, [pc, #156]	; (800b560 <prvHeapInit+0xac>)
 800b4c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	f003 0307 	and.w	r3, r3, #7
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d00c      	beq.n	800b4e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	3307      	adds	r3, #7
 800b4d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	f023 0307 	bic.w	r3, r3, #7
 800b4da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b4dc:	68ba      	ldr	r2, [r7, #8]
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	1ad3      	subs	r3, r2, r3
 800b4e2:	4a1f      	ldr	r2, [pc, #124]	; (800b560 <prvHeapInit+0xac>)
 800b4e4:	4413      	add	r3, r2
 800b4e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b4ec:	4a1d      	ldr	r2, [pc, #116]	; (800b564 <prvHeapInit+0xb0>)
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b4f2:	4b1c      	ldr	r3, [pc, #112]	; (800b564 <prvHeapInit+0xb0>)
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	68ba      	ldr	r2, [r7, #8]
 800b4fc:	4413      	add	r3, r2
 800b4fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b500:	2208      	movs	r2, #8
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	1a9b      	subs	r3, r3, r2
 800b506:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	f023 0307 	bic.w	r3, r3, #7
 800b50e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	4a15      	ldr	r2, [pc, #84]	; (800b568 <prvHeapInit+0xb4>)
 800b514:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b516:	4b14      	ldr	r3, [pc, #80]	; (800b568 <prvHeapInit+0xb4>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	2200      	movs	r2, #0
 800b51c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b51e:	4b12      	ldr	r3, [pc, #72]	; (800b568 <prvHeapInit+0xb4>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	2200      	movs	r2, #0
 800b524:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	68fa      	ldr	r2, [r7, #12]
 800b52e:	1ad2      	subs	r2, r2, r3
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b534:	4b0c      	ldr	r3, [pc, #48]	; (800b568 <prvHeapInit+0xb4>)
 800b536:	681a      	ldr	r2, [r3, #0]
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	685b      	ldr	r3, [r3, #4]
 800b540:	4a0a      	ldr	r2, [pc, #40]	; (800b56c <prvHeapInit+0xb8>)
 800b542:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	685b      	ldr	r3, [r3, #4]
 800b548:	4a09      	ldr	r2, [pc, #36]	; (800b570 <prvHeapInit+0xbc>)
 800b54a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b54c:	4b09      	ldr	r3, [pc, #36]	; (800b574 <prvHeapInit+0xc0>)
 800b54e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b552:	601a      	str	r2, [r3, #0]
}
 800b554:	bf00      	nop
 800b556:	3714      	adds	r7, #20
 800b558:	46bd      	mov	sp, r7
 800b55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55e:	4770      	bx	lr
 800b560:	20000f64 	.word	0x20000f64
 800b564:	20004b64 	.word	0x20004b64
 800b568:	20004b6c 	.word	0x20004b6c
 800b56c:	20004b74 	.word	0x20004b74
 800b570:	20004b70 	.word	0x20004b70
 800b574:	20004b80 	.word	0x20004b80

0800b578 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b578:	b480      	push	{r7}
 800b57a:	b085      	sub	sp, #20
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b580:	4b28      	ldr	r3, [pc, #160]	; (800b624 <prvInsertBlockIntoFreeList+0xac>)
 800b582:	60fb      	str	r3, [r7, #12]
 800b584:	e002      	b.n	800b58c <prvInsertBlockIntoFreeList+0x14>
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	60fb      	str	r3, [r7, #12]
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	687a      	ldr	r2, [r7, #4]
 800b592:	429a      	cmp	r2, r3
 800b594:	d8f7      	bhi.n	800b586 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	685b      	ldr	r3, [r3, #4]
 800b59e:	68ba      	ldr	r2, [r7, #8]
 800b5a0:	4413      	add	r3, r2
 800b5a2:	687a      	ldr	r2, [r7, #4]
 800b5a4:	429a      	cmp	r2, r3
 800b5a6:	d108      	bne.n	800b5ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	685a      	ldr	r2, [r3, #4]
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	685b      	ldr	r3, [r3, #4]
 800b5b0:	441a      	add	r2, r3
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	685b      	ldr	r3, [r3, #4]
 800b5c2:	68ba      	ldr	r2, [r7, #8]
 800b5c4:	441a      	add	r2, r3
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	429a      	cmp	r2, r3
 800b5cc:	d118      	bne.n	800b600 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	681a      	ldr	r2, [r3, #0]
 800b5d2:	4b15      	ldr	r3, [pc, #84]	; (800b628 <prvInsertBlockIntoFreeList+0xb0>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	429a      	cmp	r2, r3
 800b5d8:	d00d      	beq.n	800b5f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	685a      	ldr	r2, [r3, #4]
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	685b      	ldr	r3, [r3, #4]
 800b5e4:	441a      	add	r2, r3
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	681a      	ldr	r2, [r3, #0]
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	601a      	str	r2, [r3, #0]
 800b5f4:	e008      	b.n	800b608 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b5f6:	4b0c      	ldr	r3, [pc, #48]	; (800b628 <prvInsertBlockIntoFreeList+0xb0>)
 800b5f8:	681a      	ldr	r2, [r3, #0]
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	601a      	str	r2, [r3, #0]
 800b5fe:	e003      	b.n	800b608 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	681a      	ldr	r2, [r3, #0]
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b608:	68fa      	ldr	r2, [r7, #12]
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	429a      	cmp	r2, r3
 800b60e:	d002      	beq.n	800b616 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	687a      	ldr	r2, [r7, #4]
 800b614:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b616:	bf00      	nop
 800b618:	3714      	adds	r7, #20
 800b61a:	46bd      	mov	sp, r7
 800b61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b620:	4770      	bx	lr
 800b622:	bf00      	nop
 800b624:	20004b64 	.word	0x20004b64
 800b628:	20004b6c 	.word	0x20004b6c

0800b62c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b630:	2201      	movs	r2, #1
 800b632:	490e      	ldr	r1, [pc, #56]	; (800b66c <MX_USB_HOST_Init+0x40>)
 800b634:	480e      	ldr	r0, [pc, #56]	; (800b670 <MX_USB_HOST_Init+0x44>)
 800b636:	f7fb f88f 	bl	8006758 <USBH_Init>
 800b63a:	4603      	mov	r3, r0
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d001      	beq.n	800b644 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b640:	f7f5 fda4 	bl	800118c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b644:	490b      	ldr	r1, [pc, #44]	; (800b674 <MX_USB_HOST_Init+0x48>)
 800b646:	480a      	ldr	r0, [pc, #40]	; (800b670 <MX_USB_HOST_Init+0x44>)
 800b648:	f7fb f936 	bl	80068b8 <USBH_RegisterClass>
 800b64c:	4603      	mov	r3, r0
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d001      	beq.n	800b656 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b652:	f7f5 fd9b 	bl	800118c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b656:	4806      	ldr	r0, [pc, #24]	; (800b670 <MX_USB_HOST_Init+0x44>)
 800b658:	f7fb f9ba 	bl	80069d0 <USBH_Start>
 800b65c:	4603      	mov	r3, r0
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d001      	beq.n	800b666 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b662:	f7f5 fd93 	bl	800118c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b666:	bf00      	nop
 800b668:	bd80      	pop	{r7, pc}
 800b66a:	bf00      	nop
 800b66c:	0800b679 	.word	0x0800b679
 800b670:	20004b84 	.word	0x20004b84
 800b674:	2000000c 	.word	0x2000000c

0800b678 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b678:	b480      	push	{r7}
 800b67a:	b083      	sub	sp, #12
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
 800b680:	460b      	mov	r3, r1
 800b682:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b684:	78fb      	ldrb	r3, [r7, #3]
 800b686:	3b01      	subs	r3, #1
 800b688:	2b04      	cmp	r3, #4
 800b68a:	d819      	bhi.n	800b6c0 <USBH_UserProcess+0x48>
 800b68c:	a201      	add	r2, pc, #4	; (adr r2, 800b694 <USBH_UserProcess+0x1c>)
 800b68e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b692:	bf00      	nop
 800b694:	0800b6c1 	.word	0x0800b6c1
 800b698:	0800b6b1 	.word	0x0800b6b1
 800b69c:	0800b6c1 	.word	0x0800b6c1
 800b6a0:	0800b6b9 	.word	0x0800b6b9
 800b6a4:	0800b6a9 	.word	0x0800b6a9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b6a8:	4b09      	ldr	r3, [pc, #36]	; (800b6d0 <USBH_UserProcess+0x58>)
 800b6aa:	2203      	movs	r2, #3
 800b6ac:	701a      	strb	r2, [r3, #0]
  break;
 800b6ae:	e008      	b.n	800b6c2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b6b0:	4b07      	ldr	r3, [pc, #28]	; (800b6d0 <USBH_UserProcess+0x58>)
 800b6b2:	2202      	movs	r2, #2
 800b6b4:	701a      	strb	r2, [r3, #0]
  break;
 800b6b6:	e004      	b.n	800b6c2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b6b8:	4b05      	ldr	r3, [pc, #20]	; (800b6d0 <USBH_UserProcess+0x58>)
 800b6ba:	2201      	movs	r2, #1
 800b6bc:	701a      	strb	r2, [r3, #0]
  break;
 800b6be:	e000      	b.n	800b6c2 <USBH_UserProcess+0x4a>

  default:
  break;
 800b6c0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b6c2:	bf00      	nop
 800b6c4:	370c      	adds	r7, #12
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6cc:	4770      	bx	lr
 800b6ce:	bf00      	nop
 800b6d0:	20004f68 	.word	0x20004f68

0800b6d4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b08a      	sub	sp, #40	; 0x28
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b6dc:	f107 0314 	add.w	r3, r7, #20
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	601a      	str	r2, [r3, #0]
 800b6e4:	605a      	str	r2, [r3, #4]
 800b6e6:	609a      	str	r2, [r3, #8]
 800b6e8:	60da      	str	r2, [r3, #12]
 800b6ea:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b6f4:	d147      	bne.n	800b786 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	613b      	str	r3, [r7, #16]
 800b6fa:	4b25      	ldr	r3, [pc, #148]	; (800b790 <HAL_HCD_MspInit+0xbc>)
 800b6fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6fe:	4a24      	ldr	r2, [pc, #144]	; (800b790 <HAL_HCD_MspInit+0xbc>)
 800b700:	f043 0301 	orr.w	r3, r3, #1
 800b704:	6313      	str	r3, [r2, #48]	; 0x30
 800b706:	4b22      	ldr	r3, [pc, #136]	; (800b790 <HAL_HCD_MspInit+0xbc>)
 800b708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b70a:	f003 0301 	and.w	r3, r3, #1
 800b70e:	613b      	str	r3, [r7, #16]
 800b710:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b712:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b718:	2300      	movs	r3, #0
 800b71a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b71c:	2300      	movs	r3, #0
 800b71e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b720:	f107 0314 	add.w	r3, r7, #20
 800b724:	4619      	mov	r1, r3
 800b726:	481b      	ldr	r0, [pc, #108]	; (800b794 <HAL_HCD_MspInit+0xc0>)
 800b728:	f7f6 f8dc 	bl	80018e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b72c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800b730:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b732:	2302      	movs	r3, #2
 800b734:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b736:	2300      	movs	r3, #0
 800b738:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b73a:	2300      	movs	r3, #0
 800b73c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b73e:	230a      	movs	r3, #10
 800b740:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b742:	f107 0314 	add.w	r3, r7, #20
 800b746:	4619      	mov	r1, r3
 800b748:	4812      	ldr	r0, [pc, #72]	; (800b794 <HAL_HCD_MspInit+0xc0>)
 800b74a:	f7f6 f8cb 	bl	80018e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b74e:	4b10      	ldr	r3, [pc, #64]	; (800b790 <HAL_HCD_MspInit+0xbc>)
 800b750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b752:	4a0f      	ldr	r2, [pc, #60]	; (800b790 <HAL_HCD_MspInit+0xbc>)
 800b754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b758:	6353      	str	r3, [r2, #52]	; 0x34
 800b75a:	2300      	movs	r3, #0
 800b75c:	60fb      	str	r3, [r7, #12]
 800b75e:	4b0c      	ldr	r3, [pc, #48]	; (800b790 <HAL_HCD_MspInit+0xbc>)
 800b760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b762:	4a0b      	ldr	r2, [pc, #44]	; (800b790 <HAL_HCD_MspInit+0xbc>)
 800b764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b768:	6453      	str	r3, [r2, #68]	; 0x44
 800b76a:	4b09      	ldr	r3, [pc, #36]	; (800b790 <HAL_HCD_MspInit+0xbc>)
 800b76c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b76e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b772:	60fb      	str	r3, [r7, #12]
 800b774:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800b776:	2200      	movs	r2, #0
 800b778:	2105      	movs	r1, #5
 800b77a:	2043      	movs	r0, #67	; 0x43
 800b77c:	f7f6 f87b 	bl	8001876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b780:	2043      	movs	r0, #67	; 0x43
 800b782:	f7f6 f894 	bl	80018ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b786:	bf00      	nop
 800b788:	3728      	adds	r7, #40	; 0x28
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd80      	pop	{r7, pc}
 800b78e:	bf00      	nop
 800b790:	40023800 	.word	0x40023800
 800b794:	40020000 	.word	0x40020000

0800b798 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b082      	sub	sp, #8
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f7fb fdc9 	bl	800733e <USBH_LL_IncTimer>
}
 800b7ac:	bf00      	nop
 800b7ae:	3708      	adds	r7, #8
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}

0800b7b4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b082      	sub	sp, #8
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f7fb fe0d 	bl	80073e2 <USBH_LL_Connect>
}
 800b7c8:	bf00      	nop
 800b7ca:	3708      	adds	r7, #8
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}

0800b7d0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b082      	sub	sp, #8
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b7de:	4618      	mov	r0, r3
 800b7e0:	f7fb fe22 	bl	8007428 <USBH_LL_Disconnect>
}
 800b7e4:	bf00      	nop
 800b7e6:	3708      	adds	r7, #8
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}

0800b7ec <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b082      	sub	sp, #8
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
 800b7f4:	460b      	mov	r3, r1
 800b7f6:	70fb      	strb	r3, [r7, #3]
 800b7f8:	4613      	mov	r3, r2
 800b7fa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b802:	4618      	mov	r0, r3
 800b804:	f7fb fe59 	bl	80074ba <USBH_LL_NotifyURBChange>
#endif
}
 800b808:	bf00      	nop
 800b80a:	3708      	adds	r7, #8
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}

0800b810 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b082      	sub	sp, #8
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b81e:	4618      	mov	r0, r3
 800b820:	f7fb fdb7 	bl	8007392 <USBH_LL_PortEnabled>
}
 800b824:	bf00      	nop
 800b826:	3708      	adds	r7, #8
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}

0800b82c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b082      	sub	sp, #8
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b83a:	4618      	mov	r0, r3
 800b83c:	f7fb fdc3 	bl	80073c6 <USBH_LL_PortDisabled>
}
 800b840:	bf00      	nop
 800b842:	3708      	adds	r7, #8
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}

0800b848 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b082      	sub	sp, #8
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b856:	2b01      	cmp	r3, #1
 800b858:	d12a      	bne.n	800b8b0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b85a:	4a18      	ldr	r2, [pc, #96]	; (800b8bc <USBH_LL_Init+0x74>)
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	4a15      	ldr	r2, [pc, #84]	; (800b8bc <USBH_LL_Init+0x74>)
 800b866:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b86a:	4b14      	ldr	r3, [pc, #80]	; (800b8bc <USBH_LL_Init+0x74>)
 800b86c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b870:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b872:	4b12      	ldr	r3, [pc, #72]	; (800b8bc <USBH_LL_Init+0x74>)
 800b874:	2208      	movs	r2, #8
 800b876:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b878:	4b10      	ldr	r3, [pc, #64]	; (800b8bc <USBH_LL_Init+0x74>)
 800b87a:	2201      	movs	r2, #1
 800b87c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b87e:	4b0f      	ldr	r3, [pc, #60]	; (800b8bc <USBH_LL_Init+0x74>)
 800b880:	2200      	movs	r2, #0
 800b882:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b884:	4b0d      	ldr	r3, [pc, #52]	; (800b8bc <USBH_LL_Init+0x74>)
 800b886:	2202      	movs	r2, #2
 800b888:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b88a:	4b0c      	ldr	r3, [pc, #48]	; (800b8bc <USBH_LL_Init+0x74>)
 800b88c:	2200      	movs	r2, #0
 800b88e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b890:	480a      	ldr	r0, [pc, #40]	; (800b8bc <USBH_LL_Init+0x74>)
 800b892:	f7f6 fa0e 	bl	8001cb2 <HAL_HCD_Init>
 800b896:	4603      	mov	r3, r0
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d001      	beq.n	800b8a0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b89c:	f7f5 fc76 	bl	800118c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b8a0:	4806      	ldr	r0, [pc, #24]	; (800b8bc <USBH_LL_Init+0x74>)
 800b8a2:	f7f6 fdf2 	bl	800248a <HAL_HCD_GetCurrentFrame>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	4619      	mov	r1, r3
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f7fb fd38 	bl	8007320 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b8b0:	2300      	movs	r3, #0
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3708      	adds	r7, #8
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}
 800b8ba:	bf00      	nop
 800b8bc:	20004f6c 	.word	0x20004f6c

0800b8c0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b084      	sub	sp, #16
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f7f6 fd61 	bl	800239e <HAL_HCD_Start>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b8e0:	7bfb      	ldrb	r3, [r7, #15]
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f000 f95c 	bl	800bba0 <USBH_Get_USB_Status>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3710      	adds	r7, #16
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}

0800b8f6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b8f6:	b580      	push	{r7, lr}
 800b8f8:	b084      	sub	sp, #16
 800b8fa:	af00      	add	r7, sp, #0
 800b8fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8fe:	2300      	movs	r3, #0
 800b900:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b902:	2300      	movs	r3, #0
 800b904:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b90c:	4618      	mov	r0, r3
 800b90e:	f7f6 fd69 	bl	80023e4 <HAL_HCD_Stop>
 800b912:	4603      	mov	r3, r0
 800b914:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b916:	7bfb      	ldrb	r3, [r7, #15]
 800b918:	4618      	mov	r0, r3
 800b91a:	f000 f941 	bl	800bba0 <USBH_Get_USB_Status>
 800b91e:	4603      	mov	r3, r0
 800b920:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b922:	7bbb      	ldrb	r3, [r7, #14]
}
 800b924:	4618      	mov	r0, r3
 800b926:	3710      	adds	r7, #16
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}

0800b92c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b084      	sub	sp, #16
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b934:	2301      	movs	r3, #1
 800b936:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b93e:	4618      	mov	r0, r3
 800b940:	f7f6 fdb1 	bl	80024a6 <HAL_HCD_GetCurrentSpeed>
 800b944:	4603      	mov	r3, r0
 800b946:	2b02      	cmp	r3, #2
 800b948:	d00c      	beq.n	800b964 <USBH_LL_GetSpeed+0x38>
 800b94a:	2b02      	cmp	r3, #2
 800b94c:	d80d      	bhi.n	800b96a <USBH_LL_GetSpeed+0x3e>
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d002      	beq.n	800b958 <USBH_LL_GetSpeed+0x2c>
 800b952:	2b01      	cmp	r3, #1
 800b954:	d003      	beq.n	800b95e <USBH_LL_GetSpeed+0x32>
 800b956:	e008      	b.n	800b96a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b958:	2300      	movs	r3, #0
 800b95a:	73fb      	strb	r3, [r7, #15]
    break;
 800b95c:	e008      	b.n	800b970 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b95e:	2301      	movs	r3, #1
 800b960:	73fb      	strb	r3, [r7, #15]
    break;
 800b962:	e005      	b.n	800b970 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b964:	2302      	movs	r3, #2
 800b966:	73fb      	strb	r3, [r7, #15]
    break;
 800b968:	e002      	b.n	800b970 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b96a:	2301      	movs	r3, #1
 800b96c:	73fb      	strb	r3, [r7, #15]
    break;
 800b96e:	bf00      	nop
  }
  return  speed;
 800b970:	7bfb      	ldrb	r3, [r7, #15]
}
 800b972:	4618      	mov	r0, r3
 800b974:	3710      	adds	r7, #16
 800b976:	46bd      	mov	sp, r7
 800b978:	bd80      	pop	{r7, pc}

0800b97a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b97a:	b580      	push	{r7, lr}
 800b97c:	b084      	sub	sp, #16
 800b97e:	af00      	add	r7, sp, #0
 800b980:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b982:	2300      	movs	r3, #0
 800b984:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b986:	2300      	movs	r3, #0
 800b988:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b990:	4618      	mov	r0, r3
 800b992:	f7f6 fd44 	bl	800241e <HAL_HCD_ResetPort>
 800b996:	4603      	mov	r3, r0
 800b998:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b99a:	7bfb      	ldrb	r3, [r7, #15]
 800b99c:	4618      	mov	r0, r3
 800b99e:	f000 f8ff 	bl	800bba0 <USBH_Get_USB_Status>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	3710      	adds	r7, #16
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bd80      	pop	{r7, pc}

0800b9b0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b082      	sub	sp, #8
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
 800b9b8:	460b      	mov	r3, r1
 800b9ba:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b9c2:	78fa      	ldrb	r2, [r7, #3]
 800b9c4:	4611      	mov	r1, r2
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	f7f6 fd4b 	bl	8002462 <HAL_HCD_HC_GetXferCount>
 800b9cc:	4603      	mov	r3, r0
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	3708      	adds	r7, #8
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bd80      	pop	{r7, pc}

0800b9d6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b9d6:	b590      	push	{r4, r7, lr}
 800b9d8:	b089      	sub	sp, #36	; 0x24
 800b9da:	af04      	add	r7, sp, #16
 800b9dc:	6078      	str	r0, [r7, #4]
 800b9de:	4608      	mov	r0, r1
 800b9e0:	4611      	mov	r1, r2
 800b9e2:	461a      	mov	r2, r3
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	70fb      	strb	r3, [r7, #3]
 800b9e8:	460b      	mov	r3, r1
 800b9ea:	70bb      	strb	r3, [r7, #2]
 800b9ec:	4613      	mov	r3, r2
 800b9ee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b9fe:	787c      	ldrb	r4, [r7, #1]
 800ba00:	78ba      	ldrb	r2, [r7, #2]
 800ba02:	78f9      	ldrb	r1, [r7, #3]
 800ba04:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ba06:	9302      	str	r3, [sp, #8]
 800ba08:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ba0c:	9301      	str	r3, [sp, #4]
 800ba0e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ba12:	9300      	str	r3, [sp, #0]
 800ba14:	4623      	mov	r3, r4
 800ba16:	f7f6 f9ae 	bl	8001d76 <HAL_HCD_HC_Init>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ba1e:	7bfb      	ldrb	r3, [r7, #15]
 800ba20:	4618      	mov	r0, r3
 800ba22:	f000 f8bd 	bl	800bba0 <USBH_Get_USB_Status>
 800ba26:	4603      	mov	r3, r0
 800ba28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba2a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3714      	adds	r7, #20
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd90      	pop	{r4, r7, pc}

0800ba34 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b084      	sub	sp, #16
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
 800ba3c:	460b      	mov	r3, r1
 800ba3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba40:	2300      	movs	r3, #0
 800ba42:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ba44:	2300      	movs	r3, #0
 800ba46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ba4e:	78fa      	ldrb	r2, [r7, #3]
 800ba50:	4611      	mov	r1, r2
 800ba52:	4618      	mov	r0, r3
 800ba54:	f7f6 fa1e 	bl	8001e94 <HAL_HCD_HC_Halt>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ba5c:	7bfb      	ldrb	r3, [r7, #15]
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f000 f89e 	bl	800bba0 <USBH_Get_USB_Status>
 800ba64:	4603      	mov	r3, r0
 800ba66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba68:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3710      	adds	r7, #16
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}

0800ba72 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ba72:	b590      	push	{r4, r7, lr}
 800ba74:	b089      	sub	sp, #36	; 0x24
 800ba76:	af04      	add	r7, sp, #16
 800ba78:	6078      	str	r0, [r7, #4]
 800ba7a:	4608      	mov	r0, r1
 800ba7c:	4611      	mov	r1, r2
 800ba7e:	461a      	mov	r2, r3
 800ba80:	4603      	mov	r3, r0
 800ba82:	70fb      	strb	r3, [r7, #3]
 800ba84:	460b      	mov	r3, r1
 800ba86:	70bb      	strb	r3, [r7, #2]
 800ba88:	4613      	mov	r3, r2
 800ba8a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ba90:	2300      	movs	r3, #0
 800ba92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ba9a:	787c      	ldrb	r4, [r7, #1]
 800ba9c:	78ba      	ldrb	r2, [r7, #2]
 800ba9e:	78f9      	ldrb	r1, [r7, #3]
 800baa0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800baa4:	9303      	str	r3, [sp, #12]
 800baa6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800baa8:	9302      	str	r3, [sp, #8]
 800baaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baac:	9301      	str	r3, [sp, #4]
 800baae:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bab2:	9300      	str	r3, [sp, #0]
 800bab4:	4623      	mov	r3, r4
 800bab6:	f7f6 fa11 	bl	8001edc <HAL_HCD_HC_SubmitRequest>
 800baba:	4603      	mov	r3, r0
 800babc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800babe:	7bfb      	ldrb	r3, [r7, #15]
 800bac0:	4618      	mov	r0, r3
 800bac2:	f000 f86d 	bl	800bba0 <USBH_Get_USB_Status>
 800bac6:	4603      	mov	r3, r0
 800bac8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800baca:	7bbb      	ldrb	r3, [r7, #14]
}
 800bacc:	4618      	mov	r0, r3
 800bace:	3714      	adds	r7, #20
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd90      	pop	{r4, r7, pc}

0800bad4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b082      	sub	sp, #8
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
 800badc:	460b      	mov	r3, r1
 800bade:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bae6:	78fa      	ldrb	r2, [r7, #3]
 800bae8:	4611      	mov	r1, r2
 800baea:	4618      	mov	r0, r3
 800baec:	f7f6 fca5 	bl	800243a <HAL_HCD_HC_GetURBState>
 800baf0:	4603      	mov	r3, r0
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	3708      	adds	r7, #8
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}

0800bafa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800bafa:	b580      	push	{r7, lr}
 800bafc:	b082      	sub	sp, #8
 800bafe:	af00      	add	r7, sp, #0
 800bb00:	6078      	str	r0, [r7, #4]
 800bb02:	460b      	mov	r3, r1
 800bb04:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800bb0c:	2b01      	cmp	r3, #1
 800bb0e:	d103      	bne.n	800bb18 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800bb10:	78fb      	ldrb	r3, [r7, #3]
 800bb12:	4618      	mov	r0, r3
 800bb14:	f000 f870 	bl	800bbf8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800bb18:	20c8      	movs	r0, #200	; 0xc8
 800bb1a:	f7f5 fdad 	bl	8001678 <HAL_Delay>
  return USBH_OK;
 800bb1e:	2300      	movs	r3, #0
}
 800bb20:	4618      	mov	r0, r3
 800bb22:	3708      	adds	r7, #8
 800bb24:	46bd      	mov	sp, r7
 800bb26:	bd80      	pop	{r7, pc}

0800bb28 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800bb28:	b480      	push	{r7}
 800bb2a:	b085      	sub	sp, #20
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
 800bb30:	460b      	mov	r3, r1
 800bb32:	70fb      	strb	r3, [r7, #3]
 800bb34:	4613      	mov	r3, r2
 800bb36:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bb3e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800bb40:	78fb      	ldrb	r3, [r7, #3]
 800bb42:	68fa      	ldr	r2, [r7, #12]
 800bb44:	212c      	movs	r1, #44	; 0x2c
 800bb46:	fb01 f303 	mul.w	r3, r1, r3
 800bb4a:	4413      	add	r3, r2
 800bb4c:	333b      	adds	r3, #59	; 0x3b
 800bb4e:	781b      	ldrb	r3, [r3, #0]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d009      	beq.n	800bb68 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800bb54:	78fb      	ldrb	r3, [r7, #3]
 800bb56:	68fa      	ldr	r2, [r7, #12]
 800bb58:	212c      	movs	r1, #44	; 0x2c
 800bb5a:	fb01 f303 	mul.w	r3, r1, r3
 800bb5e:	4413      	add	r3, r2
 800bb60:	3354      	adds	r3, #84	; 0x54
 800bb62:	78ba      	ldrb	r2, [r7, #2]
 800bb64:	701a      	strb	r2, [r3, #0]
 800bb66:	e008      	b.n	800bb7a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800bb68:	78fb      	ldrb	r3, [r7, #3]
 800bb6a:	68fa      	ldr	r2, [r7, #12]
 800bb6c:	212c      	movs	r1, #44	; 0x2c
 800bb6e:	fb01 f303 	mul.w	r3, r1, r3
 800bb72:	4413      	add	r3, r2
 800bb74:	3355      	adds	r3, #85	; 0x55
 800bb76:	78ba      	ldrb	r2, [r7, #2]
 800bb78:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800bb7a:	2300      	movs	r3, #0
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3714      	adds	r7, #20
 800bb80:	46bd      	mov	sp, r7
 800bb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb86:	4770      	bx	lr

0800bb88 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b082      	sub	sp, #8
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f7f5 fd71 	bl	8001678 <HAL_Delay>
}
 800bb96:	bf00      	nop
 800bb98:	3708      	adds	r7, #8
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	bd80      	pop	{r7, pc}
	...

0800bba0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bba0:	b480      	push	{r7}
 800bba2:	b085      	sub	sp, #20
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	4603      	mov	r3, r0
 800bba8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bbae:	79fb      	ldrb	r3, [r7, #7]
 800bbb0:	2b03      	cmp	r3, #3
 800bbb2:	d817      	bhi.n	800bbe4 <USBH_Get_USB_Status+0x44>
 800bbb4:	a201      	add	r2, pc, #4	; (adr r2, 800bbbc <USBH_Get_USB_Status+0x1c>)
 800bbb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbba:	bf00      	nop
 800bbbc:	0800bbcd 	.word	0x0800bbcd
 800bbc0:	0800bbd3 	.word	0x0800bbd3
 800bbc4:	0800bbd9 	.word	0x0800bbd9
 800bbc8:	0800bbdf 	.word	0x0800bbdf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800bbcc:	2300      	movs	r3, #0
 800bbce:	73fb      	strb	r3, [r7, #15]
    break;
 800bbd0:	e00b      	b.n	800bbea <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800bbd2:	2302      	movs	r3, #2
 800bbd4:	73fb      	strb	r3, [r7, #15]
    break;
 800bbd6:	e008      	b.n	800bbea <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800bbd8:	2301      	movs	r3, #1
 800bbda:	73fb      	strb	r3, [r7, #15]
    break;
 800bbdc:	e005      	b.n	800bbea <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800bbde:	2302      	movs	r3, #2
 800bbe0:	73fb      	strb	r3, [r7, #15]
    break;
 800bbe2:	e002      	b.n	800bbea <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800bbe4:	2302      	movs	r3, #2
 800bbe6:	73fb      	strb	r3, [r7, #15]
    break;
 800bbe8:	bf00      	nop
  }
  return usb_status;
 800bbea:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	3714      	adds	r7, #20
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf6:	4770      	bx	lr

0800bbf8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b084      	sub	sp, #16
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	4603      	mov	r3, r0
 800bc00:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800bc02:	79fb      	ldrb	r3, [r7, #7]
 800bc04:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800bc06:	79fb      	ldrb	r3, [r7, #7]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d102      	bne.n	800bc12 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	73fb      	strb	r3, [r7, #15]
 800bc10:	e001      	b.n	800bc16 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800bc12:	2301      	movs	r3, #1
 800bc14:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800bc16:	7bfb      	ldrb	r3, [r7, #15]
 800bc18:	461a      	mov	r2, r3
 800bc1a:	2101      	movs	r1, #1
 800bc1c:	4803      	ldr	r0, [pc, #12]	; (800bc2c <MX_DriverVbusFS+0x34>)
 800bc1e:	f7f6 f815 	bl	8001c4c <HAL_GPIO_WritePin>
}
 800bc22:	bf00      	nop
 800bc24:	3710      	adds	r7, #16
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}
 800bc2a:	bf00      	nop
 800bc2c:	40020800 	.word	0x40020800

0800bc30 <__errno>:
 800bc30:	4b01      	ldr	r3, [pc, #4]	; (800bc38 <__errno+0x8>)
 800bc32:	6818      	ldr	r0, [r3, #0]
 800bc34:	4770      	bx	lr
 800bc36:	bf00      	nop
 800bc38:	20000030 	.word	0x20000030

0800bc3c <__libc_init_array>:
 800bc3c:	b570      	push	{r4, r5, r6, lr}
 800bc3e:	4d0d      	ldr	r5, [pc, #52]	; (800bc74 <__libc_init_array+0x38>)
 800bc40:	4c0d      	ldr	r4, [pc, #52]	; (800bc78 <__libc_init_array+0x3c>)
 800bc42:	1b64      	subs	r4, r4, r5
 800bc44:	10a4      	asrs	r4, r4, #2
 800bc46:	2600      	movs	r6, #0
 800bc48:	42a6      	cmp	r6, r4
 800bc4a:	d109      	bne.n	800bc60 <__libc_init_array+0x24>
 800bc4c:	4d0b      	ldr	r5, [pc, #44]	; (800bc7c <__libc_init_array+0x40>)
 800bc4e:	4c0c      	ldr	r4, [pc, #48]	; (800bc80 <__libc_init_array+0x44>)
 800bc50:	f000 fc9e 	bl	800c590 <_init>
 800bc54:	1b64      	subs	r4, r4, r5
 800bc56:	10a4      	asrs	r4, r4, #2
 800bc58:	2600      	movs	r6, #0
 800bc5a:	42a6      	cmp	r6, r4
 800bc5c:	d105      	bne.n	800bc6a <__libc_init_array+0x2e>
 800bc5e:	bd70      	pop	{r4, r5, r6, pc}
 800bc60:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc64:	4798      	blx	r3
 800bc66:	3601      	adds	r6, #1
 800bc68:	e7ee      	b.n	800bc48 <__libc_init_array+0xc>
 800bc6a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc6e:	4798      	blx	r3
 800bc70:	3601      	adds	r6, #1
 800bc72:	e7f2      	b.n	800bc5a <__libc_init_array+0x1e>
 800bc74:	0800e774 	.word	0x0800e774
 800bc78:	0800e774 	.word	0x0800e774
 800bc7c:	0800e774 	.word	0x0800e774
 800bc80:	0800e778 	.word	0x0800e778

0800bc84 <malloc>:
 800bc84:	4b02      	ldr	r3, [pc, #8]	; (800bc90 <malloc+0xc>)
 800bc86:	4601      	mov	r1, r0
 800bc88:	6818      	ldr	r0, [r3, #0]
 800bc8a:	f000 b88d 	b.w	800bda8 <_malloc_r>
 800bc8e:	bf00      	nop
 800bc90:	20000030 	.word	0x20000030

0800bc94 <free>:
 800bc94:	4b02      	ldr	r3, [pc, #8]	; (800bca0 <free+0xc>)
 800bc96:	4601      	mov	r1, r0
 800bc98:	6818      	ldr	r0, [r3, #0]
 800bc9a:	f000 b819 	b.w	800bcd0 <_free_r>
 800bc9e:	bf00      	nop
 800bca0:	20000030 	.word	0x20000030

0800bca4 <memcpy>:
 800bca4:	440a      	add	r2, r1
 800bca6:	4291      	cmp	r1, r2
 800bca8:	f100 33ff 	add.w	r3, r0, #4294967295
 800bcac:	d100      	bne.n	800bcb0 <memcpy+0xc>
 800bcae:	4770      	bx	lr
 800bcb0:	b510      	push	{r4, lr}
 800bcb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bcb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bcba:	4291      	cmp	r1, r2
 800bcbc:	d1f9      	bne.n	800bcb2 <memcpy+0xe>
 800bcbe:	bd10      	pop	{r4, pc}

0800bcc0 <memset>:
 800bcc0:	4402      	add	r2, r0
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	4293      	cmp	r3, r2
 800bcc6:	d100      	bne.n	800bcca <memset+0xa>
 800bcc8:	4770      	bx	lr
 800bcca:	f803 1b01 	strb.w	r1, [r3], #1
 800bcce:	e7f9      	b.n	800bcc4 <memset+0x4>

0800bcd0 <_free_r>:
 800bcd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bcd2:	2900      	cmp	r1, #0
 800bcd4:	d044      	beq.n	800bd60 <_free_r+0x90>
 800bcd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bcda:	9001      	str	r0, [sp, #4]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	f1a1 0404 	sub.w	r4, r1, #4
 800bce2:	bfb8      	it	lt
 800bce4:	18e4      	addlt	r4, r4, r3
 800bce6:	f000 f903 	bl	800bef0 <__malloc_lock>
 800bcea:	4a1e      	ldr	r2, [pc, #120]	; (800bd64 <_free_r+0x94>)
 800bcec:	9801      	ldr	r0, [sp, #4]
 800bcee:	6813      	ldr	r3, [r2, #0]
 800bcf0:	b933      	cbnz	r3, 800bd00 <_free_r+0x30>
 800bcf2:	6063      	str	r3, [r4, #4]
 800bcf4:	6014      	str	r4, [r2, #0]
 800bcf6:	b003      	add	sp, #12
 800bcf8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bcfc:	f000 b8fe 	b.w	800befc <__malloc_unlock>
 800bd00:	42a3      	cmp	r3, r4
 800bd02:	d908      	bls.n	800bd16 <_free_r+0x46>
 800bd04:	6825      	ldr	r5, [r4, #0]
 800bd06:	1961      	adds	r1, r4, r5
 800bd08:	428b      	cmp	r3, r1
 800bd0a:	bf01      	itttt	eq
 800bd0c:	6819      	ldreq	r1, [r3, #0]
 800bd0e:	685b      	ldreq	r3, [r3, #4]
 800bd10:	1949      	addeq	r1, r1, r5
 800bd12:	6021      	streq	r1, [r4, #0]
 800bd14:	e7ed      	b.n	800bcf2 <_free_r+0x22>
 800bd16:	461a      	mov	r2, r3
 800bd18:	685b      	ldr	r3, [r3, #4]
 800bd1a:	b10b      	cbz	r3, 800bd20 <_free_r+0x50>
 800bd1c:	42a3      	cmp	r3, r4
 800bd1e:	d9fa      	bls.n	800bd16 <_free_r+0x46>
 800bd20:	6811      	ldr	r1, [r2, #0]
 800bd22:	1855      	adds	r5, r2, r1
 800bd24:	42a5      	cmp	r5, r4
 800bd26:	d10b      	bne.n	800bd40 <_free_r+0x70>
 800bd28:	6824      	ldr	r4, [r4, #0]
 800bd2a:	4421      	add	r1, r4
 800bd2c:	1854      	adds	r4, r2, r1
 800bd2e:	42a3      	cmp	r3, r4
 800bd30:	6011      	str	r1, [r2, #0]
 800bd32:	d1e0      	bne.n	800bcf6 <_free_r+0x26>
 800bd34:	681c      	ldr	r4, [r3, #0]
 800bd36:	685b      	ldr	r3, [r3, #4]
 800bd38:	6053      	str	r3, [r2, #4]
 800bd3a:	4421      	add	r1, r4
 800bd3c:	6011      	str	r1, [r2, #0]
 800bd3e:	e7da      	b.n	800bcf6 <_free_r+0x26>
 800bd40:	d902      	bls.n	800bd48 <_free_r+0x78>
 800bd42:	230c      	movs	r3, #12
 800bd44:	6003      	str	r3, [r0, #0]
 800bd46:	e7d6      	b.n	800bcf6 <_free_r+0x26>
 800bd48:	6825      	ldr	r5, [r4, #0]
 800bd4a:	1961      	adds	r1, r4, r5
 800bd4c:	428b      	cmp	r3, r1
 800bd4e:	bf04      	itt	eq
 800bd50:	6819      	ldreq	r1, [r3, #0]
 800bd52:	685b      	ldreq	r3, [r3, #4]
 800bd54:	6063      	str	r3, [r4, #4]
 800bd56:	bf04      	itt	eq
 800bd58:	1949      	addeq	r1, r1, r5
 800bd5a:	6021      	streq	r1, [r4, #0]
 800bd5c:	6054      	str	r4, [r2, #4]
 800bd5e:	e7ca      	b.n	800bcf6 <_free_r+0x26>
 800bd60:	b003      	add	sp, #12
 800bd62:	bd30      	pop	{r4, r5, pc}
 800bd64:	20005270 	.word	0x20005270

0800bd68 <sbrk_aligned>:
 800bd68:	b570      	push	{r4, r5, r6, lr}
 800bd6a:	4e0e      	ldr	r6, [pc, #56]	; (800bda4 <sbrk_aligned+0x3c>)
 800bd6c:	460c      	mov	r4, r1
 800bd6e:	6831      	ldr	r1, [r6, #0]
 800bd70:	4605      	mov	r5, r0
 800bd72:	b911      	cbnz	r1, 800bd7a <sbrk_aligned+0x12>
 800bd74:	f000 f88c 	bl	800be90 <_sbrk_r>
 800bd78:	6030      	str	r0, [r6, #0]
 800bd7a:	4621      	mov	r1, r4
 800bd7c:	4628      	mov	r0, r5
 800bd7e:	f000 f887 	bl	800be90 <_sbrk_r>
 800bd82:	1c43      	adds	r3, r0, #1
 800bd84:	d00a      	beq.n	800bd9c <sbrk_aligned+0x34>
 800bd86:	1cc4      	adds	r4, r0, #3
 800bd88:	f024 0403 	bic.w	r4, r4, #3
 800bd8c:	42a0      	cmp	r0, r4
 800bd8e:	d007      	beq.n	800bda0 <sbrk_aligned+0x38>
 800bd90:	1a21      	subs	r1, r4, r0
 800bd92:	4628      	mov	r0, r5
 800bd94:	f000 f87c 	bl	800be90 <_sbrk_r>
 800bd98:	3001      	adds	r0, #1
 800bd9a:	d101      	bne.n	800bda0 <sbrk_aligned+0x38>
 800bd9c:	f04f 34ff 	mov.w	r4, #4294967295
 800bda0:	4620      	mov	r0, r4
 800bda2:	bd70      	pop	{r4, r5, r6, pc}
 800bda4:	20005274 	.word	0x20005274

0800bda8 <_malloc_r>:
 800bda8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdac:	1ccd      	adds	r5, r1, #3
 800bdae:	f025 0503 	bic.w	r5, r5, #3
 800bdb2:	3508      	adds	r5, #8
 800bdb4:	2d0c      	cmp	r5, #12
 800bdb6:	bf38      	it	cc
 800bdb8:	250c      	movcc	r5, #12
 800bdba:	2d00      	cmp	r5, #0
 800bdbc:	4607      	mov	r7, r0
 800bdbe:	db01      	blt.n	800bdc4 <_malloc_r+0x1c>
 800bdc0:	42a9      	cmp	r1, r5
 800bdc2:	d905      	bls.n	800bdd0 <_malloc_r+0x28>
 800bdc4:	230c      	movs	r3, #12
 800bdc6:	603b      	str	r3, [r7, #0]
 800bdc8:	2600      	movs	r6, #0
 800bdca:	4630      	mov	r0, r6
 800bdcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdd0:	4e2e      	ldr	r6, [pc, #184]	; (800be8c <_malloc_r+0xe4>)
 800bdd2:	f000 f88d 	bl	800bef0 <__malloc_lock>
 800bdd6:	6833      	ldr	r3, [r6, #0]
 800bdd8:	461c      	mov	r4, r3
 800bdda:	bb34      	cbnz	r4, 800be2a <_malloc_r+0x82>
 800bddc:	4629      	mov	r1, r5
 800bdde:	4638      	mov	r0, r7
 800bde0:	f7ff ffc2 	bl	800bd68 <sbrk_aligned>
 800bde4:	1c43      	adds	r3, r0, #1
 800bde6:	4604      	mov	r4, r0
 800bde8:	d14d      	bne.n	800be86 <_malloc_r+0xde>
 800bdea:	6834      	ldr	r4, [r6, #0]
 800bdec:	4626      	mov	r6, r4
 800bdee:	2e00      	cmp	r6, #0
 800bdf0:	d140      	bne.n	800be74 <_malloc_r+0xcc>
 800bdf2:	6823      	ldr	r3, [r4, #0]
 800bdf4:	4631      	mov	r1, r6
 800bdf6:	4638      	mov	r0, r7
 800bdf8:	eb04 0803 	add.w	r8, r4, r3
 800bdfc:	f000 f848 	bl	800be90 <_sbrk_r>
 800be00:	4580      	cmp	r8, r0
 800be02:	d13a      	bne.n	800be7a <_malloc_r+0xd2>
 800be04:	6821      	ldr	r1, [r4, #0]
 800be06:	3503      	adds	r5, #3
 800be08:	1a6d      	subs	r5, r5, r1
 800be0a:	f025 0503 	bic.w	r5, r5, #3
 800be0e:	3508      	adds	r5, #8
 800be10:	2d0c      	cmp	r5, #12
 800be12:	bf38      	it	cc
 800be14:	250c      	movcc	r5, #12
 800be16:	4629      	mov	r1, r5
 800be18:	4638      	mov	r0, r7
 800be1a:	f7ff ffa5 	bl	800bd68 <sbrk_aligned>
 800be1e:	3001      	adds	r0, #1
 800be20:	d02b      	beq.n	800be7a <_malloc_r+0xd2>
 800be22:	6823      	ldr	r3, [r4, #0]
 800be24:	442b      	add	r3, r5
 800be26:	6023      	str	r3, [r4, #0]
 800be28:	e00e      	b.n	800be48 <_malloc_r+0xa0>
 800be2a:	6822      	ldr	r2, [r4, #0]
 800be2c:	1b52      	subs	r2, r2, r5
 800be2e:	d41e      	bmi.n	800be6e <_malloc_r+0xc6>
 800be30:	2a0b      	cmp	r2, #11
 800be32:	d916      	bls.n	800be62 <_malloc_r+0xba>
 800be34:	1961      	adds	r1, r4, r5
 800be36:	42a3      	cmp	r3, r4
 800be38:	6025      	str	r5, [r4, #0]
 800be3a:	bf18      	it	ne
 800be3c:	6059      	strne	r1, [r3, #4]
 800be3e:	6863      	ldr	r3, [r4, #4]
 800be40:	bf08      	it	eq
 800be42:	6031      	streq	r1, [r6, #0]
 800be44:	5162      	str	r2, [r4, r5]
 800be46:	604b      	str	r3, [r1, #4]
 800be48:	4638      	mov	r0, r7
 800be4a:	f104 060b 	add.w	r6, r4, #11
 800be4e:	f000 f855 	bl	800befc <__malloc_unlock>
 800be52:	f026 0607 	bic.w	r6, r6, #7
 800be56:	1d23      	adds	r3, r4, #4
 800be58:	1af2      	subs	r2, r6, r3
 800be5a:	d0b6      	beq.n	800bdca <_malloc_r+0x22>
 800be5c:	1b9b      	subs	r3, r3, r6
 800be5e:	50a3      	str	r3, [r4, r2]
 800be60:	e7b3      	b.n	800bdca <_malloc_r+0x22>
 800be62:	6862      	ldr	r2, [r4, #4]
 800be64:	42a3      	cmp	r3, r4
 800be66:	bf0c      	ite	eq
 800be68:	6032      	streq	r2, [r6, #0]
 800be6a:	605a      	strne	r2, [r3, #4]
 800be6c:	e7ec      	b.n	800be48 <_malloc_r+0xa0>
 800be6e:	4623      	mov	r3, r4
 800be70:	6864      	ldr	r4, [r4, #4]
 800be72:	e7b2      	b.n	800bdda <_malloc_r+0x32>
 800be74:	4634      	mov	r4, r6
 800be76:	6876      	ldr	r6, [r6, #4]
 800be78:	e7b9      	b.n	800bdee <_malloc_r+0x46>
 800be7a:	230c      	movs	r3, #12
 800be7c:	603b      	str	r3, [r7, #0]
 800be7e:	4638      	mov	r0, r7
 800be80:	f000 f83c 	bl	800befc <__malloc_unlock>
 800be84:	e7a1      	b.n	800bdca <_malloc_r+0x22>
 800be86:	6025      	str	r5, [r4, #0]
 800be88:	e7de      	b.n	800be48 <_malloc_r+0xa0>
 800be8a:	bf00      	nop
 800be8c:	20005270 	.word	0x20005270

0800be90 <_sbrk_r>:
 800be90:	b538      	push	{r3, r4, r5, lr}
 800be92:	4d06      	ldr	r5, [pc, #24]	; (800beac <_sbrk_r+0x1c>)
 800be94:	2300      	movs	r3, #0
 800be96:	4604      	mov	r4, r0
 800be98:	4608      	mov	r0, r1
 800be9a:	602b      	str	r3, [r5, #0]
 800be9c:	f7f5 fb08 	bl	80014b0 <_sbrk>
 800bea0:	1c43      	adds	r3, r0, #1
 800bea2:	d102      	bne.n	800beaa <_sbrk_r+0x1a>
 800bea4:	682b      	ldr	r3, [r5, #0]
 800bea6:	b103      	cbz	r3, 800beaa <_sbrk_r+0x1a>
 800bea8:	6023      	str	r3, [r4, #0]
 800beaa:	bd38      	pop	{r3, r4, r5, pc}
 800beac:	20005278 	.word	0x20005278

0800beb0 <siprintf>:
 800beb0:	b40e      	push	{r1, r2, r3}
 800beb2:	b500      	push	{lr}
 800beb4:	b09c      	sub	sp, #112	; 0x70
 800beb6:	ab1d      	add	r3, sp, #116	; 0x74
 800beb8:	9002      	str	r0, [sp, #8]
 800beba:	9006      	str	r0, [sp, #24]
 800bebc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bec0:	4809      	ldr	r0, [pc, #36]	; (800bee8 <siprintf+0x38>)
 800bec2:	9107      	str	r1, [sp, #28]
 800bec4:	9104      	str	r1, [sp, #16]
 800bec6:	4909      	ldr	r1, [pc, #36]	; (800beec <siprintf+0x3c>)
 800bec8:	f853 2b04 	ldr.w	r2, [r3], #4
 800becc:	9105      	str	r1, [sp, #20]
 800bece:	6800      	ldr	r0, [r0, #0]
 800bed0:	9301      	str	r3, [sp, #4]
 800bed2:	a902      	add	r1, sp, #8
 800bed4:	f000 f874 	bl	800bfc0 <_svfiprintf_r>
 800bed8:	9b02      	ldr	r3, [sp, #8]
 800beda:	2200      	movs	r2, #0
 800bedc:	701a      	strb	r2, [r3, #0]
 800bede:	b01c      	add	sp, #112	; 0x70
 800bee0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bee4:	b003      	add	sp, #12
 800bee6:	4770      	bx	lr
 800bee8:	20000030 	.word	0x20000030
 800beec:	ffff0208 	.word	0xffff0208

0800bef0 <__malloc_lock>:
 800bef0:	4801      	ldr	r0, [pc, #4]	; (800bef8 <__malloc_lock+0x8>)
 800bef2:	f000 baf9 	b.w	800c4e8 <__retarget_lock_acquire_recursive>
 800bef6:	bf00      	nop
 800bef8:	2000527c 	.word	0x2000527c

0800befc <__malloc_unlock>:
 800befc:	4801      	ldr	r0, [pc, #4]	; (800bf04 <__malloc_unlock+0x8>)
 800befe:	f000 baf4 	b.w	800c4ea <__retarget_lock_release_recursive>
 800bf02:	bf00      	nop
 800bf04:	2000527c 	.word	0x2000527c

0800bf08 <__ssputs_r>:
 800bf08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf0c:	688e      	ldr	r6, [r1, #8]
 800bf0e:	429e      	cmp	r6, r3
 800bf10:	4682      	mov	sl, r0
 800bf12:	460c      	mov	r4, r1
 800bf14:	4690      	mov	r8, r2
 800bf16:	461f      	mov	r7, r3
 800bf18:	d838      	bhi.n	800bf8c <__ssputs_r+0x84>
 800bf1a:	898a      	ldrh	r2, [r1, #12]
 800bf1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bf20:	d032      	beq.n	800bf88 <__ssputs_r+0x80>
 800bf22:	6825      	ldr	r5, [r4, #0]
 800bf24:	6909      	ldr	r1, [r1, #16]
 800bf26:	eba5 0901 	sub.w	r9, r5, r1
 800bf2a:	6965      	ldr	r5, [r4, #20]
 800bf2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bf30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bf34:	3301      	adds	r3, #1
 800bf36:	444b      	add	r3, r9
 800bf38:	106d      	asrs	r5, r5, #1
 800bf3a:	429d      	cmp	r5, r3
 800bf3c:	bf38      	it	cc
 800bf3e:	461d      	movcc	r5, r3
 800bf40:	0553      	lsls	r3, r2, #21
 800bf42:	d531      	bpl.n	800bfa8 <__ssputs_r+0xa0>
 800bf44:	4629      	mov	r1, r5
 800bf46:	f7ff ff2f 	bl	800bda8 <_malloc_r>
 800bf4a:	4606      	mov	r6, r0
 800bf4c:	b950      	cbnz	r0, 800bf64 <__ssputs_r+0x5c>
 800bf4e:	230c      	movs	r3, #12
 800bf50:	f8ca 3000 	str.w	r3, [sl]
 800bf54:	89a3      	ldrh	r3, [r4, #12]
 800bf56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf5a:	81a3      	strh	r3, [r4, #12]
 800bf5c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf64:	6921      	ldr	r1, [r4, #16]
 800bf66:	464a      	mov	r2, r9
 800bf68:	f7ff fe9c 	bl	800bca4 <memcpy>
 800bf6c:	89a3      	ldrh	r3, [r4, #12]
 800bf6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bf72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf76:	81a3      	strh	r3, [r4, #12]
 800bf78:	6126      	str	r6, [r4, #16]
 800bf7a:	6165      	str	r5, [r4, #20]
 800bf7c:	444e      	add	r6, r9
 800bf7e:	eba5 0509 	sub.w	r5, r5, r9
 800bf82:	6026      	str	r6, [r4, #0]
 800bf84:	60a5      	str	r5, [r4, #8]
 800bf86:	463e      	mov	r6, r7
 800bf88:	42be      	cmp	r6, r7
 800bf8a:	d900      	bls.n	800bf8e <__ssputs_r+0x86>
 800bf8c:	463e      	mov	r6, r7
 800bf8e:	6820      	ldr	r0, [r4, #0]
 800bf90:	4632      	mov	r2, r6
 800bf92:	4641      	mov	r1, r8
 800bf94:	f000 faaa 	bl	800c4ec <memmove>
 800bf98:	68a3      	ldr	r3, [r4, #8]
 800bf9a:	1b9b      	subs	r3, r3, r6
 800bf9c:	60a3      	str	r3, [r4, #8]
 800bf9e:	6823      	ldr	r3, [r4, #0]
 800bfa0:	4433      	add	r3, r6
 800bfa2:	6023      	str	r3, [r4, #0]
 800bfa4:	2000      	movs	r0, #0
 800bfa6:	e7db      	b.n	800bf60 <__ssputs_r+0x58>
 800bfa8:	462a      	mov	r2, r5
 800bfaa:	f000 fab9 	bl	800c520 <_realloc_r>
 800bfae:	4606      	mov	r6, r0
 800bfb0:	2800      	cmp	r0, #0
 800bfb2:	d1e1      	bne.n	800bf78 <__ssputs_r+0x70>
 800bfb4:	6921      	ldr	r1, [r4, #16]
 800bfb6:	4650      	mov	r0, sl
 800bfb8:	f7ff fe8a 	bl	800bcd0 <_free_r>
 800bfbc:	e7c7      	b.n	800bf4e <__ssputs_r+0x46>
	...

0800bfc0 <_svfiprintf_r>:
 800bfc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfc4:	4698      	mov	r8, r3
 800bfc6:	898b      	ldrh	r3, [r1, #12]
 800bfc8:	061b      	lsls	r3, r3, #24
 800bfca:	b09d      	sub	sp, #116	; 0x74
 800bfcc:	4607      	mov	r7, r0
 800bfce:	460d      	mov	r5, r1
 800bfd0:	4614      	mov	r4, r2
 800bfd2:	d50e      	bpl.n	800bff2 <_svfiprintf_r+0x32>
 800bfd4:	690b      	ldr	r3, [r1, #16]
 800bfd6:	b963      	cbnz	r3, 800bff2 <_svfiprintf_r+0x32>
 800bfd8:	2140      	movs	r1, #64	; 0x40
 800bfda:	f7ff fee5 	bl	800bda8 <_malloc_r>
 800bfde:	6028      	str	r0, [r5, #0]
 800bfe0:	6128      	str	r0, [r5, #16]
 800bfe2:	b920      	cbnz	r0, 800bfee <_svfiprintf_r+0x2e>
 800bfe4:	230c      	movs	r3, #12
 800bfe6:	603b      	str	r3, [r7, #0]
 800bfe8:	f04f 30ff 	mov.w	r0, #4294967295
 800bfec:	e0d1      	b.n	800c192 <_svfiprintf_r+0x1d2>
 800bfee:	2340      	movs	r3, #64	; 0x40
 800bff0:	616b      	str	r3, [r5, #20]
 800bff2:	2300      	movs	r3, #0
 800bff4:	9309      	str	r3, [sp, #36]	; 0x24
 800bff6:	2320      	movs	r3, #32
 800bff8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bffc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c000:	2330      	movs	r3, #48	; 0x30
 800c002:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c1ac <_svfiprintf_r+0x1ec>
 800c006:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c00a:	f04f 0901 	mov.w	r9, #1
 800c00e:	4623      	mov	r3, r4
 800c010:	469a      	mov	sl, r3
 800c012:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c016:	b10a      	cbz	r2, 800c01c <_svfiprintf_r+0x5c>
 800c018:	2a25      	cmp	r2, #37	; 0x25
 800c01a:	d1f9      	bne.n	800c010 <_svfiprintf_r+0x50>
 800c01c:	ebba 0b04 	subs.w	fp, sl, r4
 800c020:	d00b      	beq.n	800c03a <_svfiprintf_r+0x7a>
 800c022:	465b      	mov	r3, fp
 800c024:	4622      	mov	r2, r4
 800c026:	4629      	mov	r1, r5
 800c028:	4638      	mov	r0, r7
 800c02a:	f7ff ff6d 	bl	800bf08 <__ssputs_r>
 800c02e:	3001      	adds	r0, #1
 800c030:	f000 80aa 	beq.w	800c188 <_svfiprintf_r+0x1c8>
 800c034:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c036:	445a      	add	r2, fp
 800c038:	9209      	str	r2, [sp, #36]	; 0x24
 800c03a:	f89a 3000 	ldrb.w	r3, [sl]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	f000 80a2 	beq.w	800c188 <_svfiprintf_r+0x1c8>
 800c044:	2300      	movs	r3, #0
 800c046:	f04f 32ff 	mov.w	r2, #4294967295
 800c04a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c04e:	f10a 0a01 	add.w	sl, sl, #1
 800c052:	9304      	str	r3, [sp, #16]
 800c054:	9307      	str	r3, [sp, #28]
 800c056:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c05a:	931a      	str	r3, [sp, #104]	; 0x68
 800c05c:	4654      	mov	r4, sl
 800c05e:	2205      	movs	r2, #5
 800c060:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c064:	4851      	ldr	r0, [pc, #324]	; (800c1ac <_svfiprintf_r+0x1ec>)
 800c066:	f7f4 f8b3 	bl	80001d0 <memchr>
 800c06a:	9a04      	ldr	r2, [sp, #16]
 800c06c:	b9d8      	cbnz	r0, 800c0a6 <_svfiprintf_r+0xe6>
 800c06e:	06d0      	lsls	r0, r2, #27
 800c070:	bf44      	itt	mi
 800c072:	2320      	movmi	r3, #32
 800c074:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c078:	0711      	lsls	r1, r2, #28
 800c07a:	bf44      	itt	mi
 800c07c:	232b      	movmi	r3, #43	; 0x2b
 800c07e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c082:	f89a 3000 	ldrb.w	r3, [sl]
 800c086:	2b2a      	cmp	r3, #42	; 0x2a
 800c088:	d015      	beq.n	800c0b6 <_svfiprintf_r+0xf6>
 800c08a:	9a07      	ldr	r2, [sp, #28]
 800c08c:	4654      	mov	r4, sl
 800c08e:	2000      	movs	r0, #0
 800c090:	f04f 0c0a 	mov.w	ip, #10
 800c094:	4621      	mov	r1, r4
 800c096:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c09a:	3b30      	subs	r3, #48	; 0x30
 800c09c:	2b09      	cmp	r3, #9
 800c09e:	d94e      	bls.n	800c13e <_svfiprintf_r+0x17e>
 800c0a0:	b1b0      	cbz	r0, 800c0d0 <_svfiprintf_r+0x110>
 800c0a2:	9207      	str	r2, [sp, #28]
 800c0a4:	e014      	b.n	800c0d0 <_svfiprintf_r+0x110>
 800c0a6:	eba0 0308 	sub.w	r3, r0, r8
 800c0aa:	fa09 f303 	lsl.w	r3, r9, r3
 800c0ae:	4313      	orrs	r3, r2
 800c0b0:	9304      	str	r3, [sp, #16]
 800c0b2:	46a2      	mov	sl, r4
 800c0b4:	e7d2      	b.n	800c05c <_svfiprintf_r+0x9c>
 800c0b6:	9b03      	ldr	r3, [sp, #12]
 800c0b8:	1d19      	adds	r1, r3, #4
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	9103      	str	r1, [sp, #12]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	bfbb      	ittet	lt
 800c0c2:	425b      	neglt	r3, r3
 800c0c4:	f042 0202 	orrlt.w	r2, r2, #2
 800c0c8:	9307      	strge	r3, [sp, #28]
 800c0ca:	9307      	strlt	r3, [sp, #28]
 800c0cc:	bfb8      	it	lt
 800c0ce:	9204      	strlt	r2, [sp, #16]
 800c0d0:	7823      	ldrb	r3, [r4, #0]
 800c0d2:	2b2e      	cmp	r3, #46	; 0x2e
 800c0d4:	d10c      	bne.n	800c0f0 <_svfiprintf_r+0x130>
 800c0d6:	7863      	ldrb	r3, [r4, #1]
 800c0d8:	2b2a      	cmp	r3, #42	; 0x2a
 800c0da:	d135      	bne.n	800c148 <_svfiprintf_r+0x188>
 800c0dc:	9b03      	ldr	r3, [sp, #12]
 800c0de:	1d1a      	adds	r2, r3, #4
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	9203      	str	r2, [sp, #12]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	bfb8      	it	lt
 800c0e8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c0ec:	3402      	adds	r4, #2
 800c0ee:	9305      	str	r3, [sp, #20]
 800c0f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c1bc <_svfiprintf_r+0x1fc>
 800c0f4:	7821      	ldrb	r1, [r4, #0]
 800c0f6:	2203      	movs	r2, #3
 800c0f8:	4650      	mov	r0, sl
 800c0fa:	f7f4 f869 	bl	80001d0 <memchr>
 800c0fe:	b140      	cbz	r0, 800c112 <_svfiprintf_r+0x152>
 800c100:	2340      	movs	r3, #64	; 0x40
 800c102:	eba0 000a 	sub.w	r0, r0, sl
 800c106:	fa03 f000 	lsl.w	r0, r3, r0
 800c10a:	9b04      	ldr	r3, [sp, #16]
 800c10c:	4303      	orrs	r3, r0
 800c10e:	3401      	adds	r4, #1
 800c110:	9304      	str	r3, [sp, #16]
 800c112:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c116:	4826      	ldr	r0, [pc, #152]	; (800c1b0 <_svfiprintf_r+0x1f0>)
 800c118:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c11c:	2206      	movs	r2, #6
 800c11e:	f7f4 f857 	bl	80001d0 <memchr>
 800c122:	2800      	cmp	r0, #0
 800c124:	d038      	beq.n	800c198 <_svfiprintf_r+0x1d8>
 800c126:	4b23      	ldr	r3, [pc, #140]	; (800c1b4 <_svfiprintf_r+0x1f4>)
 800c128:	bb1b      	cbnz	r3, 800c172 <_svfiprintf_r+0x1b2>
 800c12a:	9b03      	ldr	r3, [sp, #12]
 800c12c:	3307      	adds	r3, #7
 800c12e:	f023 0307 	bic.w	r3, r3, #7
 800c132:	3308      	adds	r3, #8
 800c134:	9303      	str	r3, [sp, #12]
 800c136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c138:	4433      	add	r3, r6
 800c13a:	9309      	str	r3, [sp, #36]	; 0x24
 800c13c:	e767      	b.n	800c00e <_svfiprintf_r+0x4e>
 800c13e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c142:	460c      	mov	r4, r1
 800c144:	2001      	movs	r0, #1
 800c146:	e7a5      	b.n	800c094 <_svfiprintf_r+0xd4>
 800c148:	2300      	movs	r3, #0
 800c14a:	3401      	adds	r4, #1
 800c14c:	9305      	str	r3, [sp, #20]
 800c14e:	4619      	mov	r1, r3
 800c150:	f04f 0c0a 	mov.w	ip, #10
 800c154:	4620      	mov	r0, r4
 800c156:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c15a:	3a30      	subs	r2, #48	; 0x30
 800c15c:	2a09      	cmp	r2, #9
 800c15e:	d903      	bls.n	800c168 <_svfiprintf_r+0x1a8>
 800c160:	2b00      	cmp	r3, #0
 800c162:	d0c5      	beq.n	800c0f0 <_svfiprintf_r+0x130>
 800c164:	9105      	str	r1, [sp, #20]
 800c166:	e7c3      	b.n	800c0f0 <_svfiprintf_r+0x130>
 800c168:	fb0c 2101 	mla	r1, ip, r1, r2
 800c16c:	4604      	mov	r4, r0
 800c16e:	2301      	movs	r3, #1
 800c170:	e7f0      	b.n	800c154 <_svfiprintf_r+0x194>
 800c172:	ab03      	add	r3, sp, #12
 800c174:	9300      	str	r3, [sp, #0]
 800c176:	462a      	mov	r2, r5
 800c178:	4b0f      	ldr	r3, [pc, #60]	; (800c1b8 <_svfiprintf_r+0x1f8>)
 800c17a:	a904      	add	r1, sp, #16
 800c17c:	4638      	mov	r0, r7
 800c17e:	f3af 8000 	nop.w
 800c182:	1c42      	adds	r2, r0, #1
 800c184:	4606      	mov	r6, r0
 800c186:	d1d6      	bne.n	800c136 <_svfiprintf_r+0x176>
 800c188:	89ab      	ldrh	r3, [r5, #12]
 800c18a:	065b      	lsls	r3, r3, #25
 800c18c:	f53f af2c 	bmi.w	800bfe8 <_svfiprintf_r+0x28>
 800c190:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c192:	b01d      	add	sp, #116	; 0x74
 800c194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c198:	ab03      	add	r3, sp, #12
 800c19a:	9300      	str	r3, [sp, #0]
 800c19c:	462a      	mov	r2, r5
 800c19e:	4b06      	ldr	r3, [pc, #24]	; (800c1b8 <_svfiprintf_r+0x1f8>)
 800c1a0:	a904      	add	r1, sp, #16
 800c1a2:	4638      	mov	r0, r7
 800c1a4:	f000 f87a 	bl	800c29c <_printf_i>
 800c1a8:	e7eb      	b.n	800c182 <_svfiprintf_r+0x1c2>
 800c1aa:	bf00      	nop
 800c1ac:	0800e738 	.word	0x0800e738
 800c1b0:	0800e742 	.word	0x0800e742
 800c1b4:	00000000 	.word	0x00000000
 800c1b8:	0800bf09 	.word	0x0800bf09
 800c1bc:	0800e73e 	.word	0x0800e73e

0800c1c0 <_printf_common>:
 800c1c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1c4:	4616      	mov	r6, r2
 800c1c6:	4699      	mov	r9, r3
 800c1c8:	688a      	ldr	r2, [r1, #8]
 800c1ca:	690b      	ldr	r3, [r1, #16]
 800c1cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c1d0:	4293      	cmp	r3, r2
 800c1d2:	bfb8      	it	lt
 800c1d4:	4613      	movlt	r3, r2
 800c1d6:	6033      	str	r3, [r6, #0]
 800c1d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c1dc:	4607      	mov	r7, r0
 800c1de:	460c      	mov	r4, r1
 800c1e0:	b10a      	cbz	r2, 800c1e6 <_printf_common+0x26>
 800c1e2:	3301      	adds	r3, #1
 800c1e4:	6033      	str	r3, [r6, #0]
 800c1e6:	6823      	ldr	r3, [r4, #0]
 800c1e8:	0699      	lsls	r1, r3, #26
 800c1ea:	bf42      	ittt	mi
 800c1ec:	6833      	ldrmi	r3, [r6, #0]
 800c1ee:	3302      	addmi	r3, #2
 800c1f0:	6033      	strmi	r3, [r6, #0]
 800c1f2:	6825      	ldr	r5, [r4, #0]
 800c1f4:	f015 0506 	ands.w	r5, r5, #6
 800c1f8:	d106      	bne.n	800c208 <_printf_common+0x48>
 800c1fa:	f104 0a19 	add.w	sl, r4, #25
 800c1fe:	68e3      	ldr	r3, [r4, #12]
 800c200:	6832      	ldr	r2, [r6, #0]
 800c202:	1a9b      	subs	r3, r3, r2
 800c204:	42ab      	cmp	r3, r5
 800c206:	dc26      	bgt.n	800c256 <_printf_common+0x96>
 800c208:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c20c:	1e13      	subs	r3, r2, #0
 800c20e:	6822      	ldr	r2, [r4, #0]
 800c210:	bf18      	it	ne
 800c212:	2301      	movne	r3, #1
 800c214:	0692      	lsls	r2, r2, #26
 800c216:	d42b      	bmi.n	800c270 <_printf_common+0xb0>
 800c218:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c21c:	4649      	mov	r1, r9
 800c21e:	4638      	mov	r0, r7
 800c220:	47c0      	blx	r8
 800c222:	3001      	adds	r0, #1
 800c224:	d01e      	beq.n	800c264 <_printf_common+0xa4>
 800c226:	6823      	ldr	r3, [r4, #0]
 800c228:	68e5      	ldr	r5, [r4, #12]
 800c22a:	6832      	ldr	r2, [r6, #0]
 800c22c:	f003 0306 	and.w	r3, r3, #6
 800c230:	2b04      	cmp	r3, #4
 800c232:	bf08      	it	eq
 800c234:	1aad      	subeq	r5, r5, r2
 800c236:	68a3      	ldr	r3, [r4, #8]
 800c238:	6922      	ldr	r2, [r4, #16]
 800c23a:	bf0c      	ite	eq
 800c23c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c240:	2500      	movne	r5, #0
 800c242:	4293      	cmp	r3, r2
 800c244:	bfc4      	itt	gt
 800c246:	1a9b      	subgt	r3, r3, r2
 800c248:	18ed      	addgt	r5, r5, r3
 800c24a:	2600      	movs	r6, #0
 800c24c:	341a      	adds	r4, #26
 800c24e:	42b5      	cmp	r5, r6
 800c250:	d11a      	bne.n	800c288 <_printf_common+0xc8>
 800c252:	2000      	movs	r0, #0
 800c254:	e008      	b.n	800c268 <_printf_common+0xa8>
 800c256:	2301      	movs	r3, #1
 800c258:	4652      	mov	r2, sl
 800c25a:	4649      	mov	r1, r9
 800c25c:	4638      	mov	r0, r7
 800c25e:	47c0      	blx	r8
 800c260:	3001      	adds	r0, #1
 800c262:	d103      	bne.n	800c26c <_printf_common+0xac>
 800c264:	f04f 30ff 	mov.w	r0, #4294967295
 800c268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c26c:	3501      	adds	r5, #1
 800c26e:	e7c6      	b.n	800c1fe <_printf_common+0x3e>
 800c270:	18e1      	adds	r1, r4, r3
 800c272:	1c5a      	adds	r2, r3, #1
 800c274:	2030      	movs	r0, #48	; 0x30
 800c276:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c27a:	4422      	add	r2, r4
 800c27c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c280:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c284:	3302      	adds	r3, #2
 800c286:	e7c7      	b.n	800c218 <_printf_common+0x58>
 800c288:	2301      	movs	r3, #1
 800c28a:	4622      	mov	r2, r4
 800c28c:	4649      	mov	r1, r9
 800c28e:	4638      	mov	r0, r7
 800c290:	47c0      	blx	r8
 800c292:	3001      	adds	r0, #1
 800c294:	d0e6      	beq.n	800c264 <_printf_common+0xa4>
 800c296:	3601      	adds	r6, #1
 800c298:	e7d9      	b.n	800c24e <_printf_common+0x8e>
	...

0800c29c <_printf_i>:
 800c29c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c2a0:	7e0f      	ldrb	r7, [r1, #24]
 800c2a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c2a4:	2f78      	cmp	r7, #120	; 0x78
 800c2a6:	4691      	mov	r9, r2
 800c2a8:	4680      	mov	r8, r0
 800c2aa:	460c      	mov	r4, r1
 800c2ac:	469a      	mov	sl, r3
 800c2ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c2b2:	d807      	bhi.n	800c2c4 <_printf_i+0x28>
 800c2b4:	2f62      	cmp	r7, #98	; 0x62
 800c2b6:	d80a      	bhi.n	800c2ce <_printf_i+0x32>
 800c2b8:	2f00      	cmp	r7, #0
 800c2ba:	f000 80d8 	beq.w	800c46e <_printf_i+0x1d2>
 800c2be:	2f58      	cmp	r7, #88	; 0x58
 800c2c0:	f000 80a3 	beq.w	800c40a <_printf_i+0x16e>
 800c2c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c2c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c2cc:	e03a      	b.n	800c344 <_printf_i+0xa8>
 800c2ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c2d2:	2b15      	cmp	r3, #21
 800c2d4:	d8f6      	bhi.n	800c2c4 <_printf_i+0x28>
 800c2d6:	a101      	add	r1, pc, #4	; (adr r1, 800c2dc <_printf_i+0x40>)
 800c2d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c2dc:	0800c335 	.word	0x0800c335
 800c2e0:	0800c349 	.word	0x0800c349
 800c2e4:	0800c2c5 	.word	0x0800c2c5
 800c2e8:	0800c2c5 	.word	0x0800c2c5
 800c2ec:	0800c2c5 	.word	0x0800c2c5
 800c2f0:	0800c2c5 	.word	0x0800c2c5
 800c2f4:	0800c349 	.word	0x0800c349
 800c2f8:	0800c2c5 	.word	0x0800c2c5
 800c2fc:	0800c2c5 	.word	0x0800c2c5
 800c300:	0800c2c5 	.word	0x0800c2c5
 800c304:	0800c2c5 	.word	0x0800c2c5
 800c308:	0800c455 	.word	0x0800c455
 800c30c:	0800c379 	.word	0x0800c379
 800c310:	0800c437 	.word	0x0800c437
 800c314:	0800c2c5 	.word	0x0800c2c5
 800c318:	0800c2c5 	.word	0x0800c2c5
 800c31c:	0800c477 	.word	0x0800c477
 800c320:	0800c2c5 	.word	0x0800c2c5
 800c324:	0800c379 	.word	0x0800c379
 800c328:	0800c2c5 	.word	0x0800c2c5
 800c32c:	0800c2c5 	.word	0x0800c2c5
 800c330:	0800c43f 	.word	0x0800c43f
 800c334:	682b      	ldr	r3, [r5, #0]
 800c336:	1d1a      	adds	r2, r3, #4
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	602a      	str	r2, [r5, #0]
 800c33c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c340:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c344:	2301      	movs	r3, #1
 800c346:	e0a3      	b.n	800c490 <_printf_i+0x1f4>
 800c348:	6820      	ldr	r0, [r4, #0]
 800c34a:	6829      	ldr	r1, [r5, #0]
 800c34c:	0606      	lsls	r6, r0, #24
 800c34e:	f101 0304 	add.w	r3, r1, #4
 800c352:	d50a      	bpl.n	800c36a <_printf_i+0xce>
 800c354:	680e      	ldr	r6, [r1, #0]
 800c356:	602b      	str	r3, [r5, #0]
 800c358:	2e00      	cmp	r6, #0
 800c35a:	da03      	bge.n	800c364 <_printf_i+0xc8>
 800c35c:	232d      	movs	r3, #45	; 0x2d
 800c35e:	4276      	negs	r6, r6
 800c360:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c364:	485e      	ldr	r0, [pc, #376]	; (800c4e0 <_printf_i+0x244>)
 800c366:	230a      	movs	r3, #10
 800c368:	e019      	b.n	800c39e <_printf_i+0x102>
 800c36a:	680e      	ldr	r6, [r1, #0]
 800c36c:	602b      	str	r3, [r5, #0]
 800c36e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c372:	bf18      	it	ne
 800c374:	b236      	sxthne	r6, r6
 800c376:	e7ef      	b.n	800c358 <_printf_i+0xbc>
 800c378:	682b      	ldr	r3, [r5, #0]
 800c37a:	6820      	ldr	r0, [r4, #0]
 800c37c:	1d19      	adds	r1, r3, #4
 800c37e:	6029      	str	r1, [r5, #0]
 800c380:	0601      	lsls	r1, r0, #24
 800c382:	d501      	bpl.n	800c388 <_printf_i+0xec>
 800c384:	681e      	ldr	r6, [r3, #0]
 800c386:	e002      	b.n	800c38e <_printf_i+0xf2>
 800c388:	0646      	lsls	r6, r0, #25
 800c38a:	d5fb      	bpl.n	800c384 <_printf_i+0xe8>
 800c38c:	881e      	ldrh	r6, [r3, #0]
 800c38e:	4854      	ldr	r0, [pc, #336]	; (800c4e0 <_printf_i+0x244>)
 800c390:	2f6f      	cmp	r7, #111	; 0x6f
 800c392:	bf0c      	ite	eq
 800c394:	2308      	moveq	r3, #8
 800c396:	230a      	movne	r3, #10
 800c398:	2100      	movs	r1, #0
 800c39a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c39e:	6865      	ldr	r5, [r4, #4]
 800c3a0:	60a5      	str	r5, [r4, #8]
 800c3a2:	2d00      	cmp	r5, #0
 800c3a4:	bfa2      	ittt	ge
 800c3a6:	6821      	ldrge	r1, [r4, #0]
 800c3a8:	f021 0104 	bicge.w	r1, r1, #4
 800c3ac:	6021      	strge	r1, [r4, #0]
 800c3ae:	b90e      	cbnz	r6, 800c3b4 <_printf_i+0x118>
 800c3b0:	2d00      	cmp	r5, #0
 800c3b2:	d04d      	beq.n	800c450 <_printf_i+0x1b4>
 800c3b4:	4615      	mov	r5, r2
 800c3b6:	fbb6 f1f3 	udiv	r1, r6, r3
 800c3ba:	fb03 6711 	mls	r7, r3, r1, r6
 800c3be:	5dc7      	ldrb	r7, [r0, r7]
 800c3c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c3c4:	4637      	mov	r7, r6
 800c3c6:	42bb      	cmp	r3, r7
 800c3c8:	460e      	mov	r6, r1
 800c3ca:	d9f4      	bls.n	800c3b6 <_printf_i+0x11a>
 800c3cc:	2b08      	cmp	r3, #8
 800c3ce:	d10b      	bne.n	800c3e8 <_printf_i+0x14c>
 800c3d0:	6823      	ldr	r3, [r4, #0]
 800c3d2:	07de      	lsls	r6, r3, #31
 800c3d4:	d508      	bpl.n	800c3e8 <_printf_i+0x14c>
 800c3d6:	6923      	ldr	r3, [r4, #16]
 800c3d8:	6861      	ldr	r1, [r4, #4]
 800c3da:	4299      	cmp	r1, r3
 800c3dc:	bfde      	ittt	le
 800c3de:	2330      	movle	r3, #48	; 0x30
 800c3e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c3e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c3e8:	1b52      	subs	r2, r2, r5
 800c3ea:	6122      	str	r2, [r4, #16]
 800c3ec:	f8cd a000 	str.w	sl, [sp]
 800c3f0:	464b      	mov	r3, r9
 800c3f2:	aa03      	add	r2, sp, #12
 800c3f4:	4621      	mov	r1, r4
 800c3f6:	4640      	mov	r0, r8
 800c3f8:	f7ff fee2 	bl	800c1c0 <_printf_common>
 800c3fc:	3001      	adds	r0, #1
 800c3fe:	d14c      	bne.n	800c49a <_printf_i+0x1fe>
 800c400:	f04f 30ff 	mov.w	r0, #4294967295
 800c404:	b004      	add	sp, #16
 800c406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c40a:	4835      	ldr	r0, [pc, #212]	; (800c4e0 <_printf_i+0x244>)
 800c40c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c410:	6829      	ldr	r1, [r5, #0]
 800c412:	6823      	ldr	r3, [r4, #0]
 800c414:	f851 6b04 	ldr.w	r6, [r1], #4
 800c418:	6029      	str	r1, [r5, #0]
 800c41a:	061d      	lsls	r5, r3, #24
 800c41c:	d514      	bpl.n	800c448 <_printf_i+0x1ac>
 800c41e:	07df      	lsls	r7, r3, #31
 800c420:	bf44      	itt	mi
 800c422:	f043 0320 	orrmi.w	r3, r3, #32
 800c426:	6023      	strmi	r3, [r4, #0]
 800c428:	b91e      	cbnz	r6, 800c432 <_printf_i+0x196>
 800c42a:	6823      	ldr	r3, [r4, #0]
 800c42c:	f023 0320 	bic.w	r3, r3, #32
 800c430:	6023      	str	r3, [r4, #0]
 800c432:	2310      	movs	r3, #16
 800c434:	e7b0      	b.n	800c398 <_printf_i+0xfc>
 800c436:	6823      	ldr	r3, [r4, #0]
 800c438:	f043 0320 	orr.w	r3, r3, #32
 800c43c:	6023      	str	r3, [r4, #0]
 800c43e:	2378      	movs	r3, #120	; 0x78
 800c440:	4828      	ldr	r0, [pc, #160]	; (800c4e4 <_printf_i+0x248>)
 800c442:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c446:	e7e3      	b.n	800c410 <_printf_i+0x174>
 800c448:	0659      	lsls	r1, r3, #25
 800c44a:	bf48      	it	mi
 800c44c:	b2b6      	uxthmi	r6, r6
 800c44e:	e7e6      	b.n	800c41e <_printf_i+0x182>
 800c450:	4615      	mov	r5, r2
 800c452:	e7bb      	b.n	800c3cc <_printf_i+0x130>
 800c454:	682b      	ldr	r3, [r5, #0]
 800c456:	6826      	ldr	r6, [r4, #0]
 800c458:	6961      	ldr	r1, [r4, #20]
 800c45a:	1d18      	adds	r0, r3, #4
 800c45c:	6028      	str	r0, [r5, #0]
 800c45e:	0635      	lsls	r5, r6, #24
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	d501      	bpl.n	800c468 <_printf_i+0x1cc>
 800c464:	6019      	str	r1, [r3, #0]
 800c466:	e002      	b.n	800c46e <_printf_i+0x1d2>
 800c468:	0670      	lsls	r0, r6, #25
 800c46a:	d5fb      	bpl.n	800c464 <_printf_i+0x1c8>
 800c46c:	8019      	strh	r1, [r3, #0]
 800c46e:	2300      	movs	r3, #0
 800c470:	6123      	str	r3, [r4, #16]
 800c472:	4615      	mov	r5, r2
 800c474:	e7ba      	b.n	800c3ec <_printf_i+0x150>
 800c476:	682b      	ldr	r3, [r5, #0]
 800c478:	1d1a      	adds	r2, r3, #4
 800c47a:	602a      	str	r2, [r5, #0]
 800c47c:	681d      	ldr	r5, [r3, #0]
 800c47e:	6862      	ldr	r2, [r4, #4]
 800c480:	2100      	movs	r1, #0
 800c482:	4628      	mov	r0, r5
 800c484:	f7f3 fea4 	bl	80001d0 <memchr>
 800c488:	b108      	cbz	r0, 800c48e <_printf_i+0x1f2>
 800c48a:	1b40      	subs	r0, r0, r5
 800c48c:	6060      	str	r0, [r4, #4]
 800c48e:	6863      	ldr	r3, [r4, #4]
 800c490:	6123      	str	r3, [r4, #16]
 800c492:	2300      	movs	r3, #0
 800c494:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c498:	e7a8      	b.n	800c3ec <_printf_i+0x150>
 800c49a:	6923      	ldr	r3, [r4, #16]
 800c49c:	462a      	mov	r2, r5
 800c49e:	4649      	mov	r1, r9
 800c4a0:	4640      	mov	r0, r8
 800c4a2:	47d0      	blx	sl
 800c4a4:	3001      	adds	r0, #1
 800c4a6:	d0ab      	beq.n	800c400 <_printf_i+0x164>
 800c4a8:	6823      	ldr	r3, [r4, #0]
 800c4aa:	079b      	lsls	r3, r3, #30
 800c4ac:	d413      	bmi.n	800c4d6 <_printf_i+0x23a>
 800c4ae:	68e0      	ldr	r0, [r4, #12]
 800c4b0:	9b03      	ldr	r3, [sp, #12]
 800c4b2:	4298      	cmp	r0, r3
 800c4b4:	bfb8      	it	lt
 800c4b6:	4618      	movlt	r0, r3
 800c4b8:	e7a4      	b.n	800c404 <_printf_i+0x168>
 800c4ba:	2301      	movs	r3, #1
 800c4bc:	4632      	mov	r2, r6
 800c4be:	4649      	mov	r1, r9
 800c4c0:	4640      	mov	r0, r8
 800c4c2:	47d0      	blx	sl
 800c4c4:	3001      	adds	r0, #1
 800c4c6:	d09b      	beq.n	800c400 <_printf_i+0x164>
 800c4c8:	3501      	adds	r5, #1
 800c4ca:	68e3      	ldr	r3, [r4, #12]
 800c4cc:	9903      	ldr	r1, [sp, #12]
 800c4ce:	1a5b      	subs	r3, r3, r1
 800c4d0:	42ab      	cmp	r3, r5
 800c4d2:	dcf2      	bgt.n	800c4ba <_printf_i+0x21e>
 800c4d4:	e7eb      	b.n	800c4ae <_printf_i+0x212>
 800c4d6:	2500      	movs	r5, #0
 800c4d8:	f104 0619 	add.w	r6, r4, #25
 800c4dc:	e7f5      	b.n	800c4ca <_printf_i+0x22e>
 800c4de:	bf00      	nop
 800c4e0:	0800e749 	.word	0x0800e749
 800c4e4:	0800e75a 	.word	0x0800e75a

0800c4e8 <__retarget_lock_acquire_recursive>:
 800c4e8:	4770      	bx	lr

0800c4ea <__retarget_lock_release_recursive>:
 800c4ea:	4770      	bx	lr

0800c4ec <memmove>:
 800c4ec:	4288      	cmp	r0, r1
 800c4ee:	b510      	push	{r4, lr}
 800c4f0:	eb01 0402 	add.w	r4, r1, r2
 800c4f4:	d902      	bls.n	800c4fc <memmove+0x10>
 800c4f6:	4284      	cmp	r4, r0
 800c4f8:	4623      	mov	r3, r4
 800c4fa:	d807      	bhi.n	800c50c <memmove+0x20>
 800c4fc:	1e43      	subs	r3, r0, #1
 800c4fe:	42a1      	cmp	r1, r4
 800c500:	d008      	beq.n	800c514 <memmove+0x28>
 800c502:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c506:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c50a:	e7f8      	b.n	800c4fe <memmove+0x12>
 800c50c:	4402      	add	r2, r0
 800c50e:	4601      	mov	r1, r0
 800c510:	428a      	cmp	r2, r1
 800c512:	d100      	bne.n	800c516 <memmove+0x2a>
 800c514:	bd10      	pop	{r4, pc}
 800c516:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c51a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c51e:	e7f7      	b.n	800c510 <memmove+0x24>

0800c520 <_realloc_r>:
 800c520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c524:	4680      	mov	r8, r0
 800c526:	4614      	mov	r4, r2
 800c528:	460e      	mov	r6, r1
 800c52a:	b921      	cbnz	r1, 800c536 <_realloc_r+0x16>
 800c52c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c530:	4611      	mov	r1, r2
 800c532:	f7ff bc39 	b.w	800bda8 <_malloc_r>
 800c536:	b92a      	cbnz	r2, 800c544 <_realloc_r+0x24>
 800c538:	f7ff fbca 	bl	800bcd0 <_free_r>
 800c53c:	4625      	mov	r5, r4
 800c53e:	4628      	mov	r0, r5
 800c540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c544:	f000 f81b 	bl	800c57e <_malloc_usable_size_r>
 800c548:	4284      	cmp	r4, r0
 800c54a:	4607      	mov	r7, r0
 800c54c:	d802      	bhi.n	800c554 <_realloc_r+0x34>
 800c54e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c552:	d812      	bhi.n	800c57a <_realloc_r+0x5a>
 800c554:	4621      	mov	r1, r4
 800c556:	4640      	mov	r0, r8
 800c558:	f7ff fc26 	bl	800bda8 <_malloc_r>
 800c55c:	4605      	mov	r5, r0
 800c55e:	2800      	cmp	r0, #0
 800c560:	d0ed      	beq.n	800c53e <_realloc_r+0x1e>
 800c562:	42bc      	cmp	r4, r7
 800c564:	4622      	mov	r2, r4
 800c566:	4631      	mov	r1, r6
 800c568:	bf28      	it	cs
 800c56a:	463a      	movcs	r2, r7
 800c56c:	f7ff fb9a 	bl	800bca4 <memcpy>
 800c570:	4631      	mov	r1, r6
 800c572:	4640      	mov	r0, r8
 800c574:	f7ff fbac 	bl	800bcd0 <_free_r>
 800c578:	e7e1      	b.n	800c53e <_realloc_r+0x1e>
 800c57a:	4635      	mov	r5, r6
 800c57c:	e7df      	b.n	800c53e <_realloc_r+0x1e>

0800c57e <_malloc_usable_size_r>:
 800c57e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c582:	1f18      	subs	r0, r3, #4
 800c584:	2b00      	cmp	r3, #0
 800c586:	bfbc      	itt	lt
 800c588:	580b      	ldrlt	r3, [r1, r0]
 800c58a:	18c0      	addlt	r0, r0, r3
 800c58c:	4770      	bx	lr
	...

0800c590 <_init>:
 800c590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c592:	bf00      	nop
 800c594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c596:	bc08      	pop	{r3}
 800c598:	469e      	mov	lr, r3
 800c59a:	4770      	bx	lr

0800c59c <_fini>:
 800c59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c59e:	bf00      	nop
 800c5a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5a2:	bc08      	pop	{r3}
 800c5a4:	469e      	mov	lr, r3
 800c5a6:	4770      	bx	lr
